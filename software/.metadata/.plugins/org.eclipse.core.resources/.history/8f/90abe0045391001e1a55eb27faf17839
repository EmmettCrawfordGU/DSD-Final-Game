#include "hw.h"


#define LCD_ROWS 2
#define LCD_COLS 16

#define PLAYER_COLUMN 1

#define BLANK      0x00
#define PLAYER     0xF6
#define ASTEROID_0 0x2A
#define ASTEROID_1 0xEF
#define ASTEROID_2 0xF2
#define BLACK_HOLE 0xFF

uint8_t game_matrix[LCD_ROWS][LCD_COLS];
uint8_t lives = 4;
uint32_t score = 0;


void updateLCD(void);
void updatePlayer(uint8_t data);


int main(){
	uint8_t switch_data;
	initTimers();
	lcdInit();

	alt_putstr("Ciao from Nios II!\n");

	setTimer(GAME_TIMER, 100000);
	startTimer(GAME_TIMER);

	while(1) {
		clearSema(GAME_TIMER);
		while(getSema(GAME_TIMER) == 0){};

		if(score >= 9999){score = 9999;}
		else{score++;}

		setSevenSeg(score);

		uint8_t led_pattern = 0x00;
		for(int i = 0; i < lives; i++){
			led_pattern |= 0x01 << i;
		}
		setLEDs(led_pattern);

		switch_data = readSwitch();

		////////////////////////////////////////////////
		// NEED TO MOVE ASTEROIDS BEFORE PLAYER TO AVOID OVERWRITING ASTEROIDS
		////////////////////////////////////////////////




		updatePlayer(switch_data);



		updateLCD();
	}

	return 0;
}


//void updatePlayer(uint8_t data){
//	// Switch is backwards from the LCD (LCD 1 = lower row, switch 1 = upwards direction)
//	uint8_t row = (~data) & 0x01;
//
//	// If the player moved
//	if(game_matrix[row][PLAYER_COLUMN] != PLAYER){
//		game_matrix[row][PLAYER_COLUMN] = PLAYER;
//		//game_matrix[]
//	}
//}


void updateLCD(void){
	static uint8_t prev_matrix[LCD_ROWS][LCD_COLS] = {
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
			{BLANK, PLAYER, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK}
	};

	uint8_t newPlayerRow  = (game_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
	uint8_t prevPlayerRow = (prev_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);

	// Update the player first (this will look smoother)
	if(newPlayerRow != prevPlayerRow){
		// Write the new player to the LCD
		lcdSetAddr(newPlayerRow, PLAYER_COLUMN);
		lcdWrite(PLAYER);

		// Clear previous player's image
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
		lcdWrite(PLAYER);
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
			uint8_t prev = prev_matrix[i][j];
			uint8_t new = game_matrix[i][j];

			// Player is already updated
			if(new == PLAYER){
				continue;
			}

			// If there is an asteroid
			if(new != BLANK){
				// Draw asteroid
				lcdSetAddr(i, j);
				lcdWrite(new);
			} else {
				// Check for old asteroids
				if(prev != BLANK && prev != PLAYER){
					lcdSetAddr(i, j);
					lcdWrite(BLANK);
				}
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
			prev_matrix[i][j] = game_matrix[i][j];
		}
	}
}
