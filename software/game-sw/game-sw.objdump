
game-sw.elf:     file format elf32-littlenios2
game-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006ff8 memsz 0x00006ff8 flags r-x
    LOAD off    0x00008018 vaddr 0x00027018 paddr 0x00028ad0 align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags rw-
    LOAD off    0x0000a588 vaddr 0x0002a588 paddr 0x0002a588 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006d00  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  00026f30  00026f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab8  00027018  00028ad0  00008018  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0002a588  0002a588  0000a588  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0002a6e4  0002a6e4  00009ad0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009ad0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ae0  00000000  00000000  00009af8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000189e8  00000000  00000000  0000a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006944  00000000  00000000  00022fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007366  00000000  00000000  00029904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b28  00000000  00000000  00030c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b8b  00000000  00000000  00032794  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004cb1  00000000  00000000  0003531f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006e0  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003d0b2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003d0b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003d0b8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003d0b9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003d0ba  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003d0c3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003d0cc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0003d0d5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0003d0d9  2**0
                  CONTENTS, READONLY
 26 .jdi          00004230  00000000  00000000  0003d105  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000560d3  00000000  00000000  00041335  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00026f30 l    d  .rodata	00000000 .rodata
00027018 l    d  .rwdata	00000000 .rwdata
0002a588 l    d  .bss	00000000 .bss
0002a6e4 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game-sw_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00028a90 l     O .rwdata	00000004 count.2490
00027038 l     O .rwdata	00000020 prev_matrix.2543
00000000 l    df *ABS*	00000000 hw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00027460 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00022a78 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028aac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022d14 l     F .text	00000034 alt_dev_reg
00027884 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023004 l     F .text	0000020c altera_avalon_jtag_uart_irq
00023210 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00023848 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00023a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00023b9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023bc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023e24 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00023f84 l     F .text	0000003c alt_get_errno
00023fc0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00025d0c l     F .text	00000008 __fp_unlock
00025d20 l     F .text	0000019c __sinit.part.1
00025ebc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000269c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00026ab4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00026b9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00026cb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00026df4 l     F .text	0000003c alt_get_errno
0002a5b0 g     O .bss	00000004 alt_instruction_exception_handler
00020a70 g     F .text	00000148 death
00026878 g     F .text	00000054 _isatty_r
00022b64 g     F .text	0000007c alt_main
0002130c g     F .text	000000e0 lcdSetAddr
0002a5e4 g     O .bss	00000100 alt_irq
000268cc g     F .text	00000060 _lseek_r
00028ad0 g       *ABS*	00000000 __flash_rwdata_start
0002a6e4 g       *ABS*	00000000 __alt_heap_start
00020fd0 g     F .text	0000003c handleGameTimer
00026600 g     F .text	0000005c __sseek
0002606c g     F .text	00000010 __sinit
00021618 g     F .text	00000060 startTimer
00025ec4 g     F .text	00000078 __sfmoreglue
00022c04 g     F .text	00000024 __malloc_unlock
00024f20 g     F .text	0000015c memmove
00026054 g     F .text	00000018 _cleanup
00022c28 g     F .text	0000003c alt_putstr
00021048 g     F .text	00000028 readSwitch
00024430 g     F .text	00000024 altera_nios2_gen2_irq_init
00021070 g     F .text	00000028 readKey
00020000 g     F .entry	0000000c __reset
00020f3c g     F .text	00000048 clearSema
000215b8 g     F .text	00000060 initTimers
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002681c g     F .text	0000005c _fstat_r
0002a59c g     O .bss	00000004 errno
0002657c g     F .text	00000008 __seofread
0002090c g     F .text	000000f8 updatePlayer
00021098 g     F .text	0000003c setLEDs
00020d18 g     F .text	00000224 updateLCD
0002a5a8 g     O .bss	00000004 alt_argv
00030a8c g       *ABS*	00000000 _gp
00020a04 g     F .text	0000006c delayMs
0002890c g     O .rwdata	00000180 alt_fd_list
00024454 g     F .text	00000090 alt_find_dev
00024dd8 g     F .text	00000148 memcpy
00025d14 g     F .text	0000000c _cleanup_r
00021468 g     F .text	000000c4 lcdWrite
00023f08 g     F .text	0000007c alt_io_redirect
00026f30 g       *ABS*	00000000 __DTOR_END__
000210d4 g     F .text	00000194 setSevenSeg
00023d88 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023408 g     F .text	0000021c altera_avalon_jtag_uart_read
00021994 g     F .text	00000014 malloc
000218b0 g     F .text	00000064 .hidden __udivsi3
00026af0 g     F .text	000000ac isatty
00027018 g     O .rwdata	00000020 game_matrix
0002a598 g     O .bss	00000004 __malloc_top_pad
000247b0 g     F .text	000004c8 __sfvwrite_r
00022244 g     F .text	00000054 _sbrk_r
0002692c g     F .text	00000060 _read_r
00028ac0 g     O .rwdata	00000004 alt_max_fd
00026718 g     F .text	000000f0 _fclose_r
00025cdc g     F .text	00000030 fflush
0002a594 g     O .bss	00000004 __malloc_max_sbrked_mem
00021784 g     F .text	00000034 millisToClock
00026bd8 g     F .text	000000dc lseek
00028aa0 g     O .rwdata	00000004 _global_impure_ptr
0002507c g     F .text	00000564 _realloc_r
0002100c g     F .text	0000003c handleLCDTimer
0002a6e4 g       *ABS*	00000000 __bss_end
00022988 g     F .text	000000f0 alt_iic_isr_register
00024328 g     F .text	00000108 alt_tick
000213ec g     F .text	0000007c lcdWriteStr
0002608c g     F .text	00000018 __fp_lock_all
0002293c g     F .text	0000004c alt_ic_irq_enabled
0002428c g     F .text	0000009c alt_alarm_stop
0002a5a0 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000288e4 g     O .rwdata	00000028 alt_dev_null
00023b7c g     F .text	00000020 alt_dcache_flush_all
00028ad0 g       *ABS*	00000000 __ram_rwdata_end
00028ab8 g     O .rwdata	00000008 alt_dev_list
0002a588 g     O .bss	00000004 score
00026e30 g     F .text	00000100 write
00020c00 g     F .text	00000118 deathAnimation
00027018 g       *ABS*	00000000 __ram_rodata_end
000269fc g     F .text	000000b8 fstat
00020bb8 g     F .text	00000048 gameOver
00021914 g     F .text	00000058 .hidden __umodsi3
0002a6e4 g       *ABS*	00000000 end
00022f44 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00026f30 g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
000238c0 g     F .text	0000007c alt_avalon_timer_sc_init
00023624 g     F .text	00000224 altera_avalon_jtag_uart_write
0002607c g     F .text	00000004 __sfp_lock_acquire
00024c78 g     F .text	000000e4 memchr
000223bc g     F .text	00000310 _free_r
00021268 g     F .text	000000a4 lcdInit
000258e4 g     F .text	00000180 __call_exitprocs
00028a98 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002a5b4 g     O .bss	00000004 _alt_tick_rate
000221e0 g     F .text	00000064 rand
0002a5b8 g     O .bss	00000004 _alt_nticks
00026cf0 g     F .text	00000104 read
00022d80 g     F .text	00000060 alt_sys_init
000257cc g     F .text	00000118 __register_exitproc
00028a95 g     O .rwdata	00000001 gameSema
000232b0 g     F .text	00000068 altera_avalon_jtag_uart_close
0002196c g     F .text	00000028 .hidden __mulsi3
00027018 g       *ABS*	00000000 __ram_rwdata_start
00026f30 g       *ABS*	00000000 __ram_rodata_start
0002a5bc g     O .bss	00000028 __malloc_current_mallinfo
00022de0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000245ec g     F .text	000000c4 alt_get_fd
000266c4 g     F .text	00000054 _close_r
00024d5c g     F .text	0000007c memcmp
00022ea0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a6e4 g       *ABS*	00000000 __alt_stack_base
00022ef0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00025678 g     F .text	00000154 __swsetup_r
00025f3c g     F .text	00000118 __sfp
00027058 g     O .rwdata	00000408 __malloc_av_
00026088 g     F .text	00000004 __sinit_lock_release
00026528 g     F .text	00000054 __sread
000244e4 g     F .text	00000108 alt_find_file
00023c04 g     F .text	000000a4 alt_dev_llist_insert
00022be0 g     F .text	00000024 __malloc_lock
00022c64 g     F .text	000000b0 sbrk
00025c80 g     F .text	0000005c _fflush_r
0002a588 g       *ABS*	00000000 __bss_start
00026400 g     F .text	00000128 memset
0002026c g     F .text	000001fc main
0002a5ac g     O .bss	00000004 alt_envp
0002a590 g     O .bss	00000004 __malloc_max_total_mem
00022e40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000221c8 g     F .text	00000018 srand
0002665c g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
00026808 g     F .text	00000014 fclose
000219bc g     F .text	0000080c _malloc_r
00020538 g     F .text	00000184 createAsteroid
00028ac4 g     O .rwdata	00000004 alt_errno
000260bc g     F .text	000000c4 _fwalk
00020734 g     F .text	00000158 update_matrix
000217b8 g     F .text	00000084 .hidden __divsi3
00022298 g     F .text	00000124 _malloc_trim_r
00026f30 g       *ABS*	00000000 __CTOR_END__
00026f30 g       *ABS*	00000000 __flash_rodata_start
00026f30 g       *ABS*	00000000 __DTOR_LIST__
0002a58c g     O .bss	00000004 count
00020f84 g     F .text	0000004c getSema
00028a8c g     O .rwdata	00000001 lives
00021678 g     F .text	00000060 stopTimer
00022d48 g     F .text	00000038 alt_irq_init
00024208 g     F .text	00000084 alt_release_fd
000246b0 g     F .text	00000014 atexit
00026664 g     F .text	00000060 _write_r
00028aa4 g     O .rwdata	00000004 _impure_ptr
0002a5a4 g     O .bss	00000004 alt_argc
00025a64 g     F .text	0000021c __sflush_r
00023d08 g     F .text	00000060 _do_dtors
0002088c g     F .text	00000080 draw_player
00020020 g       .exceptions	00000000 alt_irq_entry
000260a4 g     F .text	00000018 __fp_unlock_all
00028ab0 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000227d8 g     F .text	00000050 alt_ic_isr_register
00028ad0 g       *ABS*	00000000 _edata
00026fc0 g     O .rodata	00000028 HexArray
0002a6e4 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00023318 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000246fc g     F .text	0000009c _fputs_r
000228b0 g     F .text	0000008c alt_ic_irq_disable
00026584 g     F .text	0000007c __swrite
00028a9c g     O .rwdata	00000004 __malloc_trim_threshold
00020504 g     F .text	00000034 randomNumInit
000246c4 g     F .text	00000038 exit
000216d8 g     F .text	000000ac setTimer
00026180 g     F .text	000000c4 _fwalk_reent
0002183c g     F .text	00000074 .hidden __modsi3
00026fa4 g     O .rodata	0000001c commands
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00026080 g     F .text	00000004 __sfp_lock_release
0002152c g     F .text	0000008c lcdClear
00020468 g     F .text	0000009c start
000206bc g     F .text	00000078 free_array
00020000 g       *ABS*	00000000 __alt_mem_onchip_ram
0002698c g     F .text	00000034 _exit
0002393c g     F .text	0000012c alt_alarm_start
000226cc g     F .text	0000010c .hidden __muldi3
00026244 g     F .text	000001bc __smakebuf_r
000255e0 g     F .text	00000098 strlen
000240ac g     F .text	0000015c open
00023d68 g     F .text	00000020 alt_icache_flush_all
00024798 g     F .text	00000018 fputs
00028aa8 g     O .rwdata	00000004 alt_priority_mask
00028a94 g     O .rwdata	00000001 lcdSema
00022828 g     F .text	00000088 alt_ic_irq_enable
00028ac8 g     O .rwdata	00000008 alt_alarm_list
00023ca8 g     F .text	00000060 _do_ctors
00023aa4 g     F .text	000000d8 close
00022ae0 g     F .text	00000084 alt_load
000219a8 g     F .text	00000014 free
00026084 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a97904 	addi	r2,r2,-23068
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a97904 	addi	r2,r2,-23068
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe712c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6c917 	ldw	r2,-25820(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6c917 	ldw	r2,-25820(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d682a314 	ori	gp,gp,2700
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a96214 	ori	r2,r2,42376

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e9b914 	ori	r3,r3,42724

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	0022ae00 	call	22ae0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	0022b640 	call	22b64 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7268>

0002026c <main>:
void free_array(uint8_t** array);
void draw_player(uint8_t data);
void deathAnimation(uint8_t row);


int main(){
   2026c:	defff904 	addi	sp,sp,-28
   20270:	dfc00615 	stw	ra,24(sp)
   20274:	df000515 	stw	fp,20(sp)
   20278:	df000504 	addi	fp,sp,20
	uint8_t switch_data;
	uint8_t hit;
	initTimers();
   2027c:	00215b80 	call	215b8 <initTimers>
	lcdInit();
   20280:	00212680 	call	21268 <lcdInit>

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, 0x0FFFFFFF);
   20284:	00c40034 	movhi	r3,4096
   20288:	18ffffc4 	addi	r3,r3,-1
   2028c:	00800134 	movhi	r2,4
   20290:	10841404 	addi	r2,r2,4176
   20294:	10c00035 	stwio	r3,0(r2)

	alt_putstr("Ciao from Nios II!\n");
   20298:	010000b4 	movhi	r4,2
   2029c:	211bcc04 	addi	r4,r4,28464
   202a0:	0022c280 	call	22c28 <alt_putstr>

	// Set the LEDs
	uint8_t led_pattern = 0x00;
   202a4:	e03ffb05 	stb	zero,-20(fp)
	for(int i = 0; i < lives; i++){led_pattern |= 0x01 << i;}
   202a8:	e03ffc15 	stw	zero,-16(fp)
   202ac:	00000a06 	br	202d8 <main+0x6c>
   202b0:	00c00044 	movi	r3,1
   202b4:	e0bffc17 	ldw	r2,-16(fp)
   202b8:	1884983a 	sll	r2,r3,r2
   202bc:	1007883a 	mov	r3,r2
   202c0:	e0bffb03 	ldbu	r2,-20(fp)
   202c4:	1884b03a 	or	r2,r3,r2
   202c8:	e0bffb05 	stb	r2,-20(fp)
   202cc:	e0bffc17 	ldw	r2,-16(fp)
   202d0:	10800044 	addi	r2,r2,1
   202d4:	e0bffc15 	stw	r2,-16(fp)
   202d8:	d0a00003 	ldbu	r2,-32768(gp)
   202dc:	10803fcc 	andi	r2,r2,255
   202e0:	e0fffc17 	ldw	r3,-16(fp)
   202e4:	18bff216 	blt	r3,r2,202b0 <__alt_data_end+0xfffe72b0>
	setLEDs(led_pattern);
   202e8:	e0bffb03 	ldbu	r2,-20(fp)
   202ec:	1009883a 	mov	r4,r2
   202f0:	00210980 	call	21098 <setLEDs>

	setTimer(GAME_TIMER, 100000);
   202f4:	014000b4 	movhi	r5,2
   202f8:	2961a804 	addi	r5,r5,-31072
   202fc:	01000044 	movi	r4,1
   20300:	00216d80 	call	216d8 <setTimer>
	startTimer(GAME_TIMER);
   20304:	01000044 	movi	r4,1
   20308:	00216180 	call	21618 <startTimer>

	start();
   2030c:	00204680 	call	20468 <start>
	lcdClear();
   20310:	002152c0 	call	2152c <lcdClear>
	switch_data = readSwitch();
   20314:	00210480 	call	21048 <readSwitch>
   20318:	e0bfff05 	stb	r2,-4(fp)
	draw_player(switch_data);
   2031c:	e0bfff03 	ldbu	r2,-4(fp)
   20320:	1009883a 	mov	r4,r2
   20324:	002088c0 	call	2088c <draw_player>
	randomNumInit();
   20328:	00205040 	call	20504 <randomNumInit>


	while(1) {
		clearSema(GAME_TIMER);
   2032c:	01000044 	movi	r4,1
   20330:	0020f3c0 	call	20f3c <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   20334:	0001883a 	nop
   20338:	01000044 	movi	r4,1
   2033c:	0020f840 	call	20f84 <getSema>
   20340:	10803fcc 	andi	r2,r2,255
   20344:	103ffc26 	beq	r2,zero,20338 <__alt_data_end+0xfffe7338>

		// Set the score
		if(score >= 9999){score = 9999;}
   20348:	d0a6bf17 	ldw	r2,-25860(gp)
   2034c:	1089c3f0 	cmpltui	r2,r2,9999
   20350:	1000031e 	bne	r2,zero,20360 <main+0xf4>
   20354:	0089c3c4 	movi	r2,9999
   20358:	d0a6bf15 	stw	r2,-25860(gp)
   2035c:	00000306 	br	2036c <main+0x100>
		else{score++;}
   20360:	d0a6bf17 	ldw	r2,-25860(gp)
   20364:	10800044 	addi	r2,r2,1
   20368:	d0a6bf15 	stw	r2,-25860(gp)
		setSevenSeg(score);
   2036c:	d0a6bf17 	ldw	r2,-25860(gp)
   20370:	1009883a 	mov	r4,r2
   20374:	00210d40 	call	210d4 <setSevenSeg>

		switch_data = readSwitch();
   20378:	00210480 	call	21048 <readSwitch>
   2037c:	e0bfff05 	stb	r2,-4(fp)
		if(game_matrix[0][PLAYER_COLUMN] == PLAYER){game_matrix[0][PLAYER_COLUMN] = BLANK;}
   20380:	008000b4 	movhi	r2,2
   20384:	109c0604 	addi	r2,r2,28696
   20388:	10800043 	ldbu	r2,1(r2)
   2038c:	10803fcc 	andi	r2,r2,255
   20390:	10803d98 	cmpnei	r2,r2,246
   20394:	1000041e 	bne	r2,zero,203a8 <main+0x13c>
   20398:	008000b4 	movhi	r2,2
   2039c:	109c0604 	addi	r2,r2,28696
   203a0:	00c00804 	movi	r3,32
   203a4:	10c00045 	stb	r3,1(r2)
		if(game_matrix[1][PLAYER_COLUMN] == PLAYER){game_matrix[1][PLAYER_COLUMN] = BLANK;}
   203a8:	008000b4 	movhi	r2,2
   203ac:	109c0604 	addi	r2,r2,28696
   203b0:	10800443 	ldbu	r2,17(r2)
   203b4:	10803fcc 	andi	r2,r2,255
   203b8:	10803d98 	cmpnei	r2,r2,246
   203bc:	1000041e 	bne	r2,zero,203d0 <main+0x164>
   203c0:	008000b4 	movhi	r2,2
   203c4:	109c0604 	addi	r2,r2,28696
   203c8:	00c00804 	movi	r3,32
   203cc:	10c00445 	stb	r3,17(r2)

		// Move matrix
		update_matrix();
   203d0:	00207340 	call	20734 <update_matrix>

		// Update the player, and check if the player has been hit
		hit = updatePlayer(switch_data);
   203d4:	e0bfff03 	ldbu	r2,-4(fp)
   203d8:	1009883a 	mov	r4,r2
   203dc:	002090c0 	call	2090c <updatePlayer>
   203e0:	e0bfff45 	stb	r2,-3(fp)

		updateLCD();
   203e4:	0020d180 	call	20d18 <updateLCD>

		// If the player has been hit
		if(hit != 0x00){
   203e8:	e0bfff43 	ldbu	r2,-3(fp)
   203ec:	103fcf26 	beq	r2,zero,2032c <__alt_data_end+0xfffe732c>
			if(hit == 0x02){ // If hit by a black hole, game over
   203f0:	e0bfff43 	ldbu	r2,-3(fp)
   203f4:	10800098 	cmpnei	r2,r2,2
   203f8:	1000021e 	bne	r2,zero,20404 <main+0x198>
				lives = 0;
   203fc:	d0200005 	stb	zero,-32768(gp)
   20400:	00000306 	br	20410 <main+0x1a4>
			} else { // If hit by an asteroid, lose a life
				lives--;
   20404:	d0a00003 	ldbu	r2,-32768(gp)
   20408:	10bfffc4 	addi	r2,r2,-1
   2040c:	d0a00005 	stb	r2,-32768(gp)
			}
			// Set the LEDs
			uint8_t led_pattern = 0x00;
   20410:	e03ffd05 	stb	zero,-12(fp)
			for(int i = 0; i < lives; i++){led_pattern |= 0x01 << i;}
   20414:	e03ffe15 	stw	zero,-8(fp)
   20418:	00000a06 	br	20444 <main+0x1d8>
   2041c:	00c00044 	movi	r3,1
   20420:	e0bffe17 	ldw	r2,-8(fp)
   20424:	1884983a 	sll	r2,r3,r2
   20428:	1007883a 	mov	r3,r2
   2042c:	e0bffd03 	ldbu	r2,-12(fp)
   20430:	1884b03a 	or	r2,r3,r2
   20434:	e0bffd05 	stb	r2,-12(fp)
   20438:	e0bffe17 	ldw	r2,-8(fp)
   2043c:	10800044 	addi	r2,r2,1
   20440:	e0bffe15 	stw	r2,-8(fp)
   20444:	d0a00003 	ldbu	r2,-32768(gp)
   20448:	10803fcc 	andi	r2,r2,255
   2044c:	e0fffe17 	ldw	r3,-8(fp)
   20450:	18bff216 	blt	r3,r2,2041c <__alt_data_end+0xfffe741c>
			setLEDs(led_pattern);
   20454:	e0bffd03 	ldbu	r2,-12(fp)
   20458:	1009883a 	mov	r4,r2
   2045c:	00210980 	call	21098 <setLEDs>

			death();
   20460:	0020a700 	call	20a70 <death>
		}
	}
   20464:	003fb106 	br	2032c <__alt_data_end+0xfffe732c>

00020468 <start>:

	return 0;
}


void start(void){
   20468:	defffd04 	addi	sp,sp,-12
   2046c:	dfc00215 	stw	ra,8(sp)
   20470:	df000115 	stw	fp,4(sp)
   20474:	df000104 	addi	fp,sp,4
	uint8_t key_data = 1;
   20478:	00800044 	movi	r2,1
   2047c:	e0bfff05 	stb	r2,-4(fp)
	//uint8_t message2[] = {0x50, 0x72, 0x65, 0x73, 0x73, 0xFE, 0x4B, 0x45, 0x59, 0x32, 0x21, 0x21};

	//key_data = readKey();

	// clears and displays
	lcdClear();
   20480:	002152c0 	call	2152c <lcdClear>
	lcdSetAddr(0, 0);
   20484:	000b883a 	mov	r5,zero
   20488:	0009883a 	mov	r4,zero
   2048c:	002130c0 	call	2130c <lcdSetAddr>
	// Hello

	lcdWriteStr("** ASTRODODGE **\0");
   20490:	010000b4 	movhi	r4,2
   20494:	211bd104 	addi	r4,r4,28484
   20498:	00213ec0 	call	213ec <lcdWriteStr>
	for (int i = 0; i < 16; i++){
		lcdWrite(message1[i]);
	}
	*/
	// set to the next line
	lcdSetAddr(1, 2);
   2049c:	01400084 	movi	r5,2
   204a0:	01000044 	movi	r4,1
   204a4:	002130c0 	call	2130c <lcdSetAddr>
	/*
	for (int i = 0; i < 11; i++){
		lcdWrite(message2[i]);
	}
	*/
	lcdWriteStr("Press KEY2!");
   204a8:	010000b4 	movhi	r4,2
   204ac:	211bd604 	addi	r4,r4,28504
   204b0:	00213ec0 	call	213ec <lcdWriteStr>

	while(key_data == 1) {
   204b4:	00000a06 	br	204e0 <start+0x78>
		key_data = readKey();
   204b8:	00210700 	call	21070 <readKey>
   204bc:	e0bfff05 	stb	r2,-4(fp)
		count++;
   204c0:	d0a6c017 	ldw	r2,-25856(gp)
   204c4:	10800044 	addi	r2,r2,1
   204c8:	d0a6c015 	stw	r2,-25856(gp)
		if(count >= 1000000){
   204cc:	d0e6c017 	ldw	r3,-25856(gp)
   204d0:	008003f4 	movhi	r2,15
   204d4:	10908fc4 	addi	r2,r2,16959
   204d8:	10c0012e 	bgeu	r2,r3,204e0 <start+0x78>
			count = 0;
   204dc:	d026c015 	stw	zero,-25856(gp)
		lcdWrite(message2[i]);
	}
	*/
	lcdWriteStr("Press KEY2!");

	while(key_data == 1) {
   204e0:	e0bfff03 	ldbu	r2,-4(fp)
   204e4:	10800060 	cmpeqi	r2,r2,1
   204e8:	103ff31e 	bne	r2,zero,204b8 <__alt_data_end+0xfffe74b8>
		count++;
		if(count >= 1000000){
			count = 0;
		}
	}
}
   204ec:	0001883a 	nop
   204f0:	e037883a 	mov	sp,fp
   204f4:	dfc00117 	ldw	ra,4(sp)
   204f8:	df000017 	ldw	fp,0(sp)
   204fc:	dec00204 	addi	sp,sp,8
   20500:	f800283a 	ret

00020504 <randomNumInit>:


// Sets the seed for the random number generation
void randomNumInit(void){
   20504:	defffe04 	addi	sp,sp,-8
   20508:	dfc00115 	stw	ra,4(sp)
   2050c:	df000015 	stw	fp,0(sp)
   20510:	d839883a 	mov	fp,sp
	// seed the random number generator with the current time
	srand(count);
   20514:	d0a6c017 	ldw	r2,-25856(gp)
   20518:	1009883a 	mov	r4,r2
   2051c:	00221c80 	call	221c8 <srand>
}
   20520:	0001883a 	nop
   20524:	e037883a 	mov	sp,fp
   20528:	dfc00117 	ldw	ra,4(sp)
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00204 	addi	sp,sp,8
   20534:	f800283a 	ret

00020538 <createAsteroid>:

// creates a 2x1 array with an asteroid randomly in one of the rows
uint8_t **createAsteroid(void){
   20538:	defff804 	addi	sp,sp,-32
   2053c:	dfc00715 	stw	ra,28(sp)
   20540:	df000615 	stw	fp,24(sp)
   20544:	dc000515 	stw	r16,20(sp)
   20548:	df000604 	addi	fp,sp,24
	uint8_t **newAsteroid = (uint8_t**)malloc(2 * sizeof(uint8_t*));
   2054c:	01000204 	movi	r4,8
   20550:	00219940 	call	21994 <malloc>
   20554:	e0bffc15 	stw	r2,-16(fp)
	uint8_t asteroids[4] = {ASTEROID_0, ASTEROID_1, ASTEROID_2, BLACK_HOLE};
   20558:	00800a84 	movi	r2,42
   2055c:	e0bffd45 	stb	r2,-11(fp)
   20560:	00bffbc4 	movi	r2,-17
   20564:	e0bffd85 	stb	r2,-10(fp)
   20568:	00bffc84 	movi	r2,-14
   2056c:	e0bffdc5 	stb	r2,-9(fp)
   20570:	00bfffc4 	movi	r2,-1
   20574:	e0bffe05 	stb	r2,-8(fp)
	// randomly generate out of the 4 different asteroid
	uint8_t randomAsteroid;
	uint8_t randomRow;

	// generate a number 0 to 3
	randomAsteroid = rand() % 4;
   20578:	00221e00 	call	221e0 <rand>
   2057c:	1007883a 	mov	r3,r2
   20580:	00a00034 	movhi	r2,32768
   20584:	108000c4 	addi	r2,r2,3
   20588:	1884703a 	and	r2,r3,r2
   2058c:	1000040e 	bge	r2,zero,205a0 <createAsteroid+0x68>
   20590:	10bfffc4 	addi	r2,r2,-1
   20594:	00ffff04 	movi	r3,-4
   20598:	10c4b03a 	or	r2,r2,r3
   2059c:	10800044 	addi	r2,r2,1
   205a0:	e0bffa05 	stb	r2,-24(fp)
	// if it is a black hole, randomly generate a number out of 4 again
	if (randomAsteroid == 3)
   205a4:	e0bffa03 	ldbu	r2,-24(fp)
   205a8:	108000d8 	cmpnei	r2,r2,3
   205ac:	10000b1e 	bne	r2,zero,205dc <createAsteroid+0xa4>
		randomAsteroid = rand() % 4;
   205b0:	00221e00 	call	221e0 <rand>
   205b4:	1007883a 	mov	r3,r2
   205b8:	00a00034 	movhi	r2,32768
   205bc:	108000c4 	addi	r2,r2,3
   205c0:	1884703a 	and	r2,r3,r2
   205c4:	1000040e 	bge	r2,zero,205d8 <createAsteroid+0xa0>
   205c8:	10bfffc4 	addi	r2,r2,-1
   205cc:	00ffff04 	movi	r3,-4
   205d0:	10c4b03a 	or	r2,r2,r3
   205d4:	10800044 	addi	r2,r2,1
   205d8:	e0bffa05 	stb	r2,-24(fp)

	// randomly select a row
	randomRow = rand() % 2;
   205dc:	00221e00 	call	221e0 <rand>
   205e0:	1007883a 	mov	r3,r2
   205e4:	00a00034 	movhi	r2,32768
   205e8:	10800044 	addi	r2,r2,1
   205ec:	1884703a 	and	r2,r3,r2
   205f0:	1000040e 	bge	r2,zero,20604 <createAsteroid+0xcc>
   205f4:	10bfffc4 	addi	r2,r2,-1
   205f8:	00ffff84 	movi	r3,-2
   205fc:	10c4b03a 	or	r2,r2,r3
   20600:	10800044 	addi	r2,r2,1
   20604:	e0bffd05 	stb	r2,-12(fp)

	// clear the newAsteroid array
    for(int i = 0; i < 2; ++i) {
   20608:	e03ffb15 	stw	zero,-20(fp)
   2060c:	00001506 	br	20664 <createAsteroid+0x12c>
    	newAsteroid[i] = (uint8_t*)malloc(sizeof(uint8_t));
   20610:	e0bffb17 	ldw	r2,-20(fp)
   20614:	1085883a 	add	r2,r2,r2
   20618:	1085883a 	add	r2,r2,r2
   2061c:	1007883a 	mov	r3,r2
   20620:	e0bffc17 	ldw	r2,-16(fp)
   20624:	10e1883a 	add	r16,r2,r3
   20628:	01000044 	movi	r4,1
   2062c:	00219940 	call	21994 <malloc>
   20630:	80800015 	stw	r2,0(r16)
    	newAsteroid[i][0] = BLANK;	// blank spaces
   20634:	e0bffb17 	ldw	r2,-20(fp)
   20638:	1085883a 	add	r2,r2,r2
   2063c:	1085883a 	add	r2,r2,r2
   20640:	1007883a 	mov	r3,r2
   20644:	e0bffc17 	ldw	r2,-16(fp)
   20648:	10c5883a 	add	r2,r2,r3
   2064c:	10800017 	ldw	r2,0(r2)
   20650:	00c00804 	movi	r3,32
   20654:	10c00005 	stb	r3,0(r2)

	// randomly select a row
	randomRow = rand() % 2;

	// clear the newAsteroid array
    for(int i = 0; i < 2; ++i) {
   20658:	e0bffb17 	ldw	r2,-20(fp)
   2065c:	10800044 	addi	r2,r2,1
   20660:	e0bffb15 	stw	r2,-20(fp)
   20664:	e0bffb17 	ldw	r2,-20(fp)
   20668:	10800090 	cmplti	r2,r2,2
   2066c:	103fe81e 	bne	r2,zero,20610 <__alt_data_end+0xfffe7610>
    	newAsteroid[i] = (uint8_t*)malloc(sizeof(uint8_t));
    	newAsteroid[i][0] = BLANK;	// blank spaces
    }

	newAsteroid[randomRow][0] = asteroids[randomAsteroid];
   20670:	e0bffd03 	ldbu	r2,-12(fp)
   20674:	1085883a 	add	r2,r2,r2
   20678:	1085883a 	add	r2,r2,r2
   2067c:	1007883a 	mov	r3,r2
   20680:	e0bffc17 	ldw	r2,-16(fp)
   20684:	10c5883a 	add	r2,r2,r3
   20688:	10800017 	ldw	r2,0(r2)
   2068c:	e0fffa03 	ldbu	r3,-24(fp)
   20690:	e13ffd44 	addi	r4,fp,-11
   20694:	20c7883a 	add	r3,r4,r3
   20698:	18c00003 	ldbu	r3,0(r3)
   2069c:	10c00005 	stb	r3,0(r2)

	// fill in the 2x1 array with a single asteroid
	return newAsteroid;
   206a0:	e0bffc17 	ldw	r2,-16(fp)
}
   206a4:	e6ffff04 	addi	sp,fp,-4
   206a8:	dfc00217 	ldw	ra,8(sp)
   206ac:	df000117 	ldw	fp,4(sp)
   206b0:	dc000017 	ldw	r16,0(sp)
   206b4:	dec00304 	addi	sp,sp,12
   206b8:	f800283a 	ret

000206bc <free_array>:


// call after the 2x1 array is done being used
void free_array(uint8_t** array){
   206bc:	defffc04 	addi	sp,sp,-16
   206c0:	dfc00315 	stw	ra,12(sp)
   206c4:	df000215 	stw	fp,8(sp)
   206c8:	df000204 	addi	fp,sp,8
   206cc:	e13fff15 	stw	r4,-4(fp)
    // Don't forget to free the allocated memory
    for (int i = 0; i < 2; ++i) {
   206d0:	e03ffe15 	stw	zero,-8(fp)
   206d4:	00000c06 	br	20708 <free_array+0x4c>
        free(array[i]);
   206d8:	e0bffe17 	ldw	r2,-8(fp)
   206dc:	1085883a 	add	r2,r2,r2
   206e0:	1085883a 	add	r2,r2,r2
   206e4:	1007883a 	mov	r3,r2
   206e8:	e0bfff17 	ldw	r2,-4(fp)
   206ec:	10c5883a 	add	r2,r2,r3
   206f0:	10800017 	ldw	r2,0(r2)
   206f4:	1009883a 	mov	r4,r2
   206f8:	00219a80 	call	219a8 <free>


// call after the 2x1 array is done being used
void free_array(uint8_t** array){
    // Don't forget to free the allocated memory
    for (int i = 0; i < 2; ++i) {
   206fc:	e0bffe17 	ldw	r2,-8(fp)
   20700:	10800044 	addi	r2,r2,1
   20704:	e0bffe15 	stw	r2,-8(fp)
   20708:	e0bffe17 	ldw	r2,-8(fp)
   2070c:	10800090 	cmplti	r2,r2,2
   20710:	103ff11e 	bne	r2,zero,206d8 <__alt_data_end+0xfffe76d8>
        free(array[i]);
    }
    free(array);
   20714:	e13fff17 	ldw	r4,-4(fp)
   20718:	00219a80 	call	219a8 <free>
}
   2071c:	0001883a 	nop
   20720:	e037883a 	mov	sp,fp
   20724:	dfc00117 	ldw	ra,4(sp)
   20728:	df000017 	ldw	fp,0(sp)
   2072c:	dec00204 	addi	sp,sp,8
   20730:	f800283a 	ret

00020734 <update_matrix>:


void update_matrix(void){
   20734:	defffb04 	addi	sp,sp,-20
   20738:	dfc00415 	stw	ra,16(sp)
   2073c:	df000315 	stw	fp,12(sp)
   20740:	df000304 	addi	fp,sp,12
	//test matrix values
	//game_matrix = {
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	//};
	for (int i = 0; i < LCD_ROWS; i++) {
   20744:	e03ffd15 	stw	zero,-12(fp)
   20748:	00001c06 	br	207bc <update_matrix+0x88>
		for (int j = 0; j < LCD_COLS - 1; j++) {
   2074c:	e03ffe15 	stw	zero,-8(fp)
   20750:	00001406 	br	207a4 <update_matrix+0x70>
			game_matrix[i][j] = game_matrix[i][j + 1]; // shift left
   20754:	e0bffe17 	ldw	r2,-8(fp)
   20758:	10c00044 	addi	r3,r2,1
   2075c:	008000b4 	movhi	r2,2
   20760:	109c0604 	addi	r2,r2,28696
   20764:	e13ffd17 	ldw	r4,-12(fp)
   20768:	2008913a 	slli	r4,r4,4
   2076c:	1105883a 	add	r2,r2,r4
   20770:	10c5883a 	add	r2,r2,r3
   20774:	10c00003 	ldbu	r3,0(r2)
   20778:	008000b4 	movhi	r2,2
   2077c:	109c0604 	addi	r2,r2,28696
   20780:	e13ffd17 	ldw	r4,-12(fp)
   20784:	2008913a 	slli	r4,r4,4
   20788:	1109883a 	add	r4,r2,r4
   2078c:	e0bffe17 	ldw	r2,-8(fp)
   20790:	2085883a 	add	r2,r4,r2
   20794:	10c00005 	stb	r3,0(r2)
	//game_matrix = {
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	//};
	for (int i = 0; i < LCD_ROWS; i++) {
		for (int j = 0; j < LCD_COLS - 1; j++) {
   20798:	e0bffe17 	ldw	r2,-8(fp)
   2079c:	10800044 	addi	r2,r2,1
   207a0:	e0bffe15 	stw	r2,-8(fp)
   207a4:	e0bffe17 	ldw	r2,-8(fp)
   207a8:	108003d0 	cmplti	r2,r2,15
   207ac:	103fe91e 	bne	r2,zero,20754 <__alt_data_end+0xfffe7754>
	//test matrix values
	//game_matrix = {
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	//};
	for (int i = 0; i < LCD_ROWS; i++) {
   207b0:	e0bffd17 	ldw	r2,-12(fp)
   207b4:	10800044 	addi	r2,r2,1
   207b8:	e0bffd15 	stw	r2,-12(fp)
   207bc:	e0bffd17 	ldw	r2,-12(fp)
   207c0:	10800090 	cmplti	r2,r2,2
   207c4:	103fe11e 	bne	r2,zero,2074c <__alt_data_end+0xfffe774c>
		for (int j = 0; j < LCD_COLS - 1; j++) {
			game_matrix[i][j] = game_matrix[i][j + 1]; // shift left
		}
	}

	if(count <= 0){
   207c8:	d0a00117 	ldw	r2,-32764(gp)
   207cc:	00801e16 	blt	zero,r2,20848 <update_matrix+0x114>
		count = (rand() % 4) + 2;
   207d0:	00221e00 	call	221e0 <rand>
   207d4:	1007883a 	mov	r3,r2
   207d8:	00a00034 	movhi	r2,32768
   207dc:	108000c4 	addi	r2,r2,3
   207e0:	1884703a 	and	r2,r3,r2
   207e4:	1000040e 	bge	r2,zero,207f8 <update_matrix+0xc4>
   207e8:	10bfffc4 	addi	r2,r2,-1
   207ec:	00ffff04 	movi	r3,-4
   207f0:	10c4b03a 	or	r2,r2,r3
   207f4:	10800044 	addi	r2,r2,1
   207f8:	10800084 	addi	r2,r2,2
   207fc:	d0a00115 	stw	r2,-32764(gp)
		new_col = createAsteroid(); // GET THIS FROM CAM
   20800:	00205380 	call	20538 <createAsteroid>
   20804:	e0bfff15 	stw	r2,-4(fp)
		game_matrix[0][LCD_COLS - 1] = new_col[0][0]; // update top right bit
   20808:	e0bfff17 	ldw	r2,-4(fp)
   2080c:	10800017 	ldw	r2,0(r2)
   20810:	10c00003 	ldbu	r3,0(r2)
   20814:	008000b4 	movhi	r2,2
   20818:	109c0604 	addi	r2,r2,28696
   2081c:	10c003c5 	stb	r3,15(r2)
		game_matrix[1][LCD_COLS - 1] = new_col[1][0]; // update bottom right bit
   20820:	e0bfff17 	ldw	r2,-4(fp)
   20824:	10800104 	addi	r2,r2,4
   20828:	10800017 	ldw	r2,0(r2)
   2082c:	10c00003 	ldbu	r3,0(r2)
   20830:	008000b4 	movhi	r2,2
   20834:	109c0604 	addi	r2,r2,28696
   20838:	10c007c5 	stb	r3,31(r2)
		free_array(new_col);
   2083c:	e13fff17 	ldw	r4,-4(fp)
   20840:	00206bc0 	call	206bc <free_array>
		game_matrix[0][LCD_COLS - 1] = BLANK; // update top right bit
		game_matrix[1][LCD_COLS - 1] = BLANK; // update bottom right bit
		count--;
	}

}
   20844:	00000b06 	br	20874 <update_matrix+0x140>
		new_col = createAsteroid(); // GET THIS FROM CAM
		game_matrix[0][LCD_COLS - 1] = new_col[0][0]; // update top right bit
		game_matrix[1][LCD_COLS - 1] = new_col[1][0]; // update bottom right bit
		free_array(new_col);
	} else {
		game_matrix[0][LCD_COLS - 1] = BLANK; // update top right bit
   20848:	008000b4 	movhi	r2,2
   2084c:	109c0604 	addi	r2,r2,28696
   20850:	00c00804 	movi	r3,32
   20854:	10c003c5 	stb	r3,15(r2)
		game_matrix[1][LCD_COLS - 1] = BLANK; // update bottom right bit
   20858:	008000b4 	movhi	r2,2
   2085c:	109c0604 	addi	r2,r2,28696
   20860:	00c00804 	movi	r3,32
   20864:	10c007c5 	stb	r3,31(r2)
		count--;
   20868:	d0a00117 	ldw	r2,-32764(gp)
   2086c:	10bfffc4 	addi	r2,r2,-1
   20870:	d0a00115 	stw	r2,-32764(gp)
	}

}
   20874:	0001883a 	nop
   20878:	e037883a 	mov	sp,fp
   2087c:	dfc00117 	ldw	ra,4(sp)
   20880:	df000017 	ldw	fp,0(sp)
   20884:	dec00204 	addi	sp,sp,8
   20888:	f800283a 	ret

0002088c <draw_player>:


void draw_player(uint8_t data){
   2088c:	defffd04 	addi	sp,sp,-12
   20890:	dfc00215 	stw	ra,8(sp)
   20894:	df000115 	stw	fp,4(sp)
   20898:	df000104 	addi	fp,sp,4
   2089c:	2005883a 	mov	r2,r4
   208a0:	e0bfff05 	stb	r2,-4(fp)
	lcdSetAddr((~data) & 0x01, PLAYER_COLUMN);
   208a4:	e0bfff03 	ldbu	r2,-4(fp)
   208a8:	1080004c 	andi	r2,r2,1
   208ac:	1005003a 	cmpeq	r2,r2,zero
   208b0:	10803fcc 	andi	r2,r2,255
   208b4:	01400044 	movi	r5,1
   208b8:	1009883a 	mov	r4,r2
   208bc:	002130c0 	call	2130c <lcdSetAddr>

	if(data == 0x00){
   208c0:	e0bfff03 	ldbu	r2,-4(fp)
   208c4:	1000061e 	bne	r2,zero,208e0 <draw_player+0x54>
		lcdSetAddr(1, PLAYER_COLUMN);
   208c8:	01400044 	movi	r5,1
   208cc:	01000044 	movi	r4,1
   208d0:	002130c0 	call	2130c <lcdSetAddr>
		lcdWrite(PLAYER);
   208d4:	01003d84 	movi	r4,246
   208d8:	00214680 	call	21468 <lcdWrite>
	} else {
		lcdSetAddr(0, PLAYER_COLUMN);
		lcdWrite(PLAYER);
	}
}
   208dc:	00000506 	br	208f4 <draw_player+0x68>

	if(data == 0x00){
		lcdSetAddr(1, PLAYER_COLUMN);
		lcdWrite(PLAYER);
	} else {
		lcdSetAddr(0, PLAYER_COLUMN);
   208e0:	01400044 	movi	r5,1
   208e4:	0009883a 	mov	r4,zero
   208e8:	002130c0 	call	2130c <lcdSetAddr>
		lcdWrite(PLAYER);
   208ec:	01003d84 	movi	r4,246
   208f0:	00214680 	call	21468 <lcdWrite>
	}
}
   208f4:	0001883a 	nop
   208f8:	e037883a 	mov	sp,fp
   208fc:	dfc00117 	ldw	ra,4(sp)
   20900:	df000017 	ldw	fp,0(sp)
   20904:	dec00204 	addi	sp,sp,8
   20908:	f800283a 	ret

0002090c <updatePlayer>:

uint8_t updatePlayer(uint8_t data){
   2090c:	defffd04 	addi	sp,sp,-12
   20910:	df000215 	stw	fp,8(sp)
   20914:	df000204 	addi	fp,sp,8
   20918:	2005883a 	mov	r2,r4
   2091c:	e0bfff05 	stb	r2,-4(fp)
	// Switch is backwards from the LCD (LCD 1 = lower row, switch 1 = upwards direction)
	uint8_t row = (~data) & 0x01;
   20920:	e0bfff03 	ldbu	r2,-4(fp)
   20924:	1080004c 	andi	r2,r2,1
   20928:	1005003a 	cmpeq	r2,r2,zero
   2092c:	e0bffe05 	stb	r2,-8(fp)

	// If the player moved
	if(game_matrix[row][PLAYER_COLUMN] != BLANK){
   20930:	e0fffe03 	ldbu	r3,-8(fp)
   20934:	008000b4 	movhi	r2,2
   20938:	109c0604 	addi	r2,r2,28696
   2093c:	1806913a 	slli	r3,r3,4
   20940:	10c5883a 	add	r2,r2,r3
   20944:	10800044 	addi	r2,r2,1
   20948:	10800003 	ldbu	r2,0(r2)
   2094c:	10803fcc 	andi	r2,r2,255
   20950:	10800820 	cmpeqi	r2,r2,32
   20954:	10001e1e 	bne	r2,zero,209d0 <updatePlayer+0xc4>
		if(game_matrix[row][PLAYER_COLUMN] == BLACK_HOLE){
   20958:	e0fffe03 	ldbu	r3,-8(fp)
   2095c:	008000b4 	movhi	r2,2
   20960:	109c0604 	addi	r2,r2,28696
   20964:	1806913a 	slli	r3,r3,4
   20968:	10c5883a 	add	r2,r2,r3
   2096c:	10800044 	addi	r2,r2,1
   20970:	10800003 	ldbu	r2,0(r2)
   20974:	10803fcc 	andi	r2,r2,255
   20978:	10803fd8 	cmpnei	r2,r2,255
   2097c:	10000a1e 	bne	r2,zero,209a8 <updatePlayer+0x9c>
			game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20980:	e0fffe03 	ldbu	r3,-8(fp)
   20984:	008000b4 	movhi	r2,2
   20988:	109c0604 	addi	r2,r2,28696
   2098c:	1806913a 	slli	r3,r3,4
   20990:	10c5883a 	add	r2,r2,r3
   20994:	10800044 	addi	r2,r2,1
   20998:	00fffd84 	movi	r3,-10
   2099c:	10c00005 	stb	r3,0(r2)
			return 0x02;
   209a0:	00800084 	movi	r2,2
   209a4:	00001306 	br	209f4 <updatePlayer+0xe8>
		} else {
			game_matrix[row][PLAYER_COLUMN] = PLAYER;
   209a8:	e0fffe03 	ldbu	r3,-8(fp)
   209ac:	008000b4 	movhi	r2,2
   209b0:	109c0604 	addi	r2,r2,28696
   209b4:	1806913a 	slli	r3,r3,4
   209b8:	10c5883a 	add	r2,r2,r3
   209bc:	10800044 	addi	r2,r2,1
   209c0:	00fffd84 	movi	r3,-10
   209c4:	10c00005 	stb	r3,0(r2)
			return 0x01;
   209c8:	00800044 	movi	r2,1
   209cc:	00000906 	br	209f4 <updatePlayer+0xe8>
		}
	} else {
		game_matrix[row][PLAYER_COLUMN] = PLAYER;
   209d0:	e0fffe03 	ldbu	r3,-8(fp)
   209d4:	008000b4 	movhi	r2,2
   209d8:	109c0604 	addi	r2,r2,28696
   209dc:	1806913a 	slli	r3,r3,4
   209e0:	10c5883a 	add	r2,r2,r3
   209e4:	10800044 	addi	r2,r2,1
   209e8:	00fffd84 	movi	r3,-10
   209ec:	10c00005 	stb	r3,0(r2)
		return 0x00;
   209f0:	0005883a 	mov	r2,zero
	}


}
   209f4:	e037883a 	mov	sp,fp
   209f8:	df000017 	ldw	fp,0(sp)
   209fc:	dec00104 	addi	sp,sp,4
   20a00:	f800283a 	ret

00020a04 <delayMs>:


//delays in increments of 100 ms
void delayMs(uint32_t milliseconds) {
   20a04:	defffc04 	addi	sp,sp,-16
   20a08:	dfc00315 	stw	ra,12(sp)
   20a0c:	df000215 	stw	fp,8(sp)
   20a10:	df000204 	addi	fp,sp,8
   20a14:	e13fff15 	stw	r4,-4(fp)
	for(uint32_t i = 100 ; i<=milliseconds; i+=100)
   20a18:	00801904 	movi	r2,100
   20a1c:	e0bffe15 	stw	r2,-8(fp)
   20a20:	00000a06 	br	20a4c <delayMs+0x48>
	{
		clearSema(GAME_TIMER);
   20a24:	01000044 	movi	r4,1
   20a28:	0020f3c0 	call	20f3c <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   20a2c:	0001883a 	nop
   20a30:	01000044 	movi	r4,1
   20a34:	0020f840 	call	20f84 <getSema>
   20a38:	10803fcc 	andi	r2,r2,255
   20a3c:	103ffc26 	beq	r2,zero,20a30 <__alt_data_end+0xfffe7a30>
}


//delays in increments of 100 ms
void delayMs(uint32_t milliseconds) {
	for(uint32_t i = 100 ; i<=milliseconds; i+=100)
   20a40:	e0bffe17 	ldw	r2,-8(fp)
   20a44:	10801904 	addi	r2,r2,100
   20a48:	e0bffe15 	stw	r2,-8(fp)
   20a4c:	e0bffe17 	ldw	r2,-8(fp)
   20a50:	e0ffff17 	ldw	r3,-4(fp)
   20a54:	18bff32e 	bgeu	r3,r2,20a24 <__alt_data_end+0xfffe7a24>
	{
		clearSema(GAME_TIMER);
		while(getSema(GAME_TIMER) == 0){};
	}
}
   20a58:	0001883a 	nop
   20a5c:	e037883a 	mov	sp,fp
   20a60:	dfc00117 	ldw	ra,4(sp)
   20a64:	df000017 	ldw	fp,0(sp)
   20a68:	dec00204 	addi	sp,sp,8
   20a6c:	f800283a 	ret

00020a70 <death>:


void death(void){
   20a70:	defffa04 	addi	sp,sp,-24
   20a74:	dfc00515 	stw	ra,20(sp)
   20a78:	df000415 	stw	fp,16(sp)
   20a7c:	df000404 	addi	fp,sp,16
	//check where player dies
	//row 0, column 1
	uint8_t row;

	if(game_matrix[0][PLAYER_COLUMN] == PLAYER){
   20a80:	008000b4 	movhi	r2,2
   20a84:	109c0604 	addi	r2,r2,28696
   20a88:	10800043 	ldbu	r2,1(r2)
   20a8c:	10803fcc 	andi	r2,r2,255
   20a90:	10803d98 	cmpnei	r2,r2,246
   20a94:	1000021e 	bne	r2,zero,20aa0 <death+0x30>
		row = 0;
   20a98:	e03ffc05 	stb	zero,-16(fp)
   20a9c:	00000206 	br	20aa8 <death+0x38>
	} else {
		row = 1;
   20aa0:	00800044 	movi	r2,1
   20aa4:	e0bffc05 	stb	r2,-16(fp)
	}

	deathAnimation(row);
   20aa8:	e0bffc03 	ldbu	r2,-16(fp)
   20aac:	1009883a 	mov	r4,r2
   20ab0:	0020c000 	call	20c00 <deathAnimation>

	if(lives == 0){
   20ab4:	d0a00003 	ldbu	r2,-32768(gp)
   20ab8:	10803fcc 	andi	r2,r2,255
   20abc:	1000021e 	bne	r2,zero,20ac8 <death+0x58>
		gameOver();
   20ac0:	0020bb80 	call	20bb8 <gameOver>
			}
		}
		uint8_t switch_data = readSwitch();
		draw_player(switch_data);
	}
}
   20ac4:	00003606 	br	20ba0 <death+0x130>
	deathAnimation(row);

	if(lives == 0){
		gameOver();
	} else {
		lcdClear();
   20ac8:	002152c0 	call	2152c <lcdClear>
		lcdSetAddr(0,4);
   20acc:	01400104 	movi	r5,4
   20ad0:	0009883a 	mov	r4,zero
   20ad4:	002130c0 	call	2130c <lcdSetAddr>

		lcdWriteStr("LIVES: \0");
   20ad8:	010000b4 	movhi	r4,2
   20adc:	211bd904 	addi	r4,r4,28516
   20ae0:	00213ec0 	call	213ec <lcdWriteStr>
		lcdWrite('S');
		lcdWrite(':');
		lcdWrite(' ');
		*/
		//displays lives
		lcdWrite(lives+48);
   20ae4:	d0a00003 	ldbu	r2,-32768(gp)
   20ae8:	10800c04 	addi	r2,r2,48
   20aec:	10803fcc 	andi	r2,r2,255
   20af0:	1009883a 	mov	r4,r2
   20af4:	00214680 	call	21468 <lcdWrite>

		lcdSetAddr(1,0);
   20af8:	000b883a 	mov	r5,zero
   20afc:	01000044 	movi	r4,1
   20b00:	002130c0 	call	2130c <lcdSetAddr>
		lcdWriteStr("   PRESS KEY2   \0");
   20b04:	010000b4 	movhi	r4,2
   20b08:	211bdc04 	addi	r4,r4,28528
   20b0c:	00213ec0 	call	213ec <lcdWriteStr>
				lcdWrite('C');
				lcdWrite('O');
				lcdWrite('N');
				*/
				//press key 2 is unpressed
		while(readKey() == 1);
   20b10:	0001883a 	nop
   20b14:	00210700 	call	21070 <readKey>
   20b18:	10803fcc 	andi	r2,r2,255
   20b1c:	10800060 	cmpeqi	r2,r2,1
   20b20:	103ffc1e 	bne	r2,zero,20b14 <__alt_data_end+0xfffe7b14>

		lcdClear();
   20b24:	002152c0 	call	2152c <lcdClear>
		for(int i = 0; i < LCD_ROWS; i++){
   20b28:	e03ffd15 	stw	zero,-12(fp)
   20b2c:	00001406 	br	20b80 <death+0x110>
			for(int j = 0; j < LCD_COLS; j++){
   20b30:	e03ffe15 	stw	zero,-8(fp)
   20b34:	00000c06 	br	20b68 <death+0xf8>
				game_matrix[i][j] = BLANK;
   20b38:	008000b4 	movhi	r2,2
   20b3c:	109c0604 	addi	r2,r2,28696
   20b40:	e0fffd17 	ldw	r3,-12(fp)
   20b44:	1806913a 	slli	r3,r3,4
   20b48:	10c7883a 	add	r3,r2,r3
   20b4c:	e0bffe17 	ldw	r2,-8(fp)
   20b50:	1885883a 	add	r2,r3,r2
   20b54:	00c00804 	movi	r3,32
   20b58:	10c00005 	stb	r3,0(r2)
				//press key 2 is unpressed
		while(readKey() == 1);

		lcdClear();
		for(int i = 0; i < LCD_ROWS; i++){
			for(int j = 0; j < LCD_COLS; j++){
   20b5c:	e0bffe17 	ldw	r2,-8(fp)
   20b60:	10800044 	addi	r2,r2,1
   20b64:	e0bffe15 	stw	r2,-8(fp)
   20b68:	e0bffe17 	ldw	r2,-8(fp)
   20b6c:	10800410 	cmplti	r2,r2,16
   20b70:	103ff11e 	bne	r2,zero,20b38 <__alt_data_end+0xfffe7b38>
				*/
				//press key 2 is unpressed
		while(readKey() == 1);

		lcdClear();
		for(int i = 0; i < LCD_ROWS; i++){
   20b74:	e0bffd17 	ldw	r2,-12(fp)
   20b78:	10800044 	addi	r2,r2,1
   20b7c:	e0bffd15 	stw	r2,-12(fp)
   20b80:	e0bffd17 	ldw	r2,-12(fp)
   20b84:	10800090 	cmplti	r2,r2,2
   20b88:	103fe91e 	bne	r2,zero,20b30 <__alt_data_end+0xfffe7b30>
			for(int j = 0; j < LCD_COLS; j++){
				game_matrix[i][j] = BLANK;
			}
		}
		uint8_t switch_data = readSwitch();
   20b8c:	00210480 	call	21048 <readSwitch>
   20b90:	e0bfff05 	stb	r2,-4(fp)
		draw_player(switch_data);
   20b94:	e0bfff03 	ldbu	r2,-4(fp)
   20b98:	1009883a 	mov	r4,r2
   20b9c:	002088c0 	call	2088c <draw_player>
	}
}
   20ba0:	0001883a 	nop
   20ba4:	e037883a 	mov	sp,fp
   20ba8:	dfc00117 	ldw	ra,4(sp)
   20bac:	df000017 	ldw	fp,0(sp)
   20bb0:	dec00204 	addi	sp,sp,8
   20bb4:	f800283a 	ret

00020bb8 <gameOver>:

void gameOver(void){
   20bb8:	defffe04 	addi	sp,sp,-8
   20bbc:	dfc00115 	stw	ra,4(sp)
   20bc0:	df000015 	stw	fp,0(sp)
   20bc4:	d839883a 	mov	fp,sp
	lcdClear();
   20bc8:	002152c0 	call	2152c <lcdClear>
	//g
	lcdSetAddr(0,4);
   20bcc:	01400104 	movi	r5,4
   20bd0:	0009883a 	mov	r4,zero
   20bd4:	002130c0 	call	2130c <lcdSetAddr>
	lcdWriteStr("GAMEOVER\0");
   20bd8:	010000b4 	movhi	r4,2
   20bdc:	211be104 	addi	r4,r4,28548
   20be0:	00213ec0 	call	213ec <lcdWriteStr>
	lcdWrite('E');
	lcdWrite('R');
	*/
	//key2 to restart
	//k
	lcdSetAddr(1,1);
   20be4:	01400044 	movi	r5,1
   20be8:	01000044 	movi	r4,1
   20bec:	002130c0 	call	2130c <lcdSetAddr>
	lcdWriteStr("KEY0 TO RESTART\0");
   20bf0:	010000b4 	movhi	r4,2
   20bf4:	211be404 	addi	r4,r4,28560
   20bf8:	00213ec0 	call	213ec <lcdWriteStr>
	lcdWrite('T');
	lcdWrite('A');
	lcdWrite('R');
	lcdWrite('T');
	*/
	while(1);
   20bfc:	003fff06 	br	20bfc <__alt_data_end+0xfffe7bfc>

00020c00 <deathAnimation>:
}


void deathAnimation(uint8_t row){
   20c00:	defffc04 	addi	sp,sp,-16
   20c04:	dfc00315 	stw	ra,12(sp)
   20c08:	df000215 	stw	fp,8(sp)
   20c0c:	df000204 	addi	fp,sp,8
   20c10:	2005883a 	mov	r2,r4
   20c14:	e0bfff05 	stb	r2,-4(fp)

	uint32_t delay = 100;
   20c18:	00801904 	movi	r2,100
   20c1c:	e0bffe15 	stw	r2,-8(fp)
	//small
	lcdSetAddr(row,1);
   20c20:	e0bfff03 	ldbu	r2,-4(fp)
   20c24:	01400044 	movi	r5,1
   20c28:	1009883a 	mov	r4,r2
   20c2c:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite(0xA1);
   20c30:	01002844 	movi	r4,161
   20c34:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20c38:	e13ffe17 	ldw	r4,-8(fp)
   20c3c:	0020a040 	call	20a04 <delayMs>
	//medium
	lcdSetAddr(row,1);
   20c40:	e0bfff03 	ldbu	r2,-4(fp)
   20c44:	01400044 	movi	r5,1
   20c48:	1009883a 	mov	r4,r2
   20c4c:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite(0x6F);
   20c50:	01001bc4 	movi	r4,111
   20c54:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20c58:	e13ffe17 	ldw	r4,-8(fp)
   20c5c:	0020a040 	call	20a04 <delayMs>
	//large
	lcdSetAddr(row,1);
   20c60:	e0bfff03 	ldbu	r2,-4(fp)
   20c64:	01400044 	movi	r5,1
   20c68:	1009883a 	mov	r4,r2
   20c6c:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite(0x4F);
   20c70:	010013c4 	movi	r4,79
   20c74:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20c78:	e13ffe17 	ldw	r4,-8(fp)
   20c7c:	0020a040 	call	20a04 <delayMs>
	//XL
	lcdSetAddr(row,1);
   20c80:	e0bfff03 	ldbu	r2,-4(fp)
   20c84:	01400044 	movi	r5,1
   20c88:	1009883a 	mov	r4,r2
   20c8c:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite('X');
   20c90:	01001604 	movi	r4,88
   20c94:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20c98:	e13ffe17 	ldw	r4,-8(fp)
   20c9c:	0020a040 	call	20a04 <delayMs>
	//large
	lcdSetAddr(row,1);
   20ca0:	e0bfff03 	ldbu	r2,-4(fp)
   20ca4:	01400044 	movi	r5,1
   20ca8:	1009883a 	mov	r4,r2
   20cac:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite(0x4F);
   20cb0:	010013c4 	movi	r4,79
   20cb4:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20cb8:	e13ffe17 	ldw	r4,-8(fp)
   20cbc:	0020a040 	call	20a04 <delayMs>
	//medium
	lcdSetAddr(row,1);
   20cc0:	e0bfff03 	ldbu	r2,-4(fp)
   20cc4:	01400044 	movi	r5,1
   20cc8:	1009883a 	mov	r4,r2
   20ccc:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite(0x6F);
   20cd0:	01001bc4 	movi	r4,111
   20cd4:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20cd8:	e13ffe17 	ldw	r4,-8(fp)
   20cdc:	0020a040 	call	20a04 <delayMs>
	//small
	lcdSetAddr(row,1);
   20ce0:	e0bfff03 	ldbu	r2,-4(fp)
   20ce4:	01400044 	movi	r5,1
   20ce8:	1009883a 	mov	r4,r2
   20cec:	002130c0 	call	2130c <lcdSetAddr>
	lcdWrite(0xA1);
   20cf0:	01002844 	movi	r4,161
   20cf4:	00214680 	call	21468 <lcdWrite>
	delayMs(delay);
   20cf8:	e13ffe17 	ldw	r4,-8(fp)
   20cfc:	0020a040 	call	20a04 <delayMs>
	//large
	lcdSetAddr(0,1);
	lcdWrite(0x4F);
	delayMs(1000);
	*/
}
   20d00:	0001883a 	nop
   20d04:	e037883a 	mov	sp,fp
   20d08:	dfc00117 	ldw	ra,4(sp)
   20d0c:	df000017 	ldw	fp,0(sp)
   20d10:	dec00204 	addi	sp,sp,8
   20d14:	f800283a 	ret

00020d18 <updateLCD>:


void updateLCD(void){
   20d18:	defff904 	addi	sp,sp,-28
   20d1c:	dfc00615 	stw	ra,24(sp)
   20d20:	df000515 	stw	fp,20(sp)
   20d24:	df000504 	addi	fp,sp,20
	static uint8_t prev_matrix[LCD_ROWS][LCD_COLS] = {
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK}
	};

	uint8_t newPlayerRow  = (game_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
   20d28:	008000b4 	movhi	r2,2
   20d2c:	109c0604 	addi	r2,r2,28696
   20d30:	10800043 	ldbu	r2,1(r2)
   20d34:	10803fcc 	andi	r2,r2,255
   20d38:	10803d98 	cmpnei	r2,r2,246
   20d3c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t prevPlayerRow = (prev_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
   20d40:	008000b4 	movhi	r2,2
   20d44:	109c0e04 	addi	r2,r2,28728
   20d48:	10800043 	ldbu	r2,1(r2)
   20d4c:	10803fcc 	andi	r2,r2,255
   20d50:	10803d98 	cmpnei	r2,r2,246
   20d54:	e0bfff45 	stb	r2,-3(fp)

	// Update the player first (this will look smoother)
	if(newPlayerRow != prevPlayerRow){
   20d58:	e0ffff03 	ldbu	r3,-4(fp)
   20d5c:	e0bfff43 	ldbu	r2,-3(fp)
   20d60:	18800c26 	beq	r3,r2,20d94 <updateLCD+0x7c>
		// Write the new player to the LCD
		lcdSetAddr(newPlayerRow, PLAYER_COLUMN);
   20d64:	e0bfff03 	ldbu	r2,-4(fp)
   20d68:	01400044 	movi	r5,1
   20d6c:	1009883a 	mov	r4,r2
   20d70:	002130c0 	call	2130c <lcdSetAddr>
		lcdWrite(PLAYER);
   20d74:	01003d84 	movi	r4,246
   20d78:	00214680 	call	21468 <lcdWrite>

		// Clear previous player's image
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
   20d7c:	e0bfff43 	ldbu	r2,-3(fp)
   20d80:	01400044 	movi	r5,1
   20d84:	1009883a 	mov	r4,r2
   20d88:	002130c0 	call	2130c <lcdSetAddr>
		lcdWrite(BLANK);
   20d8c:	01000804 	movi	r4,32
   20d90:	00214680 	call	21468 <lcdWrite>
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
   20d94:	e03ffb15 	stw	zero,-20(fp)
   20d98:	00003f06 	br	20e98 <updateLCD+0x180>
		for(int j = 0; j < LCD_COLS; j++){
   20d9c:	e03ffc15 	stw	zero,-16(fp)
   20da0:	00003706 	br	20e80 <updateLCD+0x168>
			uint8_t prev = prev_matrix[i][j];
   20da4:	008000b4 	movhi	r2,2
   20da8:	109c0e04 	addi	r2,r2,28728
   20dac:	e0fffb17 	ldw	r3,-20(fp)
   20db0:	1806913a 	slli	r3,r3,4
   20db4:	10c7883a 	add	r3,r2,r3
   20db8:	e0bffc17 	ldw	r2,-16(fp)
   20dbc:	1885883a 	add	r2,r3,r2
   20dc0:	10800003 	ldbu	r2,0(r2)
   20dc4:	e0bfff85 	stb	r2,-2(fp)
			uint8_t new = game_matrix[i][j];
   20dc8:	008000b4 	movhi	r2,2
   20dcc:	109c0604 	addi	r2,r2,28696
   20dd0:	e0fffb17 	ldw	r3,-20(fp)
   20dd4:	1806913a 	slli	r3,r3,4
   20dd8:	10c7883a 	add	r3,r2,r3
   20ddc:	e0bffc17 	ldw	r2,-16(fp)
   20de0:	1885883a 	add	r2,r3,r2
   20de4:	10800003 	ldbu	r2,0(r2)
   20de8:	e0bfffc5 	stb	r2,-1(fp)

			// Player is already updated
			if(new == PLAYER){
   20dec:	e0bfffc3 	ldbu	r2,-1(fp)
   20df0:	10803d98 	cmpnei	r2,r2,246
   20df4:	10001e26 	beq	r2,zero,20e70 <updateLCD+0x158>
				continue;
			}

			// If there is an asteroid
			if(new != BLANK){
   20df8:	e0bfffc3 	ldbu	r2,-1(fp)
   20dfc:	10800820 	cmpeqi	r2,r2,32
   20e00:	10000b1e 	bne	r2,zero,20e30 <updateLCD+0x118>
				// Draw asteroid
				lcdSetAddr(i, j);
   20e04:	e0bffb17 	ldw	r2,-20(fp)
   20e08:	10c03fcc 	andi	r3,r2,255
   20e0c:	e0bffc17 	ldw	r2,-16(fp)
   20e10:	10803fcc 	andi	r2,r2,255
   20e14:	100b883a 	mov	r5,r2
   20e18:	1809883a 	mov	r4,r3
   20e1c:	002130c0 	call	2130c <lcdSetAddr>
				lcdWrite(new);
   20e20:	e0bfffc3 	ldbu	r2,-1(fp)
   20e24:	1009883a 	mov	r4,r2
   20e28:	00214680 	call	21468 <lcdWrite>
   20e2c:	00001106 	br	20e74 <updateLCD+0x15c>
			} else {
				// Check for old asteroids
				if(prev != BLANK && prev != PLAYER){
   20e30:	e0bfff83 	ldbu	r2,-2(fp)
   20e34:	10800820 	cmpeqi	r2,r2,32
   20e38:	10000e1e 	bne	r2,zero,20e74 <updateLCD+0x15c>
   20e3c:	e0bfff83 	ldbu	r2,-2(fp)
   20e40:	10803da0 	cmpeqi	r2,r2,246
   20e44:	10000b1e 	bne	r2,zero,20e74 <updateLCD+0x15c>
					lcdSetAddr(i, j);
   20e48:	e0bffb17 	ldw	r2,-20(fp)
   20e4c:	10c03fcc 	andi	r3,r2,255
   20e50:	e0bffc17 	ldw	r2,-16(fp)
   20e54:	10803fcc 	andi	r2,r2,255
   20e58:	100b883a 	mov	r5,r2
   20e5c:	1809883a 	mov	r4,r3
   20e60:	002130c0 	call	2130c <lcdSetAddr>
					lcdWrite(BLANK);
   20e64:	01000804 	movi	r4,32
   20e68:	00214680 	call	21468 <lcdWrite>
   20e6c:	00000106 	br	20e74 <updateLCD+0x15c>
			uint8_t prev = prev_matrix[i][j];
			uint8_t new = game_matrix[i][j];

			// Player is already updated
			if(new == PLAYER){
				continue;
   20e70:	0001883a 	nop
		lcdWrite(BLANK);
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
   20e74:	e0bffc17 	ldw	r2,-16(fp)
   20e78:	10800044 	addi	r2,r2,1
   20e7c:	e0bffc15 	stw	r2,-16(fp)
   20e80:	e0bffc17 	ldw	r2,-16(fp)
   20e84:	10800410 	cmplti	r2,r2,16
   20e88:	103fc61e 	bne	r2,zero,20da4 <__alt_data_end+0xfffe7da4>
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
		lcdWrite(BLANK);
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
   20e8c:	e0bffb17 	ldw	r2,-20(fp)
   20e90:	10800044 	addi	r2,r2,1
   20e94:	e0bffb15 	stw	r2,-20(fp)
   20e98:	e0bffb17 	ldw	r2,-20(fp)
   20e9c:	10800090 	cmplti	r2,r2,2
   20ea0:	103fbe1e 	bne	r2,zero,20d9c <__alt_data_end+0xfffe7d9c>
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
   20ea4:	e03ffd15 	stw	zero,-12(fp)
   20ea8:	00001b06 	br	20f18 <updateLCD+0x200>
		for(int j = 0; j < LCD_COLS; j++){
   20eac:	e03ffe15 	stw	zero,-8(fp)
   20eb0:	00001306 	br	20f00 <updateLCD+0x1e8>
			prev_matrix[i][j] = game_matrix[i][j];
   20eb4:	008000b4 	movhi	r2,2
   20eb8:	109c0604 	addi	r2,r2,28696
   20ebc:	e0fffd17 	ldw	r3,-12(fp)
   20ec0:	1806913a 	slli	r3,r3,4
   20ec4:	10c7883a 	add	r3,r2,r3
   20ec8:	e0bffe17 	ldw	r2,-8(fp)
   20ecc:	1885883a 	add	r2,r3,r2
   20ed0:	10c00003 	ldbu	r3,0(r2)
   20ed4:	008000b4 	movhi	r2,2
   20ed8:	109c0e04 	addi	r2,r2,28728
   20edc:	e13ffd17 	ldw	r4,-12(fp)
   20ee0:	2008913a 	slli	r4,r4,4
   20ee4:	1109883a 	add	r4,r2,r4
   20ee8:	e0bffe17 	ldw	r2,-8(fp)
   20eec:	2085883a 	add	r2,r4,r2
   20ef0:	10c00005 	stb	r3,0(r2)
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
   20ef4:	e0bffe17 	ldw	r2,-8(fp)
   20ef8:	10800044 	addi	r2,r2,1
   20efc:	e0bffe15 	stw	r2,-8(fp)
   20f00:	e0bffe17 	ldw	r2,-8(fp)
   20f04:	10800410 	cmplti	r2,r2,16
   20f08:	103fea1e 	bne	r2,zero,20eb4 <__alt_data_end+0xfffe7eb4>
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
   20f0c:	e0bffd17 	ldw	r2,-12(fp)
   20f10:	10800044 	addi	r2,r2,1
   20f14:	e0bffd15 	stw	r2,-12(fp)
   20f18:	e0bffd17 	ldw	r2,-12(fp)
   20f1c:	10800090 	cmplti	r2,r2,2
   20f20:	103fe21e 	bne	r2,zero,20eac <__alt_data_end+0xfffe7eac>
		for(int j = 0; j < LCD_COLS; j++){
			prev_matrix[i][j] = game_matrix[i][j];
		}
	}
}
   20f24:	0001883a 	nop
   20f28:	e037883a 	mov	sp,fp
   20f2c:	dfc00117 	ldw	ra,4(sp)
   20f30:	df000017 	ldw	fp,0(sp)
   20f34:	dec00204 	addi	sp,sp,8
   20f38:	f800283a 	ret

00020f3c <clearSema>:

uint8_t lcdSema = 1;
uint8_t gameSema = 1;


void clearSema(uint8_t timerNum){
   20f3c:	defffe04 	addi	sp,sp,-8
   20f40:	df000115 	stw	fp,4(sp)
   20f44:	df000104 	addi	fp,sp,4
   20f48:	2005883a 	mov	r2,r4
   20f4c:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20f50:	e0bfff03 	ldbu	r2,-4(fp)
   20f54:	1000021e 	bne	r2,zero,20f60 <clearSema+0x24>
		lcdSema = 0;
   20f58:	d0200205 	stb	zero,-32760(gp)
	else if(timerNum == GAME_TIMER)
		gameSema = 0;
}
   20f5c:	00000406 	br	20f70 <clearSema+0x34>


void clearSema(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		lcdSema = 0;
	else if(timerNum == GAME_TIMER)
   20f60:	e0bfff03 	ldbu	r2,-4(fp)
   20f64:	10800058 	cmpnei	r2,r2,1
   20f68:	1000011e 	bne	r2,zero,20f70 <clearSema+0x34>
		gameSema = 0;
   20f6c:	d0200245 	stb	zero,-32759(gp)
}
   20f70:	0001883a 	nop
   20f74:	e037883a 	mov	sp,fp
   20f78:	df000017 	ldw	fp,0(sp)
   20f7c:	dec00104 	addi	sp,sp,4
   20f80:	f800283a 	ret

00020f84 <getSema>:


uint8_t getSema(uint8_t timerNum){
   20f84:	defffe04 	addi	sp,sp,-8
   20f88:	df000115 	stw	fp,4(sp)
   20f8c:	df000104 	addi	fp,sp,4
   20f90:	2005883a 	mov	r2,r4
   20f94:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20f98:	e0bfff03 	ldbu	r2,-4(fp)
   20f9c:	1000021e 	bne	r2,zero,20fa8 <getSema+0x24>
		return lcdSema;
   20fa0:	d0a00203 	ldbu	r2,-32760(gp)
   20fa4:	00000606 	br	20fc0 <getSema+0x3c>
	else if(timerNum == GAME_TIMER)
   20fa8:	e0bfff03 	ldbu	r2,-4(fp)
   20fac:	10800058 	cmpnei	r2,r2,1
   20fb0:	1000021e 	bne	r2,zero,20fbc <getSema+0x38>
		return gameSema;
   20fb4:	d0a00243 	ldbu	r2,-32759(gp)
   20fb8:	00000106 	br	20fc0 <getSema+0x3c>
	else
		return 0;
   20fbc:	0005883a 	mov	r2,zero
}
   20fc0:	e037883a 	mov	sp,fp
   20fc4:	df000017 	ldw	fp,0(sp)
   20fc8:	dec00104 	addi	sp,sp,4
   20fcc:	f800283a 	ret

00020fd0 <handleGameTimer>:


void handleGameTimer(void* isr_context){
   20fd0:	defffe04 	addi	sp,sp,-8
   20fd4:	df000115 	stw	fp,4(sp)
   20fd8:	df000104 	addi	fp,sp,4
   20fdc:	e13fff15 	stw	r4,-4(fp)
	//alt_putstr("Hello from Timer_Game\n");
	gameSema = 1;
   20fe0:	00800044 	movi	r2,1
   20fe4:	d0a00245 	stb	r2,-32759(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_GAME_BASE, 0);
   20fe8:	0007883a 	mov	r3,zero
   20fec:	00800134 	movhi	r2,4
   20ff0:	10840804 	addi	r2,r2,4128
   20ff4:	10c00035 	stwio	r3,0(r2)
}
   20ff8:	0001883a 	nop
   20ffc:	e037883a 	mov	sp,fp
   21000:	df000017 	ldw	fp,0(sp)
   21004:	dec00104 	addi	sp,sp,4
   21008:	f800283a 	ret

0002100c <handleLCDTimer>:


void handleLCDTimer(void* context){
   2100c:	defffe04 	addi	sp,sp,-8
   21010:	df000115 	stw	fp,4(sp)
   21014:	df000104 	addi	fp,sp,4
   21018:	e13fff15 	stw	r4,-4(fp)
	lcdSema = 1;
   2101c:	00800044 	movi	r2,1
   21020:	d0a00205 	stb	r2,-32760(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_LCD_BASE, 0);
   21024:	0007883a 	mov	r3,zero
   21028:	00800134 	movhi	r2,4
   2102c:	10840004 	addi	r2,r2,4096
   21030:	10c00035 	stwio	r3,0(r2)
}
   21034:	0001883a 	nop
   21038:	e037883a 	mov	sp,fp
   2103c:	df000017 	ldw	fp,0(sp)
   21040:	dec00104 	addi	sp,sp,4
   21044:	f800283a 	ret

00021048 <readSwitch>:


uint8_t readSwitch(void){
   21048:	deffff04 	addi	sp,sp,-4
   2104c:	df000015 	stw	fp,0(sp)
   21050:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   21054:	00800134 	movhi	r2,4
   21058:	10842004 	addi	r2,r2,4224
   2105c:	10800037 	ldwio	r2,0(r2)
}
   21060:	e037883a 	mov	sp,fp
   21064:	df000017 	ldw	fp,0(sp)
   21068:	dec00104 	addi	sp,sp,4
   2106c:	f800283a 	ret

00021070 <readKey>:

uint8_t readKey(void){
   21070:	deffff04 	addi	sp,sp,-4
   21074:	df000015 	stw	fp,0(sp)
   21078:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
   2107c:	00800134 	movhi	r2,4
   21080:	10841804 	addi	r2,r2,4192
   21084:	10800037 	ldwio	r2,0(r2)
}
   21088:	e037883a 	mov	sp,fp
   2108c:	df000017 	ldw	fp,0(sp)
   21090:	dec00104 	addi	sp,sp,4
   21094:	f800283a 	ret

00021098 <setLEDs>:


void setLEDs(uint8_t led_pattern){
   21098:	defffe04 	addi	sp,sp,-8
   2109c:	df000115 	stw	fp,4(sp)
   210a0:	df000104 	addi	fp,sp,4
   210a4:	2005883a 	mov	r2,r4
   210a8:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (led_pattern&0x0F));
   210ac:	e0bfff03 	ldbu	r2,-4(fp)
   210b0:	10c003cc 	andi	r3,r2,15
   210b4:	00800134 	movhi	r2,4
   210b8:	10841c04 	addi	r2,r2,4208
   210bc:	10c00035 	stwio	r3,0(r2)
}
   210c0:	0001883a 	nop
   210c4:	e037883a 	mov	sp,fp
   210c8:	df000017 	ldw	fp,0(sp)
   210cc:	dec00104 	addi	sp,sp,4
   210d0:	f800283a 	ret

000210d4 <setSevenSeg>:


void setSevenSeg(uint32_t num){
   210d4:	defff804 	addi	sp,sp,-32
   210d8:	dfc00715 	stw	ra,28(sp)
   210dc:	df000615 	stw	fp,24(sp)
   210e0:	df000604 	addi	fp,sp,24
   210e4:	e13fff15 	stw	r4,-4(fp)
	int ones, tens, hundreds, thousands;

	ones = num % 10;
   210e8:	e0bfff17 	ldw	r2,-4(fp)
   210ec:	01400284 	movi	r5,10
   210f0:	1009883a 	mov	r4,r2
   210f4:	00219140 	call	21914 <__umodsi3>
   210f8:	e0bffb15 	stw	r2,-20(fp)
	tens = (num/10) % 10;
   210fc:	e0bfff17 	ldw	r2,-4(fp)
   21100:	01400284 	movi	r5,10
   21104:	1009883a 	mov	r4,r2
   21108:	00218b00 	call	218b0 <__udivsi3>
   2110c:	01400284 	movi	r5,10
   21110:	1009883a 	mov	r4,r2
   21114:	00219140 	call	21914 <__umodsi3>
   21118:	e0bffc15 	stw	r2,-16(fp)
	hundreds = (num/100) % 10;
   2111c:	e0bfff17 	ldw	r2,-4(fp)
   21120:	01401904 	movi	r5,100
   21124:	1009883a 	mov	r4,r2
   21128:	00218b00 	call	218b0 <__udivsi3>
   2112c:	01400284 	movi	r5,10
   21130:	1009883a 	mov	r4,r2
   21134:	00219140 	call	21914 <__umodsi3>
   21138:	e0bffd15 	stw	r2,-12(fp)
	thousands = (num/1000) % 10;
   2113c:	e0bfff17 	ldw	r2,-4(fp)
   21140:	0140fa04 	movi	r5,1000
   21144:	1009883a 	mov	r4,r2
   21148:	00218b00 	call	218b0 <__udivsi3>
   2114c:	01400284 	movi	r5,10
   21150:	1009883a 	mov	r4,r2
   21154:	00219140 	call	21914 <__umodsi3>
   21158:	e0bffe15 	stw	r2,-8(fp)

	uint32_t hex_data = 0xFFFFFFFF;
   2115c:	00bfffc4 	movi	r2,-1
   21160:	e0bffa15 	stw	r2,-24(fp)
	if(num > 999)
   21164:	e0bfff17 	ldw	r2,-4(fp)
   21168:	1080fa30 	cmpltui	r2,r2,1000
   2116c:	10000a1e 	bne	r2,zero,21198 <setSevenSeg+0xc4>
		hex_data &= HexArray[thousands];
   21170:	008000b4 	movhi	r2,2
   21174:	109bf004 	addi	r2,r2,28608
   21178:	e0fffe17 	ldw	r3,-8(fp)
   2117c:	18c7883a 	add	r3,r3,r3
   21180:	18c7883a 	add	r3,r3,r3
   21184:	10c5883a 	add	r2,r2,r3
   21188:	10800017 	ldw	r2,0(r2)
   2118c:	e0fffa17 	ldw	r3,-24(fp)
   21190:	1884703a 	and	r2,r3,r2
   21194:	e0bffa15 	stw	r2,-24(fp)
	if(num > 99)
   21198:	e0bfff17 	ldw	r2,-4(fp)
   2119c:	10801930 	cmpltui	r2,r2,100
   211a0:	10000c1e 	bne	r2,zero,211d4 <setSevenSeg+0x100>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[hundreds]);
   211a4:	e0bffa17 	ldw	r2,-24(fp)
   211a8:	100491fa 	slli	r2,r2,7
   211ac:	11001fd4 	ori	r4,r2,127
   211b0:	008000b4 	movhi	r2,2
   211b4:	109bf004 	addi	r2,r2,28608
   211b8:	e0fffd17 	ldw	r3,-12(fp)
   211bc:	18c7883a 	add	r3,r3,r3
   211c0:	18c7883a 	add	r3,r3,r3
   211c4:	10c5883a 	add	r2,r2,r3
   211c8:	10800017 	ldw	r2,0(r2)
   211cc:	2084703a 	and	r2,r4,r2
   211d0:	e0bffa15 	stw	r2,-24(fp)
	if(num > 9)
   211d4:	e0bfff17 	ldw	r2,-4(fp)
   211d8:	108002b0 	cmpltui	r2,r2,10
   211dc:	10000c1e 	bne	r2,zero,21210 <setSevenSeg+0x13c>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[tens]);
   211e0:	e0bffa17 	ldw	r2,-24(fp)
   211e4:	100491fa 	slli	r2,r2,7
   211e8:	11001fd4 	ori	r4,r2,127
   211ec:	008000b4 	movhi	r2,2
   211f0:	109bf004 	addi	r2,r2,28608
   211f4:	e0fffc17 	ldw	r3,-16(fp)
   211f8:	18c7883a 	add	r3,r3,r3
   211fc:	18c7883a 	add	r3,r3,r3
   21200:	10c5883a 	add	r2,r2,r3
   21204:	10800017 	ldw	r2,0(r2)
   21208:	2084703a 	and	r2,r4,r2
   2120c:	e0bffa15 	stw	r2,-24(fp)

	hex_data = (((hex_data << 7) | 0x7F) & HexArray[ones]);
   21210:	e0bffa17 	ldw	r2,-24(fp)
   21214:	100491fa 	slli	r2,r2,7
   21218:	11001fd4 	ori	r4,r2,127
   2121c:	008000b4 	movhi	r2,2
   21220:	109bf004 	addi	r2,r2,28608
   21224:	e0fffb17 	ldw	r3,-20(fp)
   21228:	18c7883a 	add	r3,r3,r3
   2122c:	18c7883a 	add	r3,r3,r3
   21230:	10c5883a 	add	r2,r2,r3
   21234:	10800017 	ldw	r2,0(r2)
   21238:	2084703a 	and	r2,r4,r2
   2123c:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, hex_data);
   21240:	e0fffa17 	ldw	r3,-24(fp)
   21244:	00800134 	movhi	r2,4
   21248:	10841404 	addi	r2,r2,4176
   2124c:	10c00035 	stwio	r3,0(r2)
}
   21250:	0001883a 	nop
   21254:	e037883a 	mov	sp,fp
   21258:	dfc00117 	ldw	ra,4(sp)
   2125c:	df000017 	ldw	fp,0(sp)
   21260:	dec00204 	addi	sp,sp,8
   21264:	f800283a 	ret

00021268 <lcdInit>:


// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
   21268:	defffd04 	addi	sp,sp,-12
   2126c:	dfc00215 	stw	ra,8(sp)
   21270:	df000115 	stw	fp,4(sp)
   21274:	df000104 	addi	fp,sp,4
	setTimer(LCD_TIMER,5000);
   21278:	0144e204 	movi	r5,5000
   2127c:	0009883a 	mov	r4,zero
   21280:	00216d80 	call	216d8 <setTimer>
	startTimer(LCD_TIMER);
   21284:	0009883a 	mov	r4,zero
   21288:	00216180 	call	21618 <startTimer>

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   2128c:	e03fff15 	stw	zero,-4(fp)
   21290:	00001306 	br	212e0 <lcdInit+0x78>
		while(lcdSema == 0){};
   21294:	0001883a 	nop
   21298:	d0a00203 	ldbu	r2,-32760(gp)
   2129c:	10803fcc 	andi	r2,r2,255
   212a0:	103ffd26 	beq	r2,zero,21298 <__alt_data_end+0xfffe8298>
		lcdSema = 0;
   212a4:	d0200205 	stb	zero,-32760(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
   212a8:	008000b4 	movhi	r2,2
   212ac:	109be904 	addi	r2,r2,28580
   212b0:	e0ffff17 	ldw	r3,-4(fp)
   212b4:	18c7883a 	add	r3,r3,r3
   212b8:	10c5883a 	add	r2,r2,r3
   212bc:	1080000b 	ldhu	r2,0(r2)
   212c0:	10bfffcc 	andi	r2,r2,65535
   212c4:	10c3ffcc 	andi	r3,r2,4095
   212c8:	00800134 	movhi	r2,4
   212cc:	10841004 	addi	r2,r2,4160
   212d0:	10c00035 	stwio	r3,0(r2)
// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
	setTimer(LCD_TIMER,5000);
	startTimer(LCD_TIMER);

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   212d4:	e0bfff17 	ldw	r2,-4(fp)
   212d8:	10800044 	addi	r2,r2,1
   212dc:	e0bfff15 	stw	r2,-4(fp)
   212e0:	e0bfff17 	ldw	r2,-4(fp)
   212e4:	10800390 	cmplti	r2,r2,14
   212e8:	103fea1e 	bne	r2,zero,21294 <__alt_data_end+0xfffe8294>
		while(lcdSema == 0){};
		lcdSema = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
	}

	stopTimer(LCD_TIMER);
   212ec:	0009883a 	mov	r4,zero
   212f0:	00216780 	call	21678 <stopTimer>
}
   212f4:	0001883a 	nop
   212f8:	e037883a 	mov	sp,fp
   212fc:	dfc00117 	ldw	ra,4(sp)
   21300:	df000017 	ldw	fp,0(sp)
   21304:	dec00204 	addi	sp,sp,8
   21308:	f800283a 	ret

0002130c <lcdSetAddr>:


void lcdSetAddr(uint8_t row, uint8_t col){
   2130c:	defffb04 	addi	sp,sp,-20
   21310:	dfc00415 	stw	ra,16(sp)
   21314:	df000315 	stw	fp,12(sp)
   21318:	df000304 	addi	fp,sp,12
   2131c:	2007883a 	mov	r3,r4
   21320:	2805883a 	mov	r2,r5
   21324:	e0fffe05 	stb	r3,-8(fp)
   21328:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   2132c:	e03ffd0d 	sth	zero,-12(fp)
	lcdData = row * 0x40 + col;
   21330:	e0bffe03 	ldbu	r2,-8(fp)
   21334:	100491ba 	slli	r2,r2,6
   21338:	1007883a 	mov	r3,r2
   2133c:	e0bfff03 	ldbu	r2,-4(fp)
   21340:	1885883a 	add	r2,r3,r2
   21344:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x80;
   21348:	e0bffd0b 	ldhu	r2,-12(fp)
   2134c:	10802014 	ori	r2,r2,128
   21350:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x9 << 8;
   21354:	e0bffd0b 	ldhu	r2,-12(fp)
   21358:	10824014 	ori	r2,r2,2304
   2135c:	e0bffd0d 	sth	r2,-12(fp)

	lcdSema = 0;
   21360:	d0200205 	stb	zero,-32760(gp)

	setTimer(LCD_TIMER, 1000);
   21364:	0140fa04 	movi	r5,1000
   21368:	0009883a 	mov	r4,zero
   2136c:	00216d80 	call	216d8 <setTimer>
	startTimer(LCD_TIMER);
   21370:	0009883a 	mov	r4,zero
   21374:	00216180 	call	21618 <startTimer>

	while(lcdSema == 0){};
   21378:	0001883a 	nop
   2137c:	d0a00203 	ldbu	r2,-32760(gp)
   21380:	10803fcc 	andi	r2,r2,255
   21384:	103ffd26 	beq	r2,zero,2137c <__alt_data_end+0xfffe837c>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   21388:	e0fffd0b 	ldhu	r3,-12(fp)
   2138c:	00800134 	movhi	r2,4
   21390:	10841004 	addi	r2,r2,4160
   21394:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   21398:	e0fffd0b 	ldhu	r3,-12(fp)
   2139c:	00bdffc4 	movi	r2,-2049
   213a0:	1884703a 	and	r2,r3,r2
   213a4:	e0bffd0d 	sth	r2,-12(fp)
	lcdSema = 0;
   213a8:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   213ac:	0001883a 	nop
   213b0:	d0a00203 	ldbu	r2,-32760(gp)
   213b4:	10803fcc 	andi	r2,r2,255
   213b8:	103ffd26 	beq	r2,zero,213b0 <__alt_data_end+0xfffe83b0>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   213bc:	e0fffd0b 	ldhu	r3,-12(fp)
   213c0:	00800134 	movhi	r2,4
   213c4:	10841004 	addi	r2,r2,4160
   213c8:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   213cc:	0009883a 	mov	r4,zero
   213d0:	00216780 	call	21678 <stopTimer>
}
   213d4:	0001883a 	nop
   213d8:	e037883a 	mov	sp,fp
   213dc:	dfc00117 	ldw	ra,4(sp)
   213e0:	df000017 	ldw	fp,0(sp)
   213e4:	dec00204 	addi	sp,sp,8
   213e8:	f800283a 	ret

000213ec <lcdWriteStr>:


void lcdWriteStr(char str[]){
   213ec:	defffc04 	addi	sp,sp,-16
   213f0:	dfc00315 	stw	ra,12(sp)
   213f4:	df000215 	stw	fp,8(sp)
   213f8:	df000204 	addi	fp,sp,8
   213fc:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
   21400:	e03ffe15 	stw	zero,-8(fp)
	while(str[i] != '\0'){
   21404:	00000a06 	br	21430 <lcdWriteStr+0x44>
		lcdWrite((uint8_t)str[i++]);
   21408:	e0bffe17 	ldw	r2,-8(fp)
   2140c:	10c00044 	addi	r3,r2,1
   21410:	e0fffe15 	stw	r3,-8(fp)
   21414:	1007883a 	mov	r3,r2
   21418:	e0bfff17 	ldw	r2,-4(fp)
   2141c:	10c5883a 	add	r2,r2,r3
   21420:	10800003 	ldbu	r2,0(r2)
   21424:	10803fcc 	andi	r2,r2,255
   21428:	1009883a 	mov	r4,r2
   2142c:	00214680 	call	21468 <lcdWrite>
}


void lcdWriteStr(char str[]){
	int i = 0;
	while(str[i] != '\0'){
   21430:	e0bffe17 	ldw	r2,-8(fp)
   21434:	e0ffff17 	ldw	r3,-4(fp)
   21438:	1885883a 	add	r2,r3,r2
   2143c:	10800003 	ldbu	r2,0(r2)
   21440:	10803fcc 	andi	r2,r2,255
   21444:	1080201c 	xori	r2,r2,128
   21448:	10bfe004 	addi	r2,r2,-128
   2144c:	103fee1e 	bne	r2,zero,21408 <__alt_data_end+0xfffe8408>
		lcdWrite((uint8_t)str[i++]);
	}
}
   21450:	0001883a 	nop
   21454:	e037883a 	mov	sp,fp
   21458:	dfc00117 	ldw	ra,4(sp)
   2145c:	df000017 	ldw	fp,0(sp)
   21460:	dec00204 	addi	sp,sp,8
   21464:	f800283a 	ret

00021468 <lcdWrite>:


void lcdWrite(uint8_t data){
   21468:	defffc04 	addi	sp,sp,-16
   2146c:	dfc00315 	stw	ra,12(sp)
   21470:	df000215 	stw	fp,8(sp)
   21474:	df000204 	addi	fp,sp,8
   21478:	2005883a 	mov	r2,r4
   2147c:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   21480:	e03ffe0d 	sth	zero,-8(fp)
	lcdData |= data;
   21484:	e0ffff03 	ldbu	r3,-4(fp)
   21488:	e0bffe0b 	ldhu	r2,-8(fp)
   2148c:	1884b03a 	or	r2,r3,r2
   21490:	e0bffe0d 	sth	r2,-8(fp)
	lcdData |= 0xB << 8;
   21494:	e0bffe0b 	ldhu	r2,-8(fp)
   21498:	1082c014 	ori	r2,r2,2816
   2149c:	e0bffe0d 	sth	r2,-8(fp)

	lcdSema = 0;
   214a0:	d0200205 	stb	zero,-32760(gp)

	setTimer(LCD_TIMER, 1000);
   214a4:	0140fa04 	movi	r5,1000
   214a8:	0009883a 	mov	r4,zero
   214ac:	00216d80 	call	216d8 <setTimer>
	startTimer(LCD_TIMER);
   214b0:	0009883a 	mov	r4,zero
   214b4:	00216180 	call	21618 <startTimer>
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	while(lcdSema == 0){};
   214b8:	0001883a 	nop
   214bc:	d0a00203 	ldbu	r2,-32760(gp)
   214c0:	10803fcc 	andi	r2,r2,255
   214c4:	103ffd26 	beq	r2,zero,214bc <__alt_data_end+0xfffe84bc>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   214c8:	e0fffe0b 	ldhu	r3,-8(fp)
   214cc:	00800134 	movhi	r2,4
   214d0:	10841004 	addi	r2,r2,4160
   214d4:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   214d8:	e0fffe0b 	ldhu	r3,-8(fp)
   214dc:	00bdffc4 	movi	r2,-2049
   214e0:	1884703a 	and	r2,r3,r2
   214e4:	e0bffe0d 	sth	r2,-8(fp)
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	lcdSema = 0;
   214e8:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   214ec:	0001883a 	nop
   214f0:	d0a00203 	ldbu	r2,-32760(gp)
   214f4:	10803fcc 	andi	r2,r2,255
   214f8:	103ffd26 	beq	r2,zero,214f0 <__alt_data_end+0xfffe84f0>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   214fc:	e0fffe0b 	ldhu	r3,-8(fp)
   21500:	00800134 	movhi	r2,4
   21504:	10841004 	addi	r2,r2,4160
   21508:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   2150c:	0009883a 	mov	r4,zero
   21510:	00216780 	call	21678 <stopTimer>
}
   21514:	0001883a 	nop
   21518:	e037883a 	mov	sp,fp
   2151c:	dfc00117 	ldw	ra,4(sp)
   21520:	df000017 	ldw	fp,0(sp)
   21524:	dec00204 	addi	sp,sp,8
   21528:	f800283a 	ret

0002152c <lcdClear>:


void lcdClear(){
   2152c:	defffe04 	addi	sp,sp,-8
   21530:	dfc00115 	stw	ra,4(sp)
   21534:	df000015 	stw	fp,0(sp)
   21538:	d839883a 	mov	fp,sp
	lcdSema = 0;
   2153c:	d0200205 	stb	zero,-32760(gp)

	setTimer(LCD_TIMER, 1520);
   21540:	01417c04 	movi	r5,1520
   21544:	0009883a 	mov	r4,zero
   21548:	00216d80 	call	216d8 <setTimer>
	startTimer(LCD_TIMER);
   2154c:	0009883a 	mov	r4,zero
   21550:	00216180 	call	21618 <startTimer>

	while(lcdSema == 0){};
   21554:	0001883a 	nop
   21558:	d0a00203 	ldbu	r2,-32760(gp)
   2155c:	10803fcc 	andi	r2,r2,255
   21560:	103ffd26 	beq	r2,zero,21558 <__alt_data_end+0xfffe8558>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x801);
   21564:	00c20044 	movi	r3,2049
   21568:	00800134 	movhi	r2,4
   2156c:	10841004 	addi	r2,r2,4160
   21570:	10c00035 	stwio	r3,0(r2)

	lcdSema = 0;
   21574:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21578:	0001883a 	nop
   2157c:	d0a00203 	ldbu	r2,-32760(gp)
   21580:	10803fcc 	andi	r2,r2,255
   21584:	103ffd26 	beq	r2,zero,2157c <__alt_data_end+0xfffe857c>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x001);
   21588:	00c00044 	movi	r3,1
   2158c:	00800134 	movhi	r2,4
   21590:	10841004 	addi	r2,r2,4160
   21594:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   21598:	0009883a 	mov	r4,zero
   2159c:	00216780 	call	21678 <stopTimer>
}
   215a0:	0001883a 	nop
   215a4:	e037883a 	mov	sp,fp
   215a8:	dfc00117 	ldw	ra,4(sp)
   215ac:	df000017 	ldw	fp,0(sp)
   215b0:	dec00204 	addi	sp,sp,8
   215b4:	f800283a 	ret

000215b8 <initTimers>:


void initTimers(void){
   215b8:	defffd04 	addi	sp,sp,-12
   215bc:	dfc00215 	stw	ra,8(sp)
   215c0:	df000115 	stw	fp,4(sp)
   215c4:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(TIMER_GAME_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_GAME_IRQ, &handleGameTimer, NULL, NULL);
   215c8:	d8000015 	stw	zero,0(sp)
   215cc:	000f883a 	mov	r7,zero
   215d0:	018000b4 	movhi	r6,2
   215d4:	3183f404 	addi	r6,r6,4048
   215d8:	01400044 	movi	r5,1
   215dc:	0009883a 	mov	r4,zero
   215e0:	00227d80 	call	227d8 <alt_ic_isr_register>
	alt_ic_isr_register(TIMER_LCD_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_LCD_IRQ, &handleLCDTimer, NULL, NULL);
   215e4:	d8000015 	stw	zero,0(sp)
   215e8:	000f883a 	mov	r7,zero
   215ec:	018000b4 	movhi	r6,2
   215f0:	31840304 	addi	r6,r6,4108
   215f4:	01400084 	movi	r5,2
   215f8:	0009883a 	mov	r4,zero
   215fc:	00227d80 	call	227d8 <alt_ic_isr_register>
}
   21600:	0001883a 	nop
   21604:	e037883a 	mov	sp,fp
   21608:	dfc00117 	ldw	ra,4(sp)
   2160c:	df000017 	ldw	fp,0(sp)
   21610:	dec00204 	addi	sp,sp,8
   21614:	f800283a 	ret

00021618 <startTimer>:


void startTimer(uint8_t timerNum){
   21618:	defffe04 	addi	sp,sp,-8
   2161c:	df000115 	stw	fp,4(sp)
   21620:	df000104 	addi	fp,sp,4
   21624:	2005883a 	mov	r2,r4
   21628:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   2162c:	e0bfff03 	ldbu	r2,-4(fp)
   21630:	1000051e 	bne	r2,zero,21648 <startTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
   21634:	00c001c4 	movi	r3,7
   21638:	00800134 	movhi	r2,4
   2163c:	10840104 	addi	r2,r2,4100
   21640:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
}
   21644:	00000706 	br	21664 <startTimer+0x4c>


void startTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
	else if(timerNum == GAME_TIMER)
   21648:	e0bfff03 	ldbu	r2,-4(fp)
   2164c:	10800058 	cmpnei	r2,r2,1
   21650:	1000041e 	bne	r2,zero,21664 <startTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
   21654:	00c001c4 	movi	r3,7
   21658:	00800134 	movhi	r2,4
   2165c:	10840904 	addi	r2,r2,4132
   21660:	10c00035 	stwio	r3,0(r2)
}
   21664:	0001883a 	nop
   21668:	e037883a 	mov	sp,fp
   2166c:	df000017 	ldw	fp,0(sp)
   21670:	dec00104 	addi	sp,sp,4
   21674:	f800283a 	ret

00021678 <stopTimer>:


void stopTimer(uint8_t timerNum){
   21678:	defffe04 	addi	sp,sp,-8
   2167c:	df000115 	stw	fp,4(sp)
   21680:	df000104 	addi	fp,sp,4
   21684:	2005883a 	mov	r2,r4
   21688:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   2168c:	e0bfff03 	ldbu	r2,-4(fp)
   21690:	1000051e 	bne	r2,zero,216a8 <stopTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
   21694:	00c002c4 	movi	r3,11
   21698:	00800134 	movhi	r2,4
   2169c:	10840104 	addi	r2,r2,4100
   216a0:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);

}
   216a4:	00000706 	br	216c4 <stopTimer+0x4c>


void stopTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
	else if(timerNum == GAME_TIMER)
   216a8:	e0bfff03 	ldbu	r2,-4(fp)
   216ac:	10800058 	cmpnei	r2,r2,1
   216b0:	1000041e 	bne	r2,zero,216c4 <stopTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);
   216b4:	00c002c4 	movi	r3,11
   216b8:	00800134 	movhi	r2,4
   216bc:	10840904 	addi	r2,r2,4132
   216c0:	10c00035 	stwio	r3,0(r2)

}
   216c4:	0001883a 	nop
   216c8:	e037883a 	mov	sp,fp
   216cc:	df000017 	ldw	fp,0(sp)
   216d0:	dec00104 	addi	sp,sp,4
   216d4:	f800283a 	ret

000216d8 <setTimer>:


void setTimer(uint8_t timerNum, uint32_t microsec){
   216d8:	defffa04 	addi	sp,sp,-24
   216dc:	dfc00515 	stw	ra,20(sp)
   216e0:	df000415 	stw	fp,16(sp)
   216e4:	df000404 	addi	fp,sp,16
   216e8:	2005883a 	mov	r2,r4
   216ec:	e17fff15 	stw	r5,-4(fp)
   216f0:	e0bffe05 	stb	r2,-8(fp)
	uint32_t cycles = millisToClock(microsec);
   216f4:	e13fff17 	ldw	r4,-4(fp)
   216f8:	00217840 	call	21784 <millisToClock>
   216fc:	e0bffc15 	stw	r2,-16(fp)

	uint16_t lower = (uint16_t)(cycles&0x0000FFFF);
   21700:	e0bffc17 	ldw	r2,-16(fp)
   21704:	e0bffd0d 	sth	r2,-12(fp)
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);
   21708:	e0bffc17 	ldw	r2,-16(fp)
   2170c:	1004d43a 	srli	r2,r2,16
   21710:	e0bffd8d 	sth	r2,-10(fp)

	if(timerNum == LCD_TIMER){
   21714:	e0bffe03 	ldbu	r2,-8(fp)
   21718:	1000091e 	bne	r2,zero,21740 <setTimer+0x68>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
   2171c:	e0fffd0b 	ldhu	r3,-12(fp)
   21720:	00800134 	movhi	r2,4
   21724:	10840204 	addi	r2,r2,4104
   21728:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
   2172c:	e0fffd8b 	ldhu	r3,-10(fp)
   21730:	00800134 	movhi	r2,4
   21734:	10840304 	addi	r2,r2,4108
   21738:	10c00035 	stwio	r3,0(r2)
	}else if(timerNum == GAME_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
	}
}
   2173c:	00000b06 	br	2176c <setTimer+0x94>
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);

	if(timerNum == LCD_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
	}else if(timerNum == GAME_TIMER){
   21740:	e0bffe03 	ldbu	r2,-8(fp)
   21744:	10800058 	cmpnei	r2,r2,1
   21748:	1000081e 	bne	r2,zero,2176c <setTimer+0x94>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
   2174c:	e0fffd0b 	ldhu	r3,-12(fp)
   21750:	00800134 	movhi	r2,4
   21754:	10840a04 	addi	r2,r2,4136
   21758:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
   2175c:	e0fffd8b 	ldhu	r3,-10(fp)
   21760:	00800134 	movhi	r2,4
   21764:	10840b04 	addi	r2,r2,4140
   21768:	10c00035 	stwio	r3,0(r2)
	}
}
   2176c:	0001883a 	nop
   21770:	e037883a 	mov	sp,fp
   21774:	dfc00117 	ldw	ra,4(sp)
   21778:	df000017 	ldw	fp,0(sp)
   2177c:	dec00204 	addi	sp,sp,8
   21780:	f800283a 	ret

00021784 <millisToClock>:


uint32_t millisToClock(uint32_t microsec){
   21784:	defffd04 	addi	sp,sp,-12
   21788:	dfc00215 	stw	ra,8(sp)
   2178c:	df000115 	stw	fp,4(sp)
   21790:	df000104 	addi	fp,sp,4
   21794:	e13fff15 	stw	r4,-4(fp)
	return CLOCK_FREQ / 1000000 * microsec;
   21798:	01400c84 	movi	r5,50
   2179c:	e13fff17 	ldw	r4,-4(fp)
   217a0:	002196c0 	call	2196c <__mulsi3>
}
   217a4:	e037883a 	mov	sp,fp
   217a8:	dfc00117 	ldw	ra,4(sp)
   217ac:	df000017 	ldw	fp,0(sp)
   217b0:	dec00204 	addi	sp,sp,8
   217b4:	f800283a 	ret

000217b8 <__divsi3>:
   217b8:	20001b16 	blt	r4,zero,21828 <__divsi3+0x70>
   217bc:	000f883a 	mov	r7,zero
   217c0:	28001616 	blt	r5,zero,2181c <__divsi3+0x64>
   217c4:	200d883a 	mov	r6,r4
   217c8:	29001a2e 	bgeu	r5,r4,21834 <__divsi3+0x7c>
   217cc:	00800804 	movi	r2,32
   217d0:	00c00044 	movi	r3,1
   217d4:	00000106 	br	217dc <__divsi3+0x24>
   217d8:	10000d26 	beq	r2,zero,21810 <__divsi3+0x58>
   217dc:	294b883a 	add	r5,r5,r5
   217e0:	10bfffc4 	addi	r2,r2,-1
   217e4:	18c7883a 	add	r3,r3,r3
   217e8:	293ffb36 	bltu	r5,r4,217d8 <__alt_data_end+0xfffe87d8>
   217ec:	0005883a 	mov	r2,zero
   217f0:	18000726 	beq	r3,zero,21810 <__divsi3+0x58>
   217f4:	0005883a 	mov	r2,zero
   217f8:	31400236 	bltu	r6,r5,21804 <__divsi3+0x4c>
   217fc:	314dc83a 	sub	r6,r6,r5
   21800:	10c4b03a 	or	r2,r2,r3
   21804:	1806d07a 	srli	r3,r3,1
   21808:	280ad07a 	srli	r5,r5,1
   2180c:	183ffa1e 	bne	r3,zero,217f8 <__alt_data_end+0xfffe87f8>
   21810:	38000126 	beq	r7,zero,21818 <__divsi3+0x60>
   21814:	0085c83a 	sub	r2,zero,r2
   21818:	f800283a 	ret
   2181c:	014bc83a 	sub	r5,zero,r5
   21820:	39c0005c 	xori	r7,r7,1
   21824:	003fe706 	br	217c4 <__alt_data_end+0xfffe87c4>
   21828:	0109c83a 	sub	r4,zero,r4
   2182c:	01c00044 	movi	r7,1
   21830:	003fe306 	br	217c0 <__alt_data_end+0xfffe87c0>
   21834:	00c00044 	movi	r3,1
   21838:	003fee06 	br	217f4 <__alt_data_end+0xfffe87f4>

0002183c <__modsi3>:
   2183c:	20001716 	blt	r4,zero,2189c <__modsi3+0x60>
   21840:	000f883a 	mov	r7,zero
   21844:	2005883a 	mov	r2,r4
   21848:	28001216 	blt	r5,zero,21894 <__modsi3+0x58>
   2184c:	2900162e 	bgeu	r5,r4,218a8 <__modsi3+0x6c>
   21850:	01800804 	movi	r6,32
   21854:	00c00044 	movi	r3,1
   21858:	00000106 	br	21860 <__modsi3+0x24>
   2185c:	30000a26 	beq	r6,zero,21888 <__modsi3+0x4c>
   21860:	294b883a 	add	r5,r5,r5
   21864:	31bfffc4 	addi	r6,r6,-1
   21868:	18c7883a 	add	r3,r3,r3
   2186c:	293ffb36 	bltu	r5,r4,2185c <__alt_data_end+0xfffe885c>
   21870:	18000526 	beq	r3,zero,21888 <__modsi3+0x4c>
   21874:	1806d07a 	srli	r3,r3,1
   21878:	11400136 	bltu	r2,r5,21880 <__modsi3+0x44>
   2187c:	1145c83a 	sub	r2,r2,r5
   21880:	280ad07a 	srli	r5,r5,1
   21884:	183ffb1e 	bne	r3,zero,21874 <__alt_data_end+0xfffe8874>
   21888:	38000126 	beq	r7,zero,21890 <__modsi3+0x54>
   2188c:	0085c83a 	sub	r2,zero,r2
   21890:	f800283a 	ret
   21894:	014bc83a 	sub	r5,zero,r5
   21898:	003fec06 	br	2184c <__alt_data_end+0xfffe884c>
   2189c:	0109c83a 	sub	r4,zero,r4
   218a0:	01c00044 	movi	r7,1
   218a4:	003fe706 	br	21844 <__alt_data_end+0xfffe8844>
   218a8:	00c00044 	movi	r3,1
   218ac:	003ff106 	br	21874 <__alt_data_end+0xfffe8874>

000218b0 <__udivsi3>:
   218b0:	200d883a 	mov	r6,r4
   218b4:	2900152e 	bgeu	r5,r4,2190c <__udivsi3+0x5c>
   218b8:	28001416 	blt	r5,zero,2190c <__udivsi3+0x5c>
   218bc:	00800804 	movi	r2,32
   218c0:	00c00044 	movi	r3,1
   218c4:	00000206 	br	218d0 <__udivsi3+0x20>
   218c8:	10000e26 	beq	r2,zero,21904 <__udivsi3+0x54>
   218cc:	28000516 	blt	r5,zero,218e4 <__udivsi3+0x34>
   218d0:	294b883a 	add	r5,r5,r5
   218d4:	10bfffc4 	addi	r2,r2,-1
   218d8:	18c7883a 	add	r3,r3,r3
   218dc:	293ffa36 	bltu	r5,r4,218c8 <__alt_data_end+0xfffe88c8>
   218e0:	18000826 	beq	r3,zero,21904 <__udivsi3+0x54>
   218e4:	0005883a 	mov	r2,zero
   218e8:	31400236 	bltu	r6,r5,218f4 <__udivsi3+0x44>
   218ec:	314dc83a 	sub	r6,r6,r5
   218f0:	10c4b03a 	or	r2,r2,r3
   218f4:	1806d07a 	srli	r3,r3,1
   218f8:	280ad07a 	srli	r5,r5,1
   218fc:	183ffa1e 	bne	r3,zero,218e8 <__alt_data_end+0xfffe88e8>
   21900:	f800283a 	ret
   21904:	0005883a 	mov	r2,zero
   21908:	f800283a 	ret
   2190c:	00c00044 	movi	r3,1
   21910:	003ff406 	br	218e4 <__alt_data_end+0xfffe88e4>

00021914 <__umodsi3>:
   21914:	2005883a 	mov	r2,r4
   21918:	2900122e 	bgeu	r5,r4,21964 <__umodsi3+0x50>
   2191c:	28001116 	blt	r5,zero,21964 <__umodsi3+0x50>
   21920:	01800804 	movi	r6,32
   21924:	00c00044 	movi	r3,1
   21928:	00000206 	br	21934 <__umodsi3+0x20>
   2192c:	30000c26 	beq	r6,zero,21960 <__umodsi3+0x4c>
   21930:	28000516 	blt	r5,zero,21948 <__umodsi3+0x34>
   21934:	294b883a 	add	r5,r5,r5
   21938:	31bfffc4 	addi	r6,r6,-1
   2193c:	18c7883a 	add	r3,r3,r3
   21940:	293ffa36 	bltu	r5,r4,2192c <__alt_data_end+0xfffe892c>
   21944:	18000626 	beq	r3,zero,21960 <__umodsi3+0x4c>
   21948:	1806d07a 	srli	r3,r3,1
   2194c:	11400136 	bltu	r2,r5,21954 <__umodsi3+0x40>
   21950:	1145c83a 	sub	r2,r2,r5
   21954:	280ad07a 	srli	r5,r5,1
   21958:	183ffb1e 	bne	r3,zero,21948 <__alt_data_end+0xfffe8948>
   2195c:	f800283a 	ret
   21960:	f800283a 	ret
   21964:	00c00044 	movi	r3,1
   21968:	003ff706 	br	21948 <__alt_data_end+0xfffe8948>

0002196c <__mulsi3>:
   2196c:	0005883a 	mov	r2,zero
   21970:	20000726 	beq	r4,zero,21990 <__mulsi3+0x24>
   21974:	20c0004c 	andi	r3,r4,1
   21978:	2008d07a 	srli	r4,r4,1
   2197c:	18000126 	beq	r3,zero,21984 <__mulsi3+0x18>
   21980:	1145883a 	add	r2,r2,r5
   21984:	294b883a 	add	r5,r5,r5
   21988:	203ffa1e 	bne	r4,zero,21974 <__alt_data_end+0xfffe8974>
   2198c:	f800283a 	ret
   21990:	f800283a 	ret

00021994 <malloc>:
   21994:	008000f4 	movhi	r2,3
   21998:	10a2a904 	addi	r2,r2,-30044
   2199c:	200b883a 	mov	r5,r4
   219a0:	11000017 	ldw	r4,0(r2)
   219a4:	00219bc1 	jmpi	219bc <_malloc_r>

000219a8 <free>:
   219a8:	008000f4 	movhi	r2,3
   219ac:	10a2a904 	addi	r2,r2,-30044
   219b0:	200b883a 	mov	r5,r4
   219b4:	11000017 	ldw	r4,0(r2)
   219b8:	00223bc1 	jmpi	223bc <_free_r>

000219bc <_malloc_r>:
   219bc:	defff504 	addi	sp,sp,-44
   219c0:	dc800315 	stw	r18,12(sp)
   219c4:	dfc00a15 	stw	ra,40(sp)
   219c8:	df000915 	stw	fp,36(sp)
   219cc:	ddc00815 	stw	r23,32(sp)
   219d0:	dd800715 	stw	r22,28(sp)
   219d4:	dd400615 	stw	r21,24(sp)
   219d8:	dd000515 	stw	r20,20(sp)
   219dc:	dcc00415 	stw	r19,16(sp)
   219e0:	dc400215 	stw	r17,8(sp)
   219e4:	dc000115 	stw	r16,4(sp)
   219e8:	288002c4 	addi	r2,r5,11
   219ec:	00c00584 	movi	r3,22
   219f0:	2025883a 	mov	r18,r4
   219f4:	18807f2e 	bgeu	r3,r2,21bf4 <_malloc_r+0x238>
   219f8:	047ffe04 	movi	r17,-8
   219fc:	1462703a 	and	r17,r2,r17
   21a00:	8800a316 	blt	r17,zero,21c90 <_malloc_r+0x2d4>
   21a04:	8940a236 	bltu	r17,r5,21c90 <_malloc_r+0x2d4>
   21a08:	0022be00 	call	22be0 <__malloc_lock>
   21a0c:	00807dc4 	movi	r2,503
   21a10:	1441e92e 	bgeu	r2,r17,221b8 <_malloc_r+0x7fc>
   21a14:	8804d27a 	srli	r2,r17,9
   21a18:	1000a126 	beq	r2,zero,21ca0 <_malloc_r+0x2e4>
   21a1c:	00c00104 	movi	r3,4
   21a20:	18811e36 	bltu	r3,r2,21e9c <_malloc_r+0x4e0>
   21a24:	8804d1ba 	srli	r2,r17,6
   21a28:	12000e44 	addi	r8,r2,57
   21a2c:	11c00e04 	addi	r7,r2,56
   21a30:	4209883a 	add	r4,r8,r8
   21a34:	04c000b4 	movhi	r19,2
   21a38:	2109883a 	add	r4,r4,r4
   21a3c:	9cdc1604 	addi	r19,r19,28760
   21a40:	2109883a 	add	r4,r4,r4
   21a44:	9909883a 	add	r4,r19,r4
   21a48:	24000117 	ldw	r16,4(r4)
   21a4c:	213ffe04 	addi	r4,r4,-8
   21a50:	24009726 	beq	r4,r16,21cb0 <_malloc_r+0x2f4>
   21a54:	80800117 	ldw	r2,4(r16)
   21a58:	01bfff04 	movi	r6,-4
   21a5c:	014003c4 	movi	r5,15
   21a60:	1184703a 	and	r2,r2,r6
   21a64:	1447c83a 	sub	r3,r2,r17
   21a68:	28c00716 	blt	r5,r3,21a88 <_malloc_r+0xcc>
   21a6c:	1800920e 	bge	r3,zero,21cb8 <_malloc_r+0x2fc>
   21a70:	84000317 	ldw	r16,12(r16)
   21a74:	24008e26 	beq	r4,r16,21cb0 <_malloc_r+0x2f4>
   21a78:	80800117 	ldw	r2,4(r16)
   21a7c:	1184703a 	and	r2,r2,r6
   21a80:	1447c83a 	sub	r3,r2,r17
   21a84:	28fff90e 	bge	r5,r3,21a6c <__alt_data_end+0xfffe8a6c>
   21a88:	3809883a 	mov	r4,r7
   21a8c:	018000b4 	movhi	r6,2
   21a90:	9c000417 	ldw	r16,16(r19)
   21a94:	319c1604 	addi	r6,r6,28760
   21a98:	32000204 	addi	r8,r6,8
   21a9c:	82013426 	beq	r16,r8,21f70 <_malloc_r+0x5b4>
   21aa0:	80c00117 	ldw	r3,4(r16)
   21aa4:	00bfff04 	movi	r2,-4
   21aa8:	188e703a 	and	r7,r3,r2
   21aac:	3c45c83a 	sub	r2,r7,r17
   21ab0:	00c003c4 	movi	r3,15
   21ab4:	18811f16 	blt	r3,r2,21f34 <_malloc_r+0x578>
   21ab8:	32000515 	stw	r8,20(r6)
   21abc:	32000415 	stw	r8,16(r6)
   21ac0:	10007f0e 	bge	r2,zero,21cc0 <_malloc_r+0x304>
   21ac4:	00807fc4 	movi	r2,511
   21ac8:	11c0fd36 	bltu	r2,r7,21ec0 <_malloc_r+0x504>
   21acc:	3806d0fa 	srli	r3,r7,3
   21ad0:	01c00044 	movi	r7,1
   21ad4:	30800117 	ldw	r2,4(r6)
   21ad8:	19400044 	addi	r5,r3,1
   21adc:	294b883a 	add	r5,r5,r5
   21ae0:	1807d0ba 	srai	r3,r3,2
   21ae4:	294b883a 	add	r5,r5,r5
   21ae8:	294b883a 	add	r5,r5,r5
   21aec:	298b883a 	add	r5,r5,r6
   21af0:	38c6983a 	sll	r3,r7,r3
   21af4:	29c00017 	ldw	r7,0(r5)
   21af8:	2a7ffe04 	addi	r9,r5,-8
   21afc:	1886b03a 	or	r3,r3,r2
   21b00:	82400315 	stw	r9,12(r16)
   21b04:	81c00215 	stw	r7,8(r16)
   21b08:	30c00115 	stw	r3,4(r6)
   21b0c:	2c000015 	stw	r16,0(r5)
   21b10:	3c000315 	stw	r16,12(r7)
   21b14:	2005d0ba 	srai	r2,r4,2
   21b18:	01400044 	movi	r5,1
   21b1c:	288a983a 	sll	r5,r5,r2
   21b20:	19406f36 	bltu	r3,r5,21ce0 <_malloc_r+0x324>
   21b24:	28c4703a 	and	r2,r5,r3
   21b28:	10000a1e 	bne	r2,zero,21b54 <_malloc_r+0x198>
   21b2c:	00bfff04 	movi	r2,-4
   21b30:	294b883a 	add	r5,r5,r5
   21b34:	2088703a 	and	r4,r4,r2
   21b38:	28c4703a 	and	r2,r5,r3
   21b3c:	21000104 	addi	r4,r4,4
   21b40:	1000041e 	bne	r2,zero,21b54 <_malloc_r+0x198>
   21b44:	294b883a 	add	r5,r5,r5
   21b48:	28c4703a 	and	r2,r5,r3
   21b4c:	21000104 	addi	r4,r4,4
   21b50:	103ffc26 	beq	r2,zero,21b44 <__alt_data_end+0xfffe8b44>
   21b54:	02bfff04 	movi	r10,-4
   21b58:	024003c4 	movi	r9,15
   21b5c:	21800044 	addi	r6,r4,1
   21b60:	318d883a 	add	r6,r6,r6
   21b64:	318d883a 	add	r6,r6,r6
   21b68:	318d883a 	add	r6,r6,r6
   21b6c:	998d883a 	add	r6,r19,r6
   21b70:	333ffe04 	addi	r12,r6,-8
   21b74:	2017883a 	mov	r11,r4
   21b78:	31800104 	addi	r6,r6,4
   21b7c:	34000017 	ldw	r16,0(r6)
   21b80:	31fffd04 	addi	r7,r6,-12
   21b84:	81c0041e 	bne	r16,r7,21b98 <_malloc_r+0x1dc>
   21b88:	0000fb06 	br	21f78 <_malloc_r+0x5bc>
   21b8c:	1801030e 	bge	r3,zero,21f9c <_malloc_r+0x5e0>
   21b90:	84000317 	ldw	r16,12(r16)
   21b94:	81c0f826 	beq	r16,r7,21f78 <_malloc_r+0x5bc>
   21b98:	80800117 	ldw	r2,4(r16)
   21b9c:	1284703a 	and	r2,r2,r10
   21ba0:	1447c83a 	sub	r3,r2,r17
   21ba4:	48fff90e 	bge	r9,r3,21b8c <__alt_data_end+0xfffe8b8c>
   21ba8:	80800317 	ldw	r2,12(r16)
   21bac:	81000217 	ldw	r4,8(r16)
   21bb0:	89400054 	ori	r5,r17,1
   21bb4:	81400115 	stw	r5,4(r16)
   21bb8:	20800315 	stw	r2,12(r4)
   21bbc:	11000215 	stw	r4,8(r2)
   21bc0:	8463883a 	add	r17,r16,r17
   21bc4:	9c400515 	stw	r17,20(r19)
   21bc8:	9c400415 	stw	r17,16(r19)
   21bcc:	18800054 	ori	r2,r3,1
   21bd0:	88800115 	stw	r2,4(r17)
   21bd4:	8a000315 	stw	r8,12(r17)
   21bd8:	8a000215 	stw	r8,8(r17)
   21bdc:	88e3883a 	add	r17,r17,r3
   21be0:	88c00015 	stw	r3,0(r17)
   21be4:	9009883a 	mov	r4,r18
   21be8:	0022c040 	call	22c04 <__malloc_unlock>
   21bec:	80800204 	addi	r2,r16,8
   21bf0:	00001b06 	br	21c60 <_malloc_r+0x2a4>
   21bf4:	04400404 	movi	r17,16
   21bf8:	89402536 	bltu	r17,r5,21c90 <_malloc_r+0x2d4>
   21bfc:	0022be00 	call	22be0 <__malloc_lock>
   21c00:	00800184 	movi	r2,6
   21c04:	01000084 	movi	r4,2
   21c08:	04c000b4 	movhi	r19,2
   21c0c:	1085883a 	add	r2,r2,r2
   21c10:	9cdc1604 	addi	r19,r19,28760
   21c14:	1085883a 	add	r2,r2,r2
   21c18:	9885883a 	add	r2,r19,r2
   21c1c:	14000117 	ldw	r16,4(r2)
   21c20:	10fffe04 	addi	r3,r2,-8
   21c24:	80c0d926 	beq	r16,r3,21f8c <_malloc_r+0x5d0>
   21c28:	80c00117 	ldw	r3,4(r16)
   21c2c:	81000317 	ldw	r4,12(r16)
   21c30:	00bfff04 	movi	r2,-4
   21c34:	1884703a 	and	r2,r3,r2
   21c38:	81400217 	ldw	r5,8(r16)
   21c3c:	8085883a 	add	r2,r16,r2
   21c40:	10c00117 	ldw	r3,4(r2)
   21c44:	29000315 	stw	r4,12(r5)
   21c48:	21400215 	stw	r5,8(r4)
   21c4c:	18c00054 	ori	r3,r3,1
   21c50:	10c00115 	stw	r3,4(r2)
   21c54:	9009883a 	mov	r4,r18
   21c58:	0022c040 	call	22c04 <__malloc_unlock>
   21c5c:	80800204 	addi	r2,r16,8
   21c60:	dfc00a17 	ldw	ra,40(sp)
   21c64:	df000917 	ldw	fp,36(sp)
   21c68:	ddc00817 	ldw	r23,32(sp)
   21c6c:	dd800717 	ldw	r22,28(sp)
   21c70:	dd400617 	ldw	r21,24(sp)
   21c74:	dd000517 	ldw	r20,20(sp)
   21c78:	dcc00417 	ldw	r19,16(sp)
   21c7c:	dc800317 	ldw	r18,12(sp)
   21c80:	dc400217 	ldw	r17,8(sp)
   21c84:	dc000117 	ldw	r16,4(sp)
   21c88:	dec00b04 	addi	sp,sp,44
   21c8c:	f800283a 	ret
   21c90:	00800304 	movi	r2,12
   21c94:	90800015 	stw	r2,0(r18)
   21c98:	0005883a 	mov	r2,zero
   21c9c:	003ff006 	br	21c60 <__alt_data_end+0xfffe8c60>
   21ca0:	01002004 	movi	r4,128
   21ca4:	02001004 	movi	r8,64
   21ca8:	01c00fc4 	movi	r7,63
   21cac:	003f6106 	br	21a34 <__alt_data_end+0xfffe8a34>
   21cb0:	4009883a 	mov	r4,r8
   21cb4:	003f7506 	br	21a8c <__alt_data_end+0xfffe8a8c>
   21cb8:	81000317 	ldw	r4,12(r16)
   21cbc:	003fde06 	br	21c38 <__alt_data_end+0xfffe8c38>
   21cc0:	81c5883a 	add	r2,r16,r7
   21cc4:	11400117 	ldw	r5,4(r2)
   21cc8:	9009883a 	mov	r4,r18
   21ccc:	29400054 	ori	r5,r5,1
   21cd0:	11400115 	stw	r5,4(r2)
   21cd4:	0022c040 	call	22c04 <__malloc_unlock>
   21cd8:	80800204 	addi	r2,r16,8
   21cdc:	003fe006 	br	21c60 <__alt_data_end+0xfffe8c60>
   21ce0:	9c000217 	ldw	r16,8(r19)
   21ce4:	00bfff04 	movi	r2,-4
   21ce8:	85800117 	ldw	r22,4(r16)
   21cec:	b0ac703a 	and	r22,r22,r2
   21cf0:	b4400336 	bltu	r22,r17,21d00 <_malloc_r+0x344>
   21cf4:	b445c83a 	sub	r2,r22,r17
   21cf8:	00c003c4 	movi	r3,15
   21cfc:	18805d16 	blt	r3,r2,21e74 <_malloc_r+0x4b8>
   21d00:	05c000f4 	movhi	r23,3
   21d04:	008000f4 	movhi	r2,3
   21d08:	10a96604 	addi	r2,r2,-23144
   21d0c:	bde2a604 	addi	r23,r23,-30056
   21d10:	15400017 	ldw	r21,0(r2)
   21d14:	b8c00017 	ldw	r3,0(r23)
   21d18:	00bfffc4 	movi	r2,-1
   21d1c:	858d883a 	add	r6,r16,r22
   21d20:	8d6b883a 	add	r21,r17,r21
   21d24:	1880ea26 	beq	r3,r2,220d0 <_malloc_r+0x714>
   21d28:	ad4403c4 	addi	r21,r21,4111
   21d2c:	00bc0004 	movi	r2,-4096
   21d30:	a8aa703a 	and	r21,r21,r2
   21d34:	a80b883a 	mov	r5,r21
   21d38:	9009883a 	mov	r4,r18
   21d3c:	d9800015 	stw	r6,0(sp)
   21d40:	00222440 	call	22244 <_sbrk_r>
   21d44:	1029883a 	mov	r20,r2
   21d48:	00bfffc4 	movi	r2,-1
   21d4c:	d9800017 	ldw	r6,0(sp)
   21d50:	a080e826 	beq	r20,r2,220f4 <_malloc_r+0x738>
   21d54:	a180a636 	bltu	r20,r6,21ff0 <_malloc_r+0x634>
   21d58:	070000f4 	movhi	fp,3
   21d5c:	e7296f04 	addi	fp,fp,-23108
   21d60:	e0800017 	ldw	r2,0(fp)
   21d64:	a887883a 	add	r3,r21,r2
   21d68:	e0c00015 	stw	r3,0(fp)
   21d6c:	3500e626 	beq	r6,r20,22108 <_malloc_r+0x74c>
   21d70:	b9000017 	ldw	r4,0(r23)
   21d74:	00bfffc4 	movi	r2,-1
   21d78:	2080ee26 	beq	r4,r2,22134 <_malloc_r+0x778>
   21d7c:	a185c83a 	sub	r2,r20,r6
   21d80:	10c5883a 	add	r2,r2,r3
   21d84:	e0800015 	stw	r2,0(fp)
   21d88:	a0c001cc 	andi	r3,r20,7
   21d8c:	1800bc26 	beq	r3,zero,22080 <_malloc_r+0x6c4>
   21d90:	a0e9c83a 	sub	r20,r20,r3
   21d94:	00840204 	movi	r2,4104
   21d98:	a5000204 	addi	r20,r20,8
   21d9c:	10c7c83a 	sub	r3,r2,r3
   21da0:	a545883a 	add	r2,r20,r21
   21da4:	1083ffcc 	andi	r2,r2,4095
   21da8:	18abc83a 	sub	r21,r3,r2
   21dac:	a80b883a 	mov	r5,r21
   21db0:	9009883a 	mov	r4,r18
   21db4:	00222440 	call	22244 <_sbrk_r>
   21db8:	00ffffc4 	movi	r3,-1
   21dbc:	10c0e126 	beq	r2,r3,22144 <_malloc_r+0x788>
   21dc0:	1505c83a 	sub	r2,r2,r20
   21dc4:	1545883a 	add	r2,r2,r21
   21dc8:	10800054 	ori	r2,r2,1
   21dcc:	e0c00017 	ldw	r3,0(fp)
   21dd0:	9d000215 	stw	r20,8(r19)
   21dd4:	a0800115 	stw	r2,4(r20)
   21dd8:	a8c7883a 	add	r3,r21,r3
   21ddc:	e0c00015 	stw	r3,0(fp)
   21de0:	84c00e26 	beq	r16,r19,21e1c <_malloc_r+0x460>
   21de4:	018003c4 	movi	r6,15
   21de8:	3580a72e 	bgeu	r6,r22,22088 <_malloc_r+0x6cc>
   21dec:	81400117 	ldw	r5,4(r16)
   21df0:	013ffe04 	movi	r4,-8
   21df4:	b0bffd04 	addi	r2,r22,-12
   21df8:	1104703a 	and	r2,r2,r4
   21dfc:	2900004c 	andi	r4,r5,1
   21e00:	2088b03a 	or	r4,r4,r2
   21e04:	81000115 	stw	r4,4(r16)
   21e08:	01400144 	movi	r5,5
   21e0c:	8089883a 	add	r4,r16,r2
   21e10:	21400115 	stw	r5,4(r4)
   21e14:	21400215 	stw	r5,8(r4)
   21e18:	3080cd36 	bltu	r6,r2,22150 <_malloc_r+0x794>
   21e1c:	008000f4 	movhi	r2,3
   21e20:	10a96504 	addi	r2,r2,-23148
   21e24:	11000017 	ldw	r4,0(r2)
   21e28:	20c0012e 	bgeu	r4,r3,21e30 <_malloc_r+0x474>
   21e2c:	10c00015 	stw	r3,0(r2)
   21e30:	008000f4 	movhi	r2,3
   21e34:	10a96404 	addi	r2,r2,-23152
   21e38:	11000017 	ldw	r4,0(r2)
   21e3c:	9c000217 	ldw	r16,8(r19)
   21e40:	20c0012e 	bgeu	r4,r3,21e48 <_malloc_r+0x48c>
   21e44:	10c00015 	stw	r3,0(r2)
   21e48:	80c00117 	ldw	r3,4(r16)
   21e4c:	00bfff04 	movi	r2,-4
   21e50:	1886703a 	and	r3,r3,r2
   21e54:	1c45c83a 	sub	r2,r3,r17
   21e58:	1c400236 	bltu	r3,r17,21e64 <_malloc_r+0x4a8>
   21e5c:	00c003c4 	movi	r3,15
   21e60:	18800416 	blt	r3,r2,21e74 <_malloc_r+0x4b8>
   21e64:	9009883a 	mov	r4,r18
   21e68:	0022c040 	call	22c04 <__malloc_unlock>
   21e6c:	0005883a 	mov	r2,zero
   21e70:	003f7b06 	br	21c60 <__alt_data_end+0xfffe8c60>
   21e74:	88c00054 	ori	r3,r17,1
   21e78:	80c00115 	stw	r3,4(r16)
   21e7c:	8463883a 	add	r17,r16,r17
   21e80:	10800054 	ori	r2,r2,1
   21e84:	9c400215 	stw	r17,8(r19)
   21e88:	88800115 	stw	r2,4(r17)
   21e8c:	9009883a 	mov	r4,r18
   21e90:	0022c040 	call	22c04 <__malloc_unlock>
   21e94:	80800204 	addi	r2,r16,8
   21e98:	003f7106 	br	21c60 <__alt_data_end+0xfffe8c60>
   21e9c:	00c00504 	movi	r3,20
   21ea0:	18804a2e 	bgeu	r3,r2,21fcc <_malloc_r+0x610>
   21ea4:	00c01504 	movi	r3,84
   21ea8:	18806e36 	bltu	r3,r2,22064 <_malloc_r+0x6a8>
   21eac:	8804d33a 	srli	r2,r17,12
   21eb0:	12001bc4 	addi	r8,r2,111
   21eb4:	11c01b84 	addi	r7,r2,110
   21eb8:	4209883a 	add	r4,r8,r8
   21ebc:	003edd06 	br	21a34 <__alt_data_end+0xfffe8a34>
   21ec0:	3804d27a 	srli	r2,r7,9
   21ec4:	00c00104 	movi	r3,4
   21ec8:	1880442e 	bgeu	r3,r2,21fdc <_malloc_r+0x620>
   21ecc:	00c00504 	movi	r3,20
   21ed0:	18808136 	bltu	r3,r2,220d8 <_malloc_r+0x71c>
   21ed4:	11401704 	addi	r5,r2,92
   21ed8:	10c016c4 	addi	r3,r2,91
   21edc:	294b883a 	add	r5,r5,r5
   21ee0:	294b883a 	add	r5,r5,r5
   21ee4:	294b883a 	add	r5,r5,r5
   21ee8:	994b883a 	add	r5,r19,r5
   21eec:	28800017 	ldw	r2,0(r5)
   21ef0:	018000b4 	movhi	r6,2
   21ef4:	297ffe04 	addi	r5,r5,-8
   21ef8:	319c1604 	addi	r6,r6,28760
   21efc:	28806526 	beq	r5,r2,22094 <_malloc_r+0x6d8>
   21f00:	01bfff04 	movi	r6,-4
   21f04:	10c00117 	ldw	r3,4(r2)
   21f08:	1986703a 	and	r3,r3,r6
   21f0c:	38c0022e 	bgeu	r7,r3,21f18 <_malloc_r+0x55c>
   21f10:	10800217 	ldw	r2,8(r2)
   21f14:	28bffb1e 	bne	r5,r2,21f04 <__alt_data_end+0xfffe8f04>
   21f18:	11400317 	ldw	r5,12(r2)
   21f1c:	98c00117 	ldw	r3,4(r19)
   21f20:	81400315 	stw	r5,12(r16)
   21f24:	80800215 	stw	r2,8(r16)
   21f28:	2c000215 	stw	r16,8(r5)
   21f2c:	14000315 	stw	r16,12(r2)
   21f30:	003ef806 	br	21b14 <__alt_data_end+0xfffe8b14>
   21f34:	88c00054 	ori	r3,r17,1
   21f38:	80c00115 	stw	r3,4(r16)
   21f3c:	8463883a 	add	r17,r16,r17
   21f40:	34400515 	stw	r17,20(r6)
   21f44:	34400415 	stw	r17,16(r6)
   21f48:	10c00054 	ori	r3,r2,1
   21f4c:	8a000315 	stw	r8,12(r17)
   21f50:	8a000215 	stw	r8,8(r17)
   21f54:	88c00115 	stw	r3,4(r17)
   21f58:	88a3883a 	add	r17,r17,r2
   21f5c:	88800015 	stw	r2,0(r17)
   21f60:	9009883a 	mov	r4,r18
   21f64:	0022c040 	call	22c04 <__malloc_unlock>
   21f68:	80800204 	addi	r2,r16,8
   21f6c:	003f3c06 	br	21c60 <__alt_data_end+0xfffe8c60>
   21f70:	30c00117 	ldw	r3,4(r6)
   21f74:	003ee706 	br	21b14 <__alt_data_end+0xfffe8b14>
   21f78:	5ac00044 	addi	r11,r11,1
   21f7c:	588000cc 	andi	r2,r11,3
   21f80:	31800204 	addi	r6,r6,8
   21f84:	103efd1e 	bne	r2,zero,21b7c <__alt_data_end+0xfffe8b7c>
   21f88:	00002406 	br	2201c <_malloc_r+0x660>
   21f8c:	14000317 	ldw	r16,12(r2)
   21f90:	143f251e 	bne	r2,r16,21c28 <__alt_data_end+0xfffe8c28>
   21f94:	21000084 	addi	r4,r4,2
   21f98:	003ebc06 	br	21a8c <__alt_data_end+0xfffe8a8c>
   21f9c:	8085883a 	add	r2,r16,r2
   21fa0:	10c00117 	ldw	r3,4(r2)
   21fa4:	81000317 	ldw	r4,12(r16)
   21fa8:	81400217 	ldw	r5,8(r16)
   21fac:	18c00054 	ori	r3,r3,1
   21fb0:	10c00115 	stw	r3,4(r2)
   21fb4:	29000315 	stw	r4,12(r5)
   21fb8:	21400215 	stw	r5,8(r4)
   21fbc:	9009883a 	mov	r4,r18
   21fc0:	0022c040 	call	22c04 <__malloc_unlock>
   21fc4:	80800204 	addi	r2,r16,8
   21fc8:	003f2506 	br	21c60 <__alt_data_end+0xfffe8c60>
   21fcc:	12001704 	addi	r8,r2,92
   21fd0:	11c016c4 	addi	r7,r2,91
   21fd4:	4209883a 	add	r4,r8,r8
   21fd8:	003e9606 	br	21a34 <__alt_data_end+0xfffe8a34>
   21fdc:	3804d1ba 	srli	r2,r7,6
   21fe0:	11400e44 	addi	r5,r2,57
   21fe4:	10c00e04 	addi	r3,r2,56
   21fe8:	294b883a 	add	r5,r5,r5
   21fec:	003fbc06 	br	21ee0 <__alt_data_end+0xfffe8ee0>
   21ff0:	84ff5926 	beq	r16,r19,21d58 <__alt_data_end+0xfffe8d58>
   21ff4:	008000b4 	movhi	r2,2
   21ff8:	109c1604 	addi	r2,r2,28760
   21ffc:	14000217 	ldw	r16,8(r2)
   22000:	00bfff04 	movi	r2,-4
   22004:	80c00117 	ldw	r3,4(r16)
   22008:	1886703a 	and	r3,r3,r2
   2200c:	003f9106 	br	21e54 <__alt_data_end+0xfffe8e54>
   22010:	60800217 	ldw	r2,8(r12)
   22014:	213fffc4 	addi	r4,r4,-1
   22018:	1300651e 	bne	r2,r12,221b0 <_malloc_r+0x7f4>
   2201c:	208000cc 	andi	r2,r4,3
   22020:	633ffe04 	addi	r12,r12,-8
   22024:	103ffa1e 	bne	r2,zero,22010 <__alt_data_end+0xfffe9010>
   22028:	98800117 	ldw	r2,4(r19)
   2202c:	0146303a 	nor	r3,zero,r5
   22030:	1884703a 	and	r2,r3,r2
   22034:	98800115 	stw	r2,4(r19)
   22038:	294b883a 	add	r5,r5,r5
   2203c:	117f2836 	bltu	r2,r5,21ce0 <__alt_data_end+0xfffe8ce0>
   22040:	283f2726 	beq	r5,zero,21ce0 <__alt_data_end+0xfffe8ce0>
   22044:	2886703a 	and	r3,r5,r2
   22048:	5809883a 	mov	r4,r11
   2204c:	183ec31e 	bne	r3,zero,21b5c <__alt_data_end+0xfffe8b5c>
   22050:	294b883a 	add	r5,r5,r5
   22054:	2886703a 	and	r3,r5,r2
   22058:	21000104 	addi	r4,r4,4
   2205c:	183ffc26 	beq	r3,zero,22050 <__alt_data_end+0xfffe9050>
   22060:	003ebe06 	br	21b5c <__alt_data_end+0xfffe8b5c>
   22064:	00c05504 	movi	r3,340
   22068:	18801236 	bltu	r3,r2,220b4 <_malloc_r+0x6f8>
   2206c:	8804d3fa 	srli	r2,r17,15
   22070:	12001e04 	addi	r8,r2,120
   22074:	11c01dc4 	addi	r7,r2,119
   22078:	4209883a 	add	r4,r8,r8
   2207c:	003e6d06 	br	21a34 <__alt_data_end+0xfffe8a34>
   22080:	00c40004 	movi	r3,4096
   22084:	003f4606 	br	21da0 <__alt_data_end+0xfffe8da0>
   22088:	00800044 	movi	r2,1
   2208c:	a0800115 	stw	r2,4(r20)
   22090:	003f7406 	br	21e64 <__alt_data_end+0xfffe8e64>
   22094:	1805d0ba 	srai	r2,r3,2
   22098:	01c00044 	movi	r7,1
   2209c:	30c00117 	ldw	r3,4(r6)
   220a0:	388e983a 	sll	r7,r7,r2
   220a4:	2805883a 	mov	r2,r5
   220a8:	38c6b03a 	or	r3,r7,r3
   220ac:	30c00115 	stw	r3,4(r6)
   220b0:	003f9b06 	br	21f20 <__alt_data_end+0xfffe8f20>
   220b4:	00c15504 	movi	r3,1364
   220b8:	18801a36 	bltu	r3,r2,22124 <_malloc_r+0x768>
   220bc:	8804d4ba 	srli	r2,r17,18
   220c0:	12001f44 	addi	r8,r2,125
   220c4:	11c01f04 	addi	r7,r2,124
   220c8:	4209883a 	add	r4,r8,r8
   220cc:	003e5906 	br	21a34 <__alt_data_end+0xfffe8a34>
   220d0:	ad400404 	addi	r21,r21,16
   220d4:	003f1706 	br	21d34 <__alt_data_end+0xfffe8d34>
   220d8:	00c01504 	movi	r3,84
   220dc:	18802336 	bltu	r3,r2,2216c <_malloc_r+0x7b0>
   220e0:	3804d33a 	srli	r2,r7,12
   220e4:	11401bc4 	addi	r5,r2,111
   220e8:	10c01b84 	addi	r3,r2,110
   220ec:	294b883a 	add	r5,r5,r5
   220f0:	003f7b06 	br	21ee0 <__alt_data_end+0xfffe8ee0>
   220f4:	9c000217 	ldw	r16,8(r19)
   220f8:	00bfff04 	movi	r2,-4
   220fc:	80c00117 	ldw	r3,4(r16)
   22100:	1886703a 	and	r3,r3,r2
   22104:	003f5306 	br	21e54 <__alt_data_end+0xfffe8e54>
   22108:	3083ffcc 	andi	r2,r6,4095
   2210c:	103f181e 	bne	r2,zero,21d70 <__alt_data_end+0xfffe8d70>
   22110:	99000217 	ldw	r4,8(r19)
   22114:	b545883a 	add	r2,r22,r21
   22118:	10800054 	ori	r2,r2,1
   2211c:	20800115 	stw	r2,4(r4)
   22120:	003f3e06 	br	21e1c <__alt_data_end+0xfffe8e1c>
   22124:	01003f84 	movi	r4,254
   22128:	02001fc4 	movi	r8,127
   2212c:	01c01f84 	movi	r7,126
   22130:	003e4006 	br	21a34 <__alt_data_end+0xfffe8a34>
   22134:	008000f4 	movhi	r2,3
   22138:	10a2a604 	addi	r2,r2,-30056
   2213c:	15000015 	stw	r20,0(r2)
   22140:	003f1106 	br	21d88 <__alt_data_end+0xfffe8d88>
   22144:	00800044 	movi	r2,1
   22148:	002b883a 	mov	r21,zero
   2214c:	003f1f06 	br	21dcc <__alt_data_end+0xfffe8dcc>
   22150:	81400204 	addi	r5,r16,8
   22154:	9009883a 	mov	r4,r18
   22158:	00223bc0 	call	223bc <_free_r>
   2215c:	008000f4 	movhi	r2,3
   22160:	10a96f04 	addi	r2,r2,-23108
   22164:	10c00017 	ldw	r3,0(r2)
   22168:	003f2c06 	br	21e1c <__alt_data_end+0xfffe8e1c>
   2216c:	00c05504 	movi	r3,340
   22170:	18800536 	bltu	r3,r2,22188 <_malloc_r+0x7cc>
   22174:	3804d3fa 	srli	r2,r7,15
   22178:	11401e04 	addi	r5,r2,120
   2217c:	10c01dc4 	addi	r3,r2,119
   22180:	294b883a 	add	r5,r5,r5
   22184:	003f5606 	br	21ee0 <__alt_data_end+0xfffe8ee0>
   22188:	00c15504 	movi	r3,1364
   2218c:	18800536 	bltu	r3,r2,221a4 <_malloc_r+0x7e8>
   22190:	3804d4ba 	srli	r2,r7,18
   22194:	11401f44 	addi	r5,r2,125
   22198:	10c01f04 	addi	r3,r2,124
   2219c:	294b883a 	add	r5,r5,r5
   221a0:	003f4f06 	br	21ee0 <__alt_data_end+0xfffe8ee0>
   221a4:	01403f84 	movi	r5,254
   221a8:	00c01f84 	movi	r3,126
   221ac:	003f4c06 	br	21ee0 <__alt_data_end+0xfffe8ee0>
   221b0:	98800117 	ldw	r2,4(r19)
   221b4:	003fa006 	br	22038 <__alt_data_end+0xfffe9038>
   221b8:	8808d0fa 	srli	r4,r17,3
   221bc:	20800044 	addi	r2,r4,1
   221c0:	1085883a 	add	r2,r2,r2
   221c4:	003e9006 	br	21c08 <__alt_data_end+0xfffe8c08>

000221c8 <srand>:
   221c8:	008000f4 	movhi	r2,3
   221cc:	10a2a904 	addi	r2,r2,-30044
   221d0:	10800017 	ldw	r2,0(r2)
   221d4:	11002915 	stw	r4,164(r2)
   221d8:	10002a15 	stw	zero,168(r2)
   221dc:	f800283a 	ret

000221e0 <rand>:
   221e0:	008000f4 	movhi	r2,3
   221e4:	defffe04 	addi	sp,sp,-8
   221e8:	10a2a904 	addi	r2,r2,-30044
   221ec:	dc000015 	stw	r16,0(sp)
   221f0:	14000017 	ldw	r16,0(r2)
   221f4:	dfc00115 	stw	ra,4(sp)
   221f8:	01932574 	movhi	r6,19605
   221fc:	81002917 	ldw	r4,164(r16)
   22200:	81402a17 	ldw	r5,168(r16)
   22204:	01d614b4 	movhi	r7,22610
   22208:	319fcb44 	addi	r6,r6,32557
   2220c:	39fd0b44 	addi	r7,r7,-3027
   22210:	00226cc0 	call	226cc <__muldi3>
   22214:	11000044 	addi	r4,r2,1
   22218:	2085803a 	cmpltu	r2,r4,r2
   2221c:	10c7883a 	add	r3,r2,r3
   22220:	00a00034 	movhi	r2,32768
   22224:	10bfffc4 	addi	r2,r2,-1
   22228:	1884703a 	and	r2,r3,r2
   2222c:	81002915 	stw	r4,164(r16)
   22230:	80c02a15 	stw	r3,168(r16)
   22234:	dfc00117 	ldw	ra,4(sp)
   22238:	dc000017 	ldw	r16,0(sp)
   2223c:	dec00204 	addi	sp,sp,8
   22240:	f800283a 	ret

00022244 <_sbrk_r>:
   22244:	defffd04 	addi	sp,sp,-12
   22248:	dc000015 	stw	r16,0(sp)
   2224c:	040000f4 	movhi	r16,3
   22250:	dc400115 	stw	r17,4(sp)
   22254:	84296704 	addi	r16,r16,-23140
   22258:	2023883a 	mov	r17,r4
   2225c:	2809883a 	mov	r4,r5
   22260:	dfc00215 	stw	ra,8(sp)
   22264:	80000015 	stw	zero,0(r16)
   22268:	0022c640 	call	22c64 <sbrk>
   2226c:	00ffffc4 	movi	r3,-1
   22270:	10c00526 	beq	r2,r3,22288 <_sbrk_r+0x44>
   22274:	dfc00217 	ldw	ra,8(sp)
   22278:	dc400117 	ldw	r17,4(sp)
   2227c:	dc000017 	ldw	r16,0(sp)
   22280:	dec00304 	addi	sp,sp,12
   22284:	f800283a 	ret
   22288:	80c00017 	ldw	r3,0(r16)
   2228c:	183ff926 	beq	r3,zero,22274 <__alt_data_end+0xfffe9274>
   22290:	88c00015 	stw	r3,0(r17)
   22294:	003ff706 	br	22274 <__alt_data_end+0xfffe9274>

00022298 <_malloc_trim_r>:
   22298:	defffb04 	addi	sp,sp,-20
   2229c:	dcc00315 	stw	r19,12(sp)
   222a0:	04c000b4 	movhi	r19,2
   222a4:	dc800215 	stw	r18,8(sp)
   222a8:	dc400115 	stw	r17,4(sp)
   222ac:	dc000015 	stw	r16,0(sp)
   222b0:	dfc00415 	stw	ra,16(sp)
   222b4:	2821883a 	mov	r16,r5
   222b8:	9cdc1604 	addi	r19,r19,28760
   222bc:	2025883a 	mov	r18,r4
   222c0:	0022be00 	call	22be0 <__malloc_lock>
   222c4:	98800217 	ldw	r2,8(r19)
   222c8:	14400117 	ldw	r17,4(r2)
   222cc:	00bfff04 	movi	r2,-4
   222d0:	88a2703a 	and	r17,r17,r2
   222d4:	8c21c83a 	sub	r16,r17,r16
   222d8:	8403fbc4 	addi	r16,r16,4079
   222dc:	8020d33a 	srli	r16,r16,12
   222e0:	0083ffc4 	movi	r2,4095
   222e4:	843fffc4 	addi	r16,r16,-1
   222e8:	8020933a 	slli	r16,r16,12
   222ec:	1400060e 	bge	r2,r16,22308 <_malloc_trim_r+0x70>
   222f0:	000b883a 	mov	r5,zero
   222f4:	9009883a 	mov	r4,r18
   222f8:	00222440 	call	22244 <_sbrk_r>
   222fc:	98c00217 	ldw	r3,8(r19)
   22300:	1c47883a 	add	r3,r3,r17
   22304:	10c00a26 	beq	r2,r3,22330 <_malloc_trim_r+0x98>
   22308:	9009883a 	mov	r4,r18
   2230c:	0022c040 	call	22c04 <__malloc_unlock>
   22310:	0005883a 	mov	r2,zero
   22314:	dfc00417 	ldw	ra,16(sp)
   22318:	dcc00317 	ldw	r19,12(sp)
   2231c:	dc800217 	ldw	r18,8(sp)
   22320:	dc400117 	ldw	r17,4(sp)
   22324:	dc000017 	ldw	r16,0(sp)
   22328:	dec00504 	addi	sp,sp,20
   2232c:	f800283a 	ret
   22330:	040bc83a 	sub	r5,zero,r16
   22334:	9009883a 	mov	r4,r18
   22338:	00222440 	call	22244 <_sbrk_r>
   2233c:	00ffffc4 	movi	r3,-1
   22340:	10c00d26 	beq	r2,r3,22378 <_malloc_trim_r+0xe0>
   22344:	00c000f4 	movhi	r3,3
   22348:	18e96f04 	addi	r3,r3,-23108
   2234c:	18800017 	ldw	r2,0(r3)
   22350:	99000217 	ldw	r4,8(r19)
   22354:	8c23c83a 	sub	r17,r17,r16
   22358:	8c400054 	ori	r17,r17,1
   2235c:	1421c83a 	sub	r16,r2,r16
   22360:	24400115 	stw	r17,4(r4)
   22364:	9009883a 	mov	r4,r18
   22368:	1c000015 	stw	r16,0(r3)
   2236c:	0022c040 	call	22c04 <__malloc_unlock>
   22370:	00800044 	movi	r2,1
   22374:	003fe706 	br	22314 <__alt_data_end+0xfffe9314>
   22378:	000b883a 	mov	r5,zero
   2237c:	9009883a 	mov	r4,r18
   22380:	00222440 	call	22244 <_sbrk_r>
   22384:	99000217 	ldw	r4,8(r19)
   22388:	014003c4 	movi	r5,15
   2238c:	1107c83a 	sub	r3,r2,r4
   22390:	28ffdd0e 	bge	r5,r3,22308 <__alt_data_end+0xfffe9308>
   22394:	014000f4 	movhi	r5,3
   22398:	2962a604 	addi	r5,r5,-30056
   2239c:	29400017 	ldw	r5,0(r5)
   223a0:	18c00054 	ori	r3,r3,1
   223a4:	20c00115 	stw	r3,4(r4)
   223a8:	00c000f4 	movhi	r3,3
   223ac:	1145c83a 	sub	r2,r2,r5
   223b0:	18e96f04 	addi	r3,r3,-23108
   223b4:	18800015 	stw	r2,0(r3)
   223b8:	003fd306 	br	22308 <__alt_data_end+0xfffe9308>

000223bc <_free_r>:
   223bc:	28004126 	beq	r5,zero,224c4 <_free_r+0x108>
   223c0:	defffd04 	addi	sp,sp,-12
   223c4:	dc400115 	stw	r17,4(sp)
   223c8:	dc000015 	stw	r16,0(sp)
   223cc:	2023883a 	mov	r17,r4
   223d0:	2821883a 	mov	r16,r5
   223d4:	dfc00215 	stw	ra,8(sp)
   223d8:	0022be00 	call	22be0 <__malloc_lock>
   223dc:	81ffff17 	ldw	r7,-4(r16)
   223e0:	00bfff84 	movi	r2,-2
   223e4:	010000b4 	movhi	r4,2
   223e8:	81bffe04 	addi	r6,r16,-8
   223ec:	3884703a 	and	r2,r7,r2
   223f0:	211c1604 	addi	r4,r4,28760
   223f4:	308b883a 	add	r5,r6,r2
   223f8:	2a400117 	ldw	r9,4(r5)
   223fc:	22000217 	ldw	r8,8(r4)
   22400:	00ffff04 	movi	r3,-4
   22404:	48c6703a 	and	r3,r9,r3
   22408:	2a005726 	beq	r5,r8,22568 <_free_r+0x1ac>
   2240c:	28c00115 	stw	r3,4(r5)
   22410:	39c0004c 	andi	r7,r7,1
   22414:	3800091e 	bne	r7,zero,2243c <_free_r+0x80>
   22418:	823ffe17 	ldw	r8,-8(r16)
   2241c:	22400204 	addi	r9,r4,8
   22420:	320dc83a 	sub	r6,r6,r8
   22424:	31c00217 	ldw	r7,8(r6)
   22428:	1205883a 	add	r2,r2,r8
   2242c:	3a406526 	beq	r7,r9,225c4 <_free_r+0x208>
   22430:	32000317 	ldw	r8,12(r6)
   22434:	3a000315 	stw	r8,12(r7)
   22438:	41c00215 	stw	r7,8(r8)
   2243c:	28cf883a 	add	r7,r5,r3
   22440:	39c00117 	ldw	r7,4(r7)
   22444:	39c0004c 	andi	r7,r7,1
   22448:	38003a26 	beq	r7,zero,22534 <_free_r+0x178>
   2244c:	10c00054 	ori	r3,r2,1
   22450:	30c00115 	stw	r3,4(r6)
   22454:	3087883a 	add	r3,r6,r2
   22458:	18800015 	stw	r2,0(r3)
   2245c:	00c07fc4 	movi	r3,511
   22460:	18801936 	bltu	r3,r2,224c8 <_free_r+0x10c>
   22464:	1004d0fa 	srli	r2,r2,3
   22468:	01c00044 	movi	r7,1
   2246c:	21400117 	ldw	r5,4(r4)
   22470:	10c00044 	addi	r3,r2,1
   22474:	18c7883a 	add	r3,r3,r3
   22478:	1005d0ba 	srai	r2,r2,2
   2247c:	18c7883a 	add	r3,r3,r3
   22480:	18c7883a 	add	r3,r3,r3
   22484:	1907883a 	add	r3,r3,r4
   22488:	3884983a 	sll	r2,r7,r2
   2248c:	19c00017 	ldw	r7,0(r3)
   22490:	1a3ffe04 	addi	r8,r3,-8
   22494:	1144b03a 	or	r2,r2,r5
   22498:	32000315 	stw	r8,12(r6)
   2249c:	31c00215 	stw	r7,8(r6)
   224a0:	20800115 	stw	r2,4(r4)
   224a4:	19800015 	stw	r6,0(r3)
   224a8:	39800315 	stw	r6,12(r7)
   224ac:	8809883a 	mov	r4,r17
   224b0:	dfc00217 	ldw	ra,8(sp)
   224b4:	dc400117 	ldw	r17,4(sp)
   224b8:	dc000017 	ldw	r16,0(sp)
   224bc:	dec00304 	addi	sp,sp,12
   224c0:	0022c041 	jmpi	22c04 <__malloc_unlock>
   224c4:	f800283a 	ret
   224c8:	100ad27a 	srli	r5,r2,9
   224cc:	00c00104 	movi	r3,4
   224d0:	19404a36 	bltu	r3,r5,225fc <_free_r+0x240>
   224d4:	100ad1ba 	srli	r5,r2,6
   224d8:	28c00e44 	addi	r3,r5,57
   224dc:	18c7883a 	add	r3,r3,r3
   224e0:	29400e04 	addi	r5,r5,56
   224e4:	18c7883a 	add	r3,r3,r3
   224e8:	18c7883a 	add	r3,r3,r3
   224ec:	1909883a 	add	r4,r3,r4
   224f0:	20c00017 	ldw	r3,0(r4)
   224f4:	01c000b4 	movhi	r7,2
   224f8:	213ffe04 	addi	r4,r4,-8
   224fc:	39dc1604 	addi	r7,r7,28760
   22500:	20c04426 	beq	r4,r3,22614 <_free_r+0x258>
   22504:	01ffff04 	movi	r7,-4
   22508:	19400117 	ldw	r5,4(r3)
   2250c:	29ca703a 	and	r5,r5,r7
   22510:	1140022e 	bgeu	r2,r5,2251c <_free_r+0x160>
   22514:	18c00217 	ldw	r3,8(r3)
   22518:	20fffb1e 	bne	r4,r3,22508 <__alt_data_end+0xfffe9508>
   2251c:	19000317 	ldw	r4,12(r3)
   22520:	31000315 	stw	r4,12(r6)
   22524:	30c00215 	stw	r3,8(r6)
   22528:	21800215 	stw	r6,8(r4)
   2252c:	19800315 	stw	r6,12(r3)
   22530:	003fde06 	br	224ac <__alt_data_end+0xfffe94ac>
   22534:	29c00217 	ldw	r7,8(r5)
   22538:	10c5883a 	add	r2,r2,r3
   2253c:	00c000b4 	movhi	r3,2
   22540:	18dc1804 	addi	r3,r3,28768
   22544:	38c03b26 	beq	r7,r3,22634 <_free_r+0x278>
   22548:	2a000317 	ldw	r8,12(r5)
   2254c:	11400054 	ori	r5,r2,1
   22550:	3087883a 	add	r3,r6,r2
   22554:	3a000315 	stw	r8,12(r7)
   22558:	41c00215 	stw	r7,8(r8)
   2255c:	31400115 	stw	r5,4(r6)
   22560:	18800015 	stw	r2,0(r3)
   22564:	003fbd06 	br	2245c <__alt_data_end+0xfffe945c>
   22568:	39c0004c 	andi	r7,r7,1
   2256c:	10c5883a 	add	r2,r2,r3
   22570:	3800071e 	bne	r7,zero,22590 <_free_r+0x1d4>
   22574:	81fffe17 	ldw	r7,-8(r16)
   22578:	31cdc83a 	sub	r6,r6,r7
   2257c:	30c00317 	ldw	r3,12(r6)
   22580:	31400217 	ldw	r5,8(r6)
   22584:	11c5883a 	add	r2,r2,r7
   22588:	28c00315 	stw	r3,12(r5)
   2258c:	19400215 	stw	r5,8(r3)
   22590:	10c00054 	ori	r3,r2,1
   22594:	30c00115 	stw	r3,4(r6)
   22598:	00c000f4 	movhi	r3,3
   2259c:	18e2a704 	addi	r3,r3,-30052
   225a0:	18c00017 	ldw	r3,0(r3)
   225a4:	21800215 	stw	r6,8(r4)
   225a8:	10ffc036 	bltu	r2,r3,224ac <__alt_data_end+0xfffe94ac>
   225ac:	008000f4 	movhi	r2,3
   225b0:	10a96604 	addi	r2,r2,-23144
   225b4:	11400017 	ldw	r5,0(r2)
   225b8:	8809883a 	mov	r4,r17
   225bc:	00222980 	call	22298 <_malloc_trim_r>
   225c0:	003fba06 	br	224ac <__alt_data_end+0xfffe94ac>
   225c4:	28c9883a 	add	r4,r5,r3
   225c8:	21000117 	ldw	r4,4(r4)
   225cc:	2100004c 	andi	r4,r4,1
   225d0:	2000391e 	bne	r4,zero,226b8 <_free_r+0x2fc>
   225d4:	29c00217 	ldw	r7,8(r5)
   225d8:	29000317 	ldw	r4,12(r5)
   225dc:	1885883a 	add	r2,r3,r2
   225e0:	10c00054 	ori	r3,r2,1
   225e4:	39000315 	stw	r4,12(r7)
   225e8:	21c00215 	stw	r7,8(r4)
   225ec:	30c00115 	stw	r3,4(r6)
   225f0:	308d883a 	add	r6,r6,r2
   225f4:	30800015 	stw	r2,0(r6)
   225f8:	003fac06 	br	224ac <__alt_data_end+0xfffe94ac>
   225fc:	00c00504 	movi	r3,20
   22600:	19401536 	bltu	r3,r5,22658 <_free_r+0x29c>
   22604:	28c01704 	addi	r3,r5,92
   22608:	18c7883a 	add	r3,r3,r3
   2260c:	294016c4 	addi	r5,r5,91
   22610:	003fb406 	br	224e4 <__alt_data_end+0xfffe94e4>
   22614:	280bd0ba 	srai	r5,r5,2
   22618:	00c00044 	movi	r3,1
   2261c:	38800117 	ldw	r2,4(r7)
   22620:	194a983a 	sll	r5,r3,r5
   22624:	2007883a 	mov	r3,r4
   22628:	2884b03a 	or	r2,r5,r2
   2262c:	38800115 	stw	r2,4(r7)
   22630:	003fbb06 	br	22520 <__alt_data_end+0xfffe9520>
   22634:	21800515 	stw	r6,20(r4)
   22638:	21800415 	stw	r6,16(r4)
   2263c:	10c00054 	ori	r3,r2,1
   22640:	31c00315 	stw	r7,12(r6)
   22644:	31c00215 	stw	r7,8(r6)
   22648:	30c00115 	stw	r3,4(r6)
   2264c:	308d883a 	add	r6,r6,r2
   22650:	30800015 	stw	r2,0(r6)
   22654:	003f9506 	br	224ac <__alt_data_end+0xfffe94ac>
   22658:	00c01504 	movi	r3,84
   2265c:	19400536 	bltu	r3,r5,22674 <_free_r+0x2b8>
   22660:	100ad33a 	srli	r5,r2,12
   22664:	28c01bc4 	addi	r3,r5,111
   22668:	18c7883a 	add	r3,r3,r3
   2266c:	29401b84 	addi	r5,r5,110
   22670:	003f9c06 	br	224e4 <__alt_data_end+0xfffe94e4>
   22674:	00c05504 	movi	r3,340
   22678:	19400536 	bltu	r3,r5,22690 <_free_r+0x2d4>
   2267c:	100ad3fa 	srli	r5,r2,15
   22680:	28c01e04 	addi	r3,r5,120
   22684:	18c7883a 	add	r3,r3,r3
   22688:	29401dc4 	addi	r5,r5,119
   2268c:	003f9506 	br	224e4 <__alt_data_end+0xfffe94e4>
   22690:	00c15504 	movi	r3,1364
   22694:	19400536 	bltu	r3,r5,226ac <_free_r+0x2f0>
   22698:	100ad4ba 	srli	r5,r2,18
   2269c:	28c01f44 	addi	r3,r5,125
   226a0:	18c7883a 	add	r3,r3,r3
   226a4:	29401f04 	addi	r5,r5,124
   226a8:	003f8e06 	br	224e4 <__alt_data_end+0xfffe94e4>
   226ac:	00c03f84 	movi	r3,254
   226b0:	01401f84 	movi	r5,126
   226b4:	003f8b06 	br	224e4 <__alt_data_end+0xfffe94e4>
   226b8:	10c00054 	ori	r3,r2,1
   226bc:	30c00115 	stw	r3,4(r6)
   226c0:	308d883a 	add	r6,r6,r2
   226c4:	30800015 	stw	r2,0(r6)
   226c8:	003f7806 	br	224ac <__alt_data_end+0xfffe94ac>

000226cc <__muldi3>:
   226cc:	defff604 	addi	sp,sp,-40
   226d0:	dd800615 	stw	r22,24(sp)
   226d4:	dd400515 	stw	r21,20(sp)
   226d8:	dc400115 	stw	r17,4(sp)
   226dc:	357fffcc 	andi	r21,r6,65535
   226e0:	2022d43a 	srli	r17,r4,16
   226e4:	25bfffcc 	andi	r22,r4,65535
   226e8:	dcc00315 	stw	r19,12(sp)
   226ec:	dc800215 	stw	r18,8(sp)
   226f0:	2027883a 	mov	r19,r4
   226f4:	2825883a 	mov	r18,r5
   226f8:	b009883a 	mov	r4,r22
   226fc:	a80b883a 	mov	r5,r21
   22700:	dfc00915 	stw	ra,36(sp)
   22704:	df000815 	stw	fp,32(sp)
   22708:	ddc00715 	stw	r23,28(sp)
   2270c:	3839883a 	mov	fp,r7
   22710:	302ed43a 	srli	r23,r6,16
   22714:	dd000415 	stw	r20,16(sp)
   22718:	dc000015 	stw	r16,0(sp)
   2271c:	3029883a 	mov	r20,r6
   22720:	002196c0 	call	2196c <__mulsi3>
   22724:	a80b883a 	mov	r5,r21
   22728:	8809883a 	mov	r4,r17
   2272c:	1021883a 	mov	r16,r2
   22730:	002196c0 	call	2196c <__mulsi3>
   22734:	8809883a 	mov	r4,r17
   22738:	b80b883a 	mov	r5,r23
   2273c:	102b883a 	mov	r21,r2
   22740:	002196c0 	call	2196c <__mulsi3>
   22744:	b80b883a 	mov	r5,r23
   22748:	b009883a 	mov	r4,r22
   2274c:	1023883a 	mov	r17,r2
   22750:	002196c0 	call	2196c <__mulsi3>
   22754:	8006d43a 	srli	r3,r16,16
   22758:	1545883a 	add	r2,r2,r21
   2275c:	1885883a 	add	r2,r3,r2
   22760:	1540022e 	bgeu	r2,r21,2276c <__muldi3+0xa0>
   22764:	00c00074 	movhi	r3,1
   22768:	88e3883a 	add	r17,r17,r3
   2276c:	1006d43a 	srli	r3,r2,16
   22770:	1004943a 	slli	r2,r2,16
   22774:	e00b883a 	mov	r5,fp
   22778:	9809883a 	mov	r4,r19
   2277c:	843fffcc 	andi	r16,r16,65535
   22780:	1c63883a 	add	r17,r3,r17
   22784:	1421883a 	add	r16,r2,r16
   22788:	002196c0 	call	2196c <__mulsi3>
   2278c:	900b883a 	mov	r5,r18
   22790:	a009883a 	mov	r4,r20
   22794:	1027883a 	mov	r19,r2
   22798:	002196c0 	call	2196c <__mulsi3>
   2279c:	9885883a 	add	r2,r19,r2
   227a0:	1447883a 	add	r3,r2,r17
   227a4:	8005883a 	mov	r2,r16
   227a8:	dfc00917 	ldw	ra,36(sp)
   227ac:	df000817 	ldw	fp,32(sp)
   227b0:	ddc00717 	ldw	r23,28(sp)
   227b4:	dd800617 	ldw	r22,24(sp)
   227b8:	dd400517 	ldw	r21,20(sp)
   227bc:	dd000417 	ldw	r20,16(sp)
   227c0:	dcc00317 	ldw	r19,12(sp)
   227c4:	dc800217 	ldw	r18,8(sp)
   227c8:	dc400117 	ldw	r17,4(sp)
   227cc:	dc000017 	ldw	r16,0(sp)
   227d0:	dec00a04 	addi	sp,sp,40
   227d4:	f800283a 	ret

000227d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   227d8:	defff904 	addi	sp,sp,-28
   227dc:	dfc00615 	stw	ra,24(sp)
   227e0:	df000515 	stw	fp,20(sp)
   227e4:	df000504 	addi	fp,sp,20
   227e8:	e13ffc15 	stw	r4,-16(fp)
   227ec:	e17ffd15 	stw	r5,-12(fp)
   227f0:	e1bffe15 	stw	r6,-8(fp)
   227f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   227f8:	e0800217 	ldw	r2,8(fp)
   227fc:	d8800015 	stw	r2,0(sp)
   22800:	e1ffff17 	ldw	r7,-4(fp)
   22804:	e1bffe17 	ldw	r6,-8(fp)
   22808:	e17ffd17 	ldw	r5,-12(fp)
   2280c:	e13ffc17 	ldw	r4,-16(fp)
   22810:	00229880 	call	22988 <alt_iic_isr_register>
}  
   22814:	e037883a 	mov	sp,fp
   22818:	dfc00117 	ldw	ra,4(sp)
   2281c:	df000017 	ldw	fp,0(sp)
   22820:	dec00204 	addi	sp,sp,8
   22824:	f800283a 	ret

00022828 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22828:	defff904 	addi	sp,sp,-28
   2282c:	df000615 	stw	fp,24(sp)
   22830:	df000604 	addi	fp,sp,24
   22834:	e13ffe15 	stw	r4,-8(fp)
   22838:	e17fff15 	stw	r5,-4(fp)
   2283c:	e0bfff17 	ldw	r2,-4(fp)
   22840:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22844:	0005303a 	rdctl	r2,status
   22848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2284c:	e0fffb17 	ldw	r3,-20(fp)
   22850:	00bfff84 	movi	r2,-2
   22854:	1884703a 	and	r2,r3,r2
   22858:	1001703a 	wrctl	status,r2
  
  return context;
   2285c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22860:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22864:	00c00044 	movi	r3,1
   22868:	e0bffa17 	ldw	r2,-24(fp)
   2286c:	1884983a 	sll	r2,r3,r2
   22870:	1007883a 	mov	r3,r2
   22874:	d0a6c517 	ldw	r2,-25836(gp)
   22878:	1884b03a 	or	r2,r3,r2
   2287c:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22880:	d0a6c517 	ldw	r2,-25836(gp)
   22884:	100170fa 	wrctl	ienable,r2
   22888:	e0bffc17 	ldw	r2,-16(fp)
   2288c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22890:	e0bffd17 	ldw	r2,-12(fp)
   22894:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22898:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2289c:	0001883a 	nop
}
   228a0:	e037883a 	mov	sp,fp
   228a4:	df000017 	ldw	fp,0(sp)
   228a8:	dec00104 	addi	sp,sp,4
   228ac:	f800283a 	ret

000228b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   228b0:	defff904 	addi	sp,sp,-28
   228b4:	df000615 	stw	fp,24(sp)
   228b8:	df000604 	addi	fp,sp,24
   228bc:	e13ffe15 	stw	r4,-8(fp)
   228c0:	e17fff15 	stw	r5,-4(fp)
   228c4:	e0bfff17 	ldw	r2,-4(fp)
   228c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   228cc:	0005303a 	rdctl	r2,status
   228d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   228d4:	e0fffb17 	ldw	r3,-20(fp)
   228d8:	00bfff84 	movi	r2,-2
   228dc:	1884703a 	and	r2,r3,r2
   228e0:	1001703a 	wrctl	status,r2
  
  return context;
   228e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   228e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   228ec:	00c00044 	movi	r3,1
   228f0:	e0bffa17 	ldw	r2,-24(fp)
   228f4:	1884983a 	sll	r2,r3,r2
   228f8:	0084303a 	nor	r2,zero,r2
   228fc:	1007883a 	mov	r3,r2
   22900:	d0a6c517 	ldw	r2,-25836(gp)
   22904:	1884703a 	and	r2,r3,r2
   22908:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2290c:	d0a6c517 	ldw	r2,-25836(gp)
   22910:	100170fa 	wrctl	ienable,r2
   22914:	e0bffc17 	ldw	r2,-16(fp)
   22918:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2291c:	e0bffd17 	ldw	r2,-12(fp)
   22920:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22924:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22928:	0001883a 	nop
}
   2292c:	e037883a 	mov	sp,fp
   22930:	df000017 	ldw	fp,0(sp)
   22934:	dec00104 	addi	sp,sp,4
   22938:	f800283a 	ret

0002293c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2293c:	defffc04 	addi	sp,sp,-16
   22940:	df000315 	stw	fp,12(sp)
   22944:	df000304 	addi	fp,sp,12
   22948:	e13ffe15 	stw	r4,-8(fp)
   2294c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22950:	000530fa 	rdctl	r2,ienable
   22954:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22958:	00c00044 	movi	r3,1
   2295c:	e0bfff17 	ldw	r2,-4(fp)
   22960:	1884983a 	sll	r2,r3,r2
   22964:	1007883a 	mov	r3,r2
   22968:	e0bffd17 	ldw	r2,-12(fp)
   2296c:	1884703a 	and	r2,r3,r2
   22970:	1004c03a 	cmpne	r2,r2,zero
   22974:	10803fcc 	andi	r2,r2,255
}
   22978:	e037883a 	mov	sp,fp
   2297c:	df000017 	ldw	fp,0(sp)
   22980:	dec00104 	addi	sp,sp,4
   22984:	f800283a 	ret

00022988 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22988:	defff504 	addi	sp,sp,-44
   2298c:	dfc00a15 	stw	ra,40(sp)
   22990:	df000915 	stw	fp,36(sp)
   22994:	df000904 	addi	fp,sp,36
   22998:	e13ffc15 	stw	r4,-16(fp)
   2299c:	e17ffd15 	stw	r5,-12(fp)
   229a0:	e1bffe15 	stw	r6,-8(fp)
   229a4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   229a8:	00bffa84 	movi	r2,-22
   229ac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   229b0:	e0bffd17 	ldw	r2,-12(fp)
   229b4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   229b8:	e0bff817 	ldw	r2,-32(fp)
   229bc:	10800808 	cmpgei	r2,r2,32
   229c0:	1000271e 	bne	r2,zero,22a60 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   229c4:	0005303a 	rdctl	r2,status
   229c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   229cc:	e0fffb17 	ldw	r3,-20(fp)
   229d0:	00bfff84 	movi	r2,-2
   229d4:	1884703a 	and	r2,r3,r2
   229d8:	1001703a 	wrctl	status,r2
  
  return context;
   229dc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   229e0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   229e4:	008000f4 	movhi	r2,3
   229e8:	10a97904 	addi	r2,r2,-23068
   229ec:	e0fff817 	ldw	r3,-32(fp)
   229f0:	180690fa 	slli	r3,r3,3
   229f4:	10c5883a 	add	r2,r2,r3
   229f8:	e0fffe17 	ldw	r3,-8(fp)
   229fc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22a00:	008000f4 	movhi	r2,3
   22a04:	10a97904 	addi	r2,r2,-23068
   22a08:	e0fff817 	ldw	r3,-32(fp)
   22a0c:	180690fa 	slli	r3,r3,3
   22a10:	10c5883a 	add	r2,r2,r3
   22a14:	10800104 	addi	r2,r2,4
   22a18:	e0ffff17 	ldw	r3,-4(fp)
   22a1c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22a20:	e0bffe17 	ldw	r2,-8(fp)
   22a24:	10000526 	beq	r2,zero,22a3c <alt_iic_isr_register+0xb4>
   22a28:	e0bff817 	ldw	r2,-32(fp)
   22a2c:	100b883a 	mov	r5,r2
   22a30:	e13ffc17 	ldw	r4,-16(fp)
   22a34:	00228280 	call	22828 <alt_ic_irq_enable>
   22a38:	00000406 	br	22a4c <alt_iic_isr_register+0xc4>
   22a3c:	e0bff817 	ldw	r2,-32(fp)
   22a40:	100b883a 	mov	r5,r2
   22a44:	e13ffc17 	ldw	r4,-16(fp)
   22a48:	00228b00 	call	228b0 <alt_ic_irq_disable>
   22a4c:	e0bff715 	stw	r2,-36(fp)
   22a50:	e0bffa17 	ldw	r2,-24(fp)
   22a54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22a58:	e0bff917 	ldw	r2,-28(fp)
   22a5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22a60:	e0bff717 	ldw	r2,-36(fp)
}
   22a64:	e037883a 	mov	sp,fp
   22a68:	dfc00117 	ldw	ra,4(sp)
   22a6c:	df000017 	ldw	fp,0(sp)
   22a70:	dec00204 	addi	sp,sp,8
   22a74:	f800283a 	ret

00022a78 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   22a78:	defffc04 	addi	sp,sp,-16
   22a7c:	df000315 	stw	fp,12(sp)
   22a80:	df000304 	addi	fp,sp,12
   22a84:	e13ffd15 	stw	r4,-12(fp)
   22a88:	e17ffe15 	stw	r5,-8(fp)
   22a8c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   22a90:	e0fffe17 	ldw	r3,-8(fp)
   22a94:	e0bffd17 	ldw	r2,-12(fp)
   22a98:	18800c26 	beq	r3,r2,22acc <alt_load_section+0x54>
  {
    while( to != end )
   22a9c:	00000806 	br	22ac0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   22aa0:	e0bffe17 	ldw	r2,-8(fp)
   22aa4:	10c00104 	addi	r3,r2,4
   22aa8:	e0fffe15 	stw	r3,-8(fp)
   22aac:	e0fffd17 	ldw	r3,-12(fp)
   22ab0:	19000104 	addi	r4,r3,4
   22ab4:	e13ffd15 	stw	r4,-12(fp)
   22ab8:	18c00017 	ldw	r3,0(r3)
   22abc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   22ac0:	e0fffe17 	ldw	r3,-8(fp)
   22ac4:	e0bfff17 	ldw	r2,-4(fp)
   22ac8:	18bff51e 	bne	r3,r2,22aa0 <__alt_data_end+0xfffe9aa0>
    {
      *to++ = *from++;
    }
  }
}
   22acc:	0001883a 	nop
   22ad0:	e037883a 	mov	sp,fp
   22ad4:	df000017 	ldw	fp,0(sp)
   22ad8:	dec00104 	addi	sp,sp,4
   22adc:	f800283a 	ret

00022ae0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   22ae0:	defffe04 	addi	sp,sp,-8
   22ae4:	dfc00115 	stw	ra,4(sp)
   22ae8:	df000015 	stw	fp,0(sp)
   22aec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22af0:	018000f4 	movhi	r6,3
   22af4:	31a2b404 	addi	r6,r6,-30000
   22af8:	014000b4 	movhi	r5,2
   22afc:	295c0604 	addi	r5,r5,28696
   22b00:	010000f4 	movhi	r4,3
   22b04:	2122b404 	addi	r4,r4,-30000
   22b08:	0022a780 	call	22a78 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   22b0c:	018000b4 	movhi	r6,2
   22b10:	31808c04 	addi	r6,r6,560
   22b14:	014000b4 	movhi	r5,2
   22b18:	29400804 	addi	r5,r5,32
   22b1c:	010000b4 	movhi	r4,2
   22b20:	21000804 	addi	r4,r4,32
   22b24:	0022a780 	call	22a78 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   22b28:	018000b4 	movhi	r6,2
   22b2c:	319c0604 	addi	r6,r6,28696
   22b30:	014000b4 	movhi	r5,2
   22b34:	295bcc04 	addi	r5,r5,28464
   22b38:	010000b4 	movhi	r4,2
   22b3c:	211bcc04 	addi	r4,r4,28464
   22b40:	0022a780 	call	22a78 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   22b44:	0023b7c0 	call	23b7c <alt_dcache_flush_all>
  alt_icache_flush_all();
   22b48:	0023d680 	call	23d68 <alt_icache_flush_all>
}
   22b4c:	0001883a 	nop
   22b50:	e037883a 	mov	sp,fp
   22b54:	dfc00117 	ldw	ra,4(sp)
   22b58:	df000017 	ldw	fp,0(sp)
   22b5c:	dec00204 	addi	sp,sp,8
   22b60:	f800283a 	ret

00022b64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   22b64:	defffd04 	addi	sp,sp,-12
   22b68:	dfc00215 	stw	ra,8(sp)
   22b6c:	df000115 	stw	fp,4(sp)
   22b70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   22b74:	0009883a 	mov	r4,zero
   22b78:	0022d480 	call	22d48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   22b7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   22b80:	0022d800 	call	22d80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   22b84:	018000b4 	movhi	r6,2
   22b88:	319bfb04 	addi	r6,r6,28652
   22b8c:	014000b4 	movhi	r5,2
   22b90:	295bfb04 	addi	r5,r5,28652
   22b94:	010000b4 	movhi	r4,2
   22b98:	211bfb04 	addi	r4,r4,28652
   22b9c:	0023f080 	call	23f08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   22ba0:	0023ca80 	call	23ca8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   22ba4:	010000b4 	movhi	r4,2
   22ba8:	210f4204 	addi	r4,r4,15624
   22bac:	00246b00 	call	246b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   22bb0:	d0a6c617 	ldw	r2,-25832(gp)
   22bb4:	d0e6c717 	ldw	r3,-25828(gp)
   22bb8:	d126c817 	ldw	r4,-25824(gp)
   22bbc:	200d883a 	mov	r6,r4
   22bc0:	180b883a 	mov	r5,r3
   22bc4:	1009883a 	mov	r4,r2
   22bc8:	002026c0 	call	2026c <main>
   22bcc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   22bd0:	01000044 	movi	r4,1
   22bd4:	0023aa40 	call	23aa4 <close>
  exit (result);
   22bd8:	e13fff17 	ldw	r4,-4(fp)
   22bdc:	00246c40 	call	246c4 <exit>

00022be0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   22be0:	defffe04 	addi	sp,sp,-8
   22be4:	df000115 	stw	fp,4(sp)
   22be8:	df000104 	addi	fp,sp,4
   22bec:	e13fff15 	stw	r4,-4(fp)
}
   22bf0:	0001883a 	nop
   22bf4:	e037883a 	mov	sp,fp
   22bf8:	df000017 	ldw	fp,0(sp)
   22bfc:	dec00104 	addi	sp,sp,4
   22c00:	f800283a 	ret

00022c04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   22c04:	defffe04 	addi	sp,sp,-8
   22c08:	df000115 	stw	fp,4(sp)
   22c0c:	df000104 	addi	fp,sp,4
   22c10:	e13fff15 	stw	r4,-4(fp)
}
   22c14:	0001883a 	nop
   22c18:	e037883a 	mov	sp,fp
   22c1c:	df000017 	ldw	fp,0(sp)
   22c20:	dec00104 	addi	sp,sp,4
   22c24:	f800283a 	ret

00022c28 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   22c28:	defffd04 	addi	sp,sp,-12
   22c2c:	dfc00215 	stw	ra,8(sp)
   22c30:	df000115 	stw	fp,4(sp)
   22c34:	df000104 	addi	fp,sp,4
   22c38:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   22c3c:	d0a00617 	ldw	r2,-32744(gp)
   22c40:	10800217 	ldw	r2,8(r2)
   22c44:	100b883a 	mov	r5,r2
   22c48:	e13fff17 	ldw	r4,-4(fp)
   22c4c:	00247980 	call	24798 <fputs>
#endif
#endif
}
   22c50:	e037883a 	mov	sp,fp
   22c54:	dfc00117 	ldw	ra,4(sp)
   22c58:	df000017 	ldw	fp,0(sp)
   22c5c:	dec00204 	addi	sp,sp,8
   22c60:	f800283a 	ret

00022c64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   22c64:	defff904 	addi	sp,sp,-28
   22c68:	df000615 	stw	fp,24(sp)
   22c6c:	df000604 	addi	fp,sp,24
   22c70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c74:	0005303a 	rdctl	r2,status
   22c78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c7c:	e0fffe17 	ldw	r3,-8(fp)
   22c80:	00bfff84 	movi	r2,-2
   22c84:	1884703a 	and	r2,r3,r2
   22c88:	1001703a 	wrctl	status,r2
  
  return context;
   22c8c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   22c90:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   22c94:	d0a00817 	ldw	r2,-32736(gp)
   22c98:	10c000c4 	addi	r3,r2,3
   22c9c:	00bfff04 	movi	r2,-4
   22ca0:	1884703a 	and	r2,r3,r2
   22ca4:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   22ca8:	d0e00817 	ldw	r3,-32736(gp)
   22cac:	e0bfff17 	ldw	r2,-4(fp)
   22cb0:	1887883a 	add	r3,r3,r2
   22cb4:	00800134 	movhi	r2,4
   22cb8:	10a40004 	addi	r2,r2,-28672
   22cbc:	10c0062e 	bgeu	r2,r3,22cd8 <sbrk+0x74>
   22cc0:	e0bffb17 	ldw	r2,-20(fp)
   22cc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22cc8:	e0bffa17 	ldw	r2,-24(fp)
   22ccc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   22cd0:	00bfffc4 	movi	r2,-1
   22cd4:	00000b06 	br	22d04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   22cd8:	d0a00817 	ldw	r2,-32736(gp)
   22cdc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   22ce0:	d0e00817 	ldw	r3,-32736(gp)
   22ce4:	e0bfff17 	ldw	r2,-4(fp)
   22ce8:	1885883a 	add	r2,r3,r2
   22cec:	d0a00815 	stw	r2,-32736(gp)
   22cf0:	e0bffb17 	ldw	r2,-20(fp)
   22cf4:	e0bffc15 	stw	r2,-16(fp)
   22cf8:	e0bffc17 	ldw	r2,-16(fp)
   22cfc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   22d00:	e0bffd17 	ldw	r2,-12(fp)
} 
   22d04:	e037883a 	mov	sp,fp
   22d08:	df000017 	ldw	fp,0(sp)
   22d0c:	dec00104 	addi	sp,sp,4
   22d10:	f800283a 	ret

00022d14 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22d14:	defffd04 	addi	sp,sp,-12
   22d18:	dfc00215 	stw	ra,8(sp)
   22d1c:	df000115 	stw	fp,4(sp)
   22d20:	df000104 	addi	fp,sp,4
   22d24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   22d28:	d1600b04 	addi	r5,gp,-32724
   22d2c:	e13fff17 	ldw	r4,-4(fp)
   22d30:	0023c040 	call	23c04 <alt_dev_llist_insert>
}
   22d34:	e037883a 	mov	sp,fp
   22d38:	dfc00117 	ldw	ra,4(sp)
   22d3c:	df000017 	ldw	fp,0(sp)
   22d40:	dec00204 	addi	sp,sp,8
   22d44:	f800283a 	ret

00022d48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   22d48:	defffd04 	addi	sp,sp,-12
   22d4c:	dfc00215 	stw	ra,8(sp)
   22d50:	df000115 	stw	fp,4(sp)
   22d54:	df000104 	addi	fp,sp,4
   22d58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   22d5c:	00244300 	call	24430 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   22d60:	00800044 	movi	r2,1
   22d64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   22d68:	0001883a 	nop
   22d6c:	e037883a 	mov	sp,fp
   22d70:	dfc00117 	ldw	ra,4(sp)
   22d74:	df000017 	ldw	fp,0(sp)
   22d78:	dec00204 	addi	sp,sp,8
   22d7c:	f800283a 	ret

00022d80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   22d80:	defffe04 	addi	sp,sp,-8
   22d84:	dfc00115 	stw	ra,4(sp)
   22d88:	df000015 	stw	fp,0(sp)
   22d8c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_GAME, timer_game);
   22d90:	01c00284 	movi	r7,10
   22d94:	01800044 	movi	r6,1
   22d98:	000b883a 	mov	r5,zero
   22d9c:	01000134 	movhi	r4,4
   22da0:	21040804 	addi	r4,r4,4128
   22da4:	00238c00 	call	238c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_LCD, timer_lcd);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   22da8:	000d883a 	mov	r6,zero
   22dac:	000b883a 	mov	r5,zero
   22db0:	010000b4 	movhi	r4,2
   22db4:	211e2b04 	addi	r4,r4,30892
   22db8:	0022f440 	call	22f44 <altera_avalon_jtag_uart_init>
   22dbc:	010000b4 	movhi	r4,2
   22dc0:	211e2104 	addi	r4,r4,30852
   22dc4:	0022d140 	call	22d14 <alt_dev_reg>
}
   22dc8:	0001883a 	nop
   22dcc:	e037883a 	mov	sp,fp
   22dd0:	dfc00117 	ldw	ra,4(sp)
   22dd4:	df000017 	ldw	fp,0(sp)
   22dd8:	dec00204 	addi	sp,sp,8
   22ddc:	f800283a 	ret

00022de0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22de0:	defffa04 	addi	sp,sp,-24
   22de4:	dfc00515 	stw	ra,20(sp)
   22de8:	df000415 	stw	fp,16(sp)
   22dec:	df000404 	addi	fp,sp,16
   22df0:	e13ffd15 	stw	r4,-12(fp)
   22df4:	e17ffe15 	stw	r5,-8(fp)
   22df8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22dfc:	e0bffd17 	ldw	r2,-12(fp)
   22e00:	10800017 	ldw	r2,0(r2)
   22e04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22e08:	e0bffc17 	ldw	r2,-16(fp)
   22e0c:	10c00a04 	addi	r3,r2,40
   22e10:	e0bffd17 	ldw	r2,-12(fp)
   22e14:	10800217 	ldw	r2,8(r2)
   22e18:	100f883a 	mov	r7,r2
   22e1c:	e1bfff17 	ldw	r6,-4(fp)
   22e20:	e17ffe17 	ldw	r5,-8(fp)
   22e24:	1809883a 	mov	r4,r3
   22e28:	00234080 	call	23408 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   22e2c:	e037883a 	mov	sp,fp
   22e30:	dfc00117 	ldw	ra,4(sp)
   22e34:	df000017 	ldw	fp,0(sp)
   22e38:	dec00204 	addi	sp,sp,8
   22e3c:	f800283a 	ret

00022e40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22e40:	defffa04 	addi	sp,sp,-24
   22e44:	dfc00515 	stw	ra,20(sp)
   22e48:	df000415 	stw	fp,16(sp)
   22e4c:	df000404 	addi	fp,sp,16
   22e50:	e13ffd15 	stw	r4,-12(fp)
   22e54:	e17ffe15 	stw	r5,-8(fp)
   22e58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22e5c:	e0bffd17 	ldw	r2,-12(fp)
   22e60:	10800017 	ldw	r2,0(r2)
   22e64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   22e68:	e0bffc17 	ldw	r2,-16(fp)
   22e6c:	10c00a04 	addi	r3,r2,40
   22e70:	e0bffd17 	ldw	r2,-12(fp)
   22e74:	10800217 	ldw	r2,8(r2)
   22e78:	100f883a 	mov	r7,r2
   22e7c:	e1bfff17 	ldw	r6,-4(fp)
   22e80:	e17ffe17 	ldw	r5,-8(fp)
   22e84:	1809883a 	mov	r4,r3
   22e88:	00236240 	call	23624 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   22e8c:	e037883a 	mov	sp,fp
   22e90:	dfc00117 	ldw	ra,4(sp)
   22e94:	df000017 	ldw	fp,0(sp)
   22e98:	dec00204 	addi	sp,sp,8
   22e9c:	f800283a 	ret

00022ea0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   22ea0:	defffc04 	addi	sp,sp,-16
   22ea4:	dfc00315 	stw	ra,12(sp)
   22ea8:	df000215 	stw	fp,8(sp)
   22eac:	df000204 	addi	fp,sp,8
   22eb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22eb4:	e0bfff17 	ldw	r2,-4(fp)
   22eb8:	10800017 	ldw	r2,0(r2)
   22ebc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   22ec0:	e0bffe17 	ldw	r2,-8(fp)
   22ec4:	10c00a04 	addi	r3,r2,40
   22ec8:	e0bfff17 	ldw	r2,-4(fp)
   22ecc:	10800217 	ldw	r2,8(r2)
   22ed0:	100b883a 	mov	r5,r2
   22ed4:	1809883a 	mov	r4,r3
   22ed8:	00232b00 	call	232b0 <altera_avalon_jtag_uart_close>
}
   22edc:	e037883a 	mov	sp,fp
   22ee0:	dfc00117 	ldw	ra,4(sp)
   22ee4:	df000017 	ldw	fp,0(sp)
   22ee8:	dec00204 	addi	sp,sp,8
   22eec:	f800283a 	ret

00022ef0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   22ef0:	defffa04 	addi	sp,sp,-24
   22ef4:	dfc00515 	stw	ra,20(sp)
   22ef8:	df000415 	stw	fp,16(sp)
   22efc:	df000404 	addi	fp,sp,16
   22f00:	e13ffd15 	stw	r4,-12(fp)
   22f04:	e17ffe15 	stw	r5,-8(fp)
   22f08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   22f0c:	e0bffd17 	ldw	r2,-12(fp)
   22f10:	10800017 	ldw	r2,0(r2)
   22f14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22f18:	e0bffc17 	ldw	r2,-16(fp)
   22f1c:	10800a04 	addi	r2,r2,40
   22f20:	e1bfff17 	ldw	r6,-4(fp)
   22f24:	e17ffe17 	ldw	r5,-8(fp)
   22f28:	1009883a 	mov	r4,r2
   22f2c:	00233180 	call	23318 <altera_avalon_jtag_uart_ioctl>
}
   22f30:	e037883a 	mov	sp,fp
   22f34:	dfc00117 	ldw	ra,4(sp)
   22f38:	df000017 	ldw	fp,0(sp)
   22f3c:	dec00204 	addi	sp,sp,8
   22f40:	f800283a 	ret

00022f44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   22f44:	defffa04 	addi	sp,sp,-24
   22f48:	dfc00515 	stw	ra,20(sp)
   22f4c:	df000415 	stw	fp,16(sp)
   22f50:	df000404 	addi	fp,sp,16
   22f54:	e13ffd15 	stw	r4,-12(fp)
   22f58:	e17ffe15 	stw	r5,-8(fp)
   22f5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22f60:	e0bffd17 	ldw	r2,-12(fp)
   22f64:	00c00044 	movi	r3,1
   22f68:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   22f6c:	e0bffd17 	ldw	r2,-12(fp)
   22f70:	10800017 	ldw	r2,0(r2)
   22f74:	10800104 	addi	r2,r2,4
   22f78:	1007883a 	mov	r3,r2
   22f7c:	e0bffd17 	ldw	r2,-12(fp)
   22f80:	10800817 	ldw	r2,32(r2)
   22f84:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   22f88:	e0bffe17 	ldw	r2,-8(fp)
   22f8c:	e0ffff17 	ldw	r3,-4(fp)
   22f90:	d8000015 	stw	zero,0(sp)
   22f94:	e1fffd17 	ldw	r7,-12(fp)
   22f98:	018000b4 	movhi	r6,2
   22f9c:	318c0104 	addi	r6,r6,12292
   22fa0:	180b883a 	mov	r5,r3
   22fa4:	1009883a 	mov	r4,r2
   22fa8:	00227d80 	call	227d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   22fac:	e0bffd17 	ldw	r2,-12(fp)
   22fb0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   22fb4:	e0bffd17 	ldw	r2,-12(fp)
   22fb8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22fbc:	d0e6ca17 	ldw	r3,-25816(gp)
   22fc0:	e1fffd17 	ldw	r7,-12(fp)
   22fc4:	018000b4 	movhi	r6,2
   22fc8:	318c8404 	addi	r6,r6,12816
   22fcc:	180b883a 	mov	r5,r3
   22fd0:	1009883a 	mov	r4,r2
   22fd4:	002393c0 	call	2393c <alt_alarm_start>
   22fd8:	1000040e 	bge	r2,zero,22fec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   22fdc:	e0fffd17 	ldw	r3,-12(fp)
   22fe0:	00a00034 	movhi	r2,32768
   22fe4:	10bfffc4 	addi	r2,r2,-1
   22fe8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22fec:	0001883a 	nop
   22ff0:	e037883a 	mov	sp,fp
   22ff4:	dfc00117 	ldw	ra,4(sp)
   22ff8:	df000017 	ldw	fp,0(sp)
   22ffc:	dec00204 	addi	sp,sp,8
   23000:	f800283a 	ret

00023004 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23004:	defff804 	addi	sp,sp,-32
   23008:	df000715 	stw	fp,28(sp)
   2300c:	df000704 	addi	fp,sp,28
   23010:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23014:	e0bfff17 	ldw	r2,-4(fp)
   23018:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2301c:	e0bffb17 	ldw	r2,-20(fp)
   23020:	10800017 	ldw	r2,0(r2)
   23024:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23028:	e0bffc17 	ldw	r2,-16(fp)
   2302c:	10800104 	addi	r2,r2,4
   23030:	10800037 	ldwio	r2,0(r2)
   23034:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23038:	e0bffd17 	ldw	r2,-12(fp)
   2303c:	1080c00c 	andi	r2,r2,768
   23040:	10006d26 	beq	r2,zero,231f8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23044:	e0bffd17 	ldw	r2,-12(fp)
   23048:	1080400c 	andi	r2,r2,256
   2304c:	10003526 	beq	r2,zero,23124 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23050:	00800074 	movhi	r2,1
   23054:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23058:	e0bffb17 	ldw	r2,-20(fp)
   2305c:	10800a17 	ldw	r2,40(r2)
   23060:	10800044 	addi	r2,r2,1
   23064:	1081ffcc 	andi	r2,r2,2047
   23068:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2306c:	e0bffb17 	ldw	r2,-20(fp)
   23070:	10c00b17 	ldw	r3,44(r2)
   23074:	e0bffe17 	ldw	r2,-8(fp)
   23078:	18801526 	beq	r3,r2,230d0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2307c:	e0bffc17 	ldw	r2,-16(fp)
   23080:	10800037 	ldwio	r2,0(r2)
   23084:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23088:	e0bff917 	ldw	r2,-28(fp)
   2308c:	10a0000c 	andi	r2,r2,32768
   23090:	10001126 	beq	r2,zero,230d8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23094:	e0bffb17 	ldw	r2,-20(fp)
   23098:	10800a17 	ldw	r2,40(r2)
   2309c:	e0fff917 	ldw	r3,-28(fp)
   230a0:	1809883a 	mov	r4,r3
   230a4:	e0fffb17 	ldw	r3,-20(fp)
   230a8:	1885883a 	add	r2,r3,r2
   230ac:	10800e04 	addi	r2,r2,56
   230b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   230b4:	e0bffb17 	ldw	r2,-20(fp)
   230b8:	10800a17 	ldw	r2,40(r2)
   230bc:	10800044 	addi	r2,r2,1
   230c0:	10c1ffcc 	andi	r3,r2,2047
   230c4:	e0bffb17 	ldw	r2,-20(fp)
   230c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   230cc:	003fe206 	br	23058 <__alt_data_end+0xfffea058>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   230d0:	0001883a 	nop
   230d4:	00000106 	br	230dc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   230d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   230dc:	e0bff917 	ldw	r2,-28(fp)
   230e0:	10bfffec 	andhi	r2,r2,65535
   230e4:	10000f26 	beq	r2,zero,23124 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   230e8:	e0bffb17 	ldw	r2,-20(fp)
   230ec:	10c00817 	ldw	r3,32(r2)
   230f0:	00bfff84 	movi	r2,-2
   230f4:	1886703a 	and	r3,r3,r2
   230f8:	e0bffb17 	ldw	r2,-20(fp)
   230fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23100:	e0bffc17 	ldw	r2,-16(fp)
   23104:	10800104 	addi	r2,r2,4
   23108:	1007883a 	mov	r3,r2
   2310c:	e0bffb17 	ldw	r2,-20(fp)
   23110:	10800817 	ldw	r2,32(r2)
   23114:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23118:	e0bffc17 	ldw	r2,-16(fp)
   2311c:	10800104 	addi	r2,r2,4
   23120:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23124:	e0bffd17 	ldw	r2,-12(fp)
   23128:	1080800c 	andi	r2,r2,512
   2312c:	103fbe26 	beq	r2,zero,23028 <__alt_data_end+0xfffea028>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23130:	e0bffd17 	ldw	r2,-12(fp)
   23134:	1004d43a 	srli	r2,r2,16
   23138:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2313c:	00001406 	br	23190 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23140:	e0bffc17 	ldw	r2,-16(fp)
   23144:	e0fffb17 	ldw	r3,-20(fp)
   23148:	18c00d17 	ldw	r3,52(r3)
   2314c:	e13ffb17 	ldw	r4,-20(fp)
   23150:	20c7883a 	add	r3,r4,r3
   23154:	18c20e04 	addi	r3,r3,2104
   23158:	18c00003 	ldbu	r3,0(r3)
   2315c:	18c03fcc 	andi	r3,r3,255
   23160:	18c0201c 	xori	r3,r3,128
   23164:	18ffe004 	addi	r3,r3,-128
   23168:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2316c:	e0bffb17 	ldw	r2,-20(fp)
   23170:	10800d17 	ldw	r2,52(r2)
   23174:	10800044 	addi	r2,r2,1
   23178:	10c1ffcc 	andi	r3,r2,2047
   2317c:	e0bffb17 	ldw	r2,-20(fp)
   23180:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23184:	e0bffa17 	ldw	r2,-24(fp)
   23188:	10bfffc4 	addi	r2,r2,-1
   2318c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23190:	e0bffa17 	ldw	r2,-24(fp)
   23194:	10000526 	beq	r2,zero,231ac <altera_avalon_jtag_uart_irq+0x1a8>
   23198:	e0bffb17 	ldw	r2,-20(fp)
   2319c:	10c00d17 	ldw	r3,52(r2)
   231a0:	e0bffb17 	ldw	r2,-20(fp)
   231a4:	10800c17 	ldw	r2,48(r2)
   231a8:	18bfe51e 	bne	r3,r2,23140 <__alt_data_end+0xfffea140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   231ac:	e0bffa17 	ldw	r2,-24(fp)
   231b0:	103f9d26 	beq	r2,zero,23028 <__alt_data_end+0xfffea028>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   231b4:	e0bffb17 	ldw	r2,-20(fp)
   231b8:	10c00817 	ldw	r3,32(r2)
   231bc:	00bfff44 	movi	r2,-3
   231c0:	1886703a 	and	r3,r3,r2
   231c4:	e0bffb17 	ldw	r2,-20(fp)
   231c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   231cc:	e0bffb17 	ldw	r2,-20(fp)
   231d0:	10800017 	ldw	r2,0(r2)
   231d4:	10800104 	addi	r2,r2,4
   231d8:	1007883a 	mov	r3,r2
   231dc:	e0bffb17 	ldw	r2,-20(fp)
   231e0:	10800817 	ldw	r2,32(r2)
   231e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   231e8:	e0bffc17 	ldw	r2,-16(fp)
   231ec:	10800104 	addi	r2,r2,4
   231f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   231f4:	003f8c06 	br	23028 <__alt_data_end+0xfffea028>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   231f8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   231fc:	0001883a 	nop
   23200:	e037883a 	mov	sp,fp
   23204:	df000017 	ldw	fp,0(sp)
   23208:	dec00104 	addi	sp,sp,4
   2320c:	f800283a 	ret

00023210 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23210:	defff804 	addi	sp,sp,-32
   23214:	df000715 	stw	fp,28(sp)
   23218:	df000704 	addi	fp,sp,28
   2321c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23220:	e0bffb17 	ldw	r2,-20(fp)
   23224:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23228:	e0bff917 	ldw	r2,-28(fp)
   2322c:	10800017 	ldw	r2,0(r2)
   23230:	10800104 	addi	r2,r2,4
   23234:	10800037 	ldwio	r2,0(r2)
   23238:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2323c:	e0bffa17 	ldw	r2,-24(fp)
   23240:	1081000c 	andi	r2,r2,1024
   23244:	10000b26 	beq	r2,zero,23274 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23248:	e0bff917 	ldw	r2,-28(fp)
   2324c:	10800017 	ldw	r2,0(r2)
   23250:	10800104 	addi	r2,r2,4
   23254:	1007883a 	mov	r3,r2
   23258:	e0bff917 	ldw	r2,-28(fp)
   2325c:	10800817 	ldw	r2,32(r2)
   23260:	10810014 	ori	r2,r2,1024
   23264:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23268:	e0bff917 	ldw	r2,-28(fp)
   2326c:	10000915 	stw	zero,36(r2)
   23270:	00000a06 	br	2329c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23274:	e0bff917 	ldw	r2,-28(fp)
   23278:	10c00917 	ldw	r3,36(r2)
   2327c:	00a00034 	movhi	r2,32768
   23280:	10bfff04 	addi	r2,r2,-4
   23284:	10c00536 	bltu	r2,r3,2329c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23288:	e0bff917 	ldw	r2,-28(fp)
   2328c:	10800917 	ldw	r2,36(r2)
   23290:	10c00044 	addi	r3,r2,1
   23294:	e0bff917 	ldw	r2,-28(fp)
   23298:	10c00915 	stw	r3,36(r2)
   2329c:	d0a6ca17 	ldw	r2,-25816(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   232a0:	e037883a 	mov	sp,fp
   232a4:	df000017 	ldw	fp,0(sp)
   232a8:	dec00104 	addi	sp,sp,4
   232ac:	f800283a 	ret

000232b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   232b0:	defffd04 	addi	sp,sp,-12
   232b4:	df000215 	stw	fp,8(sp)
   232b8:	df000204 	addi	fp,sp,8
   232bc:	e13ffe15 	stw	r4,-8(fp)
   232c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   232c4:	00000506 	br	232dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   232c8:	e0bfff17 	ldw	r2,-4(fp)
   232cc:	1090000c 	andi	r2,r2,16384
   232d0:	10000226 	beq	r2,zero,232dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   232d4:	00bffd44 	movi	r2,-11
   232d8:	00000b06 	br	23308 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   232dc:	e0bffe17 	ldw	r2,-8(fp)
   232e0:	10c00d17 	ldw	r3,52(r2)
   232e4:	e0bffe17 	ldw	r2,-8(fp)
   232e8:	10800c17 	ldw	r2,48(r2)
   232ec:	18800526 	beq	r3,r2,23304 <altera_avalon_jtag_uart_close+0x54>
   232f0:	e0bffe17 	ldw	r2,-8(fp)
   232f4:	10c00917 	ldw	r3,36(r2)
   232f8:	e0bffe17 	ldw	r2,-8(fp)
   232fc:	10800117 	ldw	r2,4(r2)
   23300:	18bff136 	bltu	r3,r2,232c8 <__alt_data_end+0xfffea2c8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23304:	0005883a 	mov	r2,zero
}
   23308:	e037883a 	mov	sp,fp
   2330c:	df000017 	ldw	fp,0(sp)
   23310:	dec00104 	addi	sp,sp,4
   23314:	f800283a 	ret

00023318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23318:	defffa04 	addi	sp,sp,-24
   2331c:	df000515 	stw	fp,20(sp)
   23320:	df000504 	addi	fp,sp,20
   23324:	e13ffd15 	stw	r4,-12(fp)
   23328:	e17ffe15 	stw	r5,-8(fp)
   2332c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23330:	00bff9c4 	movi	r2,-25
   23334:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23338:	e0bffe17 	ldw	r2,-8(fp)
   2333c:	10da8060 	cmpeqi	r3,r2,27137
   23340:	1800031e 	bne	r3,zero,23350 <altera_avalon_jtag_uart_ioctl+0x38>
   23344:	109a80a0 	cmpeqi	r2,r2,27138
   23348:	1000181e 	bne	r2,zero,233ac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2334c:	00002906 	br	233f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23350:	e0bffd17 	ldw	r2,-12(fp)
   23354:	10c00117 	ldw	r3,4(r2)
   23358:	00a00034 	movhi	r2,32768
   2335c:	10bfffc4 	addi	r2,r2,-1
   23360:	18802126 	beq	r3,r2,233e8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   23364:	e0bfff17 	ldw	r2,-4(fp)
   23368:	10800017 	ldw	r2,0(r2)
   2336c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23370:	e0bffc17 	ldw	r2,-16(fp)
   23374:	10800090 	cmplti	r2,r2,2
   23378:	1000061e 	bne	r2,zero,23394 <altera_avalon_jtag_uart_ioctl+0x7c>
   2337c:	e0fffc17 	ldw	r3,-16(fp)
   23380:	00a00034 	movhi	r2,32768
   23384:	10bfffc4 	addi	r2,r2,-1
   23388:	18800226 	beq	r3,r2,23394 <altera_avalon_jtag_uart_ioctl+0x7c>
   2338c:	e0bffc17 	ldw	r2,-16(fp)
   23390:	00000206 	br	2339c <altera_avalon_jtag_uart_ioctl+0x84>
   23394:	00a00034 	movhi	r2,32768
   23398:	10bfff84 	addi	r2,r2,-2
   2339c:	e0fffd17 	ldw	r3,-12(fp)
   233a0:	18800115 	stw	r2,4(r3)
      rc = 0;
   233a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   233a8:	00000f06 	br	233e8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   233ac:	e0bffd17 	ldw	r2,-12(fp)
   233b0:	10c00117 	ldw	r3,4(r2)
   233b4:	00a00034 	movhi	r2,32768
   233b8:	10bfffc4 	addi	r2,r2,-1
   233bc:	18800c26 	beq	r3,r2,233f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   233c0:	e0bffd17 	ldw	r2,-12(fp)
   233c4:	10c00917 	ldw	r3,36(r2)
   233c8:	e0bffd17 	ldw	r2,-12(fp)
   233cc:	10800117 	ldw	r2,4(r2)
   233d0:	1885803a 	cmpltu	r2,r3,r2
   233d4:	10c03fcc 	andi	r3,r2,255
   233d8:	e0bfff17 	ldw	r2,-4(fp)
   233dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   233e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   233e4:	00000206 	br	233f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   233e8:	0001883a 	nop
   233ec:	00000106 	br	233f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   233f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   233f4:	e0bffb17 	ldw	r2,-20(fp)
}
   233f8:	e037883a 	mov	sp,fp
   233fc:	df000017 	ldw	fp,0(sp)
   23400:	dec00104 	addi	sp,sp,4
   23404:	f800283a 	ret

00023408 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23408:	defff304 	addi	sp,sp,-52
   2340c:	dfc00c15 	stw	ra,48(sp)
   23410:	df000b15 	stw	fp,44(sp)
   23414:	df000b04 	addi	fp,sp,44
   23418:	e13ffc15 	stw	r4,-16(fp)
   2341c:	e17ffd15 	stw	r5,-12(fp)
   23420:	e1bffe15 	stw	r6,-8(fp)
   23424:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   23428:	e0bffd17 	ldw	r2,-12(fp)
   2342c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23430:	00004706 	br	23550 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23434:	e0bffc17 	ldw	r2,-16(fp)
   23438:	10800a17 	ldw	r2,40(r2)
   2343c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   23440:	e0bffc17 	ldw	r2,-16(fp)
   23444:	10800b17 	ldw	r2,44(r2)
   23448:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2344c:	e0fff717 	ldw	r3,-36(fp)
   23450:	e0bff817 	ldw	r2,-32(fp)
   23454:	18800536 	bltu	r3,r2,2346c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23458:	e0fff717 	ldw	r3,-36(fp)
   2345c:	e0bff817 	ldw	r2,-32(fp)
   23460:	1885c83a 	sub	r2,r3,r2
   23464:	e0bff615 	stw	r2,-40(fp)
   23468:	00000406 	br	2347c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2346c:	00c20004 	movi	r3,2048
   23470:	e0bff817 	ldw	r2,-32(fp)
   23474:	1885c83a 	sub	r2,r3,r2
   23478:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2347c:	e0bff617 	ldw	r2,-40(fp)
   23480:	10001e26 	beq	r2,zero,234fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   23484:	e0fffe17 	ldw	r3,-8(fp)
   23488:	e0bff617 	ldw	r2,-40(fp)
   2348c:	1880022e 	bgeu	r3,r2,23498 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   23490:	e0bffe17 	ldw	r2,-8(fp)
   23494:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23498:	e0bffc17 	ldw	r2,-16(fp)
   2349c:	10c00e04 	addi	r3,r2,56
   234a0:	e0bff817 	ldw	r2,-32(fp)
   234a4:	1885883a 	add	r2,r3,r2
   234a8:	e1bff617 	ldw	r6,-40(fp)
   234ac:	100b883a 	mov	r5,r2
   234b0:	e13ff517 	ldw	r4,-44(fp)
   234b4:	0024dd80 	call	24dd8 <memcpy>
      ptr   += n;
   234b8:	e0fff517 	ldw	r3,-44(fp)
   234bc:	e0bff617 	ldw	r2,-40(fp)
   234c0:	1885883a 	add	r2,r3,r2
   234c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   234c8:	e0fffe17 	ldw	r3,-8(fp)
   234cc:	e0bff617 	ldw	r2,-40(fp)
   234d0:	1885c83a 	sub	r2,r3,r2
   234d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   234d8:	e0fff817 	ldw	r3,-32(fp)
   234dc:	e0bff617 	ldw	r2,-40(fp)
   234e0:	1885883a 	add	r2,r3,r2
   234e4:	10c1ffcc 	andi	r3,r2,2047
   234e8:	e0bffc17 	ldw	r2,-16(fp)
   234ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   234f0:	e0bffe17 	ldw	r2,-8(fp)
   234f4:	00bfcf16 	blt	zero,r2,23434 <__alt_data_end+0xfffea434>
   234f8:	00000106 	br	23500 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   234fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   23500:	e0fff517 	ldw	r3,-44(fp)
   23504:	e0bffd17 	ldw	r2,-12(fp)
   23508:	1880141e 	bne	r3,r2,2355c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2350c:	e0bfff17 	ldw	r2,-4(fp)
   23510:	1090000c 	andi	r2,r2,16384
   23514:	1000131e 	bne	r2,zero,23564 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23518:	0001883a 	nop
   2351c:	e0bffc17 	ldw	r2,-16(fp)
   23520:	10c00a17 	ldw	r3,40(r2)
   23524:	e0bff717 	ldw	r2,-36(fp)
   23528:	1880051e 	bne	r3,r2,23540 <altera_avalon_jtag_uart_read+0x138>
   2352c:	e0bffc17 	ldw	r2,-16(fp)
   23530:	10c00917 	ldw	r3,36(r2)
   23534:	e0bffc17 	ldw	r2,-16(fp)
   23538:	10800117 	ldw	r2,4(r2)
   2353c:	18bff736 	bltu	r3,r2,2351c <__alt_data_end+0xfffea51c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23540:	e0bffc17 	ldw	r2,-16(fp)
   23544:	10c00a17 	ldw	r3,40(r2)
   23548:	e0bff717 	ldw	r2,-36(fp)
   2354c:	18800726 	beq	r3,r2,2356c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23550:	e0bffe17 	ldw	r2,-8(fp)
   23554:	00bfb716 	blt	zero,r2,23434 <__alt_data_end+0xfffea434>
   23558:	00000506 	br	23570 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2355c:	0001883a 	nop
   23560:	00000306 	br	23570 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23564:	0001883a 	nop
   23568:	00000106 	br	23570 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2356c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23570:	e0fff517 	ldw	r3,-44(fp)
   23574:	e0bffd17 	ldw	r2,-12(fp)
   23578:	18801826 	beq	r3,r2,235dc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2357c:	0005303a 	rdctl	r2,status
   23580:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23584:	e0fffb17 	ldw	r3,-20(fp)
   23588:	00bfff84 	movi	r2,-2
   2358c:	1884703a 	and	r2,r3,r2
   23590:	1001703a 	wrctl	status,r2
  
  return context;
   23594:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23598:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2359c:	e0bffc17 	ldw	r2,-16(fp)
   235a0:	10800817 	ldw	r2,32(r2)
   235a4:	10c00054 	ori	r3,r2,1
   235a8:	e0bffc17 	ldw	r2,-16(fp)
   235ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   235b0:	e0bffc17 	ldw	r2,-16(fp)
   235b4:	10800017 	ldw	r2,0(r2)
   235b8:	10800104 	addi	r2,r2,4
   235bc:	1007883a 	mov	r3,r2
   235c0:	e0bffc17 	ldw	r2,-16(fp)
   235c4:	10800817 	ldw	r2,32(r2)
   235c8:	18800035 	stwio	r2,0(r3)
   235cc:	e0bffa17 	ldw	r2,-24(fp)
   235d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   235d4:	e0bff917 	ldw	r2,-28(fp)
   235d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   235dc:	e0fff517 	ldw	r3,-44(fp)
   235e0:	e0bffd17 	ldw	r2,-12(fp)
   235e4:	18800426 	beq	r3,r2,235f8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   235e8:	e0fff517 	ldw	r3,-44(fp)
   235ec:	e0bffd17 	ldw	r2,-12(fp)
   235f0:	1885c83a 	sub	r2,r3,r2
   235f4:	00000606 	br	23610 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   235f8:	e0bfff17 	ldw	r2,-4(fp)
   235fc:	1090000c 	andi	r2,r2,16384
   23600:	10000226 	beq	r2,zero,2360c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   23604:	00bffd44 	movi	r2,-11
   23608:	00000106 	br	23610 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2360c:	00bffec4 	movi	r2,-5
}
   23610:	e037883a 	mov	sp,fp
   23614:	dfc00117 	ldw	ra,4(sp)
   23618:	df000017 	ldw	fp,0(sp)
   2361c:	dec00204 	addi	sp,sp,8
   23620:	f800283a 	ret

00023624 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23624:	defff304 	addi	sp,sp,-52
   23628:	dfc00c15 	stw	ra,48(sp)
   2362c:	df000b15 	stw	fp,44(sp)
   23630:	df000b04 	addi	fp,sp,44
   23634:	e13ffc15 	stw	r4,-16(fp)
   23638:	e17ffd15 	stw	r5,-12(fp)
   2363c:	e1bffe15 	stw	r6,-8(fp)
   23640:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23644:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23648:	e0bffd17 	ldw	r2,-12(fp)
   2364c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23650:	00003706 	br	23730 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23654:	e0bffc17 	ldw	r2,-16(fp)
   23658:	10800c17 	ldw	r2,48(r2)
   2365c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   23660:	e0bffc17 	ldw	r2,-16(fp)
   23664:	10800d17 	ldw	r2,52(r2)
   23668:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2366c:	e0fff917 	ldw	r3,-28(fp)
   23670:	e0bff517 	ldw	r2,-44(fp)
   23674:	1880062e 	bgeu	r3,r2,23690 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   23678:	e0fff517 	ldw	r3,-44(fp)
   2367c:	e0bff917 	ldw	r2,-28(fp)
   23680:	1885c83a 	sub	r2,r3,r2
   23684:	10bfffc4 	addi	r2,r2,-1
   23688:	e0bff615 	stw	r2,-40(fp)
   2368c:	00000b06 	br	236bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   23690:	e0bff517 	ldw	r2,-44(fp)
   23694:	10000526 	beq	r2,zero,236ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   23698:	00c20004 	movi	r3,2048
   2369c:	e0bff917 	ldw	r2,-28(fp)
   236a0:	1885c83a 	sub	r2,r3,r2
   236a4:	e0bff615 	stw	r2,-40(fp)
   236a8:	00000406 	br	236bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   236ac:	00c1ffc4 	movi	r3,2047
   236b0:	e0bff917 	ldw	r2,-28(fp)
   236b4:	1885c83a 	sub	r2,r3,r2
   236b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   236bc:	e0bff617 	ldw	r2,-40(fp)
   236c0:	10001e26 	beq	r2,zero,2373c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   236c4:	e0fffe17 	ldw	r3,-8(fp)
   236c8:	e0bff617 	ldw	r2,-40(fp)
   236cc:	1880022e 	bgeu	r3,r2,236d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   236d0:	e0bffe17 	ldw	r2,-8(fp)
   236d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   236d8:	e0bffc17 	ldw	r2,-16(fp)
   236dc:	10c20e04 	addi	r3,r2,2104
   236e0:	e0bff917 	ldw	r2,-28(fp)
   236e4:	1885883a 	add	r2,r3,r2
   236e8:	e1bff617 	ldw	r6,-40(fp)
   236ec:	e17ffd17 	ldw	r5,-12(fp)
   236f0:	1009883a 	mov	r4,r2
   236f4:	0024dd80 	call	24dd8 <memcpy>
      ptr   += n;
   236f8:	e0fffd17 	ldw	r3,-12(fp)
   236fc:	e0bff617 	ldw	r2,-40(fp)
   23700:	1885883a 	add	r2,r3,r2
   23704:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   23708:	e0fffe17 	ldw	r3,-8(fp)
   2370c:	e0bff617 	ldw	r2,-40(fp)
   23710:	1885c83a 	sub	r2,r3,r2
   23714:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23718:	e0fff917 	ldw	r3,-28(fp)
   2371c:	e0bff617 	ldw	r2,-40(fp)
   23720:	1885883a 	add	r2,r3,r2
   23724:	10c1ffcc 	andi	r3,r2,2047
   23728:	e0bffc17 	ldw	r2,-16(fp)
   2372c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23730:	e0bffe17 	ldw	r2,-8(fp)
   23734:	00bfc716 	blt	zero,r2,23654 <__alt_data_end+0xfffea654>
   23738:	00000106 	br	23740 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2373c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23740:	0005303a 	rdctl	r2,status
   23744:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23748:	e0fffb17 	ldw	r3,-20(fp)
   2374c:	00bfff84 	movi	r2,-2
   23750:	1884703a 	and	r2,r3,r2
   23754:	1001703a 	wrctl	status,r2
  
  return context;
   23758:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2375c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23760:	e0bffc17 	ldw	r2,-16(fp)
   23764:	10800817 	ldw	r2,32(r2)
   23768:	10c00094 	ori	r3,r2,2
   2376c:	e0bffc17 	ldw	r2,-16(fp)
   23770:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23774:	e0bffc17 	ldw	r2,-16(fp)
   23778:	10800017 	ldw	r2,0(r2)
   2377c:	10800104 	addi	r2,r2,4
   23780:	1007883a 	mov	r3,r2
   23784:	e0bffc17 	ldw	r2,-16(fp)
   23788:	10800817 	ldw	r2,32(r2)
   2378c:	18800035 	stwio	r2,0(r3)
   23790:	e0bffa17 	ldw	r2,-24(fp)
   23794:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23798:	e0bff817 	ldw	r2,-32(fp)
   2379c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   237a0:	e0bffe17 	ldw	r2,-8(fp)
   237a4:	0080100e 	bge	zero,r2,237e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   237a8:	e0bfff17 	ldw	r2,-4(fp)
   237ac:	1090000c 	andi	r2,r2,16384
   237b0:	1000101e 	bne	r2,zero,237f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   237b4:	0001883a 	nop
   237b8:	e0bffc17 	ldw	r2,-16(fp)
   237bc:	10c00d17 	ldw	r3,52(r2)
   237c0:	e0bff517 	ldw	r2,-44(fp)
   237c4:	1880051e 	bne	r3,r2,237dc <altera_avalon_jtag_uart_write+0x1b8>
   237c8:	e0bffc17 	ldw	r2,-16(fp)
   237cc:	10c00917 	ldw	r3,36(r2)
   237d0:	e0bffc17 	ldw	r2,-16(fp)
   237d4:	10800117 	ldw	r2,4(r2)
   237d8:	18bff736 	bltu	r3,r2,237b8 <__alt_data_end+0xfffea7b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   237dc:	e0bffc17 	ldw	r2,-16(fp)
   237e0:	10800917 	ldw	r2,36(r2)
   237e4:	1000051e 	bne	r2,zero,237fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   237e8:	e0bffe17 	ldw	r2,-8(fp)
   237ec:	00bfd016 	blt	zero,r2,23730 <__alt_data_end+0xfffea730>
   237f0:	00000306 	br	23800 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   237f4:	0001883a 	nop
   237f8:	00000106 	br	23800 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   237fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   23800:	e0fffd17 	ldw	r3,-12(fp)
   23804:	e0bff717 	ldw	r2,-36(fp)
   23808:	18800426 	beq	r3,r2,2381c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2380c:	e0fffd17 	ldw	r3,-12(fp)
   23810:	e0bff717 	ldw	r2,-36(fp)
   23814:	1885c83a 	sub	r2,r3,r2
   23818:	00000606 	br	23834 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2381c:	e0bfff17 	ldw	r2,-4(fp)
   23820:	1090000c 	andi	r2,r2,16384
   23824:	10000226 	beq	r2,zero,23830 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   23828:	00bffd44 	movi	r2,-11
   2382c:	00000106 	br	23834 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   23830:	00bffec4 	movi	r2,-5
}
   23834:	e037883a 	mov	sp,fp
   23838:	dfc00117 	ldw	ra,4(sp)
   2383c:	df000017 	ldw	fp,0(sp)
   23840:	dec00204 	addi	sp,sp,8
   23844:	f800283a 	ret

00023848 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   23848:	defffa04 	addi	sp,sp,-24
   2384c:	dfc00515 	stw	ra,20(sp)
   23850:	df000415 	stw	fp,16(sp)
   23854:	df000404 	addi	fp,sp,16
   23858:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2385c:	0007883a 	mov	r3,zero
   23860:	e0bfff17 	ldw	r2,-4(fp)
   23864:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   23868:	e0bfff17 	ldw	r2,-4(fp)
   2386c:	10800104 	addi	r2,r2,4
   23870:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23874:	0005303a 	rdctl	r2,status
   23878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2387c:	e0fffd17 	ldw	r3,-12(fp)
   23880:	00bfff84 	movi	r2,-2
   23884:	1884703a 	and	r2,r3,r2
   23888:	1001703a 	wrctl	status,r2
  
  return context;
   2388c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   23890:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   23894:	00243280 	call	24328 <alt_tick>
   23898:	e0bffc17 	ldw	r2,-16(fp)
   2389c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   238a0:	e0bffe17 	ldw	r2,-8(fp)
   238a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   238a8:	0001883a 	nop
   238ac:	e037883a 	mov	sp,fp
   238b0:	dfc00117 	ldw	ra,4(sp)
   238b4:	df000017 	ldw	fp,0(sp)
   238b8:	dec00204 	addi	sp,sp,8
   238bc:	f800283a 	ret

000238c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   238c0:	defff804 	addi	sp,sp,-32
   238c4:	dfc00715 	stw	ra,28(sp)
   238c8:	df000615 	stw	fp,24(sp)
   238cc:	df000604 	addi	fp,sp,24
   238d0:	e13ffc15 	stw	r4,-16(fp)
   238d4:	e17ffd15 	stw	r5,-12(fp)
   238d8:	e1bffe15 	stw	r6,-8(fp)
   238dc:	e1ffff15 	stw	r7,-4(fp)
   238e0:	e0bfff17 	ldw	r2,-4(fp)
   238e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   238e8:	d0a6ca17 	ldw	r2,-25816(gp)
   238ec:	1000021e 	bne	r2,zero,238f8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   238f0:	e0bffb17 	ldw	r2,-20(fp)
   238f4:	d0a6ca15 	stw	r2,-25816(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   238f8:	e0bffc17 	ldw	r2,-16(fp)
   238fc:	10800104 	addi	r2,r2,4
   23900:	00c001c4 	movi	r3,7
   23904:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   23908:	d8000015 	stw	zero,0(sp)
   2390c:	e1fffc17 	ldw	r7,-16(fp)
   23910:	018000b4 	movhi	r6,2
   23914:	318e1204 	addi	r6,r6,14408
   23918:	e17ffe17 	ldw	r5,-8(fp)
   2391c:	e13ffd17 	ldw	r4,-12(fp)
   23920:	00227d80 	call	227d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   23924:	0001883a 	nop
   23928:	e037883a 	mov	sp,fp
   2392c:	dfc00117 	ldw	ra,4(sp)
   23930:	df000017 	ldw	fp,0(sp)
   23934:	dec00204 	addi	sp,sp,8
   23938:	f800283a 	ret

0002393c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2393c:	defff504 	addi	sp,sp,-44
   23940:	df000a15 	stw	fp,40(sp)
   23944:	df000a04 	addi	fp,sp,40
   23948:	e13ffc15 	stw	r4,-16(fp)
   2394c:	e17ffd15 	stw	r5,-12(fp)
   23950:	e1bffe15 	stw	r6,-8(fp)
   23954:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23958:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2395c:	d0a6ca17 	ldw	r2,-25816(gp)
  
  if (alt_ticks_per_second ())
   23960:	10003c26 	beq	r2,zero,23a54 <alt_alarm_start+0x118>
  {
    if (alarm)
   23964:	e0bffc17 	ldw	r2,-16(fp)
   23968:	10003826 	beq	r2,zero,23a4c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2396c:	e0bffc17 	ldw	r2,-16(fp)
   23970:	e0fffe17 	ldw	r3,-8(fp)
   23974:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23978:	e0bffc17 	ldw	r2,-16(fp)
   2397c:	e0ffff17 	ldw	r3,-4(fp)
   23980:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23984:	0005303a 	rdctl	r2,status
   23988:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2398c:	e0fff917 	ldw	r3,-28(fp)
   23990:	00bfff84 	movi	r2,-2
   23994:	1884703a 	and	r2,r3,r2
   23998:	1001703a 	wrctl	status,r2
  
  return context;
   2399c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   239a0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   239a4:	d0a6cb17 	ldw	r2,-25812(gp)
      
      current_nticks = alt_nticks();
   239a8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   239ac:	e0fffd17 	ldw	r3,-12(fp)
   239b0:	e0bff617 	ldw	r2,-40(fp)
   239b4:	1885883a 	add	r2,r3,r2
   239b8:	10c00044 	addi	r3,r2,1
   239bc:	e0bffc17 	ldw	r2,-16(fp)
   239c0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   239c4:	e0bffc17 	ldw	r2,-16(fp)
   239c8:	10c00217 	ldw	r3,8(r2)
   239cc:	e0bff617 	ldw	r2,-40(fp)
   239d0:	1880042e 	bgeu	r3,r2,239e4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   239d4:	e0bffc17 	ldw	r2,-16(fp)
   239d8:	00c00044 	movi	r3,1
   239dc:	10c00405 	stb	r3,16(r2)
   239e0:	00000206 	br	239ec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   239e4:	e0bffc17 	ldw	r2,-16(fp)
   239e8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   239ec:	e0bffc17 	ldw	r2,-16(fp)
   239f0:	d0e00f04 	addi	r3,gp,-32708
   239f4:	e0fffa15 	stw	r3,-24(fp)
   239f8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   239fc:	e0bffb17 	ldw	r2,-20(fp)
   23a00:	e0fffa17 	ldw	r3,-24(fp)
   23a04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23a08:	e0bffa17 	ldw	r2,-24(fp)
   23a0c:	10c00017 	ldw	r3,0(r2)
   23a10:	e0bffb17 	ldw	r2,-20(fp)
   23a14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23a18:	e0bffa17 	ldw	r2,-24(fp)
   23a1c:	10800017 	ldw	r2,0(r2)
   23a20:	e0fffb17 	ldw	r3,-20(fp)
   23a24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23a28:	e0bffa17 	ldw	r2,-24(fp)
   23a2c:	e0fffb17 	ldw	r3,-20(fp)
   23a30:	10c00015 	stw	r3,0(r2)
   23a34:	e0bff817 	ldw	r2,-32(fp)
   23a38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23a3c:	e0bff717 	ldw	r2,-36(fp)
   23a40:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23a44:	0005883a 	mov	r2,zero
   23a48:	00000306 	br	23a58 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   23a4c:	00bffa84 	movi	r2,-22
   23a50:	00000106 	br	23a58 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   23a54:	00bfde84 	movi	r2,-134
  }
}
   23a58:	e037883a 	mov	sp,fp
   23a5c:	df000017 	ldw	fp,0(sp)
   23a60:	dec00104 	addi	sp,sp,4
   23a64:	f800283a 	ret

00023a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23a68:	defffe04 	addi	sp,sp,-8
   23a6c:	dfc00115 	stw	ra,4(sp)
   23a70:	df000015 	stw	fp,0(sp)
   23a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a78:	d0a00e17 	ldw	r2,-32712(gp)
   23a7c:	10000326 	beq	r2,zero,23a8c <alt_get_errno+0x24>
   23a80:	d0a00e17 	ldw	r2,-32712(gp)
   23a84:	103ee83a 	callr	r2
   23a88:	00000106 	br	23a90 <alt_get_errno+0x28>
   23a8c:	d0a6c404 	addi	r2,gp,-25840
}
   23a90:	e037883a 	mov	sp,fp
   23a94:	dfc00117 	ldw	ra,4(sp)
   23a98:	df000017 	ldw	fp,0(sp)
   23a9c:	dec00204 	addi	sp,sp,8
   23aa0:	f800283a 	ret

00023aa4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23aa4:	defffb04 	addi	sp,sp,-20
   23aa8:	dfc00415 	stw	ra,16(sp)
   23aac:	df000315 	stw	fp,12(sp)
   23ab0:	df000304 	addi	fp,sp,12
   23ab4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23ab8:	e0bfff17 	ldw	r2,-4(fp)
   23abc:	10000816 	blt	r2,zero,23ae0 <close+0x3c>
   23ac0:	01400304 	movi	r5,12
   23ac4:	e13fff17 	ldw	r4,-4(fp)
   23ac8:	002196c0 	call	2196c <__mulsi3>
   23acc:	1007883a 	mov	r3,r2
   23ad0:	008000f4 	movhi	r2,3
   23ad4:	10a24304 	addi	r2,r2,-30452
   23ad8:	1885883a 	add	r2,r3,r2
   23adc:	00000106 	br	23ae4 <close+0x40>
   23ae0:	0005883a 	mov	r2,zero
   23ae4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23ae8:	e0bffd17 	ldw	r2,-12(fp)
   23aec:	10001926 	beq	r2,zero,23b54 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23af0:	e0bffd17 	ldw	r2,-12(fp)
   23af4:	10800017 	ldw	r2,0(r2)
   23af8:	10800417 	ldw	r2,16(r2)
   23afc:	10000626 	beq	r2,zero,23b18 <close+0x74>
   23b00:	e0bffd17 	ldw	r2,-12(fp)
   23b04:	10800017 	ldw	r2,0(r2)
   23b08:	10800417 	ldw	r2,16(r2)
   23b0c:	e13ffd17 	ldw	r4,-12(fp)
   23b10:	103ee83a 	callr	r2
   23b14:	00000106 	br	23b1c <close+0x78>
   23b18:	0005883a 	mov	r2,zero
   23b1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23b20:	e13fff17 	ldw	r4,-4(fp)
   23b24:	00242080 	call	24208 <alt_release_fd>
    if (rval < 0)
   23b28:	e0bffe17 	ldw	r2,-8(fp)
   23b2c:	1000070e 	bge	r2,zero,23b4c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   23b30:	0023a680 	call	23a68 <alt_get_errno>
   23b34:	1007883a 	mov	r3,r2
   23b38:	e0bffe17 	ldw	r2,-8(fp)
   23b3c:	0085c83a 	sub	r2,zero,r2
   23b40:	18800015 	stw	r2,0(r3)
      return -1;
   23b44:	00bfffc4 	movi	r2,-1
   23b48:	00000706 	br	23b68 <close+0xc4>
    }
    return 0;
   23b4c:	0005883a 	mov	r2,zero
   23b50:	00000506 	br	23b68 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23b54:	0023a680 	call	23a68 <alt_get_errno>
   23b58:	1007883a 	mov	r3,r2
   23b5c:	00801444 	movi	r2,81
   23b60:	18800015 	stw	r2,0(r3)
    return -1;
   23b64:	00bfffc4 	movi	r2,-1
  }
}
   23b68:	e037883a 	mov	sp,fp
   23b6c:	dfc00117 	ldw	ra,4(sp)
   23b70:	df000017 	ldw	fp,0(sp)
   23b74:	dec00204 	addi	sp,sp,8
   23b78:	f800283a 	ret

00023b7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23b7c:	deffff04 	addi	sp,sp,-4
   23b80:	df000015 	stw	fp,0(sp)
   23b84:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23b88:	0001883a 	nop
   23b8c:	e037883a 	mov	sp,fp
   23b90:	df000017 	ldw	fp,0(sp)
   23b94:	dec00104 	addi	sp,sp,4
   23b98:	f800283a 	ret

00023b9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23b9c:	defffc04 	addi	sp,sp,-16
   23ba0:	df000315 	stw	fp,12(sp)
   23ba4:	df000304 	addi	fp,sp,12
   23ba8:	e13ffd15 	stw	r4,-12(fp)
   23bac:	e17ffe15 	stw	r5,-8(fp)
   23bb0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23bb4:	e0bfff17 	ldw	r2,-4(fp)
}
   23bb8:	e037883a 	mov	sp,fp
   23bbc:	df000017 	ldw	fp,0(sp)
   23bc0:	dec00104 	addi	sp,sp,4
   23bc4:	f800283a 	ret

00023bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23bc8:	defffe04 	addi	sp,sp,-8
   23bcc:	dfc00115 	stw	ra,4(sp)
   23bd0:	df000015 	stw	fp,0(sp)
   23bd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23bd8:	d0a00e17 	ldw	r2,-32712(gp)
   23bdc:	10000326 	beq	r2,zero,23bec <alt_get_errno+0x24>
   23be0:	d0a00e17 	ldw	r2,-32712(gp)
   23be4:	103ee83a 	callr	r2
   23be8:	00000106 	br	23bf0 <alt_get_errno+0x28>
   23bec:	d0a6c404 	addi	r2,gp,-25840
}
   23bf0:	e037883a 	mov	sp,fp
   23bf4:	dfc00117 	ldw	ra,4(sp)
   23bf8:	df000017 	ldw	fp,0(sp)
   23bfc:	dec00204 	addi	sp,sp,8
   23c00:	f800283a 	ret

00023c04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23c04:	defffa04 	addi	sp,sp,-24
   23c08:	dfc00515 	stw	ra,20(sp)
   23c0c:	df000415 	stw	fp,16(sp)
   23c10:	df000404 	addi	fp,sp,16
   23c14:	e13ffe15 	stw	r4,-8(fp)
   23c18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23c1c:	e0bffe17 	ldw	r2,-8(fp)
   23c20:	10000326 	beq	r2,zero,23c30 <alt_dev_llist_insert+0x2c>
   23c24:	e0bffe17 	ldw	r2,-8(fp)
   23c28:	10800217 	ldw	r2,8(r2)
   23c2c:	1000061e 	bne	r2,zero,23c48 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23c30:	0023bc80 	call	23bc8 <alt_get_errno>
   23c34:	1007883a 	mov	r3,r2
   23c38:	00800584 	movi	r2,22
   23c3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23c40:	00bffa84 	movi	r2,-22
   23c44:	00001306 	br	23c94 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23c48:	e0bffe17 	ldw	r2,-8(fp)
   23c4c:	e0ffff17 	ldw	r3,-4(fp)
   23c50:	e0fffc15 	stw	r3,-16(fp)
   23c54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23c58:	e0bffd17 	ldw	r2,-12(fp)
   23c5c:	e0fffc17 	ldw	r3,-16(fp)
   23c60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23c64:	e0bffc17 	ldw	r2,-16(fp)
   23c68:	10c00017 	ldw	r3,0(r2)
   23c6c:	e0bffd17 	ldw	r2,-12(fp)
   23c70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23c74:	e0bffc17 	ldw	r2,-16(fp)
   23c78:	10800017 	ldw	r2,0(r2)
   23c7c:	e0fffd17 	ldw	r3,-12(fp)
   23c80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23c84:	e0bffc17 	ldw	r2,-16(fp)
   23c88:	e0fffd17 	ldw	r3,-12(fp)
   23c8c:	10c00015 	stw	r3,0(r2)

  return 0;  
   23c90:	0005883a 	mov	r2,zero
}
   23c94:	e037883a 	mov	sp,fp
   23c98:	dfc00117 	ldw	ra,4(sp)
   23c9c:	df000017 	ldw	fp,0(sp)
   23ca0:	dec00204 	addi	sp,sp,8
   23ca4:	f800283a 	ret

00023ca8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23ca8:	defffd04 	addi	sp,sp,-12
   23cac:	dfc00215 	stw	ra,8(sp)
   23cb0:	df000115 	stw	fp,4(sp)
   23cb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23cb8:	008000b4 	movhi	r2,2
   23cbc:	109bcb04 	addi	r2,r2,28460
   23cc0:	e0bfff15 	stw	r2,-4(fp)
   23cc4:	00000606 	br	23ce0 <_do_ctors+0x38>
        (*ctor) (); 
   23cc8:	e0bfff17 	ldw	r2,-4(fp)
   23ccc:	10800017 	ldw	r2,0(r2)
   23cd0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23cd4:	e0bfff17 	ldw	r2,-4(fp)
   23cd8:	10bfff04 	addi	r2,r2,-4
   23cdc:	e0bfff15 	stw	r2,-4(fp)
   23ce0:	e0ffff17 	ldw	r3,-4(fp)
   23ce4:	008000b4 	movhi	r2,2
   23ce8:	109bcc04 	addi	r2,r2,28464
   23cec:	18bff62e 	bgeu	r3,r2,23cc8 <__alt_data_end+0xfffeacc8>
        (*ctor) (); 
}
   23cf0:	0001883a 	nop
   23cf4:	e037883a 	mov	sp,fp
   23cf8:	dfc00117 	ldw	ra,4(sp)
   23cfc:	df000017 	ldw	fp,0(sp)
   23d00:	dec00204 	addi	sp,sp,8
   23d04:	f800283a 	ret

00023d08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23d08:	defffd04 	addi	sp,sp,-12
   23d0c:	dfc00215 	stw	ra,8(sp)
   23d10:	df000115 	stw	fp,4(sp)
   23d14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23d18:	008000b4 	movhi	r2,2
   23d1c:	109bcb04 	addi	r2,r2,28460
   23d20:	e0bfff15 	stw	r2,-4(fp)
   23d24:	00000606 	br	23d40 <_do_dtors+0x38>
        (*dtor) (); 
   23d28:	e0bfff17 	ldw	r2,-4(fp)
   23d2c:	10800017 	ldw	r2,0(r2)
   23d30:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23d34:	e0bfff17 	ldw	r2,-4(fp)
   23d38:	10bfff04 	addi	r2,r2,-4
   23d3c:	e0bfff15 	stw	r2,-4(fp)
   23d40:	e0ffff17 	ldw	r3,-4(fp)
   23d44:	008000b4 	movhi	r2,2
   23d48:	109bcc04 	addi	r2,r2,28464
   23d4c:	18bff62e 	bgeu	r3,r2,23d28 <__alt_data_end+0xfffead28>
        (*dtor) (); 
}
   23d50:	0001883a 	nop
   23d54:	e037883a 	mov	sp,fp
   23d58:	dfc00117 	ldw	ra,4(sp)
   23d5c:	df000017 	ldw	fp,0(sp)
   23d60:	dec00204 	addi	sp,sp,8
   23d64:	f800283a 	ret

00023d68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23d68:	deffff04 	addi	sp,sp,-4
   23d6c:	df000015 	stw	fp,0(sp)
   23d70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23d74:	0001883a 	nop
   23d78:	e037883a 	mov	sp,fp
   23d7c:	df000017 	ldw	fp,0(sp)
   23d80:	dec00104 	addi	sp,sp,4
   23d84:	f800283a 	ret

00023d88 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23d88:	defffe04 	addi	sp,sp,-8
   23d8c:	df000115 	stw	fp,4(sp)
   23d90:	df000104 	addi	fp,sp,4
   23d94:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   23d98:	e0bfff17 	ldw	r2,-4(fp)
   23d9c:	10bffe84 	addi	r2,r2,-6
   23da0:	10c00428 	cmpgeui	r3,r2,16
   23da4:	18001a1e 	bne	r3,zero,23e10 <alt_exception_cause_generated_bad_addr+0x88>
   23da8:	100690ba 	slli	r3,r2,2
   23dac:	008000b4 	movhi	r2,2
   23db0:	108f7004 	addi	r2,r2,15808
   23db4:	1885883a 	add	r2,r3,r2
   23db8:	10800017 	ldw	r2,0(r2)
   23dbc:	1000683a 	jmp	r2
   23dc0:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
   23dc4:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
   23dc8:	00023e10 	cmplti	zero,zero,2296
   23dcc:	00023e10 	cmplti	zero,zero,2296
   23dd0:	00023e10 	cmplti	zero,zero,2296
   23dd4:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
   23dd8:	00023e08 	cmpgei	zero,zero,2296
   23ddc:	00023e10 	cmplti	zero,zero,2296
   23de0:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
   23de4:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
   23de8:	00023e10 	cmplti	zero,zero,2296
   23dec:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
   23df0:	00023e08 	cmpgei	zero,zero,2296
   23df4:	00023e10 	cmplti	zero,zero,2296
   23df8:	00023e10 	cmplti	zero,zero,2296
   23dfc:	00023e00 	call	23e0 <__alt_mem_onchip_ram-0x1dc20>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23e00:	00800044 	movi	r2,1
   23e04:	00000306 	br	23e14 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23e08:	0005883a 	mov	r2,zero
   23e0c:	00000106 	br	23e14 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23e10:	0005883a 	mov	r2,zero
  }
}
   23e14:	e037883a 	mov	sp,fp
   23e18:	df000017 	ldw	fp,0(sp)
   23e1c:	dec00104 	addi	sp,sp,4
   23e20:	f800283a 	ret

00023e24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23e24:	defff804 	addi	sp,sp,-32
   23e28:	dfc00715 	stw	ra,28(sp)
   23e2c:	df000615 	stw	fp,24(sp)
   23e30:	dc000515 	stw	r16,20(sp)
   23e34:	df000604 	addi	fp,sp,24
   23e38:	e13ffb15 	stw	r4,-20(fp)
   23e3c:	e17ffc15 	stw	r5,-16(fp)
   23e40:	e1bffd15 	stw	r6,-12(fp)
   23e44:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23e48:	e1bffe17 	ldw	r6,-8(fp)
   23e4c:	e17ffd17 	ldw	r5,-12(fp)
   23e50:	e13ffc17 	ldw	r4,-16(fp)
   23e54:	00240ac0 	call	240ac <open>
   23e58:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23e5c:	e0bffa17 	ldw	r2,-24(fp)
   23e60:	10002216 	blt	r2,zero,23eec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23e64:	040000f4 	movhi	r16,3
   23e68:	84224304 	addi	r16,r16,-30452
   23e6c:	e0bffa17 	ldw	r2,-24(fp)
   23e70:	01400304 	movi	r5,12
   23e74:	1009883a 	mov	r4,r2
   23e78:	002196c0 	call	2196c <__mulsi3>
   23e7c:	8085883a 	add	r2,r16,r2
   23e80:	10c00017 	ldw	r3,0(r2)
   23e84:	e0bffb17 	ldw	r2,-20(fp)
   23e88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23e8c:	040000f4 	movhi	r16,3
   23e90:	84224304 	addi	r16,r16,-30452
   23e94:	e0bffa17 	ldw	r2,-24(fp)
   23e98:	01400304 	movi	r5,12
   23e9c:	1009883a 	mov	r4,r2
   23ea0:	002196c0 	call	2196c <__mulsi3>
   23ea4:	8085883a 	add	r2,r16,r2
   23ea8:	10800104 	addi	r2,r2,4
   23eac:	10c00017 	ldw	r3,0(r2)
   23eb0:	e0bffb17 	ldw	r2,-20(fp)
   23eb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23eb8:	040000f4 	movhi	r16,3
   23ebc:	84224304 	addi	r16,r16,-30452
   23ec0:	e0bffa17 	ldw	r2,-24(fp)
   23ec4:	01400304 	movi	r5,12
   23ec8:	1009883a 	mov	r4,r2
   23ecc:	002196c0 	call	2196c <__mulsi3>
   23ed0:	8085883a 	add	r2,r16,r2
   23ed4:	10800204 	addi	r2,r2,8
   23ed8:	10c00017 	ldw	r3,0(r2)
   23edc:	e0bffb17 	ldw	r2,-20(fp)
   23ee0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23ee4:	e13ffa17 	ldw	r4,-24(fp)
   23ee8:	00242080 	call	24208 <alt_release_fd>
  }
} 
   23eec:	0001883a 	nop
   23ef0:	e6ffff04 	addi	sp,fp,-4
   23ef4:	dfc00217 	ldw	ra,8(sp)
   23ef8:	df000117 	ldw	fp,4(sp)
   23efc:	dc000017 	ldw	r16,0(sp)
   23f00:	dec00304 	addi	sp,sp,12
   23f04:	f800283a 	ret

00023f08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23f08:	defffb04 	addi	sp,sp,-20
   23f0c:	dfc00415 	stw	ra,16(sp)
   23f10:	df000315 	stw	fp,12(sp)
   23f14:	df000304 	addi	fp,sp,12
   23f18:	e13ffd15 	stw	r4,-12(fp)
   23f1c:	e17ffe15 	stw	r5,-8(fp)
   23f20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23f24:	01c07fc4 	movi	r7,511
   23f28:	01800044 	movi	r6,1
   23f2c:	e17ffd17 	ldw	r5,-12(fp)
   23f30:	010000f4 	movhi	r4,3
   23f34:	21224604 	addi	r4,r4,-30440
   23f38:	0023e240 	call	23e24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23f3c:	01c07fc4 	movi	r7,511
   23f40:	000d883a 	mov	r6,zero
   23f44:	e17ffe17 	ldw	r5,-8(fp)
   23f48:	010000f4 	movhi	r4,3
   23f4c:	21224304 	addi	r4,r4,-30452
   23f50:	0023e240 	call	23e24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23f54:	01c07fc4 	movi	r7,511
   23f58:	01800044 	movi	r6,1
   23f5c:	e17fff17 	ldw	r5,-4(fp)
   23f60:	010000f4 	movhi	r4,3
   23f64:	21224904 	addi	r4,r4,-30428
   23f68:	0023e240 	call	23e24 <alt_open_fd>
}  
   23f6c:	0001883a 	nop
   23f70:	e037883a 	mov	sp,fp
   23f74:	dfc00117 	ldw	ra,4(sp)
   23f78:	df000017 	ldw	fp,0(sp)
   23f7c:	dec00204 	addi	sp,sp,8
   23f80:	f800283a 	ret

00023f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23f84:	defffe04 	addi	sp,sp,-8
   23f88:	dfc00115 	stw	ra,4(sp)
   23f8c:	df000015 	stw	fp,0(sp)
   23f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23f94:	d0a00e17 	ldw	r2,-32712(gp)
   23f98:	10000326 	beq	r2,zero,23fa8 <alt_get_errno+0x24>
   23f9c:	d0a00e17 	ldw	r2,-32712(gp)
   23fa0:	103ee83a 	callr	r2
   23fa4:	00000106 	br	23fac <alt_get_errno+0x28>
   23fa8:	d0a6c404 	addi	r2,gp,-25840
}
   23fac:	e037883a 	mov	sp,fp
   23fb0:	dfc00117 	ldw	ra,4(sp)
   23fb4:	df000017 	ldw	fp,0(sp)
   23fb8:	dec00204 	addi	sp,sp,8
   23fbc:	f800283a 	ret

00023fc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23fc0:	defffb04 	addi	sp,sp,-20
   23fc4:	dfc00415 	stw	ra,16(sp)
   23fc8:	df000315 	stw	fp,12(sp)
   23fcc:	dc000215 	stw	r16,8(sp)
   23fd0:	df000304 	addi	fp,sp,12
   23fd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23fd8:	e0bffe17 	ldw	r2,-8(fp)
   23fdc:	10800217 	ldw	r2,8(r2)
   23fe0:	10d00034 	orhi	r3,r2,16384
   23fe4:	e0bffe17 	ldw	r2,-8(fp)
   23fe8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23fec:	e03ffd15 	stw	zero,-12(fp)
   23ff0:	00002306 	br	24080 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23ff4:	040000f4 	movhi	r16,3
   23ff8:	84224304 	addi	r16,r16,-30452
   23ffc:	e0bffd17 	ldw	r2,-12(fp)
   24000:	01400304 	movi	r5,12
   24004:	1009883a 	mov	r4,r2
   24008:	002196c0 	call	2196c <__mulsi3>
   2400c:	8085883a 	add	r2,r16,r2
   24010:	10c00017 	ldw	r3,0(r2)
   24014:	e0bffe17 	ldw	r2,-8(fp)
   24018:	10800017 	ldw	r2,0(r2)
   2401c:	1880151e 	bne	r3,r2,24074 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24020:	040000f4 	movhi	r16,3
   24024:	84224304 	addi	r16,r16,-30452
   24028:	e0bffd17 	ldw	r2,-12(fp)
   2402c:	01400304 	movi	r5,12
   24030:	1009883a 	mov	r4,r2
   24034:	002196c0 	call	2196c <__mulsi3>
   24038:	8085883a 	add	r2,r16,r2
   2403c:	10800204 	addi	r2,r2,8
   24040:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24044:	10000b0e 	bge	r2,zero,24074 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24048:	01400304 	movi	r5,12
   2404c:	e13ffd17 	ldw	r4,-12(fp)
   24050:	002196c0 	call	2196c <__mulsi3>
   24054:	1007883a 	mov	r3,r2
   24058:	008000f4 	movhi	r2,3
   2405c:	10a24304 	addi	r2,r2,-30452
   24060:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24064:	e0bffe17 	ldw	r2,-8(fp)
   24068:	18800226 	beq	r3,r2,24074 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2406c:	00bffcc4 	movi	r2,-13
   24070:	00000806 	br	24094 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24074:	e0bffd17 	ldw	r2,-12(fp)
   24078:	10800044 	addi	r2,r2,1
   2407c:	e0bffd15 	stw	r2,-12(fp)
   24080:	d0a00d17 	ldw	r2,-32716(gp)
   24084:	1007883a 	mov	r3,r2
   24088:	e0bffd17 	ldw	r2,-12(fp)
   2408c:	18bfd92e 	bgeu	r3,r2,23ff4 <__alt_data_end+0xfffeaff4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24090:	0005883a 	mov	r2,zero
}
   24094:	e6ffff04 	addi	sp,fp,-4
   24098:	dfc00217 	ldw	ra,8(sp)
   2409c:	df000117 	ldw	fp,4(sp)
   240a0:	dc000017 	ldw	r16,0(sp)
   240a4:	dec00304 	addi	sp,sp,12
   240a8:	f800283a 	ret

000240ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   240ac:	defff604 	addi	sp,sp,-40
   240b0:	dfc00915 	stw	ra,36(sp)
   240b4:	df000815 	stw	fp,32(sp)
   240b8:	df000804 	addi	fp,sp,32
   240bc:	e13ffd15 	stw	r4,-12(fp)
   240c0:	e17ffe15 	stw	r5,-8(fp)
   240c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   240c8:	00bfffc4 	movi	r2,-1
   240cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   240d0:	00bffb44 	movi	r2,-19
   240d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   240d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   240dc:	d1600b04 	addi	r5,gp,-32724
   240e0:	e13ffd17 	ldw	r4,-12(fp)
   240e4:	00244540 	call	24454 <alt_find_dev>
   240e8:	e0bff815 	stw	r2,-32(fp)
   240ec:	e0bff817 	ldw	r2,-32(fp)
   240f0:	1000051e 	bne	r2,zero,24108 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   240f4:	e13ffd17 	ldw	r4,-12(fp)
   240f8:	00244e40 	call	244e4 <alt_find_file>
   240fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24100:	00800044 	movi	r2,1
   24104:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24108:	e0bff817 	ldw	r2,-32(fp)
   2410c:	10002b26 	beq	r2,zero,241bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24110:	e13ff817 	ldw	r4,-32(fp)
   24114:	00245ec0 	call	245ec <alt_get_fd>
   24118:	e0bff915 	stw	r2,-28(fp)
   2411c:	e0bff917 	ldw	r2,-28(fp)
   24120:	1000030e 	bge	r2,zero,24130 <open+0x84>
    {
      status = index;
   24124:	e0bff917 	ldw	r2,-28(fp)
   24128:	e0bffa15 	stw	r2,-24(fp)
   2412c:	00002506 	br	241c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24130:	01400304 	movi	r5,12
   24134:	e13ff917 	ldw	r4,-28(fp)
   24138:	002196c0 	call	2196c <__mulsi3>
   2413c:	1007883a 	mov	r3,r2
   24140:	008000f4 	movhi	r2,3
   24144:	10a24304 	addi	r2,r2,-30452
   24148:	1885883a 	add	r2,r3,r2
   2414c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24150:	e0fffe17 	ldw	r3,-8(fp)
   24154:	00900034 	movhi	r2,16384
   24158:	10bfffc4 	addi	r2,r2,-1
   2415c:	1886703a 	and	r3,r3,r2
   24160:	e0bffc17 	ldw	r2,-16(fp)
   24164:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24168:	e0bffb17 	ldw	r2,-20(fp)
   2416c:	1000051e 	bne	r2,zero,24184 <open+0xd8>
   24170:	e13ffc17 	ldw	r4,-16(fp)
   24174:	0023fc00 	call	23fc0 <alt_file_locked>
   24178:	e0bffa15 	stw	r2,-24(fp)
   2417c:	e0bffa17 	ldw	r2,-24(fp)
   24180:	10001016 	blt	r2,zero,241c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24184:	e0bff817 	ldw	r2,-32(fp)
   24188:	10800317 	ldw	r2,12(r2)
   2418c:	10000826 	beq	r2,zero,241b0 <open+0x104>
   24190:	e0bff817 	ldw	r2,-32(fp)
   24194:	10800317 	ldw	r2,12(r2)
   24198:	e1ffff17 	ldw	r7,-4(fp)
   2419c:	e1bffe17 	ldw	r6,-8(fp)
   241a0:	e17ffd17 	ldw	r5,-12(fp)
   241a4:	e13ffc17 	ldw	r4,-16(fp)
   241a8:	103ee83a 	callr	r2
   241ac:	00000106 	br	241b4 <open+0x108>
   241b0:	0005883a 	mov	r2,zero
   241b4:	e0bffa15 	stw	r2,-24(fp)
   241b8:	00000206 	br	241c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   241bc:	00bffb44 	movi	r2,-19
   241c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   241c4:	e0bffa17 	ldw	r2,-24(fp)
   241c8:	1000090e 	bge	r2,zero,241f0 <open+0x144>
  {
    alt_release_fd (index);  
   241cc:	e13ff917 	ldw	r4,-28(fp)
   241d0:	00242080 	call	24208 <alt_release_fd>
    ALT_ERRNO = -status;
   241d4:	0023f840 	call	23f84 <alt_get_errno>
   241d8:	1007883a 	mov	r3,r2
   241dc:	e0bffa17 	ldw	r2,-24(fp)
   241e0:	0085c83a 	sub	r2,zero,r2
   241e4:	18800015 	stw	r2,0(r3)
    return -1;
   241e8:	00bfffc4 	movi	r2,-1
   241ec:	00000106 	br	241f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   241f0:	e0bff917 	ldw	r2,-28(fp)
}
   241f4:	e037883a 	mov	sp,fp
   241f8:	dfc00117 	ldw	ra,4(sp)
   241fc:	df000017 	ldw	fp,0(sp)
   24200:	dec00204 	addi	sp,sp,8
   24204:	f800283a 	ret

00024208 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24208:	defffc04 	addi	sp,sp,-16
   2420c:	dfc00315 	stw	ra,12(sp)
   24210:	df000215 	stw	fp,8(sp)
   24214:	dc000115 	stw	r16,4(sp)
   24218:	df000204 	addi	fp,sp,8
   2421c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   24220:	e0bffe17 	ldw	r2,-8(fp)
   24224:	108000d0 	cmplti	r2,r2,3
   24228:	1000111e 	bne	r2,zero,24270 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2422c:	040000f4 	movhi	r16,3
   24230:	84224304 	addi	r16,r16,-30452
   24234:	e0bffe17 	ldw	r2,-8(fp)
   24238:	01400304 	movi	r5,12
   2423c:	1009883a 	mov	r4,r2
   24240:	002196c0 	call	2196c <__mulsi3>
   24244:	8085883a 	add	r2,r16,r2
   24248:	10800204 	addi	r2,r2,8
   2424c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   24250:	040000f4 	movhi	r16,3
   24254:	84224304 	addi	r16,r16,-30452
   24258:	e0bffe17 	ldw	r2,-8(fp)
   2425c:	01400304 	movi	r5,12
   24260:	1009883a 	mov	r4,r2
   24264:	002196c0 	call	2196c <__mulsi3>
   24268:	8085883a 	add	r2,r16,r2
   2426c:	10000015 	stw	zero,0(r2)
  }
}
   24270:	0001883a 	nop
   24274:	e6ffff04 	addi	sp,fp,-4
   24278:	dfc00217 	ldw	ra,8(sp)
   2427c:	df000117 	ldw	fp,4(sp)
   24280:	dc000017 	ldw	r16,0(sp)
   24284:	dec00304 	addi	sp,sp,12
   24288:	f800283a 	ret

0002428c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2428c:	defffa04 	addi	sp,sp,-24
   24290:	df000515 	stw	fp,20(sp)
   24294:	df000504 	addi	fp,sp,20
   24298:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2429c:	0005303a 	rdctl	r2,status
   242a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242a4:	e0fffc17 	ldw	r3,-16(fp)
   242a8:	00bfff84 	movi	r2,-2
   242ac:	1884703a 	and	r2,r3,r2
   242b0:	1001703a 	wrctl	status,r2
  
  return context;
   242b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   242b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   242bc:	e0bfff17 	ldw	r2,-4(fp)
   242c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   242c4:	e0bffd17 	ldw	r2,-12(fp)
   242c8:	10800017 	ldw	r2,0(r2)
   242cc:	e0fffd17 	ldw	r3,-12(fp)
   242d0:	18c00117 	ldw	r3,4(r3)
   242d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   242d8:	e0bffd17 	ldw	r2,-12(fp)
   242dc:	10800117 	ldw	r2,4(r2)
   242e0:	e0fffd17 	ldw	r3,-12(fp)
   242e4:	18c00017 	ldw	r3,0(r3)
   242e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   242ec:	e0bffd17 	ldw	r2,-12(fp)
   242f0:	e0fffd17 	ldw	r3,-12(fp)
   242f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   242f8:	e0bffd17 	ldw	r2,-12(fp)
   242fc:	e0fffd17 	ldw	r3,-12(fp)
   24300:	10c00015 	stw	r3,0(r2)
   24304:	e0bffb17 	ldw	r2,-20(fp)
   24308:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2430c:	e0bffe17 	ldw	r2,-8(fp)
   24310:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24314:	0001883a 	nop
   24318:	e037883a 	mov	sp,fp
   2431c:	df000017 	ldw	fp,0(sp)
   24320:	dec00104 	addi	sp,sp,4
   24324:	f800283a 	ret

00024328 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24328:	defffb04 	addi	sp,sp,-20
   2432c:	dfc00415 	stw	ra,16(sp)
   24330:	df000315 	stw	fp,12(sp)
   24334:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24338:	d0a00f17 	ldw	r2,-32708(gp)
   2433c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24340:	d0a6cb17 	ldw	r2,-25812(gp)
   24344:	10800044 	addi	r2,r2,1
   24348:	d0a6cb15 	stw	r2,-25812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2434c:	00002e06 	br	24408 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24350:	e0bffd17 	ldw	r2,-12(fp)
   24354:	10800017 	ldw	r2,0(r2)
   24358:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2435c:	e0bffd17 	ldw	r2,-12(fp)
   24360:	10800403 	ldbu	r2,16(r2)
   24364:	10803fcc 	andi	r2,r2,255
   24368:	10000426 	beq	r2,zero,2437c <alt_tick+0x54>
   2436c:	d0a6cb17 	ldw	r2,-25812(gp)
   24370:	1000021e 	bne	r2,zero,2437c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24374:	e0bffd17 	ldw	r2,-12(fp)
   24378:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2437c:	e0bffd17 	ldw	r2,-12(fp)
   24380:	10800217 	ldw	r2,8(r2)
   24384:	d0e6cb17 	ldw	r3,-25812(gp)
   24388:	18801d36 	bltu	r3,r2,24400 <alt_tick+0xd8>
   2438c:	e0bffd17 	ldw	r2,-12(fp)
   24390:	10800403 	ldbu	r2,16(r2)
   24394:	10803fcc 	andi	r2,r2,255
   24398:	1000191e 	bne	r2,zero,24400 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2439c:	e0bffd17 	ldw	r2,-12(fp)
   243a0:	10800317 	ldw	r2,12(r2)
   243a4:	e0fffd17 	ldw	r3,-12(fp)
   243a8:	18c00517 	ldw	r3,20(r3)
   243ac:	1809883a 	mov	r4,r3
   243b0:	103ee83a 	callr	r2
   243b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   243b8:	e0bfff17 	ldw	r2,-4(fp)
   243bc:	1000031e 	bne	r2,zero,243cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   243c0:	e13ffd17 	ldw	r4,-12(fp)
   243c4:	002428c0 	call	2428c <alt_alarm_stop>
   243c8:	00000d06 	br	24400 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   243cc:	e0bffd17 	ldw	r2,-12(fp)
   243d0:	10c00217 	ldw	r3,8(r2)
   243d4:	e0bfff17 	ldw	r2,-4(fp)
   243d8:	1887883a 	add	r3,r3,r2
   243dc:	e0bffd17 	ldw	r2,-12(fp)
   243e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   243e4:	e0bffd17 	ldw	r2,-12(fp)
   243e8:	10c00217 	ldw	r3,8(r2)
   243ec:	d0a6cb17 	ldw	r2,-25812(gp)
   243f0:	1880032e 	bgeu	r3,r2,24400 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   243f4:	e0bffd17 	ldw	r2,-12(fp)
   243f8:	00c00044 	movi	r3,1
   243fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24400:	e0bffe17 	ldw	r2,-8(fp)
   24404:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24408:	e0fffd17 	ldw	r3,-12(fp)
   2440c:	d0a00f04 	addi	r2,gp,-32708
   24410:	18bfcf1e 	bne	r3,r2,24350 <__alt_data_end+0xfffeb350>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24414:	0001883a 	nop
}
   24418:	0001883a 	nop
   2441c:	e037883a 	mov	sp,fp
   24420:	dfc00117 	ldw	ra,4(sp)
   24424:	df000017 	ldw	fp,0(sp)
   24428:	dec00204 	addi	sp,sp,8
   2442c:	f800283a 	ret

00024430 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24430:	deffff04 	addi	sp,sp,-4
   24434:	df000015 	stw	fp,0(sp)
   24438:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2443c:	000170fa 	wrctl	ienable,zero
}
   24440:	0001883a 	nop
   24444:	e037883a 	mov	sp,fp
   24448:	df000017 	ldw	fp,0(sp)
   2444c:	dec00104 	addi	sp,sp,4
   24450:	f800283a 	ret

00024454 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24454:	defffa04 	addi	sp,sp,-24
   24458:	dfc00515 	stw	ra,20(sp)
   2445c:	df000415 	stw	fp,16(sp)
   24460:	df000404 	addi	fp,sp,16
   24464:	e13ffe15 	stw	r4,-8(fp)
   24468:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2446c:	e0bfff17 	ldw	r2,-4(fp)
   24470:	10800017 	ldw	r2,0(r2)
   24474:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24478:	e13ffe17 	ldw	r4,-8(fp)
   2447c:	00255e00 	call	255e0 <strlen>
   24480:	10800044 	addi	r2,r2,1
   24484:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24488:	00000d06 	br	244c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2448c:	e0bffc17 	ldw	r2,-16(fp)
   24490:	10800217 	ldw	r2,8(r2)
   24494:	e0fffd17 	ldw	r3,-12(fp)
   24498:	180d883a 	mov	r6,r3
   2449c:	e17ffe17 	ldw	r5,-8(fp)
   244a0:	1009883a 	mov	r4,r2
   244a4:	0024d5c0 	call	24d5c <memcmp>
   244a8:	1000021e 	bne	r2,zero,244b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   244ac:	e0bffc17 	ldw	r2,-16(fp)
   244b0:	00000706 	br	244d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   244b4:	e0bffc17 	ldw	r2,-16(fp)
   244b8:	10800017 	ldw	r2,0(r2)
   244bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   244c0:	e0fffc17 	ldw	r3,-16(fp)
   244c4:	e0bfff17 	ldw	r2,-4(fp)
   244c8:	18bff01e 	bne	r3,r2,2448c <__alt_data_end+0xfffeb48c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   244cc:	0005883a 	mov	r2,zero
}
   244d0:	e037883a 	mov	sp,fp
   244d4:	dfc00117 	ldw	ra,4(sp)
   244d8:	df000017 	ldw	fp,0(sp)
   244dc:	dec00204 	addi	sp,sp,8
   244e0:	f800283a 	ret

000244e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   244e4:	defffb04 	addi	sp,sp,-20
   244e8:	dfc00415 	stw	ra,16(sp)
   244ec:	df000315 	stw	fp,12(sp)
   244f0:	df000304 	addi	fp,sp,12
   244f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   244f8:	d0a00917 	ldw	r2,-32732(gp)
   244fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24500:	00003106 	br	245c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24504:	e0bffd17 	ldw	r2,-12(fp)
   24508:	10800217 	ldw	r2,8(r2)
   2450c:	1009883a 	mov	r4,r2
   24510:	00255e00 	call	255e0 <strlen>
   24514:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24518:	e0bffd17 	ldw	r2,-12(fp)
   2451c:	10c00217 	ldw	r3,8(r2)
   24520:	e0bffe17 	ldw	r2,-8(fp)
   24524:	10bfffc4 	addi	r2,r2,-1
   24528:	1885883a 	add	r2,r3,r2
   2452c:	10800003 	ldbu	r2,0(r2)
   24530:	10803fcc 	andi	r2,r2,255
   24534:	1080201c 	xori	r2,r2,128
   24538:	10bfe004 	addi	r2,r2,-128
   2453c:	10800bd8 	cmpnei	r2,r2,47
   24540:	1000031e 	bne	r2,zero,24550 <alt_find_file+0x6c>
    {
      len -= 1;
   24544:	e0bffe17 	ldw	r2,-8(fp)
   24548:	10bfffc4 	addi	r2,r2,-1
   2454c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24550:	e0bffe17 	ldw	r2,-8(fp)
   24554:	e0ffff17 	ldw	r3,-4(fp)
   24558:	1885883a 	add	r2,r3,r2
   2455c:	10800003 	ldbu	r2,0(r2)
   24560:	10803fcc 	andi	r2,r2,255
   24564:	1080201c 	xori	r2,r2,128
   24568:	10bfe004 	addi	r2,r2,-128
   2456c:	10800be0 	cmpeqi	r2,r2,47
   24570:	1000081e 	bne	r2,zero,24594 <alt_find_file+0xb0>
   24574:	e0bffe17 	ldw	r2,-8(fp)
   24578:	e0ffff17 	ldw	r3,-4(fp)
   2457c:	1885883a 	add	r2,r3,r2
   24580:	10800003 	ldbu	r2,0(r2)
   24584:	10803fcc 	andi	r2,r2,255
   24588:	1080201c 	xori	r2,r2,128
   2458c:	10bfe004 	addi	r2,r2,-128
   24590:	10000a1e 	bne	r2,zero,245bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24594:	e0bffd17 	ldw	r2,-12(fp)
   24598:	10800217 	ldw	r2,8(r2)
   2459c:	e0fffe17 	ldw	r3,-8(fp)
   245a0:	180d883a 	mov	r6,r3
   245a4:	e17fff17 	ldw	r5,-4(fp)
   245a8:	1009883a 	mov	r4,r2
   245ac:	0024d5c0 	call	24d5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   245b0:	1000021e 	bne	r2,zero,245bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   245b4:	e0bffd17 	ldw	r2,-12(fp)
   245b8:	00000706 	br	245d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   245bc:	e0bffd17 	ldw	r2,-12(fp)
   245c0:	10800017 	ldw	r2,0(r2)
   245c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   245c8:	e0fffd17 	ldw	r3,-12(fp)
   245cc:	d0a00904 	addi	r2,gp,-32732
   245d0:	18bfcc1e 	bne	r3,r2,24504 <__alt_data_end+0xfffeb504>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   245d4:	0005883a 	mov	r2,zero
}
   245d8:	e037883a 	mov	sp,fp
   245dc:	dfc00117 	ldw	ra,4(sp)
   245e0:	df000017 	ldw	fp,0(sp)
   245e4:	dec00204 	addi	sp,sp,8
   245e8:	f800283a 	ret

000245ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   245ec:	defffa04 	addi	sp,sp,-24
   245f0:	dfc00515 	stw	ra,20(sp)
   245f4:	df000415 	stw	fp,16(sp)
   245f8:	dc000315 	stw	r16,12(sp)
   245fc:	df000404 	addi	fp,sp,16
   24600:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24604:	00bffa04 	movi	r2,-24
   24608:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2460c:	e03ffc15 	stw	zero,-16(fp)
   24610:	00001d06 	br	24688 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24614:	040000f4 	movhi	r16,3
   24618:	84224304 	addi	r16,r16,-30452
   2461c:	e0bffc17 	ldw	r2,-16(fp)
   24620:	01400304 	movi	r5,12
   24624:	1009883a 	mov	r4,r2
   24628:	002196c0 	call	2196c <__mulsi3>
   2462c:	8085883a 	add	r2,r16,r2
   24630:	10800017 	ldw	r2,0(r2)
   24634:	1000111e 	bne	r2,zero,2467c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   24638:	040000f4 	movhi	r16,3
   2463c:	84224304 	addi	r16,r16,-30452
   24640:	e0bffc17 	ldw	r2,-16(fp)
   24644:	01400304 	movi	r5,12
   24648:	1009883a 	mov	r4,r2
   2464c:	002196c0 	call	2196c <__mulsi3>
   24650:	8085883a 	add	r2,r16,r2
   24654:	e0fffe17 	ldw	r3,-8(fp)
   24658:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2465c:	d0e00d17 	ldw	r3,-32716(gp)
   24660:	e0bffc17 	ldw	r2,-16(fp)
   24664:	1880020e 	bge	r3,r2,24670 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   24668:	e0bffc17 	ldw	r2,-16(fp)
   2466c:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   24670:	e0bffc17 	ldw	r2,-16(fp)
   24674:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24678:	00000606 	br	24694 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2467c:	e0bffc17 	ldw	r2,-16(fp)
   24680:	10800044 	addi	r2,r2,1
   24684:	e0bffc15 	stw	r2,-16(fp)
   24688:	e0bffc17 	ldw	r2,-16(fp)
   2468c:	10800810 	cmplti	r2,r2,32
   24690:	103fe01e 	bne	r2,zero,24614 <__alt_data_end+0xfffeb614>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24694:	e0bffd17 	ldw	r2,-12(fp)
}
   24698:	e6ffff04 	addi	sp,fp,-4
   2469c:	dfc00217 	ldw	ra,8(sp)
   246a0:	df000117 	ldw	fp,4(sp)
   246a4:	dc000017 	ldw	r16,0(sp)
   246a8:	dec00304 	addi	sp,sp,12
   246ac:	f800283a 	ret

000246b0 <atexit>:
   246b0:	200b883a 	mov	r5,r4
   246b4:	000f883a 	mov	r7,zero
   246b8:	000d883a 	mov	r6,zero
   246bc:	0009883a 	mov	r4,zero
   246c0:	00257cc1 	jmpi	257cc <__register_exitproc>

000246c4 <exit>:
   246c4:	defffe04 	addi	sp,sp,-8
   246c8:	000b883a 	mov	r5,zero
   246cc:	dc000015 	stw	r16,0(sp)
   246d0:	dfc00115 	stw	ra,4(sp)
   246d4:	2021883a 	mov	r16,r4
   246d8:	00258e40 	call	258e4 <__call_exitprocs>
   246dc:	008000f4 	movhi	r2,3
   246e0:	10a2a804 	addi	r2,r2,-30048
   246e4:	11000017 	ldw	r4,0(r2)
   246e8:	20800f17 	ldw	r2,60(r4)
   246ec:	10000126 	beq	r2,zero,246f4 <exit+0x30>
   246f0:	103ee83a 	callr	r2
   246f4:	8009883a 	mov	r4,r16
   246f8:	002698c0 	call	2698c <_exit>

000246fc <_fputs_r>:
   246fc:	defff804 	addi	sp,sp,-32
   24700:	dc400615 	stw	r17,24(sp)
   24704:	2023883a 	mov	r17,r4
   24708:	2809883a 	mov	r4,r5
   2470c:	dc000515 	stw	r16,20(sp)
   24710:	dfc00715 	stw	ra,28(sp)
   24714:	3021883a 	mov	r16,r6
   24718:	d9400315 	stw	r5,12(sp)
   2471c:	00255e00 	call	255e0 <strlen>
   24720:	d8800215 	stw	r2,8(sp)
   24724:	d8800415 	stw	r2,16(sp)
   24728:	d8800304 	addi	r2,sp,12
   2472c:	d8800015 	stw	r2,0(sp)
   24730:	00800044 	movi	r2,1
   24734:	d8800115 	stw	r2,4(sp)
   24738:	88000226 	beq	r17,zero,24744 <_fputs_r+0x48>
   2473c:	88800e17 	ldw	r2,56(r17)
   24740:	10001226 	beq	r2,zero,2478c <_fputs_r+0x90>
   24744:	8080030b 	ldhu	r2,12(r16)
   24748:	10c8000c 	andi	r3,r2,8192
   2474c:	1800061e 	bne	r3,zero,24768 <_fputs_r+0x6c>
   24750:	81001917 	ldw	r4,100(r16)
   24754:	00f7ffc4 	movi	r3,-8193
   24758:	10880014 	ori	r2,r2,8192
   2475c:	20c6703a 	and	r3,r4,r3
   24760:	8080030d 	sth	r2,12(r16)
   24764:	80c01915 	stw	r3,100(r16)
   24768:	d80d883a 	mov	r6,sp
   2476c:	800b883a 	mov	r5,r16
   24770:	8809883a 	mov	r4,r17
   24774:	00247b00 	call	247b0 <__sfvwrite_r>
   24778:	dfc00717 	ldw	ra,28(sp)
   2477c:	dc400617 	ldw	r17,24(sp)
   24780:	dc000517 	ldw	r16,20(sp)
   24784:	dec00804 	addi	sp,sp,32
   24788:	f800283a 	ret
   2478c:	8809883a 	mov	r4,r17
   24790:	002606c0 	call	2606c <__sinit>
   24794:	003feb06 	br	24744 <__alt_data_end+0xfffeb744>

00024798 <fputs>:
   24798:	008000f4 	movhi	r2,3
   2479c:	10a2a904 	addi	r2,r2,-30044
   247a0:	280d883a 	mov	r6,r5
   247a4:	200b883a 	mov	r5,r4
   247a8:	11000017 	ldw	r4,0(r2)
   247ac:	00246fc1 	jmpi	246fc <_fputs_r>

000247b0 <__sfvwrite_r>:
   247b0:	30800217 	ldw	r2,8(r6)
   247b4:	10006726 	beq	r2,zero,24954 <__sfvwrite_r+0x1a4>
   247b8:	28c0030b 	ldhu	r3,12(r5)
   247bc:	defff404 	addi	sp,sp,-48
   247c0:	dd400715 	stw	r21,28(sp)
   247c4:	dd000615 	stw	r20,24(sp)
   247c8:	dc000215 	stw	r16,8(sp)
   247cc:	dfc00b15 	stw	ra,44(sp)
   247d0:	df000a15 	stw	fp,40(sp)
   247d4:	ddc00915 	stw	r23,36(sp)
   247d8:	dd800815 	stw	r22,32(sp)
   247dc:	dcc00515 	stw	r19,20(sp)
   247e0:	dc800415 	stw	r18,16(sp)
   247e4:	dc400315 	stw	r17,12(sp)
   247e8:	1880020c 	andi	r2,r3,8
   247ec:	2821883a 	mov	r16,r5
   247f0:	202b883a 	mov	r21,r4
   247f4:	3029883a 	mov	r20,r6
   247f8:	10002726 	beq	r2,zero,24898 <__sfvwrite_r+0xe8>
   247fc:	28800417 	ldw	r2,16(r5)
   24800:	10002526 	beq	r2,zero,24898 <__sfvwrite_r+0xe8>
   24804:	1880008c 	andi	r2,r3,2
   24808:	a4400017 	ldw	r17,0(r20)
   2480c:	10002a26 	beq	r2,zero,248b8 <__sfvwrite_r+0x108>
   24810:	05a00034 	movhi	r22,32768
   24814:	0027883a 	mov	r19,zero
   24818:	0025883a 	mov	r18,zero
   2481c:	b5bf0004 	addi	r22,r22,-1024
   24820:	980d883a 	mov	r6,r19
   24824:	a809883a 	mov	r4,r21
   24828:	90004626 	beq	r18,zero,24944 <__sfvwrite_r+0x194>
   2482c:	900f883a 	mov	r7,r18
   24830:	b480022e 	bgeu	r22,r18,2483c <__sfvwrite_r+0x8c>
   24834:	01e00034 	movhi	r7,32768
   24838:	39ff0004 	addi	r7,r7,-1024
   2483c:	80800917 	ldw	r2,36(r16)
   24840:	81400717 	ldw	r5,28(r16)
   24844:	103ee83a 	callr	r2
   24848:	00805a0e 	bge	zero,r2,249b4 <__sfvwrite_r+0x204>
   2484c:	a0c00217 	ldw	r3,8(r20)
   24850:	98a7883a 	add	r19,r19,r2
   24854:	90a5c83a 	sub	r18,r18,r2
   24858:	1885c83a 	sub	r2,r3,r2
   2485c:	a0800215 	stw	r2,8(r20)
   24860:	103fef1e 	bne	r2,zero,24820 <__alt_data_end+0xfffeb820>
   24864:	0005883a 	mov	r2,zero
   24868:	dfc00b17 	ldw	ra,44(sp)
   2486c:	df000a17 	ldw	fp,40(sp)
   24870:	ddc00917 	ldw	r23,36(sp)
   24874:	dd800817 	ldw	r22,32(sp)
   24878:	dd400717 	ldw	r21,28(sp)
   2487c:	dd000617 	ldw	r20,24(sp)
   24880:	dcc00517 	ldw	r19,20(sp)
   24884:	dc800417 	ldw	r18,16(sp)
   24888:	dc400317 	ldw	r17,12(sp)
   2488c:	dc000217 	ldw	r16,8(sp)
   24890:	dec00c04 	addi	sp,sp,48
   24894:	f800283a 	ret
   24898:	800b883a 	mov	r5,r16
   2489c:	a809883a 	mov	r4,r21
   248a0:	00256780 	call	25678 <__swsetup_r>
   248a4:	1000ee1e 	bne	r2,zero,24c60 <__sfvwrite_r+0x4b0>
   248a8:	80c0030b 	ldhu	r3,12(r16)
   248ac:	a4400017 	ldw	r17,0(r20)
   248b0:	1880008c 	andi	r2,r3,2
   248b4:	103fd61e 	bne	r2,zero,24810 <__alt_data_end+0xfffeb810>
   248b8:	1880004c 	andi	r2,r3,1
   248bc:	1000421e 	bne	r2,zero,249c8 <__sfvwrite_r+0x218>
   248c0:	0039883a 	mov	fp,zero
   248c4:	0025883a 	mov	r18,zero
   248c8:	90001a26 	beq	r18,zero,24934 <__sfvwrite_r+0x184>
   248cc:	1880800c 	andi	r2,r3,512
   248d0:	84c00217 	ldw	r19,8(r16)
   248d4:	10002126 	beq	r2,zero,2495c <__sfvwrite_r+0x1ac>
   248d8:	982f883a 	mov	r23,r19
   248dc:	94c09636 	bltu	r18,r19,24b38 <__sfvwrite_r+0x388>
   248e0:	1881200c 	andi	r2,r3,1152
   248e4:	1000a11e 	bne	r2,zero,24b6c <__sfvwrite_r+0x3bc>
   248e8:	81000017 	ldw	r4,0(r16)
   248ec:	b80d883a 	mov	r6,r23
   248f0:	e00b883a 	mov	r5,fp
   248f4:	0024f200 	call	24f20 <memmove>
   248f8:	80c00217 	ldw	r3,8(r16)
   248fc:	81000017 	ldw	r4,0(r16)
   24900:	9005883a 	mov	r2,r18
   24904:	1ce7c83a 	sub	r19,r3,r19
   24908:	25cf883a 	add	r7,r4,r23
   2490c:	84c00215 	stw	r19,8(r16)
   24910:	81c00015 	stw	r7,0(r16)
   24914:	a0c00217 	ldw	r3,8(r20)
   24918:	e0b9883a 	add	fp,fp,r2
   2491c:	90a5c83a 	sub	r18,r18,r2
   24920:	18a7c83a 	sub	r19,r3,r2
   24924:	a4c00215 	stw	r19,8(r20)
   24928:	983fce26 	beq	r19,zero,24864 <__alt_data_end+0xfffeb864>
   2492c:	80c0030b 	ldhu	r3,12(r16)
   24930:	903fe61e 	bne	r18,zero,248cc <__alt_data_end+0xfffeb8cc>
   24934:	8f000017 	ldw	fp,0(r17)
   24938:	8c800117 	ldw	r18,4(r17)
   2493c:	8c400204 	addi	r17,r17,8
   24940:	003fe106 	br	248c8 <__alt_data_end+0xfffeb8c8>
   24944:	8cc00017 	ldw	r19,0(r17)
   24948:	8c800117 	ldw	r18,4(r17)
   2494c:	8c400204 	addi	r17,r17,8
   24950:	003fb306 	br	24820 <__alt_data_end+0xfffeb820>
   24954:	0005883a 	mov	r2,zero
   24958:	f800283a 	ret
   2495c:	81000017 	ldw	r4,0(r16)
   24960:	80800417 	ldw	r2,16(r16)
   24964:	11005a36 	bltu	r2,r4,24ad0 <__sfvwrite_r+0x320>
   24968:	85c00517 	ldw	r23,20(r16)
   2496c:	95c05836 	bltu	r18,r23,24ad0 <__sfvwrite_r+0x320>
   24970:	00a00034 	movhi	r2,32768
   24974:	10bfffc4 	addi	r2,r2,-1
   24978:	9009883a 	mov	r4,r18
   2497c:	1480012e 	bgeu	r2,r18,24984 <__sfvwrite_r+0x1d4>
   24980:	1009883a 	mov	r4,r2
   24984:	b80b883a 	mov	r5,r23
   24988:	00217b80 	call	217b8 <__divsi3>
   2498c:	b80b883a 	mov	r5,r23
   24990:	1009883a 	mov	r4,r2
   24994:	002196c0 	call	2196c <__mulsi3>
   24998:	81400717 	ldw	r5,28(r16)
   2499c:	80c00917 	ldw	r3,36(r16)
   249a0:	100f883a 	mov	r7,r2
   249a4:	e00d883a 	mov	r6,fp
   249a8:	a809883a 	mov	r4,r21
   249ac:	183ee83a 	callr	r3
   249b0:	00bfd816 	blt	zero,r2,24914 <__alt_data_end+0xfffeb914>
   249b4:	8080030b 	ldhu	r2,12(r16)
   249b8:	10801014 	ori	r2,r2,64
   249bc:	8080030d 	sth	r2,12(r16)
   249c0:	00bfffc4 	movi	r2,-1
   249c4:	003fa806 	br	24868 <__alt_data_end+0xfffeb868>
   249c8:	0027883a 	mov	r19,zero
   249cc:	0011883a 	mov	r8,zero
   249d0:	0039883a 	mov	fp,zero
   249d4:	0025883a 	mov	r18,zero
   249d8:	90001f26 	beq	r18,zero,24a58 <__sfvwrite_r+0x2a8>
   249dc:	40005a26 	beq	r8,zero,24b48 <__sfvwrite_r+0x398>
   249e0:	982d883a 	mov	r22,r19
   249e4:	94c0012e 	bgeu	r18,r19,249ec <__sfvwrite_r+0x23c>
   249e8:	902d883a 	mov	r22,r18
   249ec:	81000017 	ldw	r4,0(r16)
   249f0:	80800417 	ldw	r2,16(r16)
   249f4:	b02f883a 	mov	r23,r22
   249f8:	81c00517 	ldw	r7,20(r16)
   249fc:	1100032e 	bgeu	r2,r4,24a0c <__sfvwrite_r+0x25c>
   24a00:	80c00217 	ldw	r3,8(r16)
   24a04:	38c7883a 	add	r3,r7,r3
   24a08:	1d801816 	blt	r3,r22,24a6c <__sfvwrite_r+0x2bc>
   24a0c:	b1c03e16 	blt	r22,r7,24b08 <__sfvwrite_r+0x358>
   24a10:	80800917 	ldw	r2,36(r16)
   24a14:	81400717 	ldw	r5,28(r16)
   24a18:	e00d883a 	mov	r6,fp
   24a1c:	da000115 	stw	r8,4(sp)
   24a20:	a809883a 	mov	r4,r21
   24a24:	103ee83a 	callr	r2
   24a28:	102f883a 	mov	r23,r2
   24a2c:	da000117 	ldw	r8,4(sp)
   24a30:	00bfe00e 	bge	zero,r2,249b4 <__alt_data_end+0xfffeb9b4>
   24a34:	9de7c83a 	sub	r19,r19,r23
   24a38:	98001f26 	beq	r19,zero,24ab8 <__sfvwrite_r+0x308>
   24a3c:	a0800217 	ldw	r2,8(r20)
   24a40:	e5f9883a 	add	fp,fp,r23
   24a44:	95e5c83a 	sub	r18,r18,r23
   24a48:	15efc83a 	sub	r23,r2,r23
   24a4c:	a5c00215 	stw	r23,8(r20)
   24a50:	b83f8426 	beq	r23,zero,24864 <__alt_data_end+0xfffeb864>
   24a54:	903fe11e 	bne	r18,zero,249dc <__alt_data_end+0xfffeb9dc>
   24a58:	8f000017 	ldw	fp,0(r17)
   24a5c:	8c800117 	ldw	r18,4(r17)
   24a60:	0011883a 	mov	r8,zero
   24a64:	8c400204 	addi	r17,r17,8
   24a68:	003fdb06 	br	249d8 <__alt_data_end+0xfffeb9d8>
   24a6c:	180d883a 	mov	r6,r3
   24a70:	e00b883a 	mov	r5,fp
   24a74:	da000115 	stw	r8,4(sp)
   24a78:	d8c00015 	stw	r3,0(sp)
   24a7c:	0024f200 	call	24f20 <memmove>
   24a80:	d8c00017 	ldw	r3,0(sp)
   24a84:	80800017 	ldw	r2,0(r16)
   24a88:	800b883a 	mov	r5,r16
   24a8c:	a809883a 	mov	r4,r21
   24a90:	10c5883a 	add	r2,r2,r3
   24a94:	80800015 	stw	r2,0(r16)
   24a98:	d8c00015 	stw	r3,0(sp)
   24a9c:	0025c800 	call	25c80 <_fflush_r>
   24aa0:	d8c00017 	ldw	r3,0(sp)
   24aa4:	da000117 	ldw	r8,4(sp)
   24aa8:	103fc21e 	bne	r2,zero,249b4 <__alt_data_end+0xfffeb9b4>
   24aac:	182f883a 	mov	r23,r3
   24ab0:	9de7c83a 	sub	r19,r19,r23
   24ab4:	983fe11e 	bne	r19,zero,24a3c <__alt_data_end+0xfffeba3c>
   24ab8:	800b883a 	mov	r5,r16
   24abc:	a809883a 	mov	r4,r21
   24ac0:	0025c800 	call	25c80 <_fflush_r>
   24ac4:	103fbb1e 	bne	r2,zero,249b4 <__alt_data_end+0xfffeb9b4>
   24ac8:	0011883a 	mov	r8,zero
   24acc:	003fdb06 	br	24a3c <__alt_data_end+0xfffeba3c>
   24ad0:	94c0012e 	bgeu	r18,r19,24ad8 <__sfvwrite_r+0x328>
   24ad4:	9027883a 	mov	r19,r18
   24ad8:	980d883a 	mov	r6,r19
   24adc:	e00b883a 	mov	r5,fp
   24ae0:	0024f200 	call	24f20 <memmove>
   24ae4:	80800217 	ldw	r2,8(r16)
   24ae8:	80c00017 	ldw	r3,0(r16)
   24aec:	14c5c83a 	sub	r2,r2,r19
   24af0:	1cc7883a 	add	r3,r3,r19
   24af4:	80800215 	stw	r2,8(r16)
   24af8:	80c00015 	stw	r3,0(r16)
   24afc:	10004326 	beq	r2,zero,24c0c <__sfvwrite_r+0x45c>
   24b00:	9805883a 	mov	r2,r19
   24b04:	003f8306 	br	24914 <__alt_data_end+0xfffeb914>
   24b08:	b00d883a 	mov	r6,r22
   24b0c:	e00b883a 	mov	r5,fp
   24b10:	da000115 	stw	r8,4(sp)
   24b14:	0024f200 	call	24f20 <memmove>
   24b18:	80800217 	ldw	r2,8(r16)
   24b1c:	80c00017 	ldw	r3,0(r16)
   24b20:	da000117 	ldw	r8,4(sp)
   24b24:	1585c83a 	sub	r2,r2,r22
   24b28:	1dad883a 	add	r22,r3,r22
   24b2c:	80800215 	stw	r2,8(r16)
   24b30:	85800015 	stw	r22,0(r16)
   24b34:	003fbf06 	br	24a34 <__alt_data_end+0xfffeba34>
   24b38:	81000017 	ldw	r4,0(r16)
   24b3c:	9027883a 	mov	r19,r18
   24b40:	902f883a 	mov	r23,r18
   24b44:	003f6906 	br	248ec <__alt_data_end+0xfffeb8ec>
   24b48:	900d883a 	mov	r6,r18
   24b4c:	01400284 	movi	r5,10
   24b50:	e009883a 	mov	r4,fp
   24b54:	0024c780 	call	24c78 <memchr>
   24b58:	10003e26 	beq	r2,zero,24c54 <__sfvwrite_r+0x4a4>
   24b5c:	10800044 	addi	r2,r2,1
   24b60:	1727c83a 	sub	r19,r2,fp
   24b64:	02000044 	movi	r8,1
   24b68:	003f9d06 	br	249e0 <__alt_data_end+0xfffeb9e0>
   24b6c:	80800517 	ldw	r2,20(r16)
   24b70:	81400417 	ldw	r5,16(r16)
   24b74:	81c00017 	ldw	r7,0(r16)
   24b78:	10a7883a 	add	r19,r2,r2
   24b7c:	9885883a 	add	r2,r19,r2
   24b80:	1026d7fa 	srli	r19,r2,31
   24b84:	396dc83a 	sub	r22,r7,r5
   24b88:	b1000044 	addi	r4,r22,1
   24b8c:	9885883a 	add	r2,r19,r2
   24b90:	1027d07a 	srai	r19,r2,1
   24b94:	2485883a 	add	r2,r4,r18
   24b98:	980d883a 	mov	r6,r19
   24b9c:	9880022e 	bgeu	r19,r2,24ba8 <__sfvwrite_r+0x3f8>
   24ba0:	1027883a 	mov	r19,r2
   24ba4:	100d883a 	mov	r6,r2
   24ba8:	18c1000c 	andi	r3,r3,1024
   24bac:	18001c26 	beq	r3,zero,24c20 <__sfvwrite_r+0x470>
   24bb0:	300b883a 	mov	r5,r6
   24bb4:	a809883a 	mov	r4,r21
   24bb8:	00219bc0 	call	219bc <_malloc_r>
   24bbc:	102f883a 	mov	r23,r2
   24bc0:	10002926 	beq	r2,zero,24c68 <__sfvwrite_r+0x4b8>
   24bc4:	81400417 	ldw	r5,16(r16)
   24bc8:	b00d883a 	mov	r6,r22
   24bcc:	1009883a 	mov	r4,r2
   24bd0:	0024dd80 	call	24dd8 <memcpy>
   24bd4:	8080030b 	ldhu	r2,12(r16)
   24bd8:	00fedfc4 	movi	r3,-1153
   24bdc:	10c4703a 	and	r2,r2,r3
   24be0:	10802014 	ori	r2,r2,128
   24be4:	8080030d 	sth	r2,12(r16)
   24be8:	bd89883a 	add	r4,r23,r22
   24bec:	9d8fc83a 	sub	r7,r19,r22
   24bf0:	85c00415 	stw	r23,16(r16)
   24bf4:	84c00515 	stw	r19,20(r16)
   24bf8:	81000015 	stw	r4,0(r16)
   24bfc:	9027883a 	mov	r19,r18
   24c00:	81c00215 	stw	r7,8(r16)
   24c04:	902f883a 	mov	r23,r18
   24c08:	003f3806 	br	248ec <__alt_data_end+0xfffeb8ec>
   24c0c:	800b883a 	mov	r5,r16
   24c10:	a809883a 	mov	r4,r21
   24c14:	0025c800 	call	25c80 <_fflush_r>
   24c18:	103fb926 	beq	r2,zero,24b00 <__alt_data_end+0xfffebb00>
   24c1c:	003f6506 	br	249b4 <__alt_data_end+0xfffeb9b4>
   24c20:	a809883a 	mov	r4,r21
   24c24:	002507c0 	call	2507c <_realloc_r>
   24c28:	102f883a 	mov	r23,r2
   24c2c:	103fee1e 	bne	r2,zero,24be8 <__alt_data_end+0xfffebbe8>
   24c30:	81400417 	ldw	r5,16(r16)
   24c34:	a809883a 	mov	r4,r21
   24c38:	00223bc0 	call	223bc <_free_r>
   24c3c:	8080030b 	ldhu	r2,12(r16)
   24c40:	00ffdfc4 	movi	r3,-129
   24c44:	1884703a 	and	r2,r3,r2
   24c48:	00c00304 	movi	r3,12
   24c4c:	a8c00015 	stw	r3,0(r21)
   24c50:	003f5906 	br	249b8 <__alt_data_end+0xfffeb9b8>
   24c54:	94c00044 	addi	r19,r18,1
   24c58:	02000044 	movi	r8,1
   24c5c:	003f6006 	br	249e0 <__alt_data_end+0xfffeb9e0>
   24c60:	00bfffc4 	movi	r2,-1
   24c64:	003f0006 	br	24868 <__alt_data_end+0xfffeb868>
   24c68:	00800304 	movi	r2,12
   24c6c:	a8800015 	stw	r2,0(r21)
   24c70:	8080030b 	ldhu	r2,12(r16)
   24c74:	003f5006 	br	249b8 <__alt_data_end+0xfffeb9b8>

00024c78 <memchr>:
   24c78:	208000cc 	andi	r2,r4,3
   24c7c:	280f883a 	mov	r7,r5
   24c80:	10003426 	beq	r2,zero,24d54 <memchr+0xdc>
   24c84:	30bfffc4 	addi	r2,r6,-1
   24c88:	30001a26 	beq	r6,zero,24cf4 <memchr+0x7c>
   24c8c:	20c00003 	ldbu	r3,0(r4)
   24c90:	29803fcc 	andi	r6,r5,255
   24c94:	30c0051e 	bne	r6,r3,24cac <memchr+0x34>
   24c98:	00001806 	br	24cfc <memchr+0x84>
   24c9c:	10001526 	beq	r2,zero,24cf4 <memchr+0x7c>
   24ca0:	20c00003 	ldbu	r3,0(r4)
   24ca4:	10bfffc4 	addi	r2,r2,-1
   24ca8:	30c01426 	beq	r6,r3,24cfc <memchr+0x84>
   24cac:	21000044 	addi	r4,r4,1
   24cb0:	20c000cc 	andi	r3,r4,3
   24cb4:	183ff91e 	bne	r3,zero,24c9c <__alt_data_end+0xfffebc9c>
   24cb8:	020000c4 	movi	r8,3
   24cbc:	40801136 	bltu	r8,r2,24d04 <memchr+0x8c>
   24cc0:	10000c26 	beq	r2,zero,24cf4 <memchr+0x7c>
   24cc4:	20c00003 	ldbu	r3,0(r4)
   24cc8:	29403fcc 	andi	r5,r5,255
   24ccc:	28c00b26 	beq	r5,r3,24cfc <memchr+0x84>
   24cd0:	20c00044 	addi	r3,r4,1
   24cd4:	39803fcc 	andi	r6,r7,255
   24cd8:	2089883a 	add	r4,r4,r2
   24cdc:	00000306 	br	24cec <memchr+0x74>
   24ce0:	18c00044 	addi	r3,r3,1
   24ce4:	197fffc3 	ldbu	r5,-1(r3)
   24ce8:	31400526 	beq	r6,r5,24d00 <memchr+0x88>
   24cec:	1805883a 	mov	r2,r3
   24cf0:	20fffb1e 	bne	r4,r3,24ce0 <__alt_data_end+0xfffebce0>
   24cf4:	0005883a 	mov	r2,zero
   24cf8:	f800283a 	ret
   24cfc:	2005883a 	mov	r2,r4
   24d00:	f800283a 	ret
   24d04:	28c03fcc 	andi	r3,r5,255
   24d08:	1812923a 	slli	r9,r3,8
   24d0c:	02ffbff4 	movhi	r11,65279
   24d10:	02a02074 	movhi	r10,32897
   24d14:	48d2b03a 	or	r9,r9,r3
   24d18:	4806943a 	slli	r3,r9,16
   24d1c:	5affbfc4 	addi	r11,r11,-257
   24d20:	52a02004 	addi	r10,r10,-32640
   24d24:	48d2b03a 	or	r9,r9,r3
   24d28:	20c00017 	ldw	r3,0(r4)
   24d2c:	48c6f03a 	xor	r3,r9,r3
   24d30:	1acd883a 	add	r6,r3,r11
   24d34:	00c6303a 	nor	r3,zero,r3
   24d38:	30c6703a 	and	r3,r6,r3
   24d3c:	1a86703a 	and	r3,r3,r10
   24d40:	183fe01e 	bne	r3,zero,24cc4 <__alt_data_end+0xfffebcc4>
   24d44:	10bfff04 	addi	r2,r2,-4
   24d48:	21000104 	addi	r4,r4,4
   24d4c:	40bff636 	bltu	r8,r2,24d28 <__alt_data_end+0xfffebd28>
   24d50:	003fdb06 	br	24cc0 <__alt_data_end+0xfffebcc0>
   24d54:	3005883a 	mov	r2,r6
   24d58:	003fd706 	br	24cb8 <__alt_data_end+0xfffebcb8>

00024d5c <memcmp>:
   24d5c:	01c000c4 	movi	r7,3
   24d60:	3980192e 	bgeu	r7,r6,24dc8 <memcmp+0x6c>
   24d64:	2144b03a 	or	r2,r4,r5
   24d68:	11c4703a 	and	r2,r2,r7
   24d6c:	10000f26 	beq	r2,zero,24dac <memcmp+0x50>
   24d70:	20800003 	ldbu	r2,0(r4)
   24d74:	28c00003 	ldbu	r3,0(r5)
   24d78:	10c0151e 	bne	r2,r3,24dd0 <memcmp+0x74>
   24d7c:	31bfff84 	addi	r6,r6,-2
   24d80:	01ffffc4 	movi	r7,-1
   24d84:	00000406 	br	24d98 <memcmp+0x3c>
   24d88:	20800003 	ldbu	r2,0(r4)
   24d8c:	28c00003 	ldbu	r3,0(r5)
   24d90:	31bfffc4 	addi	r6,r6,-1
   24d94:	10c00e1e 	bne	r2,r3,24dd0 <memcmp+0x74>
   24d98:	21000044 	addi	r4,r4,1
   24d9c:	29400044 	addi	r5,r5,1
   24da0:	31fff91e 	bne	r6,r7,24d88 <__alt_data_end+0xfffebd88>
   24da4:	0005883a 	mov	r2,zero
   24da8:	f800283a 	ret
   24dac:	20c00017 	ldw	r3,0(r4)
   24db0:	28800017 	ldw	r2,0(r5)
   24db4:	18bfee1e 	bne	r3,r2,24d70 <__alt_data_end+0xfffebd70>
   24db8:	31bfff04 	addi	r6,r6,-4
   24dbc:	21000104 	addi	r4,r4,4
   24dc0:	29400104 	addi	r5,r5,4
   24dc4:	39bff936 	bltu	r7,r6,24dac <__alt_data_end+0xfffebdac>
   24dc8:	303fe91e 	bne	r6,zero,24d70 <__alt_data_end+0xfffebd70>
   24dcc:	003ff506 	br	24da4 <__alt_data_end+0xfffebda4>
   24dd0:	10c5c83a 	sub	r2,r2,r3
   24dd4:	f800283a 	ret

00024dd8 <memcpy>:
   24dd8:	defffd04 	addi	sp,sp,-12
   24ddc:	dfc00215 	stw	ra,8(sp)
   24de0:	dc400115 	stw	r17,4(sp)
   24de4:	dc000015 	stw	r16,0(sp)
   24de8:	00c003c4 	movi	r3,15
   24dec:	2005883a 	mov	r2,r4
   24df0:	1980452e 	bgeu	r3,r6,24f08 <memcpy+0x130>
   24df4:	2906b03a 	or	r3,r5,r4
   24df8:	18c000cc 	andi	r3,r3,3
   24dfc:	1800441e 	bne	r3,zero,24f10 <memcpy+0x138>
   24e00:	347ffc04 	addi	r17,r6,-16
   24e04:	8822d13a 	srli	r17,r17,4
   24e08:	28c00104 	addi	r3,r5,4
   24e0c:	23400104 	addi	r13,r4,4
   24e10:	8820913a 	slli	r16,r17,4
   24e14:	2b000204 	addi	r12,r5,8
   24e18:	22c00204 	addi	r11,r4,8
   24e1c:	84000504 	addi	r16,r16,20
   24e20:	2a800304 	addi	r10,r5,12
   24e24:	22400304 	addi	r9,r4,12
   24e28:	2c21883a 	add	r16,r5,r16
   24e2c:	2811883a 	mov	r8,r5
   24e30:	200f883a 	mov	r7,r4
   24e34:	41000017 	ldw	r4,0(r8)
   24e38:	1fc00017 	ldw	ra,0(r3)
   24e3c:	63c00017 	ldw	r15,0(r12)
   24e40:	39000015 	stw	r4,0(r7)
   24e44:	53800017 	ldw	r14,0(r10)
   24e48:	6fc00015 	stw	ra,0(r13)
   24e4c:	5bc00015 	stw	r15,0(r11)
   24e50:	4b800015 	stw	r14,0(r9)
   24e54:	18c00404 	addi	r3,r3,16
   24e58:	39c00404 	addi	r7,r7,16
   24e5c:	42000404 	addi	r8,r8,16
   24e60:	6b400404 	addi	r13,r13,16
   24e64:	63000404 	addi	r12,r12,16
   24e68:	5ac00404 	addi	r11,r11,16
   24e6c:	52800404 	addi	r10,r10,16
   24e70:	4a400404 	addi	r9,r9,16
   24e74:	1c3fef1e 	bne	r3,r16,24e34 <__alt_data_end+0xfffebe34>
   24e78:	89c00044 	addi	r7,r17,1
   24e7c:	380e913a 	slli	r7,r7,4
   24e80:	310003cc 	andi	r4,r6,15
   24e84:	02c000c4 	movi	r11,3
   24e88:	11c7883a 	add	r3,r2,r7
   24e8c:	29cb883a 	add	r5,r5,r7
   24e90:	5900212e 	bgeu	r11,r4,24f18 <memcpy+0x140>
   24e94:	1813883a 	mov	r9,r3
   24e98:	2811883a 	mov	r8,r5
   24e9c:	200f883a 	mov	r7,r4
   24ea0:	42800017 	ldw	r10,0(r8)
   24ea4:	4a400104 	addi	r9,r9,4
   24ea8:	39ffff04 	addi	r7,r7,-4
   24eac:	4abfff15 	stw	r10,-4(r9)
   24eb0:	42000104 	addi	r8,r8,4
   24eb4:	59fffa36 	bltu	r11,r7,24ea0 <__alt_data_end+0xfffebea0>
   24eb8:	213fff04 	addi	r4,r4,-4
   24ebc:	2008d0ba 	srli	r4,r4,2
   24ec0:	318000cc 	andi	r6,r6,3
   24ec4:	21000044 	addi	r4,r4,1
   24ec8:	2109883a 	add	r4,r4,r4
   24ecc:	2109883a 	add	r4,r4,r4
   24ed0:	1907883a 	add	r3,r3,r4
   24ed4:	290b883a 	add	r5,r5,r4
   24ed8:	30000626 	beq	r6,zero,24ef4 <memcpy+0x11c>
   24edc:	198d883a 	add	r6,r3,r6
   24ee0:	29c00003 	ldbu	r7,0(r5)
   24ee4:	18c00044 	addi	r3,r3,1
   24ee8:	29400044 	addi	r5,r5,1
   24eec:	19ffffc5 	stb	r7,-1(r3)
   24ef0:	19bffb1e 	bne	r3,r6,24ee0 <__alt_data_end+0xfffebee0>
   24ef4:	dfc00217 	ldw	ra,8(sp)
   24ef8:	dc400117 	ldw	r17,4(sp)
   24efc:	dc000017 	ldw	r16,0(sp)
   24f00:	dec00304 	addi	sp,sp,12
   24f04:	f800283a 	ret
   24f08:	2007883a 	mov	r3,r4
   24f0c:	003ff206 	br	24ed8 <__alt_data_end+0xfffebed8>
   24f10:	2007883a 	mov	r3,r4
   24f14:	003ff106 	br	24edc <__alt_data_end+0xfffebedc>
   24f18:	200d883a 	mov	r6,r4
   24f1c:	003fee06 	br	24ed8 <__alt_data_end+0xfffebed8>

00024f20 <memmove>:
   24f20:	2005883a 	mov	r2,r4
   24f24:	29000b2e 	bgeu	r5,r4,24f54 <memmove+0x34>
   24f28:	298f883a 	add	r7,r5,r6
   24f2c:	21c0092e 	bgeu	r4,r7,24f54 <memmove+0x34>
   24f30:	2187883a 	add	r3,r4,r6
   24f34:	198bc83a 	sub	r5,r3,r6
   24f38:	30004826 	beq	r6,zero,2505c <memmove+0x13c>
   24f3c:	39ffffc4 	addi	r7,r7,-1
   24f40:	39000003 	ldbu	r4,0(r7)
   24f44:	18ffffc4 	addi	r3,r3,-1
   24f48:	19000005 	stb	r4,0(r3)
   24f4c:	28fffb1e 	bne	r5,r3,24f3c <__alt_data_end+0xfffebf3c>
   24f50:	f800283a 	ret
   24f54:	00c003c4 	movi	r3,15
   24f58:	1980412e 	bgeu	r3,r6,25060 <memmove+0x140>
   24f5c:	2886b03a 	or	r3,r5,r2
   24f60:	18c000cc 	andi	r3,r3,3
   24f64:	1800401e 	bne	r3,zero,25068 <memmove+0x148>
   24f68:	33fffc04 	addi	r15,r6,-16
   24f6c:	781ed13a 	srli	r15,r15,4
   24f70:	28c00104 	addi	r3,r5,4
   24f74:	13400104 	addi	r13,r2,4
   24f78:	781c913a 	slli	r14,r15,4
   24f7c:	2b000204 	addi	r12,r5,8
   24f80:	12c00204 	addi	r11,r2,8
   24f84:	73800504 	addi	r14,r14,20
   24f88:	2a800304 	addi	r10,r5,12
   24f8c:	12400304 	addi	r9,r2,12
   24f90:	2b9d883a 	add	r14,r5,r14
   24f94:	2811883a 	mov	r8,r5
   24f98:	100f883a 	mov	r7,r2
   24f9c:	41000017 	ldw	r4,0(r8)
   24fa0:	39c00404 	addi	r7,r7,16
   24fa4:	18c00404 	addi	r3,r3,16
   24fa8:	393ffc15 	stw	r4,-16(r7)
   24fac:	193ffc17 	ldw	r4,-16(r3)
   24fb0:	6b400404 	addi	r13,r13,16
   24fb4:	5ac00404 	addi	r11,r11,16
   24fb8:	693ffc15 	stw	r4,-16(r13)
   24fbc:	61000017 	ldw	r4,0(r12)
   24fc0:	4a400404 	addi	r9,r9,16
   24fc4:	42000404 	addi	r8,r8,16
   24fc8:	593ffc15 	stw	r4,-16(r11)
   24fcc:	51000017 	ldw	r4,0(r10)
   24fd0:	63000404 	addi	r12,r12,16
   24fd4:	52800404 	addi	r10,r10,16
   24fd8:	493ffc15 	stw	r4,-16(r9)
   24fdc:	1bbfef1e 	bne	r3,r14,24f9c <__alt_data_end+0xfffebf9c>
   24fe0:	79000044 	addi	r4,r15,1
   24fe4:	2008913a 	slli	r4,r4,4
   24fe8:	328003cc 	andi	r10,r6,15
   24fec:	02c000c4 	movi	r11,3
   24ff0:	1107883a 	add	r3,r2,r4
   24ff4:	290b883a 	add	r5,r5,r4
   24ff8:	5a801e2e 	bgeu	r11,r10,25074 <memmove+0x154>
   24ffc:	1813883a 	mov	r9,r3
   25000:	2811883a 	mov	r8,r5
   25004:	500f883a 	mov	r7,r10
   25008:	41000017 	ldw	r4,0(r8)
   2500c:	4a400104 	addi	r9,r9,4
   25010:	39ffff04 	addi	r7,r7,-4
   25014:	493fff15 	stw	r4,-4(r9)
   25018:	42000104 	addi	r8,r8,4
   2501c:	59fffa36 	bltu	r11,r7,25008 <__alt_data_end+0xfffec008>
   25020:	513fff04 	addi	r4,r10,-4
   25024:	2008d0ba 	srli	r4,r4,2
   25028:	318000cc 	andi	r6,r6,3
   2502c:	21000044 	addi	r4,r4,1
   25030:	2109883a 	add	r4,r4,r4
   25034:	2109883a 	add	r4,r4,r4
   25038:	1907883a 	add	r3,r3,r4
   2503c:	290b883a 	add	r5,r5,r4
   25040:	30000b26 	beq	r6,zero,25070 <memmove+0x150>
   25044:	198d883a 	add	r6,r3,r6
   25048:	29c00003 	ldbu	r7,0(r5)
   2504c:	18c00044 	addi	r3,r3,1
   25050:	29400044 	addi	r5,r5,1
   25054:	19ffffc5 	stb	r7,-1(r3)
   25058:	19bffb1e 	bne	r3,r6,25048 <__alt_data_end+0xfffec048>
   2505c:	f800283a 	ret
   25060:	1007883a 	mov	r3,r2
   25064:	003ff606 	br	25040 <__alt_data_end+0xfffec040>
   25068:	1007883a 	mov	r3,r2
   2506c:	003ff506 	br	25044 <__alt_data_end+0xfffec044>
   25070:	f800283a 	ret
   25074:	500d883a 	mov	r6,r10
   25078:	003ff106 	br	25040 <__alt_data_end+0xfffec040>

0002507c <_realloc_r>:
   2507c:	defff604 	addi	sp,sp,-40
   25080:	dc800215 	stw	r18,8(sp)
   25084:	dfc00915 	stw	ra,36(sp)
   25088:	df000815 	stw	fp,32(sp)
   2508c:	ddc00715 	stw	r23,28(sp)
   25090:	dd800615 	stw	r22,24(sp)
   25094:	dd400515 	stw	r21,20(sp)
   25098:	dd000415 	stw	r20,16(sp)
   2509c:	dcc00315 	stw	r19,12(sp)
   250a0:	dc400115 	stw	r17,4(sp)
   250a4:	dc000015 	stw	r16,0(sp)
   250a8:	3025883a 	mov	r18,r6
   250ac:	2800b726 	beq	r5,zero,2538c <_realloc_r+0x310>
   250b0:	282b883a 	mov	r21,r5
   250b4:	2029883a 	mov	r20,r4
   250b8:	0022be00 	call	22be0 <__malloc_lock>
   250bc:	a8bfff17 	ldw	r2,-4(r21)
   250c0:	043fff04 	movi	r16,-4
   250c4:	90c002c4 	addi	r3,r18,11
   250c8:	01000584 	movi	r4,22
   250cc:	acfffe04 	addi	r19,r21,-8
   250d0:	1420703a 	and	r16,r2,r16
   250d4:	20c0332e 	bgeu	r4,r3,251a4 <_realloc_r+0x128>
   250d8:	047ffe04 	movi	r17,-8
   250dc:	1c62703a 	and	r17,r3,r17
   250e0:	8807883a 	mov	r3,r17
   250e4:	88005816 	blt	r17,zero,25248 <_realloc_r+0x1cc>
   250e8:	8c805736 	bltu	r17,r18,25248 <_realloc_r+0x1cc>
   250ec:	80c0300e 	bge	r16,r3,251b0 <_realloc_r+0x134>
   250f0:	070000b4 	movhi	fp,2
   250f4:	e71c1604 	addi	fp,fp,28760
   250f8:	e1c00217 	ldw	r7,8(fp)
   250fc:	9c09883a 	add	r4,r19,r16
   25100:	22000117 	ldw	r8,4(r4)
   25104:	21c06326 	beq	r4,r7,25294 <_realloc_r+0x218>
   25108:	017fff84 	movi	r5,-2
   2510c:	414a703a 	and	r5,r8,r5
   25110:	214b883a 	add	r5,r4,r5
   25114:	29800117 	ldw	r6,4(r5)
   25118:	3180004c 	andi	r6,r6,1
   2511c:	30003f26 	beq	r6,zero,2521c <_realloc_r+0x1a0>
   25120:	1080004c 	andi	r2,r2,1
   25124:	10008326 	beq	r2,zero,25334 <_realloc_r+0x2b8>
   25128:	900b883a 	mov	r5,r18
   2512c:	a009883a 	mov	r4,r20
   25130:	00219bc0 	call	219bc <_malloc_r>
   25134:	1025883a 	mov	r18,r2
   25138:	10011e26 	beq	r2,zero,255b4 <_realloc_r+0x538>
   2513c:	a93fff17 	ldw	r4,-4(r21)
   25140:	10fffe04 	addi	r3,r2,-8
   25144:	00bfff84 	movi	r2,-2
   25148:	2084703a 	and	r2,r4,r2
   2514c:	9885883a 	add	r2,r19,r2
   25150:	1880ee26 	beq	r3,r2,2550c <_realloc_r+0x490>
   25154:	81bfff04 	addi	r6,r16,-4
   25158:	00800904 	movi	r2,36
   2515c:	1180b836 	bltu	r2,r6,25440 <_realloc_r+0x3c4>
   25160:	00c004c4 	movi	r3,19
   25164:	19809636 	bltu	r3,r6,253c0 <_realloc_r+0x344>
   25168:	9005883a 	mov	r2,r18
   2516c:	a807883a 	mov	r3,r21
   25170:	19000017 	ldw	r4,0(r3)
   25174:	11000015 	stw	r4,0(r2)
   25178:	19000117 	ldw	r4,4(r3)
   2517c:	11000115 	stw	r4,4(r2)
   25180:	18c00217 	ldw	r3,8(r3)
   25184:	10c00215 	stw	r3,8(r2)
   25188:	a80b883a 	mov	r5,r21
   2518c:	a009883a 	mov	r4,r20
   25190:	00223bc0 	call	223bc <_free_r>
   25194:	a009883a 	mov	r4,r20
   25198:	0022c040 	call	22c04 <__malloc_unlock>
   2519c:	9005883a 	mov	r2,r18
   251a0:	00001206 	br	251ec <_realloc_r+0x170>
   251a4:	00c00404 	movi	r3,16
   251a8:	1823883a 	mov	r17,r3
   251ac:	003fce06 	br	250e8 <__alt_data_end+0xfffec0e8>
   251b0:	a825883a 	mov	r18,r21
   251b4:	8445c83a 	sub	r2,r16,r17
   251b8:	00c003c4 	movi	r3,15
   251bc:	18802636 	bltu	r3,r2,25258 <_realloc_r+0x1dc>
   251c0:	99800117 	ldw	r6,4(r19)
   251c4:	9c07883a 	add	r3,r19,r16
   251c8:	3180004c 	andi	r6,r6,1
   251cc:	3420b03a 	or	r16,r6,r16
   251d0:	9c000115 	stw	r16,4(r19)
   251d4:	18800117 	ldw	r2,4(r3)
   251d8:	10800054 	ori	r2,r2,1
   251dc:	18800115 	stw	r2,4(r3)
   251e0:	a009883a 	mov	r4,r20
   251e4:	0022c040 	call	22c04 <__malloc_unlock>
   251e8:	9005883a 	mov	r2,r18
   251ec:	dfc00917 	ldw	ra,36(sp)
   251f0:	df000817 	ldw	fp,32(sp)
   251f4:	ddc00717 	ldw	r23,28(sp)
   251f8:	dd800617 	ldw	r22,24(sp)
   251fc:	dd400517 	ldw	r21,20(sp)
   25200:	dd000417 	ldw	r20,16(sp)
   25204:	dcc00317 	ldw	r19,12(sp)
   25208:	dc800217 	ldw	r18,8(sp)
   2520c:	dc400117 	ldw	r17,4(sp)
   25210:	dc000017 	ldw	r16,0(sp)
   25214:	dec00a04 	addi	sp,sp,40
   25218:	f800283a 	ret
   2521c:	017fff04 	movi	r5,-4
   25220:	414a703a 	and	r5,r8,r5
   25224:	814d883a 	add	r6,r16,r5
   25228:	30c01f16 	blt	r6,r3,252a8 <_realloc_r+0x22c>
   2522c:	20800317 	ldw	r2,12(r4)
   25230:	20c00217 	ldw	r3,8(r4)
   25234:	a825883a 	mov	r18,r21
   25238:	3021883a 	mov	r16,r6
   2523c:	18800315 	stw	r2,12(r3)
   25240:	10c00215 	stw	r3,8(r2)
   25244:	003fdb06 	br	251b4 <__alt_data_end+0xfffec1b4>
   25248:	00800304 	movi	r2,12
   2524c:	a0800015 	stw	r2,0(r20)
   25250:	0005883a 	mov	r2,zero
   25254:	003fe506 	br	251ec <__alt_data_end+0xfffec1ec>
   25258:	98c00117 	ldw	r3,4(r19)
   2525c:	9c4b883a 	add	r5,r19,r17
   25260:	11000054 	ori	r4,r2,1
   25264:	18c0004c 	andi	r3,r3,1
   25268:	1c62b03a 	or	r17,r3,r17
   2526c:	9c400115 	stw	r17,4(r19)
   25270:	29000115 	stw	r4,4(r5)
   25274:	2885883a 	add	r2,r5,r2
   25278:	10c00117 	ldw	r3,4(r2)
   2527c:	29400204 	addi	r5,r5,8
   25280:	a009883a 	mov	r4,r20
   25284:	18c00054 	ori	r3,r3,1
   25288:	10c00115 	stw	r3,4(r2)
   2528c:	00223bc0 	call	223bc <_free_r>
   25290:	003fd306 	br	251e0 <__alt_data_end+0xfffec1e0>
   25294:	017fff04 	movi	r5,-4
   25298:	414a703a 	and	r5,r8,r5
   2529c:	89800404 	addi	r6,r17,16
   252a0:	8151883a 	add	r8,r16,r5
   252a4:	4180590e 	bge	r8,r6,2540c <_realloc_r+0x390>
   252a8:	1080004c 	andi	r2,r2,1
   252ac:	103f9e1e 	bne	r2,zero,25128 <__alt_data_end+0xfffec128>
   252b0:	adbffe17 	ldw	r22,-8(r21)
   252b4:	00bfff04 	movi	r2,-4
   252b8:	9dadc83a 	sub	r22,r19,r22
   252bc:	b1800117 	ldw	r6,4(r22)
   252c0:	3084703a 	and	r2,r6,r2
   252c4:	20002026 	beq	r4,zero,25348 <_realloc_r+0x2cc>
   252c8:	80af883a 	add	r23,r16,r2
   252cc:	b96f883a 	add	r23,r23,r5
   252d0:	21c05f26 	beq	r4,r7,25450 <_realloc_r+0x3d4>
   252d4:	b8c01c16 	blt	r23,r3,25348 <_realloc_r+0x2cc>
   252d8:	20800317 	ldw	r2,12(r4)
   252dc:	20c00217 	ldw	r3,8(r4)
   252e0:	81bfff04 	addi	r6,r16,-4
   252e4:	01000904 	movi	r4,36
   252e8:	18800315 	stw	r2,12(r3)
   252ec:	10c00215 	stw	r3,8(r2)
   252f0:	b0c00217 	ldw	r3,8(r22)
   252f4:	b0800317 	ldw	r2,12(r22)
   252f8:	b4800204 	addi	r18,r22,8
   252fc:	18800315 	stw	r2,12(r3)
   25300:	10c00215 	stw	r3,8(r2)
   25304:	21801b36 	bltu	r4,r6,25374 <_realloc_r+0x2f8>
   25308:	008004c4 	movi	r2,19
   2530c:	1180352e 	bgeu	r2,r6,253e4 <_realloc_r+0x368>
   25310:	a8800017 	ldw	r2,0(r21)
   25314:	b0800215 	stw	r2,8(r22)
   25318:	a8800117 	ldw	r2,4(r21)
   2531c:	b0800315 	stw	r2,12(r22)
   25320:	008006c4 	movi	r2,27
   25324:	11807f36 	bltu	r2,r6,25524 <_realloc_r+0x4a8>
   25328:	b0800404 	addi	r2,r22,16
   2532c:	ad400204 	addi	r21,r21,8
   25330:	00002d06 	br	253e8 <_realloc_r+0x36c>
   25334:	adbffe17 	ldw	r22,-8(r21)
   25338:	00bfff04 	movi	r2,-4
   2533c:	9dadc83a 	sub	r22,r19,r22
   25340:	b1000117 	ldw	r4,4(r22)
   25344:	2084703a 	and	r2,r4,r2
   25348:	b03f7726 	beq	r22,zero,25128 <__alt_data_end+0xfffec128>
   2534c:	80af883a 	add	r23,r16,r2
   25350:	b8ff7516 	blt	r23,r3,25128 <__alt_data_end+0xfffec128>
   25354:	b0800317 	ldw	r2,12(r22)
   25358:	b0c00217 	ldw	r3,8(r22)
   2535c:	81bfff04 	addi	r6,r16,-4
   25360:	01000904 	movi	r4,36
   25364:	18800315 	stw	r2,12(r3)
   25368:	10c00215 	stw	r3,8(r2)
   2536c:	b4800204 	addi	r18,r22,8
   25370:	21bfe52e 	bgeu	r4,r6,25308 <__alt_data_end+0xfffec308>
   25374:	a80b883a 	mov	r5,r21
   25378:	9009883a 	mov	r4,r18
   2537c:	0024f200 	call	24f20 <memmove>
   25380:	b821883a 	mov	r16,r23
   25384:	b027883a 	mov	r19,r22
   25388:	003f8a06 	br	251b4 <__alt_data_end+0xfffec1b4>
   2538c:	300b883a 	mov	r5,r6
   25390:	dfc00917 	ldw	ra,36(sp)
   25394:	df000817 	ldw	fp,32(sp)
   25398:	ddc00717 	ldw	r23,28(sp)
   2539c:	dd800617 	ldw	r22,24(sp)
   253a0:	dd400517 	ldw	r21,20(sp)
   253a4:	dd000417 	ldw	r20,16(sp)
   253a8:	dcc00317 	ldw	r19,12(sp)
   253ac:	dc800217 	ldw	r18,8(sp)
   253b0:	dc400117 	ldw	r17,4(sp)
   253b4:	dc000017 	ldw	r16,0(sp)
   253b8:	dec00a04 	addi	sp,sp,40
   253bc:	00219bc1 	jmpi	219bc <_malloc_r>
   253c0:	a8c00017 	ldw	r3,0(r21)
   253c4:	90c00015 	stw	r3,0(r18)
   253c8:	a8c00117 	ldw	r3,4(r21)
   253cc:	90c00115 	stw	r3,4(r18)
   253d0:	00c006c4 	movi	r3,27
   253d4:	19804536 	bltu	r3,r6,254ec <_realloc_r+0x470>
   253d8:	90800204 	addi	r2,r18,8
   253dc:	a8c00204 	addi	r3,r21,8
   253e0:	003f6306 	br	25170 <__alt_data_end+0xfffec170>
   253e4:	9005883a 	mov	r2,r18
   253e8:	a8c00017 	ldw	r3,0(r21)
   253ec:	b821883a 	mov	r16,r23
   253f0:	b027883a 	mov	r19,r22
   253f4:	10c00015 	stw	r3,0(r2)
   253f8:	a8c00117 	ldw	r3,4(r21)
   253fc:	10c00115 	stw	r3,4(r2)
   25400:	a8c00217 	ldw	r3,8(r21)
   25404:	10c00215 	stw	r3,8(r2)
   25408:	003f6a06 	br	251b4 <__alt_data_end+0xfffec1b4>
   2540c:	9c67883a 	add	r19,r19,r17
   25410:	4445c83a 	sub	r2,r8,r17
   25414:	e4c00215 	stw	r19,8(fp)
   25418:	10800054 	ori	r2,r2,1
   2541c:	98800115 	stw	r2,4(r19)
   25420:	a8bfff17 	ldw	r2,-4(r21)
   25424:	a009883a 	mov	r4,r20
   25428:	1080004c 	andi	r2,r2,1
   2542c:	1462b03a 	or	r17,r2,r17
   25430:	ac7fff15 	stw	r17,-4(r21)
   25434:	0022c040 	call	22c04 <__malloc_unlock>
   25438:	a805883a 	mov	r2,r21
   2543c:	003f6b06 	br	251ec <__alt_data_end+0xfffec1ec>
   25440:	a80b883a 	mov	r5,r21
   25444:	9009883a 	mov	r4,r18
   25448:	0024f200 	call	24f20 <memmove>
   2544c:	003f4e06 	br	25188 <__alt_data_end+0xfffec188>
   25450:	89000404 	addi	r4,r17,16
   25454:	b93fbc16 	blt	r23,r4,25348 <__alt_data_end+0xfffec348>
   25458:	b0800317 	ldw	r2,12(r22)
   2545c:	b0c00217 	ldw	r3,8(r22)
   25460:	81bfff04 	addi	r6,r16,-4
   25464:	01000904 	movi	r4,36
   25468:	18800315 	stw	r2,12(r3)
   2546c:	10c00215 	stw	r3,8(r2)
   25470:	b4800204 	addi	r18,r22,8
   25474:	21804336 	bltu	r4,r6,25584 <_realloc_r+0x508>
   25478:	008004c4 	movi	r2,19
   2547c:	11803f2e 	bgeu	r2,r6,2557c <_realloc_r+0x500>
   25480:	a8800017 	ldw	r2,0(r21)
   25484:	b0800215 	stw	r2,8(r22)
   25488:	a8800117 	ldw	r2,4(r21)
   2548c:	b0800315 	stw	r2,12(r22)
   25490:	008006c4 	movi	r2,27
   25494:	11803f36 	bltu	r2,r6,25594 <_realloc_r+0x518>
   25498:	b0800404 	addi	r2,r22,16
   2549c:	ad400204 	addi	r21,r21,8
   254a0:	a8c00017 	ldw	r3,0(r21)
   254a4:	10c00015 	stw	r3,0(r2)
   254a8:	a8c00117 	ldw	r3,4(r21)
   254ac:	10c00115 	stw	r3,4(r2)
   254b0:	a8c00217 	ldw	r3,8(r21)
   254b4:	10c00215 	stw	r3,8(r2)
   254b8:	b447883a 	add	r3,r22,r17
   254bc:	bc45c83a 	sub	r2,r23,r17
   254c0:	e0c00215 	stw	r3,8(fp)
   254c4:	10800054 	ori	r2,r2,1
   254c8:	18800115 	stw	r2,4(r3)
   254cc:	b0800117 	ldw	r2,4(r22)
   254d0:	a009883a 	mov	r4,r20
   254d4:	1080004c 	andi	r2,r2,1
   254d8:	1462b03a 	or	r17,r2,r17
   254dc:	b4400115 	stw	r17,4(r22)
   254e0:	0022c040 	call	22c04 <__malloc_unlock>
   254e4:	9005883a 	mov	r2,r18
   254e8:	003f4006 	br	251ec <__alt_data_end+0xfffec1ec>
   254ec:	a8c00217 	ldw	r3,8(r21)
   254f0:	90c00215 	stw	r3,8(r18)
   254f4:	a8c00317 	ldw	r3,12(r21)
   254f8:	90c00315 	stw	r3,12(r18)
   254fc:	30801126 	beq	r6,r2,25544 <_realloc_r+0x4c8>
   25500:	90800404 	addi	r2,r18,16
   25504:	a8c00404 	addi	r3,r21,16
   25508:	003f1906 	br	25170 <__alt_data_end+0xfffec170>
   2550c:	90ffff17 	ldw	r3,-4(r18)
   25510:	00bfff04 	movi	r2,-4
   25514:	a825883a 	mov	r18,r21
   25518:	1884703a 	and	r2,r3,r2
   2551c:	80a1883a 	add	r16,r16,r2
   25520:	003f2406 	br	251b4 <__alt_data_end+0xfffec1b4>
   25524:	a8800217 	ldw	r2,8(r21)
   25528:	b0800415 	stw	r2,16(r22)
   2552c:	a8800317 	ldw	r2,12(r21)
   25530:	b0800515 	stw	r2,20(r22)
   25534:	31000a26 	beq	r6,r4,25560 <_realloc_r+0x4e4>
   25538:	b0800604 	addi	r2,r22,24
   2553c:	ad400404 	addi	r21,r21,16
   25540:	003fa906 	br	253e8 <__alt_data_end+0xfffec3e8>
   25544:	a9000417 	ldw	r4,16(r21)
   25548:	90800604 	addi	r2,r18,24
   2554c:	a8c00604 	addi	r3,r21,24
   25550:	91000415 	stw	r4,16(r18)
   25554:	a9000517 	ldw	r4,20(r21)
   25558:	91000515 	stw	r4,20(r18)
   2555c:	003f0406 	br	25170 <__alt_data_end+0xfffec170>
   25560:	a8c00417 	ldw	r3,16(r21)
   25564:	ad400604 	addi	r21,r21,24
   25568:	b0800804 	addi	r2,r22,32
   2556c:	b0c00615 	stw	r3,24(r22)
   25570:	a8ffff17 	ldw	r3,-4(r21)
   25574:	b0c00715 	stw	r3,28(r22)
   25578:	003f9b06 	br	253e8 <__alt_data_end+0xfffec3e8>
   2557c:	9005883a 	mov	r2,r18
   25580:	003fc706 	br	254a0 <__alt_data_end+0xfffec4a0>
   25584:	a80b883a 	mov	r5,r21
   25588:	9009883a 	mov	r4,r18
   2558c:	0024f200 	call	24f20 <memmove>
   25590:	003fc906 	br	254b8 <__alt_data_end+0xfffec4b8>
   25594:	a8800217 	ldw	r2,8(r21)
   25598:	b0800415 	stw	r2,16(r22)
   2559c:	a8800317 	ldw	r2,12(r21)
   255a0:	b0800515 	stw	r2,20(r22)
   255a4:	31000726 	beq	r6,r4,255c4 <_realloc_r+0x548>
   255a8:	b0800604 	addi	r2,r22,24
   255ac:	ad400404 	addi	r21,r21,16
   255b0:	003fbb06 	br	254a0 <__alt_data_end+0xfffec4a0>
   255b4:	a009883a 	mov	r4,r20
   255b8:	0022c040 	call	22c04 <__malloc_unlock>
   255bc:	0005883a 	mov	r2,zero
   255c0:	003f0a06 	br	251ec <__alt_data_end+0xfffec1ec>
   255c4:	a8c00417 	ldw	r3,16(r21)
   255c8:	ad400604 	addi	r21,r21,24
   255cc:	b0800804 	addi	r2,r22,32
   255d0:	b0c00615 	stw	r3,24(r22)
   255d4:	a8ffff17 	ldw	r3,-4(r21)
   255d8:	b0c00715 	stw	r3,28(r22)
   255dc:	003fb006 	br	254a0 <__alt_data_end+0xfffec4a0>

000255e0 <strlen>:
   255e0:	208000cc 	andi	r2,r4,3
   255e4:	10002026 	beq	r2,zero,25668 <strlen+0x88>
   255e8:	20800007 	ldb	r2,0(r4)
   255ec:	10002026 	beq	r2,zero,25670 <strlen+0x90>
   255f0:	2005883a 	mov	r2,r4
   255f4:	00000206 	br	25600 <strlen+0x20>
   255f8:	10c00007 	ldb	r3,0(r2)
   255fc:	18001826 	beq	r3,zero,25660 <strlen+0x80>
   25600:	10800044 	addi	r2,r2,1
   25604:	10c000cc 	andi	r3,r2,3
   25608:	183ffb1e 	bne	r3,zero,255f8 <__alt_data_end+0xfffec5f8>
   2560c:	10c00017 	ldw	r3,0(r2)
   25610:	01ffbff4 	movhi	r7,65279
   25614:	39ffbfc4 	addi	r7,r7,-257
   25618:	00ca303a 	nor	r5,zero,r3
   2561c:	01a02074 	movhi	r6,32897
   25620:	19c7883a 	add	r3,r3,r7
   25624:	31a02004 	addi	r6,r6,-32640
   25628:	1946703a 	and	r3,r3,r5
   2562c:	1986703a 	and	r3,r3,r6
   25630:	1800091e 	bne	r3,zero,25658 <strlen+0x78>
   25634:	10800104 	addi	r2,r2,4
   25638:	10c00017 	ldw	r3,0(r2)
   2563c:	19cb883a 	add	r5,r3,r7
   25640:	00c6303a 	nor	r3,zero,r3
   25644:	28c6703a 	and	r3,r5,r3
   25648:	1986703a 	and	r3,r3,r6
   2564c:	183ff926 	beq	r3,zero,25634 <__alt_data_end+0xfffec634>
   25650:	00000106 	br	25658 <strlen+0x78>
   25654:	10800044 	addi	r2,r2,1
   25658:	10c00007 	ldb	r3,0(r2)
   2565c:	183ffd1e 	bne	r3,zero,25654 <__alt_data_end+0xfffec654>
   25660:	1105c83a 	sub	r2,r2,r4
   25664:	f800283a 	ret
   25668:	2005883a 	mov	r2,r4
   2566c:	003fe706 	br	2560c <__alt_data_end+0xfffec60c>
   25670:	0005883a 	mov	r2,zero
   25674:	f800283a 	ret

00025678 <__swsetup_r>:
   25678:	008000f4 	movhi	r2,3
   2567c:	defffd04 	addi	sp,sp,-12
   25680:	10a2a904 	addi	r2,r2,-30044
   25684:	dc400115 	stw	r17,4(sp)
   25688:	2023883a 	mov	r17,r4
   2568c:	11000017 	ldw	r4,0(r2)
   25690:	dc000015 	stw	r16,0(sp)
   25694:	dfc00215 	stw	ra,8(sp)
   25698:	2821883a 	mov	r16,r5
   2569c:	20000226 	beq	r4,zero,256a8 <__swsetup_r+0x30>
   256a0:	20800e17 	ldw	r2,56(r4)
   256a4:	10003126 	beq	r2,zero,2576c <__swsetup_r+0xf4>
   256a8:	8080030b 	ldhu	r2,12(r16)
   256ac:	10c0020c 	andi	r3,r2,8
   256b0:	1009883a 	mov	r4,r2
   256b4:	18000f26 	beq	r3,zero,256f4 <__swsetup_r+0x7c>
   256b8:	80c00417 	ldw	r3,16(r16)
   256bc:	18001526 	beq	r3,zero,25714 <__swsetup_r+0x9c>
   256c0:	1100004c 	andi	r4,r2,1
   256c4:	20001c1e 	bne	r4,zero,25738 <__swsetup_r+0xc0>
   256c8:	1080008c 	andi	r2,r2,2
   256cc:	1000291e 	bne	r2,zero,25774 <__swsetup_r+0xfc>
   256d0:	80800517 	ldw	r2,20(r16)
   256d4:	80800215 	stw	r2,8(r16)
   256d8:	18001c26 	beq	r3,zero,2574c <__swsetup_r+0xd4>
   256dc:	0005883a 	mov	r2,zero
   256e0:	dfc00217 	ldw	ra,8(sp)
   256e4:	dc400117 	ldw	r17,4(sp)
   256e8:	dc000017 	ldw	r16,0(sp)
   256ec:	dec00304 	addi	sp,sp,12
   256f0:	f800283a 	ret
   256f4:	2080040c 	andi	r2,r4,16
   256f8:	10002e26 	beq	r2,zero,257b4 <__swsetup_r+0x13c>
   256fc:	2080010c 	andi	r2,r4,4
   25700:	10001e1e 	bne	r2,zero,2577c <__swsetup_r+0x104>
   25704:	80c00417 	ldw	r3,16(r16)
   25708:	20800214 	ori	r2,r4,8
   2570c:	8080030d 	sth	r2,12(r16)
   25710:	183feb1e 	bne	r3,zero,256c0 <__alt_data_end+0xfffec6c0>
   25714:	1100a00c 	andi	r4,r2,640
   25718:	01408004 	movi	r5,512
   2571c:	217fe826 	beq	r4,r5,256c0 <__alt_data_end+0xfffec6c0>
   25720:	800b883a 	mov	r5,r16
   25724:	8809883a 	mov	r4,r17
   25728:	00262440 	call	26244 <__smakebuf_r>
   2572c:	8080030b 	ldhu	r2,12(r16)
   25730:	80c00417 	ldw	r3,16(r16)
   25734:	003fe206 	br	256c0 <__alt_data_end+0xfffec6c0>
   25738:	80800517 	ldw	r2,20(r16)
   2573c:	80000215 	stw	zero,8(r16)
   25740:	0085c83a 	sub	r2,zero,r2
   25744:	80800615 	stw	r2,24(r16)
   25748:	183fe41e 	bne	r3,zero,256dc <__alt_data_end+0xfffec6dc>
   2574c:	80c0030b 	ldhu	r3,12(r16)
   25750:	0005883a 	mov	r2,zero
   25754:	1900200c 	andi	r4,r3,128
   25758:	203fe126 	beq	r4,zero,256e0 <__alt_data_end+0xfffec6e0>
   2575c:	18c01014 	ori	r3,r3,64
   25760:	80c0030d 	sth	r3,12(r16)
   25764:	00bfffc4 	movi	r2,-1
   25768:	003fdd06 	br	256e0 <__alt_data_end+0xfffec6e0>
   2576c:	002606c0 	call	2606c <__sinit>
   25770:	003fcd06 	br	256a8 <__alt_data_end+0xfffec6a8>
   25774:	0005883a 	mov	r2,zero
   25778:	003fd606 	br	256d4 <__alt_data_end+0xfffec6d4>
   2577c:	81400c17 	ldw	r5,48(r16)
   25780:	28000626 	beq	r5,zero,2579c <__swsetup_r+0x124>
   25784:	80801004 	addi	r2,r16,64
   25788:	28800326 	beq	r5,r2,25798 <__swsetup_r+0x120>
   2578c:	8809883a 	mov	r4,r17
   25790:	00223bc0 	call	223bc <_free_r>
   25794:	8100030b 	ldhu	r4,12(r16)
   25798:	80000c15 	stw	zero,48(r16)
   2579c:	80c00417 	ldw	r3,16(r16)
   257a0:	00bff6c4 	movi	r2,-37
   257a4:	1108703a 	and	r4,r2,r4
   257a8:	80000115 	stw	zero,4(r16)
   257ac:	80c00015 	stw	r3,0(r16)
   257b0:	003fd506 	br	25708 <__alt_data_end+0xfffec708>
   257b4:	00800244 	movi	r2,9
   257b8:	88800015 	stw	r2,0(r17)
   257bc:	20801014 	ori	r2,r4,64
   257c0:	8080030d 	sth	r2,12(r16)
   257c4:	00bfffc4 	movi	r2,-1
   257c8:	003fc506 	br	256e0 <__alt_data_end+0xfffec6e0>

000257cc <__register_exitproc>:
   257cc:	defffa04 	addi	sp,sp,-24
   257d0:	dc000315 	stw	r16,12(sp)
   257d4:	040000f4 	movhi	r16,3
   257d8:	8422a804 	addi	r16,r16,-30048
   257dc:	80c00017 	ldw	r3,0(r16)
   257e0:	dc400415 	stw	r17,16(sp)
   257e4:	dfc00515 	stw	ra,20(sp)
   257e8:	18805217 	ldw	r2,328(r3)
   257ec:	2023883a 	mov	r17,r4
   257f0:	10003726 	beq	r2,zero,258d0 <__register_exitproc+0x104>
   257f4:	10c00117 	ldw	r3,4(r2)
   257f8:	010007c4 	movi	r4,31
   257fc:	20c00e16 	blt	r4,r3,25838 <__register_exitproc+0x6c>
   25800:	1a000044 	addi	r8,r3,1
   25804:	8800221e 	bne	r17,zero,25890 <__register_exitproc+0xc4>
   25808:	18c00084 	addi	r3,r3,2
   2580c:	18c7883a 	add	r3,r3,r3
   25810:	18c7883a 	add	r3,r3,r3
   25814:	12000115 	stw	r8,4(r2)
   25818:	10c7883a 	add	r3,r2,r3
   2581c:	19400015 	stw	r5,0(r3)
   25820:	0005883a 	mov	r2,zero
   25824:	dfc00517 	ldw	ra,20(sp)
   25828:	dc400417 	ldw	r17,16(sp)
   2582c:	dc000317 	ldw	r16,12(sp)
   25830:	dec00604 	addi	sp,sp,24
   25834:	f800283a 	ret
   25838:	008000b4 	movhi	r2,2
   2583c:	10866504 	addi	r2,r2,6548
   25840:	10002626 	beq	r2,zero,258dc <__register_exitproc+0x110>
   25844:	01006404 	movi	r4,400
   25848:	d9400015 	stw	r5,0(sp)
   2584c:	d9800115 	stw	r6,4(sp)
   25850:	d9c00215 	stw	r7,8(sp)
   25854:	00219940 	call	21994 <malloc>
   25858:	d9400017 	ldw	r5,0(sp)
   2585c:	d9800117 	ldw	r6,4(sp)
   25860:	d9c00217 	ldw	r7,8(sp)
   25864:	10001d26 	beq	r2,zero,258dc <__register_exitproc+0x110>
   25868:	81000017 	ldw	r4,0(r16)
   2586c:	10000115 	stw	zero,4(r2)
   25870:	02000044 	movi	r8,1
   25874:	22405217 	ldw	r9,328(r4)
   25878:	0007883a 	mov	r3,zero
   2587c:	12400015 	stw	r9,0(r2)
   25880:	20805215 	stw	r2,328(r4)
   25884:	10006215 	stw	zero,392(r2)
   25888:	10006315 	stw	zero,396(r2)
   2588c:	883fde26 	beq	r17,zero,25808 <__alt_data_end+0xfffec808>
   25890:	18c9883a 	add	r4,r3,r3
   25894:	2109883a 	add	r4,r4,r4
   25898:	1109883a 	add	r4,r2,r4
   2589c:	21802215 	stw	r6,136(r4)
   258a0:	01800044 	movi	r6,1
   258a4:	12406217 	ldw	r9,392(r2)
   258a8:	30cc983a 	sll	r6,r6,r3
   258ac:	4992b03a 	or	r9,r9,r6
   258b0:	12406215 	stw	r9,392(r2)
   258b4:	21c04215 	stw	r7,264(r4)
   258b8:	01000084 	movi	r4,2
   258bc:	893fd21e 	bne	r17,r4,25808 <__alt_data_end+0xfffec808>
   258c0:	11006317 	ldw	r4,396(r2)
   258c4:	218cb03a 	or	r6,r4,r6
   258c8:	11806315 	stw	r6,396(r2)
   258cc:	003fce06 	br	25808 <__alt_data_end+0xfffec808>
   258d0:	18805304 	addi	r2,r3,332
   258d4:	18805215 	stw	r2,328(r3)
   258d8:	003fc606 	br	257f4 <__alt_data_end+0xfffec7f4>
   258dc:	00bfffc4 	movi	r2,-1
   258e0:	003fd006 	br	25824 <__alt_data_end+0xfffec824>

000258e4 <__call_exitprocs>:
   258e4:	defff504 	addi	sp,sp,-44
   258e8:	df000915 	stw	fp,36(sp)
   258ec:	dd400615 	stw	r21,24(sp)
   258f0:	dc800315 	stw	r18,12(sp)
   258f4:	dfc00a15 	stw	ra,40(sp)
   258f8:	ddc00815 	stw	r23,32(sp)
   258fc:	dd800715 	stw	r22,28(sp)
   25900:	dd000515 	stw	r20,20(sp)
   25904:	dcc00415 	stw	r19,16(sp)
   25908:	dc400215 	stw	r17,8(sp)
   2590c:	dc000115 	stw	r16,4(sp)
   25910:	d9000015 	stw	r4,0(sp)
   25914:	2839883a 	mov	fp,r5
   25918:	04800044 	movi	r18,1
   2591c:	057fffc4 	movi	r21,-1
   25920:	008000f4 	movhi	r2,3
   25924:	10a2a804 	addi	r2,r2,-30048
   25928:	12000017 	ldw	r8,0(r2)
   2592c:	45005217 	ldw	r20,328(r8)
   25930:	44c05204 	addi	r19,r8,328
   25934:	a0001c26 	beq	r20,zero,259a8 <__call_exitprocs+0xc4>
   25938:	a0800117 	ldw	r2,4(r20)
   2593c:	15ffffc4 	addi	r23,r2,-1
   25940:	b8000d16 	blt	r23,zero,25978 <__call_exitprocs+0x94>
   25944:	14000044 	addi	r16,r2,1
   25948:	8421883a 	add	r16,r16,r16
   2594c:	8421883a 	add	r16,r16,r16
   25950:	84402004 	addi	r17,r16,128
   25954:	a463883a 	add	r17,r20,r17
   25958:	a421883a 	add	r16,r20,r16
   2595c:	e0001e26 	beq	fp,zero,259d8 <__call_exitprocs+0xf4>
   25960:	80804017 	ldw	r2,256(r16)
   25964:	e0801c26 	beq	fp,r2,259d8 <__call_exitprocs+0xf4>
   25968:	bdffffc4 	addi	r23,r23,-1
   2596c:	843fff04 	addi	r16,r16,-4
   25970:	8c7fff04 	addi	r17,r17,-4
   25974:	bd7ff91e 	bne	r23,r21,2595c <__alt_data_end+0xfffec95c>
   25978:	008000b4 	movhi	r2,2
   2597c:	10866a04 	addi	r2,r2,6568
   25980:	10000926 	beq	r2,zero,259a8 <__call_exitprocs+0xc4>
   25984:	a0800117 	ldw	r2,4(r20)
   25988:	1000301e 	bne	r2,zero,25a4c <__call_exitprocs+0x168>
   2598c:	a0800017 	ldw	r2,0(r20)
   25990:	10003226 	beq	r2,zero,25a5c <__call_exitprocs+0x178>
   25994:	a009883a 	mov	r4,r20
   25998:	98800015 	stw	r2,0(r19)
   2599c:	00219a80 	call	219a8 <free>
   259a0:	9d000017 	ldw	r20,0(r19)
   259a4:	a03fe41e 	bne	r20,zero,25938 <__alt_data_end+0xfffec938>
   259a8:	dfc00a17 	ldw	ra,40(sp)
   259ac:	df000917 	ldw	fp,36(sp)
   259b0:	ddc00817 	ldw	r23,32(sp)
   259b4:	dd800717 	ldw	r22,28(sp)
   259b8:	dd400617 	ldw	r21,24(sp)
   259bc:	dd000517 	ldw	r20,20(sp)
   259c0:	dcc00417 	ldw	r19,16(sp)
   259c4:	dc800317 	ldw	r18,12(sp)
   259c8:	dc400217 	ldw	r17,8(sp)
   259cc:	dc000117 	ldw	r16,4(sp)
   259d0:	dec00b04 	addi	sp,sp,44
   259d4:	f800283a 	ret
   259d8:	a0800117 	ldw	r2,4(r20)
   259dc:	80c00017 	ldw	r3,0(r16)
   259e0:	10bfffc4 	addi	r2,r2,-1
   259e4:	15c01426 	beq	r2,r23,25a38 <__call_exitprocs+0x154>
   259e8:	80000015 	stw	zero,0(r16)
   259ec:	183fde26 	beq	r3,zero,25968 <__alt_data_end+0xfffec968>
   259f0:	95c8983a 	sll	r4,r18,r23
   259f4:	a0806217 	ldw	r2,392(r20)
   259f8:	a5800117 	ldw	r22,4(r20)
   259fc:	2084703a 	and	r2,r4,r2
   25a00:	10000b26 	beq	r2,zero,25a30 <__call_exitprocs+0x14c>
   25a04:	a0806317 	ldw	r2,396(r20)
   25a08:	2088703a 	and	r4,r4,r2
   25a0c:	20000c1e 	bne	r4,zero,25a40 <__call_exitprocs+0x15c>
   25a10:	89400017 	ldw	r5,0(r17)
   25a14:	d9000017 	ldw	r4,0(sp)
   25a18:	183ee83a 	callr	r3
   25a1c:	a0800117 	ldw	r2,4(r20)
   25a20:	15bfbf1e 	bne	r2,r22,25920 <__alt_data_end+0xfffec920>
   25a24:	98800017 	ldw	r2,0(r19)
   25a28:	153fcf26 	beq	r2,r20,25968 <__alt_data_end+0xfffec968>
   25a2c:	003fbc06 	br	25920 <__alt_data_end+0xfffec920>
   25a30:	183ee83a 	callr	r3
   25a34:	003ff906 	br	25a1c <__alt_data_end+0xfffeca1c>
   25a38:	a5c00115 	stw	r23,4(r20)
   25a3c:	003feb06 	br	259ec <__alt_data_end+0xfffec9ec>
   25a40:	89000017 	ldw	r4,0(r17)
   25a44:	183ee83a 	callr	r3
   25a48:	003ff406 	br	25a1c <__alt_data_end+0xfffeca1c>
   25a4c:	a0800017 	ldw	r2,0(r20)
   25a50:	a027883a 	mov	r19,r20
   25a54:	1029883a 	mov	r20,r2
   25a58:	003fb606 	br	25934 <__alt_data_end+0xfffec934>
   25a5c:	0005883a 	mov	r2,zero
   25a60:	003ffb06 	br	25a50 <__alt_data_end+0xfffeca50>

00025a64 <__sflush_r>:
   25a64:	2880030b 	ldhu	r2,12(r5)
   25a68:	defffb04 	addi	sp,sp,-20
   25a6c:	dcc00315 	stw	r19,12(sp)
   25a70:	dc400115 	stw	r17,4(sp)
   25a74:	dfc00415 	stw	ra,16(sp)
   25a78:	dc800215 	stw	r18,8(sp)
   25a7c:	dc000015 	stw	r16,0(sp)
   25a80:	10c0020c 	andi	r3,r2,8
   25a84:	2823883a 	mov	r17,r5
   25a88:	2027883a 	mov	r19,r4
   25a8c:	1800311e 	bne	r3,zero,25b54 <__sflush_r+0xf0>
   25a90:	28c00117 	ldw	r3,4(r5)
   25a94:	10820014 	ori	r2,r2,2048
   25a98:	2880030d 	sth	r2,12(r5)
   25a9c:	00c04b0e 	bge	zero,r3,25bcc <__sflush_r+0x168>
   25aa0:	8a000a17 	ldw	r8,40(r17)
   25aa4:	40002326 	beq	r8,zero,25b34 <__sflush_r+0xd0>
   25aa8:	9c000017 	ldw	r16,0(r19)
   25aac:	10c4000c 	andi	r3,r2,4096
   25ab0:	98000015 	stw	zero,0(r19)
   25ab4:	18004826 	beq	r3,zero,25bd8 <__sflush_r+0x174>
   25ab8:	89801417 	ldw	r6,80(r17)
   25abc:	10c0010c 	andi	r3,r2,4
   25ac0:	18000626 	beq	r3,zero,25adc <__sflush_r+0x78>
   25ac4:	88c00117 	ldw	r3,4(r17)
   25ac8:	88800c17 	ldw	r2,48(r17)
   25acc:	30cdc83a 	sub	r6,r6,r3
   25ad0:	10000226 	beq	r2,zero,25adc <__sflush_r+0x78>
   25ad4:	88800f17 	ldw	r2,60(r17)
   25ad8:	308dc83a 	sub	r6,r6,r2
   25adc:	89400717 	ldw	r5,28(r17)
   25ae0:	000f883a 	mov	r7,zero
   25ae4:	9809883a 	mov	r4,r19
   25ae8:	403ee83a 	callr	r8
   25aec:	00ffffc4 	movi	r3,-1
   25af0:	10c04426 	beq	r2,r3,25c04 <__sflush_r+0x1a0>
   25af4:	88c0030b 	ldhu	r3,12(r17)
   25af8:	89000417 	ldw	r4,16(r17)
   25afc:	88000115 	stw	zero,4(r17)
   25b00:	197dffcc 	andi	r5,r3,63487
   25b04:	8940030d 	sth	r5,12(r17)
   25b08:	89000015 	stw	r4,0(r17)
   25b0c:	18c4000c 	andi	r3,r3,4096
   25b10:	18002c1e 	bne	r3,zero,25bc4 <__sflush_r+0x160>
   25b14:	89400c17 	ldw	r5,48(r17)
   25b18:	9c000015 	stw	r16,0(r19)
   25b1c:	28000526 	beq	r5,zero,25b34 <__sflush_r+0xd0>
   25b20:	88801004 	addi	r2,r17,64
   25b24:	28800226 	beq	r5,r2,25b30 <__sflush_r+0xcc>
   25b28:	9809883a 	mov	r4,r19
   25b2c:	00223bc0 	call	223bc <_free_r>
   25b30:	88000c15 	stw	zero,48(r17)
   25b34:	0005883a 	mov	r2,zero
   25b38:	dfc00417 	ldw	ra,16(sp)
   25b3c:	dcc00317 	ldw	r19,12(sp)
   25b40:	dc800217 	ldw	r18,8(sp)
   25b44:	dc400117 	ldw	r17,4(sp)
   25b48:	dc000017 	ldw	r16,0(sp)
   25b4c:	dec00504 	addi	sp,sp,20
   25b50:	f800283a 	ret
   25b54:	2c800417 	ldw	r18,16(r5)
   25b58:	903ff626 	beq	r18,zero,25b34 <__alt_data_end+0xfffecb34>
   25b5c:	2c000017 	ldw	r16,0(r5)
   25b60:	108000cc 	andi	r2,r2,3
   25b64:	2c800015 	stw	r18,0(r5)
   25b68:	84a1c83a 	sub	r16,r16,r18
   25b6c:	1000131e 	bne	r2,zero,25bbc <__sflush_r+0x158>
   25b70:	28800517 	ldw	r2,20(r5)
   25b74:	88800215 	stw	r2,8(r17)
   25b78:	04000316 	blt	zero,r16,25b88 <__sflush_r+0x124>
   25b7c:	003fed06 	br	25b34 <__alt_data_end+0xfffecb34>
   25b80:	90a5883a 	add	r18,r18,r2
   25b84:	043feb0e 	bge	zero,r16,25b34 <__alt_data_end+0xfffecb34>
   25b88:	88800917 	ldw	r2,36(r17)
   25b8c:	89400717 	ldw	r5,28(r17)
   25b90:	800f883a 	mov	r7,r16
   25b94:	900d883a 	mov	r6,r18
   25b98:	9809883a 	mov	r4,r19
   25b9c:	103ee83a 	callr	r2
   25ba0:	80a1c83a 	sub	r16,r16,r2
   25ba4:	00bff616 	blt	zero,r2,25b80 <__alt_data_end+0xfffecb80>
   25ba8:	88c0030b 	ldhu	r3,12(r17)
   25bac:	00bfffc4 	movi	r2,-1
   25bb0:	18c01014 	ori	r3,r3,64
   25bb4:	88c0030d 	sth	r3,12(r17)
   25bb8:	003fdf06 	br	25b38 <__alt_data_end+0xfffecb38>
   25bbc:	0005883a 	mov	r2,zero
   25bc0:	003fec06 	br	25b74 <__alt_data_end+0xfffecb74>
   25bc4:	88801415 	stw	r2,80(r17)
   25bc8:	003fd206 	br	25b14 <__alt_data_end+0xfffecb14>
   25bcc:	28c00f17 	ldw	r3,60(r5)
   25bd0:	00ffb316 	blt	zero,r3,25aa0 <__alt_data_end+0xfffecaa0>
   25bd4:	003fd706 	br	25b34 <__alt_data_end+0xfffecb34>
   25bd8:	89400717 	ldw	r5,28(r17)
   25bdc:	000d883a 	mov	r6,zero
   25be0:	01c00044 	movi	r7,1
   25be4:	9809883a 	mov	r4,r19
   25be8:	403ee83a 	callr	r8
   25bec:	100d883a 	mov	r6,r2
   25bf0:	00bfffc4 	movi	r2,-1
   25bf4:	30801426 	beq	r6,r2,25c48 <__sflush_r+0x1e4>
   25bf8:	8880030b 	ldhu	r2,12(r17)
   25bfc:	8a000a17 	ldw	r8,40(r17)
   25c00:	003fae06 	br	25abc <__alt_data_end+0xfffecabc>
   25c04:	98c00017 	ldw	r3,0(r19)
   25c08:	183fba26 	beq	r3,zero,25af4 <__alt_data_end+0xfffecaf4>
   25c0c:	01000744 	movi	r4,29
   25c10:	19000626 	beq	r3,r4,25c2c <__sflush_r+0x1c8>
   25c14:	01000584 	movi	r4,22
   25c18:	19000426 	beq	r3,r4,25c2c <__sflush_r+0x1c8>
   25c1c:	88c0030b 	ldhu	r3,12(r17)
   25c20:	18c01014 	ori	r3,r3,64
   25c24:	88c0030d 	sth	r3,12(r17)
   25c28:	003fc306 	br	25b38 <__alt_data_end+0xfffecb38>
   25c2c:	8880030b 	ldhu	r2,12(r17)
   25c30:	88c00417 	ldw	r3,16(r17)
   25c34:	88000115 	stw	zero,4(r17)
   25c38:	10bdffcc 	andi	r2,r2,63487
   25c3c:	8880030d 	sth	r2,12(r17)
   25c40:	88c00015 	stw	r3,0(r17)
   25c44:	003fb306 	br	25b14 <__alt_data_end+0xfffecb14>
   25c48:	98800017 	ldw	r2,0(r19)
   25c4c:	103fea26 	beq	r2,zero,25bf8 <__alt_data_end+0xfffecbf8>
   25c50:	00c00744 	movi	r3,29
   25c54:	10c00226 	beq	r2,r3,25c60 <__sflush_r+0x1fc>
   25c58:	00c00584 	movi	r3,22
   25c5c:	10c0031e 	bne	r2,r3,25c6c <__sflush_r+0x208>
   25c60:	9c000015 	stw	r16,0(r19)
   25c64:	0005883a 	mov	r2,zero
   25c68:	003fb306 	br	25b38 <__alt_data_end+0xfffecb38>
   25c6c:	88c0030b 	ldhu	r3,12(r17)
   25c70:	3005883a 	mov	r2,r6
   25c74:	18c01014 	ori	r3,r3,64
   25c78:	88c0030d 	sth	r3,12(r17)
   25c7c:	003fae06 	br	25b38 <__alt_data_end+0xfffecb38>

00025c80 <_fflush_r>:
   25c80:	defffd04 	addi	sp,sp,-12
   25c84:	dc000115 	stw	r16,4(sp)
   25c88:	dfc00215 	stw	ra,8(sp)
   25c8c:	2021883a 	mov	r16,r4
   25c90:	20000226 	beq	r4,zero,25c9c <_fflush_r+0x1c>
   25c94:	20800e17 	ldw	r2,56(r4)
   25c98:	10000c26 	beq	r2,zero,25ccc <_fflush_r+0x4c>
   25c9c:	2880030f 	ldh	r2,12(r5)
   25ca0:	1000051e 	bne	r2,zero,25cb8 <_fflush_r+0x38>
   25ca4:	0005883a 	mov	r2,zero
   25ca8:	dfc00217 	ldw	ra,8(sp)
   25cac:	dc000117 	ldw	r16,4(sp)
   25cb0:	dec00304 	addi	sp,sp,12
   25cb4:	f800283a 	ret
   25cb8:	8009883a 	mov	r4,r16
   25cbc:	dfc00217 	ldw	ra,8(sp)
   25cc0:	dc000117 	ldw	r16,4(sp)
   25cc4:	dec00304 	addi	sp,sp,12
   25cc8:	0025a641 	jmpi	25a64 <__sflush_r>
   25ccc:	d9400015 	stw	r5,0(sp)
   25cd0:	002606c0 	call	2606c <__sinit>
   25cd4:	d9400017 	ldw	r5,0(sp)
   25cd8:	003ff006 	br	25c9c <__alt_data_end+0xfffecc9c>

00025cdc <fflush>:
   25cdc:	20000526 	beq	r4,zero,25cf4 <fflush+0x18>
   25ce0:	008000f4 	movhi	r2,3
   25ce4:	10a2a904 	addi	r2,r2,-30044
   25ce8:	200b883a 	mov	r5,r4
   25cec:	11000017 	ldw	r4,0(r2)
   25cf0:	0025c801 	jmpi	25c80 <_fflush_r>
   25cf4:	008000f4 	movhi	r2,3
   25cf8:	10a2a804 	addi	r2,r2,-30048
   25cfc:	11000017 	ldw	r4,0(r2)
   25d00:	014000b4 	movhi	r5,2
   25d04:	29572004 	addi	r5,r5,23680
   25d08:	00261801 	jmpi	26180 <_fwalk_reent>

00025d0c <__fp_unlock>:
   25d0c:	0005883a 	mov	r2,zero
   25d10:	f800283a 	ret

00025d14 <_cleanup_r>:
   25d14:	014000b4 	movhi	r5,2
   25d18:	2959c604 	addi	r5,r5,26392
   25d1c:	00261801 	jmpi	26180 <_fwalk_reent>

00025d20 <__sinit.part.1>:
   25d20:	defff704 	addi	sp,sp,-36
   25d24:	00c000b4 	movhi	r3,2
   25d28:	dfc00815 	stw	ra,32(sp)
   25d2c:	ddc00715 	stw	r23,28(sp)
   25d30:	dd800615 	stw	r22,24(sp)
   25d34:	dd400515 	stw	r21,20(sp)
   25d38:	dd000415 	stw	r20,16(sp)
   25d3c:	dcc00315 	stw	r19,12(sp)
   25d40:	dc800215 	stw	r18,8(sp)
   25d44:	dc400115 	stw	r17,4(sp)
   25d48:	dc000015 	stw	r16,0(sp)
   25d4c:	18d74504 	addi	r3,r3,23828
   25d50:	24000117 	ldw	r16,4(r4)
   25d54:	20c00f15 	stw	r3,60(r4)
   25d58:	2080bb04 	addi	r2,r4,748
   25d5c:	00c000c4 	movi	r3,3
   25d60:	20c0b915 	stw	r3,740(r4)
   25d64:	2080ba15 	stw	r2,744(r4)
   25d68:	2000b815 	stw	zero,736(r4)
   25d6c:	05c00204 	movi	r23,8
   25d70:	00800104 	movi	r2,4
   25d74:	2025883a 	mov	r18,r4
   25d78:	b80d883a 	mov	r6,r23
   25d7c:	81001704 	addi	r4,r16,92
   25d80:	000b883a 	mov	r5,zero
   25d84:	80000015 	stw	zero,0(r16)
   25d88:	80000115 	stw	zero,4(r16)
   25d8c:	80000215 	stw	zero,8(r16)
   25d90:	8080030d 	sth	r2,12(r16)
   25d94:	80001915 	stw	zero,100(r16)
   25d98:	8000038d 	sth	zero,14(r16)
   25d9c:	80000415 	stw	zero,16(r16)
   25da0:	80000515 	stw	zero,20(r16)
   25da4:	80000615 	stw	zero,24(r16)
   25da8:	00264000 	call	26400 <memset>
   25dac:	058000b4 	movhi	r22,2
   25db0:	94400217 	ldw	r17,8(r18)
   25db4:	054000b4 	movhi	r21,2
   25db8:	050000b4 	movhi	r20,2
   25dbc:	04c000b4 	movhi	r19,2
   25dc0:	b5994a04 	addi	r22,r22,25896
   25dc4:	ad596104 	addi	r21,r21,25988
   25dc8:	a5198004 	addi	r20,r20,26112
   25dcc:	9cd99704 	addi	r19,r19,26204
   25dd0:	85800815 	stw	r22,32(r16)
   25dd4:	85400915 	stw	r21,36(r16)
   25dd8:	85000a15 	stw	r20,40(r16)
   25ddc:	84c00b15 	stw	r19,44(r16)
   25de0:	84000715 	stw	r16,28(r16)
   25de4:	00800284 	movi	r2,10
   25de8:	8880030d 	sth	r2,12(r17)
   25dec:	00800044 	movi	r2,1
   25df0:	b80d883a 	mov	r6,r23
   25df4:	89001704 	addi	r4,r17,92
   25df8:	000b883a 	mov	r5,zero
   25dfc:	88000015 	stw	zero,0(r17)
   25e00:	88000115 	stw	zero,4(r17)
   25e04:	88000215 	stw	zero,8(r17)
   25e08:	88001915 	stw	zero,100(r17)
   25e0c:	8880038d 	sth	r2,14(r17)
   25e10:	88000415 	stw	zero,16(r17)
   25e14:	88000515 	stw	zero,20(r17)
   25e18:	88000615 	stw	zero,24(r17)
   25e1c:	00264000 	call	26400 <memset>
   25e20:	94000317 	ldw	r16,12(r18)
   25e24:	00800484 	movi	r2,18
   25e28:	8c400715 	stw	r17,28(r17)
   25e2c:	8d800815 	stw	r22,32(r17)
   25e30:	8d400915 	stw	r21,36(r17)
   25e34:	8d000a15 	stw	r20,40(r17)
   25e38:	8cc00b15 	stw	r19,44(r17)
   25e3c:	8080030d 	sth	r2,12(r16)
   25e40:	00800084 	movi	r2,2
   25e44:	80000015 	stw	zero,0(r16)
   25e48:	80000115 	stw	zero,4(r16)
   25e4c:	80000215 	stw	zero,8(r16)
   25e50:	80001915 	stw	zero,100(r16)
   25e54:	8080038d 	sth	r2,14(r16)
   25e58:	80000415 	stw	zero,16(r16)
   25e5c:	80000515 	stw	zero,20(r16)
   25e60:	80000615 	stw	zero,24(r16)
   25e64:	b80d883a 	mov	r6,r23
   25e68:	000b883a 	mov	r5,zero
   25e6c:	81001704 	addi	r4,r16,92
   25e70:	00264000 	call	26400 <memset>
   25e74:	00800044 	movi	r2,1
   25e78:	84000715 	stw	r16,28(r16)
   25e7c:	85800815 	stw	r22,32(r16)
   25e80:	85400915 	stw	r21,36(r16)
   25e84:	85000a15 	stw	r20,40(r16)
   25e88:	84c00b15 	stw	r19,44(r16)
   25e8c:	90800e15 	stw	r2,56(r18)
   25e90:	dfc00817 	ldw	ra,32(sp)
   25e94:	ddc00717 	ldw	r23,28(sp)
   25e98:	dd800617 	ldw	r22,24(sp)
   25e9c:	dd400517 	ldw	r21,20(sp)
   25ea0:	dd000417 	ldw	r20,16(sp)
   25ea4:	dcc00317 	ldw	r19,12(sp)
   25ea8:	dc800217 	ldw	r18,8(sp)
   25eac:	dc400117 	ldw	r17,4(sp)
   25eb0:	dc000017 	ldw	r16,0(sp)
   25eb4:	dec00904 	addi	sp,sp,36
   25eb8:	f800283a 	ret

00025ebc <__fp_lock>:
   25ebc:	0005883a 	mov	r2,zero
   25ec0:	f800283a 	ret

00025ec4 <__sfmoreglue>:
   25ec4:	defffc04 	addi	sp,sp,-16
   25ec8:	dc800215 	stw	r18,8(sp)
   25ecc:	2825883a 	mov	r18,r5
   25ed0:	dc000015 	stw	r16,0(sp)
   25ed4:	01401a04 	movi	r5,104
   25ed8:	2021883a 	mov	r16,r4
   25edc:	913fffc4 	addi	r4,r18,-1
   25ee0:	dfc00315 	stw	ra,12(sp)
   25ee4:	dc400115 	stw	r17,4(sp)
   25ee8:	002196c0 	call	2196c <__mulsi3>
   25eec:	8009883a 	mov	r4,r16
   25ef0:	11401d04 	addi	r5,r2,116
   25ef4:	1023883a 	mov	r17,r2
   25ef8:	00219bc0 	call	219bc <_malloc_r>
   25efc:	1021883a 	mov	r16,r2
   25f00:	10000726 	beq	r2,zero,25f20 <__sfmoreglue+0x5c>
   25f04:	11000304 	addi	r4,r2,12
   25f08:	10000015 	stw	zero,0(r2)
   25f0c:	14800115 	stw	r18,4(r2)
   25f10:	11000215 	stw	r4,8(r2)
   25f14:	89801a04 	addi	r6,r17,104
   25f18:	000b883a 	mov	r5,zero
   25f1c:	00264000 	call	26400 <memset>
   25f20:	8005883a 	mov	r2,r16
   25f24:	dfc00317 	ldw	ra,12(sp)
   25f28:	dc800217 	ldw	r18,8(sp)
   25f2c:	dc400117 	ldw	r17,4(sp)
   25f30:	dc000017 	ldw	r16,0(sp)
   25f34:	dec00404 	addi	sp,sp,16
   25f38:	f800283a 	ret

00025f3c <__sfp>:
   25f3c:	defffb04 	addi	sp,sp,-20
   25f40:	dc000015 	stw	r16,0(sp)
   25f44:	040000f4 	movhi	r16,3
   25f48:	8422a804 	addi	r16,r16,-30048
   25f4c:	dcc00315 	stw	r19,12(sp)
   25f50:	2027883a 	mov	r19,r4
   25f54:	81000017 	ldw	r4,0(r16)
   25f58:	dfc00415 	stw	ra,16(sp)
   25f5c:	dc800215 	stw	r18,8(sp)
   25f60:	20800e17 	ldw	r2,56(r4)
   25f64:	dc400115 	stw	r17,4(sp)
   25f68:	1000021e 	bne	r2,zero,25f74 <__sfp+0x38>
   25f6c:	0025d200 	call	25d20 <__sinit.part.1>
   25f70:	81000017 	ldw	r4,0(r16)
   25f74:	2480b804 	addi	r18,r4,736
   25f78:	047fffc4 	movi	r17,-1
   25f7c:	91000117 	ldw	r4,4(r18)
   25f80:	94000217 	ldw	r16,8(r18)
   25f84:	213fffc4 	addi	r4,r4,-1
   25f88:	20000a16 	blt	r4,zero,25fb4 <__sfp+0x78>
   25f8c:	8080030f 	ldh	r2,12(r16)
   25f90:	10000c26 	beq	r2,zero,25fc4 <__sfp+0x88>
   25f94:	80c01d04 	addi	r3,r16,116
   25f98:	00000206 	br	25fa4 <__sfp+0x68>
   25f9c:	18bfe60f 	ldh	r2,-104(r3)
   25fa0:	10000826 	beq	r2,zero,25fc4 <__sfp+0x88>
   25fa4:	213fffc4 	addi	r4,r4,-1
   25fa8:	1c3ffd04 	addi	r16,r3,-12
   25fac:	18c01a04 	addi	r3,r3,104
   25fb0:	247ffa1e 	bne	r4,r17,25f9c <__alt_data_end+0xfffecf9c>
   25fb4:	90800017 	ldw	r2,0(r18)
   25fb8:	10001d26 	beq	r2,zero,26030 <__sfp+0xf4>
   25fbc:	1025883a 	mov	r18,r2
   25fc0:	003fee06 	br	25f7c <__alt_data_end+0xfffecf7c>
   25fc4:	00bfffc4 	movi	r2,-1
   25fc8:	8080038d 	sth	r2,14(r16)
   25fcc:	00800044 	movi	r2,1
   25fd0:	8080030d 	sth	r2,12(r16)
   25fd4:	80001915 	stw	zero,100(r16)
   25fd8:	80000015 	stw	zero,0(r16)
   25fdc:	80000215 	stw	zero,8(r16)
   25fe0:	80000115 	stw	zero,4(r16)
   25fe4:	80000415 	stw	zero,16(r16)
   25fe8:	80000515 	stw	zero,20(r16)
   25fec:	80000615 	stw	zero,24(r16)
   25ff0:	01800204 	movi	r6,8
   25ff4:	000b883a 	mov	r5,zero
   25ff8:	81001704 	addi	r4,r16,92
   25ffc:	00264000 	call	26400 <memset>
   26000:	8005883a 	mov	r2,r16
   26004:	80000c15 	stw	zero,48(r16)
   26008:	80000d15 	stw	zero,52(r16)
   2600c:	80001115 	stw	zero,68(r16)
   26010:	80001215 	stw	zero,72(r16)
   26014:	dfc00417 	ldw	ra,16(sp)
   26018:	dcc00317 	ldw	r19,12(sp)
   2601c:	dc800217 	ldw	r18,8(sp)
   26020:	dc400117 	ldw	r17,4(sp)
   26024:	dc000017 	ldw	r16,0(sp)
   26028:	dec00504 	addi	sp,sp,20
   2602c:	f800283a 	ret
   26030:	01400104 	movi	r5,4
   26034:	9809883a 	mov	r4,r19
   26038:	0025ec40 	call	25ec4 <__sfmoreglue>
   2603c:	90800015 	stw	r2,0(r18)
   26040:	103fde1e 	bne	r2,zero,25fbc <__alt_data_end+0xfffecfbc>
   26044:	00800304 	movi	r2,12
   26048:	98800015 	stw	r2,0(r19)
   2604c:	0005883a 	mov	r2,zero
   26050:	003ff006 	br	26014 <__alt_data_end+0xfffed014>

00026054 <_cleanup>:
   26054:	008000f4 	movhi	r2,3
   26058:	10a2a804 	addi	r2,r2,-30048
   2605c:	11000017 	ldw	r4,0(r2)
   26060:	014000b4 	movhi	r5,2
   26064:	2959c604 	addi	r5,r5,26392
   26068:	00261801 	jmpi	26180 <_fwalk_reent>

0002606c <__sinit>:
   2606c:	20800e17 	ldw	r2,56(r4)
   26070:	10000126 	beq	r2,zero,26078 <__sinit+0xc>
   26074:	f800283a 	ret
   26078:	0025d201 	jmpi	25d20 <__sinit.part.1>

0002607c <__sfp_lock_acquire>:
   2607c:	f800283a 	ret

00026080 <__sfp_lock_release>:
   26080:	f800283a 	ret

00026084 <__sinit_lock_acquire>:
   26084:	f800283a 	ret

00026088 <__sinit_lock_release>:
   26088:	f800283a 	ret

0002608c <__fp_lock_all>:
   2608c:	008000f4 	movhi	r2,3
   26090:	10a2a904 	addi	r2,r2,-30044
   26094:	11000017 	ldw	r4,0(r2)
   26098:	014000b4 	movhi	r5,2
   2609c:	2957af04 	addi	r5,r5,24252
   260a0:	00260bc1 	jmpi	260bc <_fwalk>

000260a4 <__fp_unlock_all>:
   260a4:	008000f4 	movhi	r2,3
   260a8:	10a2a904 	addi	r2,r2,-30044
   260ac:	11000017 	ldw	r4,0(r2)
   260b0:	014000b4 	movhi	r5,2
   260b4:	29574304 	addi	r5,r5,23820
   260b8:	00260bc1 	jmpi	260bc <_fwalk>

000260bc <_fwalk>:
   260bc:	defff704 	addi	sp,sp,-36
   260c0:	dd000415 	stw	r20,16(sp)
   260c4:	dfc00815 	stw	ra,32(sp)
   260c8:	ddc00715 	stw	r23,28(sp)
   260cc:	dd800615 	stw	r22,24(sp)
   260d0:	dd400515 	stw	r21,20(sp)
   260d4:	dcc00315 	stw	r19,12(sp)
   260d8:	dc800215 	stw	r18,8(sp)
   260dc:	dc400115 	stw	r17,4(sp)
   260e0:	dc000015 	stw	r16,0(sp)
   260e4:	2500b804 	addi	r20,r4,736
   260e8:	a0002326 	beq	r20,zero,26178 <_fwalk+0xbc>
   260ec:	282b883a 	mov	r21,r5
   260f0:	002f883a 	mov	r23,zero
   260f4:	05800044 	movi	r22,1
   260f8:	04ffffc4 	movi	r19,-1
   260fc:	a4400117 	ldw	r17,4(r20)
   26100:	a4800217 	ldw	r18,8(r20)
   26104:	8c7fffc4 	addi	r17,r17,-1
   26108:	88000d16 	blt	r17,zero,26140 <_fwalk+0x84>
   2610c:	94000304 	addi	r16,r18,12
   26110:	94800384 	addi	r18,r18,14
   26114:	8080000b 	ldhu	r2,0(r16)
   26118:	8c7fffc4 	addi	r17,r17,-1
   2611c:	813ffd04 	addi	r4,r16,-12
   26120:	b080042e 	bgeu	r22,r2,26134 <_fwalk+0x78>
   26124:	9080000f 	ldh	r2,0(r18)
   26128:	14c00226 	beq	r2,r19,26134 <_fwalk+0x78>
   2612c:	a83ee83a 	callr	r21
   26130:	b8aeb03a 	or	r23,r23,r2
   26134:	84001a04 	addi	r16,r16,104
   26138:	94801a04 	addi	r18,r18,104
   2613c:	8cfff51e 	bne	r17,r19,26114 <__alt_data_end+0xfffed114>
   26140:	a5000017 	ldw	r20,0(r20)
   26144:	a03fed1e 	bne	r20,zero,260fc <__alt_data_end+0xfffed0fc>
   26148:	b805883a 	mov	r2,r23
   2614c:	dfc00817 	ldw	ra,32(sp)
   26150:	ddc00717 	ldw	r23,28(sp)
   26154:	dd800617 	ldw	r22,24(sp)
   26158:	dd400517 	ldw	r21,20(sp)
   2615c:	dd000417 	ldw	r20,16(sp)
   26160:	dcc00317 	ldw	r19,12(sp)
   26164:	dc800217 	ldw	r18,8(sp)
   26168:	dc400117 	ldw	r17,4(sp)
   2616c:	dc000017 	ldw	r16,0(sp)
   26170:	dec00904 	addi	sp,sp,36
   26174:	f800283a 	ret
   26178:	002f883a 	mov	r23,zero
   2617c:	003ff206 	br	26148 <__alt_data_end+0xfffed148>

00026180 <_fwalk_reent>:
   26180:	defff704 	addi	sp,sp,-36
   26184:	dd000415 	stw	r20,16(sp)
   26188:	dfc00815 	stw	ra,32(sp)
   2618c:	ddc00715 	stw	r23,28(sp)
   26190:	dd800615 	stw	r22,24(sp)
   26194:	dd400515 	stw	r21,20(sp)
   26198:	dcc00315 	stw	r19,12(sp)
   2619c:	dc800215 	stw	r18,8(sp)
   261a0:	dc400115 	stw	r17,4(sp)
   261a4:	dc000015 	stw	r16,0(sp)
   261a8:	2500b804 	addi	r20,r4,736
   261ac:	a0002326 	beq	r20,zero,2623c <_fwalk_reent+0xbc>
   261b0:	282b883a 	mov	r21,r5
   261b4:	2027883a 	mov	r19,r4
   261b8:	002f883a 	mov	r23,zero
   261bc:	05800044 	movi	r22,1
   261c0:	04bfffc4 	movi	r18,-1
   261c4:	a4400117 	ldw	r17,4(r20)
   261c8:	a4000217 	ldw	r16,8(r20)
   261cc:	8c7fffc4 	addi	r17,r17,-1
   261d0:	88000c16 	blt	r17,zero,26204 <_fwalk_reent+0x84>
   261d4:	84000304 	addi	r16,r16,12
   261d8:	8080000b 	ldhu	r2,0(r16)
   261dc:	8c7fffc4 	addi	r17,r17,-1
   261e0:	817ffd04 	addi	r5,r16,-12
   261e4:	b080052e 	bgeu	r22,r2,261fc <_fwalk_reent+0x7c>
   261e8:	8080008f 	ldh	r2,2(r16)
   261ec:	9809883a 	mov	r4,r19
   261f0:	14800226 	beq	r2,r18,261fc <_fwalk_reent+0x7c>
   261f4:	a83ee83a 	callr	r21
   261f8:	b8aeb03a 	or	r23,r23,r2
   261fc:	84001a04 	addi	r16,r16,104
   26200:	8cbff51e 	bne	r17,r18,261d8 <__alt_data_end+0xfffed1d8>
   26204:	a5000017 	ldw	r20,0(r20)
   26208:	a03fee1e 	bne	r20,zero,261c4 <__alt_data_end+0xfffed1c4>
   2620c:	b805883a 	mov	r2,r23
   26210:	dfc00817 	ldw	ra,32(sp)
   26214:	ddc00717 	ldw	r23,28(sp)
   26218:	dd800617 	ldw	r22,24(sp)
   2621c:	dd400517 	ldw	r21,20(sp)
   26220:	dd000417 	ldw	r20,16(sp)
   26224:	dcc00317 	ldw	r19,12(sp)
   26228:	dc800217 	ldw	r18,8(sp)
   2622c:	dc400117 	ldw	r17,4(sp)
   26230:	dc000017 	ldw	r16,0(sp)
   26234:	dec00904 	addi	sp,sp,36
   26238:	f800283a 	ret
   2623c:	002f883a 	mov	r23,zero
   26240:	003ff206 	br	2620c <__alt_data_end+0xfffed20c>

00026244 <__smakebuf_r>:
   26244:	2880030b 	ldhu	r2,12(r5)
   26248:	10c0008c 	andi	r3,r2,2
   2624c:	1800411e 	bne	r3,zero,26354 <__smakebuf_r+0x110>
   26250:	deffec04 	addi	sp,sp,-80
   26254:	dc000f15 	stw	r16,60(sp)
   26258:	2821883a 	mov	r16,r5
   2625c:	2940038f 	ldh	r5,14(r5)
   26260:	dc401015 	stw	r17,64(sp)
   26264:	dfc01315 	stw	ra,76(sp)
   26268:	dcc01215 	stw	r19,72(sp)
   2626c:	dc801115 	stw	r18,68(sp)
   26270:	2023883a 	mov	r17,r4
   26274:	28001c16 	blt	r5,zero,262e8 <__smakebuf_r+0xa4>
   26278:	d80d883a 	mov	r6,sp
   2627c:	002681c0 	call	2681c <_fstat_r>
   26280:	10001816 	blt	r2,zero,262e4 <__smakebuf_r+0xa0>
   26284:	d8800117 	ldw	r2,4(sp)
   26288:	00e00014 	movui	r3,32768
   2628c:	10bc000c 	andi	r2,r2,61440
   26290:	14c80020 	cmpeqi	r19,r2,8192
   26294:	10c03726 	beq	r2,r3,26374 <__smakebuf_r+0x130>
   26298:	80c0030b 	ldhu	r3,12(r16)
   2629c:	18c20014 	ori	r3,r3,2048
   262a0:	80c0030d 	sth	r3,12(r16)
   262a4:	00c80004 	movi	r3,8192
   262a8:	10c0521e 	bne	r2,r3,263f4 <__smakebuf_r+0x1b0>
   262ac:	8140038f 	ldh	r5,14(r16)
   262b0:	8809883a 	mov	r4,r17
   262b4:	00268780 	call	26878 <_isatty_r>
   262b8:	10004c26 	beq	r2,zero,263ec <__smakebuf_r+0x1a8>
   262bc:	8080030b 	ldhu	r2,12(r16)
   262c0:	80c010c4 	addi	r3,r16,67
   262c4:	80c00015 	stw	r3,0(r16)
   262c8:	10800054 	ori	r2,r2,1
   262cc:	8080030d 	sth	r2,12(r16)
   262d0:	00800044 	movi	r2,1
   262d4:	80c00415 	stw	r3,16(r16)
   262d8:	80800515 	stw	r2,20(r16)
   262dc:	04810004 	movi	r18,1024
   262e0:	00000706 	br	26300 <__smakebuf_r+0xbc>
   262e4:	8080030b 	ldhu	r2,12(r16)
   262e8:	10c0200c 	andi	r3,r2,128
   262ec:	18001f1e 	bne	r3,zero,2636c <__smakebuf_r+0x128>
   262f0:	04810004 	movi	r18,1024
   262f4:	10820014 	ori	r2,r2,2048
   262f8:	8080030d 	sth	r2,12(r16)
   262fc:	0027883a 	mov	r19,zero
   26300:	900b883a 	mov	r5,r18
   26304:	8809883a 	mov	r4,r17
   26308:	00219bc0 	call	219bc <_malloc_r>
   2630c:	10002c26 	beq	r2,zero,263c0 <__smakebuf_r+0x17c>
   26310:	80c0030b 	ldhu	r3,12(r16)
   26314:	010000b4 	movhi	r4,2
   26318:	21174504 	addi	r4,r4,23828
   2631c:	89000f15 	stw	r4,60(r17)
   26320:	18c02014 	ori	r3,r3,128
   26324:	80c0030d 	sth	r3,12(r16)
   26328:	80800015 	stw	r2,0(r16)
   2632c:	80800415 	stw	r2,16(r16)
   26330:	84800515 	stw	r18,20(r16)
   26334:	98001a1e 	bne	r19,zero,263a0 <__smakebuf_r+0x15c>
   26338:	dfc01317 	ldw	ra,76(sp)
   2633c:	dcc01217 	ldw	r19,72(sp)
   26340:	dc801117 	ldw	r18,68(sp)
   26344:	dc401017 	ldw	r17,64(sp)
   26348:	dc000f17 	ldw	r16,60(sp)
   2634c:	dec01404 	addi	sp,sp,80
   26350:	f800283a 	ret
   26354:	288010c4 	addi	r2,r5,67
   26358:	28800015 	stw	r2,0(r5)
   2635c:	28800415 	stw	r2,16(r5)
   26360:	00800044 	movi	r2,1
   26364:	28800515 	stw	r2,20(r5)
   26368:	f800283a 	ret
   2636c:	04801004 	movi	r18,64
   26370:	003fe006 	br	262f4 <__alt_data_end+0xfffed2f4>
   26374:	81000a17 	ldw	r4,40(r16)
   26378:	00c000b4 	movhi	r3,2
   2637c:	18d98004 	addi	r3,r3,26112
   26380:	20ffc51e 	bne	r4,r3,26298 <__alt_data_end+0xfffed298>
   26384:	8080030b 	ldhu	r2,12(r16)
   26388:	04810004 	movi	r18,1024
   2638c:	84801315 	stw	r18,76(r16)
   26390:	1484b03a 	or	r2,r2,r18
   26394:	8080030d 	sth	r2,12(r16)
   26398:	0027883a 	mov	r19,zero
   2639c:	003fd806 	br	26300 <__alt_data_end+0xfffed300>
   263a0:	8140038f 	ldh	r5,14(r16)
   263a4:	8809883a 	mov	r4,r17
   263a8:	00268780 	call	26878 <_isatty_r>
   263ac:	103fe226 	beq	r2,zero,26338 <__alt_data_end+0xfffed338>
   263b0:	8080030b 	ldhu	r2,12(r16)
   263b4:	10800054 	ori	r2,r2,1
   263b8:	8080030d 	sth	r2,12(r16)
   263bc:	003fde06 	br	26338 <__alt_data_end+0xfffed338>
   263c0:	8080030b 	ldhu	r2,12(r16)
   263c4:	10c0800c 	andi	r3,r2,512
   263c8:	183fdb1e 	bne	r3,zero,26338 <__alt_data_end+0xfffed338>
   263cc:	10800094 	ori	r2,r2,2
   263d0:	80c010c4 	addi	r3,r16,67
   263d4:	8080030d 	sth	r2,12(r16)
   263d8:	00800044 	movi	r2,1
   263dc:	80c00015 	stw	r3,0(r16)
   263e0:	80c00415 	stw	r3,16(r16)
   263e4:	80800515 	stw	r2,20(r16)
   263e8:	003fd306 	br	26338 <__alt_data_end+0xfffed338>
   263ec:	04810004 	movi	r18,1024
   263f0:	003fc306 	br	26300 <__alt_data_end+0xfffed300>
   263f4:	0027883a 	mov	r19,zero
   263f8:	04810004 	movi	r18,1024
   263fc:	003fc006 	br	26300 <__alt_data_end+0xfffed300>

00026400 <memset>:
   26400:	20c000cc 	andi	r3,r4,3
   26404:	2005883a 	mov	r2,r4
   26408:	18004426 	beq	r3,zero,2651c <memset+0x11c>
   2640c:	31ffffc4 	addi	r7,r6,-1
   26410:	30004026 	beq	r6,zero,26514 <memset+0x114>
   26414:	2813883a 	mov	r9,r5
   26418:	200d883a 	mov	r6,r4
   2641c:	2007883a 	mov	r3,r4
   26420:	00000406 	br	26434 <memset+0x34>
   26424:	3a3fffc4 	addi	r8,r7,-1
   26428:	31800044 	addi	r6,r6,1
   2642c:	38003926 	beq	r7,zero,26514 <memset+0x114>
   26430:	400f883a 	mov	r7,r8
   26434:	18c00044 	addi	r3,r3,1
   26438:	32400005 	stb	r9,0(r6)
   2643c:	1a0000cc 	andi	r8,r3,3
   26440:	403ff81e 	bne	r8,zero,26424 <__alt_data_end+0xfffed424>
   26444:	010000c4 	movi	r4,3
   26448:	21c02d2e 	bgeu	r4,r7,26500 <memset+0x100>
   2644c:	29003fcc 	andi	r4,r5,255
   26450:	200c923a 	slli	r6,r4,8
   26454:	3108b03a 	or	r4,r6,r4
   26458:	200c943a 	slli	r6,r4,16
   2645c:	218cb03a 	or	r6,r4,r6
   26460:	010003c4 	movi	r4,15
   26464:	21c0182e 	bgeu	r4,r7,264c8 <memset+0xc8>
   26468:	3b3ffc04 	addi	r12,r7,-16
   2646c:	6018d13a 	srli	r12,r12,4
   26470:	1a000104 	addi	r8,r3,4
   26474:	1ac00204 	addi	r11,r3,8
   26478:	6008913a 	slli	r4,r12,4
   2647c:	1a800304 	addi	r10,r3,12
   26480:	1813883a 	mov	r9,r3
   26484:	21000504 	addi	r4,r4,20
   26488:	1909883a 	add	r4,r3,r4
   2648c:	49800015 	stw	r6,0(r9)
   26490:	41800015 	stw	r6,0(r8)
   26494:	59800015 	stw	r6,0(r11)
   26498:	51800015 	stw	r6,0(r10)
   2649c:	42000404 	addi	r8,r8,16
   264a0:	4a400404 	addi	r9,r9,16
   264a4:	5ac00404 	addi	r11,r11,16
   264a8:	52800404 	addi	r10,r10,16
   264ac:	413ff71e 	bne	r8,r4,2648c <__alt_data_end+0xfffed48c>
   264b0:	63000044 	addi	r12,r12,1
   264b4:	6018913a 	slli	r12,r12,4
   264b8:	39c003cc 	andi	r7,r7,15
   264bc:	010000c4 	movi	r4,3
   264c0:	1b07883a 	add	r3,r3,r12
   264c4:	21c00e2e 	bgeu	r4,r7,26500 <memset+0x100>
   264c8:	1813883a 	mov	r9,r3
   264cc:	3811883a 	mov	r8,r7
   264d0:	010000c4 	movi	r4,3
   264d4:	49800015 	stw	r6,0(r9)
   264d8:	423fff04 	addi	r8,r8,-4
   264dc:	4a400104 	addi	r9,r9,4
   264e0:	223ffc36 	bltu	r4,r8,264d4 <__alt_data_end+0xfffed4d4>
   264e4:	393fff04 	addi	r4,r7,-4
   264e8:	2008d0ba 	srli	r4,r4,2
   264ec:	39c000cc 	andi	r7,r7,3
   264f0:	21000044 	addi	r4,r4,1
   264f4:	2109883a 	add	r4,r4,r4
   264f8:	2109883a 	add	r4,r4,r4
   264fc:	1907883a 	add	r3,r3,r4
   26500:	38000526 	beq	r7,zero,26518 <memset+0x118>
   26504:	19cf883a 	add	r7,r3,r7
   26508:	19400005 	stb	r5,0(r3)
   2650c:	18c00044 	addi	r3,r3,1
   26510:	38fffd1e 	bne	r7,r3,26508 <__alt_data_end+0xfffed508>
   26514:	f800283a 	ret
   26518:	f800283a 	ret
   2651c:	2007883a 	mov	r3,r4
   26520:	300f883a 	mov	r7,r6
   26524:	003fc706 	br	26444 <__alt_data_end+0xfffed444>

00026528 <__sread>:
   26528:	defffe04 	addi	sp,sp,-8
   2652c:	dc000015 	stw	r16,0(sp)
   26530:	2821883a 	mov	r16,r5
   26534:	2940038f 	ldh	r5,14(r5)
   26538:	dfc00115 	stw	ra,4(sp)
   2653c:	002692c0 	call	2692c <_read_r>
   26540:	10000716 	blt	r2,zero,26560 <__sread+0x38>
   26544:	80c01417 	ldw	r3,80(r16)
   26548:	1887883a 	add	r3,r3,r2
   2654c:	80c01415 	stw	r3,80(r16)
   26550:	dfc00117 	ldw	ra,4(sp)
   26554:	dc000017 	ldw	r16,0(sp)
   26558:	dec00204 	addi	sp,sp,8
   2655c:	f800283a 	ret
   26560:	80c0030b 	ldhu	r3,12(r16)
   26564:	18fbffcc 	andi	r3,r3,61439
   26568:	80c0030d 	sth	r3,12(r16)
   2656c:	dfc00117 	ldw	ra,4(sp)
   26570:	dc000017 	ldw	r16,0(sp)
   26574:	dec00204 	addi	sp,sp,8
   26578:	f800283a 	ret

0002657c <__seofread>:
   2657c:	0005883a 	mov	r2,zero
   26580:	f800283a 	ret

00026584 <__swrite>:
   26584:	2880030b 	ldhu	r2,12(r5)
   26588:	defffb04 	addi	sp,sp,-20
   2658c:	dcc00315 	stw	r19,12(sp)
   26590:	dc800215 	stw	r18,8(sp)
   26594:	dc400115 	stw	r17,4(sp)
   26598:	dc000015 	stw	r16,0(sp)
   2659c:	dfc00415 	stw	ra,16(sp)
   265a0:	10c0400c 	andi	r3,r2,256
   265a4:	2821883a 	mov	r16,r5
   265a8:	2023883a 	mov	r17,r4
   265ac:	3025883a 	mov	r18,r6
   265b0:	3827883a 	mov	r19,r7
   265b4:	18000526 	beq	r3,zero,265cc <__swrite+0x48>
   265b8:	2940038f 	ldh	r5,14(r5)
   265bc:	01c00084 	movi	r7,2
   265c0:	000d883a 	mov	r6,zero
   265c4:	00268cc0 	call	268cc <_lseek_r>
   265c8:	8080030b 	ldhu	r2,12(r16)
   265cc:	8140038f 	ldh	r5,14(r16)
   265d0:	10bbffcc 	andi	r2,r2,61439
   265d4:	980f883a 	mov	r7,r19
   265d8:	900d883a 	mov	r6,r18
   265dc:	8809883a 	mov	r4,r17
   265e0:	8080030d 	sth	r2,12(r16)
   265e4:	dfc00417 	ldw	ra,16(sp)
   265e8:	dcc00317 	ldw	r19,12(sp)
   265ec:	dc800217 	ldw	r18,8(sp)
   265f0:	dc400117 	ldw	r17,4(sp)
   265f4:	dc000017 	ldw	r16,0(sp)
   265f8:	dec00504 	addi	sp,sp,20
   265fc:	00266641 	jmpi	26664 <_write_r>

00026600 <__sseek>:
   26600:	defffe04 	addi	sp,sp,-8
   26604:	dc000015 	stw	r16,0(sp)
   26608:	2821883a 	mov	r16,r5
   2660c:	2940038f 	ldh	r5,14(r5)
   26610:	dfc00115 	stw	ra,4(sp)
   26614:	00268cc0 	call	268cc <_lseek_r>
   26618:	00ffffc4 	movi	r3,-1
   2661c:	10c00826 	beq	r2,r3,26640 <__sseek+0x40>
   26620:	80c0030b 	ldhu	r3,12(r16)
   26624:	80801415 	stw	r2,80(r16)
   26628:	18c40014 	ori	r3,r3,4096
   2662c:	80c0030d 	sth	r3,12(r16)
   26630:	dfc00117 	ldw	ra,4(sp)
   26634:	dc000017 	ldw	r16,0(sp)
   26638:	dec00204 	addi	sp,sp,8
   2663c:	f800283a 	ret
   26640:	80c0030b 	ldhu	r3,12(r16)
   26644:	18fbffcc 	andi	r3,r3,61439
   26648:	80c0030d 	sth	r3,12(r16)
   2664c:	dfc00117 	ldw	ra,4(sp)
   26650:	dc000017 	ldw	r16,0(sp)
   26654:	dec00204 	addi	sp,sp,8
   26658:	f800283a 	ret

0002665c <__sclose>:
   2665c:	2940038f 	ldh	r5,14(r5)
   26660:	00266c41 	jmpi	266c4 <_close_r>

00026664 <_write_r>:
   26664:	defffd04 	addi	sp,sp,-12
   26668:	2805883a 	mov	r2,r5
   2666c:	dc000015 	stw	r16,0(sp)
   26670:	040000f4 	movhi	r16,3
   26674:	dc400115 	stw	r17,4(sp)
   26678:	300b883a 	mov	r5,r6
   2667c:	84296704 	addi	r16,r16,-23140
   26680:	2023883a 	mov	r17,r4
   26684:	380d883a 	mov	r6,r7
   26688:	1009883a 	mov	r4,r2
   2668c:	dfc00215 	stw	ra,8(sp)
   26690:	80000015 	stw	zero,0(r16)
   26694:	0026e300 	call	26e30 <write>
   26698:	00ffffc4 	movi	r3,-1
   2669c:	10c00526 	beq	r2,r3,266b4 <_write_r+0x50>
   266a0:	dfc00217 	ldw	ra,8(sp)
   266a4:	dc400117 	ldw	r17,4(sp)
   266a8:	dc000017 	ldw	r16,0(sp)
   266ac:	dec00304 	addi	sp,sp,12
   266b0:	f800283a 	ret
   266b4:	80c00017 	ldw	r3,0(r16)
   266b8:	183ff926 	beq	r3,zero,266a0 <__alt_data_end+0xfffed6a0>
   266bc:	88c00015 	stw	r3,0(r17)
   266c0:	003ff706 	br	266a0 <__alt_data_end+0xfffed6a0>

000266c4 <_close_r>:
   266c4:	defffd04 	addi	sp,sp,-12
   266c8:	dc000015 	stw	r16,0(sp)
   266cc:	040000f4 	movhi	r16,3
   266d0:	dc400115 	stw	r17,4(sp)
   266d4:	84296704 	addi	r16,r16,-23140
   266d8:	2023883a 	mov	r17,r4
   266dc:	2809883a 	mov	r4,r5
   266e0:	dfc00215 	stw	ra,8(sp)
   266e4:	80000015 	stw	zero,0(r16)
   266e8:	0023aa40 	call	23aa4 <close>
   266ec:	00ffffc4 	movi	r3,-1
   266f0:	10c00526 	beq	r2,r3,26708 <_close_r+0x44>
   266f4:	dfc00217 	ldw	ra,8(sp)
   266f8:	dc400117 	ldw	r17,4(sp)
   266fc:	dc000017 	ldw	r16,0(sp)
   26700:	dec00304 	addi	sp,sp,12
   26704:	f800283a 	ret
   26708:	80c00017 	ldw	r3,0(r16)
   2670c:	183ff926 	beq	r3,zero,266f4 <__alt_data_end+0xfffed6f4>
   26710:	88c00015 	stw	r3,0(r17)
   26714:	003ff706 	br	266f4 <__alt_data_end+0xfffed6f4>

00026718 <_fclose_r>:
   26718:	28003926 	beq	r5,zero,26800 <_fclose_r+0xe8>
   2671c:	defffc04 	addi	sp,sp,-16
   26720:	dc400115 	stw	r17,4(sp)
   26724:	dc000015 	stw	r16,0(sp)
   26728:	dfc00315 	stw	ra,12(sp)
   2672c:	dc800215 	stw	r18,8(sp)
   26730:	2023883a 	mov	r17,r4
   26734:	2821883a 	mov	r16,r5
   26738:	20000226 	beq	r4,zero,26744 <_fclose_r+0x2c>
   2673c:	20800e17 	ldw	r2,56(r4)
   26740:	10002726 	beq	r2,zero,267e0 <_fclose_r+0xc8>
   26744:	8080030f 	ldh	r2,12(r16)
   26748:	1000071e 	bne	r2,zero,26768 <_fclose_r+0x50>
   2674c:	0005883a 	mov	r2,zero
   26750:	dfc00317 	ldw	ra,12(sp)
   26754:	dc800217 	ldw	r18,8(sp)
   26758:	dc400117 	ldw	r17,4(sp)
   2675c:	dc000017 	ldw	r16,0(sp)
   26760:	dec00404 	addi	sp,sp,16
   26764:	f800283a 	ret
   26768:	800b883a 	mov	r5,r16
   2676c:	8809883a 	mov	r4,r17
   26770:	0025a640 	call	25a64 <__sflush_r>
   26774:	1025883a 	mov	r18,r2
   26778:	80800b17 	ldw	r2,44(r16)
   2677c:	10000426 	beq	r2,zero,26790 <_fclose_r+0x78>
   26780:	81400717 	ldw	r5,28(r16)
   26784:	8809883a 	mov	r4,r17
   26788:	103ee83a 	callr	r2
   2678c:	10001616 	blt	r2,zero,267e8 <_fclose_r+0xd0>
   26790:	8080030b 	ldhu	r2,12(r16)
   26794:	1080200c 	andi	r2,r2,128
   26798:	1000151e 	bne	r2,zero,267f0 <_fclose_r+0xd8>
   2679c:	81400c17 	ldw	r5,48(r16)
   267a0:	28000526 	beq	r5,zero,267b8 <_fclose_r+0xa0>
   267a4:	80801004 	addi	r2,r16,64
   267a8:	28800226 	beq	r5,r2,267b4 <_fclose_r+0x9c>
   267ac:	8809883a 	mov	r4,r17
   267b0:	00223bc0 	call	223bc <_free_r>
   267b4:	80000c15 	stw	zero,48(r16)
   267b8:	81401117 	ldw	r5,68(r16)
   267bc:	28000326 	beq	r5,zero,267cc <_fclose_r+0xb4>
   267c0:	8809883a 	mov	r4,r17
   267c4:	00223bc0 	call	223bc <_free_r>
   267c8:	80001115 	stw	zero,68(r16)
   267cc:	002607c0 	call	2607c <__sfp_lock_acquire>
   267d0:	8000030d 	sth	zero,12(r16)
   267d4:	00260800 	call	26080 <__sfp_lock_release>
   267d8:	9005883a 	mov	r2,r18
   267dc:	003fdc06 	br	26750 <__alt_data_end+0xfffed750>
   267e0:	002606c0 	call	2606c <__sinit>
   267e4:	003fd706 	br	26744 <__alt_data_end+0xfffed744>
   267e8:	04bfffc4 	movi	r18,-1
   267ec:	003fe806 	br	26790 <__alt_data_end+0xfffed790>
   267f0:	81400417 	ldw	r5,16(r16)
   267f4:	8809883a 	mov	r4,r17
   267f8:	00223bc0 	call	223bc <_free_r>
   267fc:	003fe706 	br	2679c <__alt_data_end+0xfffed79c>
   26800:	0005883a 	mov	r2,zero
   26804:	f800283a 	ret

00026808 <fclose>:
   26808:	008000f4 	movhi	r2,3
   2680c:	10a2a904 	addi	r2,r2,-30044
   26810:	200b883a 	mov	r5,r4
   26814:	11000017 	ldw	r4,0(r2)
   26818:	00267181 	jmpi	26718 <_fclose_r>

0002681c <_fstat_r>:
   2681c:	defffd04 	addi	sp,sp,-12
   26820:	2805883a 	mov	r2,r5
   26824:	dc000015 	stw	r16,0(sp)
   26828:	040000f4 	movhi	r16,3
   2682c:	dc400115 	stw	r17,4(sp)
   26830:	84296704 	addi	r16,r16,-23140
   26834:	2023883a 	mov	r17,r4
   26838:	300b883a 	mov	r5,r6
   2683c:	1009883a 	mov	r4,r2
   26840:	dfc00215 	stw	ra,8(sp)
   26844:	80000015 	stw	zero,0(r16)
   26848:	00269fc0 	call	269fc <fstat>
   2684c:	00ffffc4 	movi	r3,-1
   26850:	10c00526 	beq	r2,r3,26868 <_fstat_r+0x4c>
   26854:	dfc00217 	ldw	ra,8(sp)
   26858:	dc400117 	ldw	r17,4(sp)
   2685c:	dc000017 	ldw	r16,0(sp)
   26860:	dec00304 	addi	sp,sp,12
   26864:	f800283a 	ret
   26868:	80c00017 	ldw	r3,0(r16)
   2686c:	183ff926 	beq	r3,zero,26854 <__alt_data_end+0xfffed854>
   26870:	88c00015 	stw	r3,0(r17)
   26874:	003ff706 	br	26854 <__alt_data_end+0xfffed854>

00026878 <_isatty_r>:
   26878:	defffd04 	addi	sp,sp,-12
   2687c:	dc000015 	stw	r16,0(sp)
   26880:	040000f4 	movhi	r16,3
   26884:	dc400115 	stw	r17,4(sp)
   26888:	84296704 	addi	r16,r16,-23140
   2688c:	2023883a 	mov	r17,r4
   26890:	2809883a 	mov	r4,r5
   26894:	dfc00215 	stw	ra,8(sp)
   26898:	80000015 	stw	zero,0(r16)
   2689c:	0026af00 	call	26af0 <isatty>
   268a0:	00ffffc4 	movi	r3,-1
   268a4:	10c00526 	beq	r2,r3,268bc <_isatty_r+0x44>
   268a8:	dfc00217 	ldw	ra,8(sp)
   268ac:	dc400117 	ldw	r17,4(sp)
   268b0:	dc000017 	ldw	r16,0(sp)
   268b4:	dec00304 	addi	sp,sp,12
   268b8:	f800283a 	ret
   268bc:	80c00017 	ldw	r3,0(r16)
   268c0:	183ff926 	beq	r3,zero,268a8 <__alt_data_end+0xfffed8a8>
   268c4:	88c00015 	stw	r3,0(r17)
   268c8:	003ff706 	br	268a8 <__alt_data_end+0xfffed8a8>

000268cc <_lseek_r>:
   268cc:	defffd04 	addi	sp,sp,-12
   268d0:	2805883a 	mov	r2,r5
   268d4:	dc000015 	stw	r16,0(sp)
   268d8:	040000f4 	movhi	r16,3
   268dc:	dc400115 	stw	r17,4(sp)
   268e0:	300b883a 	mov	r5,r6
   268e4:	84296704 	addi	r16,r16,-23140
   268e8:	2023883a 	mov	r17,r4
   268ec:	380d883a 	mov	r6,r7
   268f0:	1009883a 	mov	r4,r2
   268f4:	dfc00215 	stw	ra,8(sp)
   268f8:	80000015 	stw	zero,0(r16)
   268fc:	0026bd80 	call	26bd8 <lseek>
   26900:	00ffffc4 	movi	r3,-1
   26904:	10c00526 	beq	r2,r3,2691c <_lseek_r+0x50>
   26908:	dfc00217 	ldw	ra,8(sp)
   2690c:	dc400117 	ldw	r17,4(sp)
   26910:	dc000017 	ldw	r16,0(sp)
   26914:	dec00304 	addi	sp,sp,12
   26918:	f800283a 	ret
   2691c:	80c00017 	ldw	r3,0(r16)
   26920:	183ff926 	beq	r3,zero,26908 <__alt_data_end+0xfffed908>
   26924:	88c00015 	stw	r3,0(r17)
   26928:	003ff706 	br	26908 <__alt_data_end+0xfffed908>

0002692c <_read_r>:
   2692c:	defffd04 	addi	sp,sp,-12
   26930:	2805883a 	mov	r2,r5
   26934:	dc000015 	stw	r16,0(sp)
   26938:	040000f4 	movhi	r16,3
   2693c:	dc400115 	stw	r17,4(sp)
   26940:	300b883a 	mov	r5,r6
   26944:	84296704 	addi	r16,r16,-23140
   26948:	2023883a 	mov	r17,r4
   2694c:	380d883a 	mov	r6,r7
   26950:	1009883a 	mov	r4,r2
   26954:	dfc00215 	stw	ra,8(sp)
   26958:	80000015 	stw	zero,0(r16)
   2695c:	0026cf00 	call	26cf0 <read>
   26960:	00ffffc4 	movi	r3,-1
   26964:	10c00526 	beq	r2,r3,2697c <_read_r+0x50>
   26968:	dfc00217 	ldw	ra,8(sp)
   2696c:	dc400117 	ldw	r17,4(sp)
   26970:	dc000017 	ldw	r16,0(sp)
   26974:	dec00304 	addi	sp,sp,12
   26978:	f800283a 	ret
   2697c:	80c00017 	ldw	r3,0(r16)
   26980:	183ff926 	beq	r3,zero,26968 <__alt_data_end+0xfffed968>
   26984:	88c00015 	stw	r3,0(r17)
   26988:	003ff706 	br	26968 <__alt_data_end+0xfffed968>

0002698c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2698c:	defffd04 	addi	sp,sp,-12
   26990:	df000215 	stw	fp,8(sp)
   26994:	df000204 	addi	fp,sp,8
   26998:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2699c:	0001883a 	nop
   269a0:	e0bfff17 	ldw	r2,-4(fp)
   269a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   269a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   269ac:	10000226 	beq	r2,zero,269b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   269b0:	002af070 	cmpltui	zero,zero,43969
   269b4:	00000106 	br	269bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   269b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   269bc:	003fff06 	br	269bc <__alt_data_end+0xfffed9bc>

000269c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   269c0:	defffe04 	addi	sp,sp,-8
   269c4:	dfc00115 	stw	ra,4(sp)
   269c8:	df000015 	stw	fp,0(sp)
   269cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   269d0:	d0a00e17 	ldw	r2,-32712(gp)
   269d4:	10000326 	beq	r2,zero,269e4 <alt_get_errno+0x24>
   269d8:	d0a00e17 	ldw	r2,-32712(gp)
   269dc:	103ee83a 	callr	r2
   269e0:	00000106 	br	269e8 <alt_get_errno+0x28>
   269e4:	d0a6c404 	addi	r2,gp,-25840
}
   269e8:	e037883a 	mov	sp,fp
   269ec:	dfc00117 	ldw	ra,4(sp)
   269f0:	df000017 	ldw	fp,0(sp)
   269f4:	dec00204 	addi	sp,sp,8
   269f8:	f800283a 	ret

000269fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   269fc:	defffb04 	addi	sp,sp,-20
   26a00:	dfc00415 	stw	ra,16(sp)
   26a04:	df000315 	stw	fp,12(sp)
   26a08:	df000304 	addi	fp,sp,12
   26a0c:	e13ffe15 	stw	r4,-8(fp)
   26a10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26a14:	e0bffe17 	ldw	r2,-8(fp)
   26a18:	10000816 	blt	r2,zero,26a3c <fstat+0x40>
   26a1c:	01400304 	movi	r5,12
   26a20:	e13ffe17 	ldw	r4,-8(fp)
   26a24:	002196c0 	call	2196c <__mulsi3>
   26a28:	1007883a 	mov	r3,r2
   26a2c:	008000f4 	movhi	r2,3
   26a30:	10a24304 	addi	r2,r2,-30452
   26a34:	1885883a 	add	r2,r3,r2
   26a38:	00000106 	br	26a40 <fstat+0x44>
   26a3c:	0005883a 	mov	r2,zero
   26a40:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   26a44:	e0bffd17 	ldw	r2,-12(fp)
   26a48:	10001026 	beq	r2,zero,26a8c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   26a4c:	e0bffd17 	ldw	r2,-12(fp)
   26a50:	10800017 	ldw	r2,0(r2)
   26a54:	10800817 	ldw	r2,32(r2)
   26a58:	10000726 	beq	r2,zero,26a78 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   26a5c:	e0bffd17 	ldw	r2,-12(fp)
   26a60:	10800017 	ldw	r2,0(r2)
   26a64:	10800817 	ldw	r2,32(r2)
   26a68:	e17fff17 	ldw	r5,-4(fp)
   26a6c:	e13ffd17 	ldw	r4,-12(fp)
   26a70:	103ee83a 	callr	r2
   26a74:	00000a06 	br	26aa0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   26a78:	e0bfff17 	ldw	r2,-4(fp)
   26a7c:	00c80004 	movi	r3,8192
   26a80:	10c00115 	stw	r3,4(r2)
      return 0;
   26a84:	0005883a 	mov	r2,zero
   26a88:	00000506 	br	26aa0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   26a8c:	00269c00 	call	269c0 <alt_get_errno>
   26a90:	1007883a 	mov	r3,r2
   26a94:	00801444 	movi	r2,81
   26a98:	18800015 	stw	r2,0(r3)
    return -1;
   26a9c:	00bfffc4 	movi	r2,-1
  }
}
   26aa0:	e037883a 	mov	sp,fp
   26aa4:	dfc00117 	ldw	ra,4(sp)
   26aa8:	df000017 	ldw	fp,0(sp)
   26aac:	dec00204 	addi	sp,sp,8
   26ab0:	f800283a 	ret

00026ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26ab4:	defffe04 	addi	sp,sp,-8
   26ab8:	dfc00115 	stw	ra,4(sp)
   26abc:	df000015 	stw	fp,0(sp)
   26ac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26ac4:	d0a00e17 	ldw	r2,-32712(gp)
   26ac8:	10000326 	beq	r2,zero,26ad8 <alt_get_errno+0x24>
   26acc:	d0a00e17 	ldw	r2,-32712(gp)
   26ad0:	103ee83a 	callr	r2
   26ad4:	00000106 	br	26adc <alt_get_errno+0x28>
   26ad8:	d0a6c404 	addi	r2,gp,-25840
}
   26adc:	e037883a 	mov	sp,fp
   26ae0:	dfc00117 	ldw	ra,4(sp)
   26ae4:	df000017 	ldw	fp,0(sp)
   26ae8:	dec00204 	addi	sp,sp,8
   26aec:	f800283a 	ret

00026af0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   26af0:	deffed04 	addi	sp,sp,-76
   26af4:	dfc01215 	stw	ra,72(sp)
   26af8:	df001115 	stw	fp,68(sp)
   26afc:	df001104 	addi	fp,sp,68
   26b00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26b04:	e0bfff17 	ldw	r2,-4(fp)
   26b08:	10000816 	blt	r2,zero,26b2c <isatty+0x3c>
   26b0c:	01400304 	movi	r5,12
   26b10:	e13fff17 	ldw	r4,-4(fp)
   26b14:	002196c0 	call	2196c <__mulsi3>
   26b18:	1007883a 	mov	r3,r2
   26b1c:	008000f4 	movhi	r2,3
   26b20:	10a24304 	addi	r2,r2,-30452
   26b24:	1885883a 	add	r2,r3,r2
   26b28:	00000106 	br	26b30 <isatty+0x40>
   26b2c:	0005883a 	mov	r2,zero
   26b30:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   26b34:	e0bfef17 	ldw	r2,-68(fp)
   26b38:	10000e26 	beq	r2,zero,26b74 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   26b3c:	e0bfef17 	ldw	r2,-68(fp)
   26b40:	10800017 	ldw	r2,0(r2)
   26b44:	10800817 	ldw	r2,32(r2)
   26b48:	1000021e 	bne	r2,zero,26b54 <isatty+0x64>
    {
      return 1;
   26b4c:	00800044 	movi	r2,1
   26b50:	00000d06 	br	26b88 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   26b54:	e0bff004 	addi	r2,fp,-64
   26b58:	100b883a 	mov	r5,r2
   26b5c:	e13fff17 	ldw	r4,-4(fp)
   26b60:	00269fc0 	call	269fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   26b64:	e0bff117 	ldw	r2,-60(fp)
   26b68:	10880020 	cmpeqi	r2,r2,8192
   26b6c:	10803fcc 	andi	r2,r2,255
   26b70:	00000506 	br	26b88 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   26b74:	0026ab40 	call	26ab4 <alt_get_errno>
   26b78:	1007883a 	mov	r3,r2
   26b7c:	00801444 	movi	r2,81
   26b80:	18800015 	stw	r2,0(r3)
    return 0;
   26b84:	0005883a 	mov	r2,zero
  }
}
   26b88:	e037883a 	mov	sp,fp
   26b8c:	dfc00117 	ldw	ra,4(sp)
   26b90:	df000017 	ldw	fp,0(sp)
   26b94:	dec00204 	addi	sp,sp,8
   26b98:	f800283a 	ret

00026b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26b9c:	defffe04 	addi	sp,sp,-8
   26ba0:	dfc00115 	stw	ra,4(sp)
   26ba4:	df000015 	stw	fp,0(sp)
   26ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26bac:	d0a00e17 	ldw	r2,-32712(gp)
   26bb0:	10000326 	beq	r2,zero,26bc0 <alt_get_errno+0x24>
   26bb4:	d0a00e17 	ldw	r2,-32712(gp)
   26bb8:	103ee83a 	callr	r2
   26bbc:	00000106 	br	26bc4 <alt_get_errno+0x28>
   26bc0:	d0a6c404 	addi	r2,gp,-25840
}
   26bc4:	e037883a 	mov	sp,fp
   26bc8:	dfc00117 	ldw	ra,4(sp)
   26bcc:	df000017 	ldw	fp,0(sp)
   26bd0:	dec00204 	addi	sp,sp,8
   26bd4:	f800283a 	ret

00026bd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   26bd8:	defff904 	addi	sp,sp,-28
   26bdc:	dfc00615 	stw	ra,24(sp)
   26be0:	df000515 	stw	fp,20(sp)
   26be4:	df000504 	addi	fp,sp,20
   26be8:	e13ffd15 	stw	r4,-12(fp)
   26bec:	e17ffe15 	stw	r5,-8(fp)
   26bf0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   26bf4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26bf8:	e0bffd17 	ldw	r2,-12(fp)
   26bfc:	10000816 	blt	r2,zero,26c20 <lseek+0x48>
   26c00:	01400304 	movi	r5,12
   26c04:	e13ffd17 	ldw	r4,-12(fp)
   26c08:	002196c0 	call	2196c <__mulsi3>
   26c0c:	1007883a 	mov	r3,r2
   26c10:	008000f4 	movhi	r2,3
   26c14:	10a24304 	addi	r2,r2,-30452
   26c18:	1885883a 	add	r2,r3,r2
   26c1c:	00000106 	br	26c24 <lseek+0x4c>
   26c20:	0005883a 	mov	r2,zero
   26c24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   26c28:	e0bffc17 	ldw	r2,-16(fp)
   26c2c:	10001026 	beq	r2,zero,26c70 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   26c30:	e0bffc17 	ldw	r2,-16(fp)
   26c34:	10800017 	ldw	r2,0(r2)
   26c38:	10800717 	ldw	r2,28(r2)
   26c3c:	10000926 	beq	r2,zero,26c64 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   26c40:	e0bffc17 	ldw	r2,-16(fp)
   26c44:	10800017 	ldw	r2,0(r2)
   26c48:	10800717 	ldw	r2,28(r2)
   26c4c:	e1bfff17 	ldw	r6,-4(fp)
   26c50:	e17ffe17 	ldw	r5,-8(fp)
   26c54:	e13ffc17 	ldw	r4,-16(fp)
   26c58:	103ee83a 	callr	r2
   26c5c:	e0bffb15 	stw	r2,-20(fp)
   26c60:	00000506 	br	26c78 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   26c64:	00bfde84 	movi	r2,-134
   26c68:	e0bffb15 	stw	r2,-20(fp)
   26c6c:	00000206 	br	26c78 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   26c70:	00bfebc4 	movi	r2,-81
   26c74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   26c78:	e0bffb17 	ldw	r2,-20(fp)
   26c7c:	1000070e 	bge	r2,zero,26c9c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   26c80:	0026b9c0 	call	26b9c <alt_get_errno>
   26c84:	1007883a 	mov	r3,r2
   26c88:	e0bffb17 	ldw	r2,-20(fp)
   26c8c:	0085c83a 	sub	r2,zero,r2
   26c90:	18800015 	stw	r2,0(r3)
    rc = -1;
   26c94:	00bfffc4 	movi	r2,-1
   26c98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   26c9c:	e0bffb17 	ldw	r2,-20(fp)
}
   26ca0:	e037883a 	mov	sp,fp
   26ca4:	dfc00117 	ldw	ra,4(sp)
   26ca8:	df000017 	ldw	fp,0(sp)
   26cac:	dec00204 	addi	sp,sp,8
   26cb0:	f800283a 	ret

00026cb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26cb4:	defffe04 	addi	sp,sp,-8
   26cb8:	dfc00115 	stw	ra,4(sp)
   26cbc:	df000015 	stw	fp,0(sp)
   26cc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26cc4:	d0a00e17 	ldw	r2,-32712(gp)
   26cc8:	10000326 	beq	r2,zero,26cd8 <alt_get_errno+0x24>
   26ccc:	d0a00e17 	ldw	r2,-32712(gp)
   26cd0:	103ee83a 	callr	r2
   26cd4:	00000106 	br	26cdc <alt_get_errno+0x28>
   26cd8:	d0a6c404 	addi	r2,gp,-25840
}
   26cdc:	e037883a 	mov	sp,fp
   26ce0:	dfc00117 	ldw	ra,4(sp)
   26ce4:	df000017 	ldw	fp,0(sp)
   26ce8:	dec00204 	addi	sp,sp,8
   26cec:	f800283a 	ret

00026cf0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   26cf0:	defff904 	addi	sp,sp,-28
   26cf4:	dfc00615 	stw	ra,24(sp)
   26cf8:	df000515 	stw	fp,20(sp)
   26cfc:	df000504 	addi	fp,sp,20
   26d00:	e13ffd15 	stw	r4,-12(fp)
   26d04:	e17ffe15 	stw	r5,-8(fp)
   26d08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26d0c:	e0bffd17 	ldw	r2,-12(fp)
   26d10:	10000816 	blt	r2,zero,26d34 <read+0x44>
   26d14:	01400304 	movi	r5,12
   26d18:	e13ffd17 	ldw	r4,-12(fp)
   26d1c:	002196c0 	call	2196c <__mulsi3>
   26d20:	1007883a 	mov	r3,r2
   26d24:	008000f4 	movhi	r2,3
   26d28:	10a24304 	addi	r2,r2,-30452
   26d2c:	1885883a 	add	r2,r3,r2
   26d30:	00000106 	br	26d38 <read+0x48>
   26d34:	0005883a 	mov	r2,zero
   26d38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26d3c:	e0bffb17 	ldw	r2,-20(fp)
   26d40:	10002226 	beq	r2,zero,26dcc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   26d44:	e0bffb17 	ldw	r2,-20(fp)
   26d48:	10800217 	ldw	r2,8(r2)
   26d4c:	108000cc 	andi	r2,r2,3
   26d50:	10800060 	cmpeqi	r2,r2,1
   26d54:	1000181e 	bne	r2,zero,26db8 <read+0xc8>
        (fd->dev->read))
   26d58:	e0bffb17 	ldw	r2,-20(fp)
   26d5c:	10800017 	ldw	r2,0(r2)
   26d60:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   26d64:	10001426 	beq	r2,zero,26db8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   26d68:	e0bffb17 	ldw	r2,-20(fp)
   26d6c:	10800017 	ldw	r2,0(r2)
   26d70:	10800517 	ldw	r2,20(r2)
   26d74:	e0ffff17 	ldw	r3,-4(fp)
   26d78:	180d883a 	mov	r6,r3
   26d7c:	e17ffe17 	ldw	r5,-8(fp)
   26d80:	e13ffb17 	ldw	r4,-20(fp)
   26d84:	103ee83a 	callr	r2
   26d88:	e0bffc15 	stw	r2,-16(fp)
   26d8c:	e0bffc17 	ldw	r2,-16(fp)
   26d90:	1000070e 	bge	r2,zero,26db0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   26d94:	0026cb40 	call	26cb4 <alt_get_errno>
   26d98:	1007883a 	mov	r3,r2
   26d9c:	e0bffc17 	ldw	r2,-16(fp)
   26da0:	0085c83a 	sub	r2,zero,r2
   26da4:	18800015 	stw	r2,0(r3)
          return -1;
   26da8:	00bfffc4 	movi	r2,-1
   26dac:	00000c06 	br	26de0 <read+0xf0>
        }
        return rval;
   26db0:	e0bffc17 	ldw	r2,-16(fp)
   26db4:	00000a06 	br	26de0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   26db8:	0026cb40 	call	26cb4 <alt_get_errno>
   26dbc:	1007883a 	mov	r3,r2
   26dc0:	00800344 	movi	r2,13
   26dc4:	18800015 	stw	r2,0(r3)
   26dc8:	00000406 	br	26ddc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   26dcc:	0026cb40 	call	26cb4 <alt_get_errno>
   26dd0:	1007883a 	mov	r3,r2
   26dd4:	00801444 	movi	r2,81
   26dd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26ddc:	00bfffc4 	movi	r2,-1
}
   26de0:	e037883a 	mov	sp,fp
   26de4:	dfc00117 	ldw	ra,4(sp)
   26de8:	df000017 	ldw	fp,0(sp)
   26dec:	dec00204 	addi	sp,sp,8
   26df0:	f800283a 	ret

00026df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26df4:	defffe04 	addi	sp,sp,-8
   26df8:	dfc00115 	stw	ra,4(sp)
   26dfc:	df000015 	stw	fp,0(sp)
   26e00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26e04:	d0a00e17 	ldw	r2,-32712(gp)
   26e08:	10000326 	beq	r2,zero,26e18 <alt_get_errno+0x24>
   26e0c:	d0a00e17 	ldw	r2,-32712(gp)
   26e10:	103ee83a 	callr	r2
   26e14:	00000106 	br	26e1c <alt_get_errno+0x28>
   26e18:	d0a6c404 	addi	r2,gp,-25840
}
   26e1c:	e037883a 	mov	sp,fp
   26e20:	dfc00117 	ldw	ra,4(sp)
   26e24:	df000017 	ldw	fp,0(sp)
   26e28:	dec00204 	addi	sp,sp,8
   26e2c:	f800283a 	ret

00026e30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   26e30:	defff904 	addi	sp,sp,-28
   26e34:	dfc00615 	stw	ra,24(sp)
   26e38:	df000515 	stw	fp,20(sp)
   26e3c:	df000504 	addi	fp,sp,20
   26e40:	e13ffd15 	stw	r4,-12(fp)
   26e44:	e17ffe15 	stw	r5,-8(fp)
   26e48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26e4c:	e0bffd17 	ldw	r2,-12(fp)
   26e50:	10000816 	blt	r2,zero,26e74 <write+0x44>
   26e54:	01400304 	movi	r5,12
   26e58:	e13ffd17 	ldw	r4,-12(fp)
   26e5c:	002196c0 	call	2196c <__mulsi3>
   26e60:	1007883a 	mov	r3,r2
   26e64:	008000f4 	movhi	r2,3
   26e68:	10a24304 	addi	r2,r2,-30452
   26e6c:	1885883a 	add	r2,r3,r2
   26e70:	00000106 	br	26e78 <write+0x48>
   26e74:	0005883a 	mov	r2,zero
   26e78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26e7c:	e0bffb17 	ldw	r2,-20(fp)
   26e80:	10002126 	beq	r2,zero,26f08 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   26e84:	e0bffb17 	ldw	r2,-20(fp)
   26e88:	10800217 	ldw	r2,8(r2)
   26e8c:	108000cc 	andi	r2,r2,3
   26e90:	10001826 	beq	r2,zero,26ef4 <write+0xc4>
   26e94:	e0bffb17 	ldw	r2,-20(fp)
   26e98:	10800017 	ldw	r2,0(r2)
   26e9c:	10800617 	ldw	r2,24(r2)
   26ea0:	10001426 	beq	r2,zero,26ef4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   26ea4:	e0bffb17 	ldw	r2,-20(fp)
   26ea8:	10800017 	ldw	r2,0(r2)
   26eac:	10800617 	ldw	r2,24(r2)
   26eb0:	e0ffff17 	ldw	r3,-4(fp)
   26eb4:	180d883a 	mov	r6,r3
   26eb8:	e17ffe17 	ldw	r5,-8(fp)
   26ebc:	e13ffb17 	ldw	r4,-20(fp)
   26ec0:	103ee83a 	callr	r2
   26ec4:	e0bffc15 	stw	r2,-16(fp)
   26ec8:	e0bffc17 	ldw	r2,-16(fp)
   26ecc:	1000070e 	bge	r2,zero,26eec <write+0xbc>
      {
        ALT_ERRNO = -rval;
   26ed0:	0026df40 	call	26df4 <alt_get_errno>
   26ed4:	1007883a 	mov	r3,r2
   26ed8:	e0bffc17 	ldw	r2,-16(fp)
   26edc:	0085c83a 	sub	r2,zero,r2
   26ee0:	18800015 	stw	r2,0(r3)
        return -1;
   26ee4:	00bfffc4 	movi	r2,-1
   26ee8:	00000c06 	br	26f1c <write+0xec>
      }
      return rval;
   26eec:	e0bffc17 	ldw	r2,-16(fp)
   26ef0:	00000a06 	br	26f1c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   26ef4:	0026df40 	call	26df4 <alt_get_errno>
   26ef8:	1007883a 	mov	r3,r2
   26efc:	00800344 	movi	r2,13
   26f00:	18800015 	stw	r2,0(r3)
   26f04:	00000406 	br	26f18 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   26f08:	0026df40 	call	26df4 <alt_get_errno>
   26f0c:	1007883a 	mov	r3,r2
   26f10:	00801444 	movi	r2,81
   26f14:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26f18:	00bfffc4 	movi	r2,-1
}
   26f1c:	e037883a 	mov	sp,fp
   26f20:	dfc00117 	ldw	ra,4(sp)
   26f24:	df000017 	ldw	fp,0(sp)
   26f28:	dec00204 	addi	sp,sp,8
   26f2c:	f800283a 	ret
