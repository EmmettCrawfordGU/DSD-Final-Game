
game-sw.elf:     file format elf32-littlenios2
game-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006fa0 memsz 0x00006fa0 flags r-x
    LOAD off    0x00007fc0 vaddr 0x00026fc0 paddr 0x00028a78 align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags rw-
    LOAD off    0x0000a530 vaddr 0x0002a530 paddr 0x0002a530 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ca8  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  00026ed8  00026ed8  00007ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab8  00026fc0  00028a78  00007fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0002a530  0002a530  0000a530  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0002a68c  0002a68c  00009a78  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ae0  00000000  00000000  00009aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000189e3  00000000  00000000  0000a580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000697e  00000000  00000000  00022f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007355  00000000  00000000  000298e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b00  00000000  00000000  00030c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b7d  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004cb1  00000000  00000000  000352b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006e0  00000000  00000000  00039f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003d02a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003d02d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003d030  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003d031  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003d032  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003d03b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003d044  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0003d04d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0003d051  2**0
                  CONTENTS, READONLY
 26 .jdi          00004230  00000000  00000000  0003d07d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000560d3  00000000  00000000  000412ad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00026ed8 l    d  .rodata	00000000 .rodata
00026fc0 l    d  .rwdata	00000000 .rwdata
0002a530 l    d  .bss	00000000 .bss
0002a68c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game-sw_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00028a38 l     O .rwdata	00000004 count.2485
00026fe0 l     O .rwdata	00000020 prev_matrix.2538
00000000 l    df *ABS*	00000000 hw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00027408 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00022a20 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028a54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022cbc l     F .text	00000034 alt_dev_reg
0002782c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022fac l     F .text	0000020c altera_avalon_jtag_uart_irq
000231b8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000237f0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00023a10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00023b44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023b70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023dcc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00023f2c l     F .text	0000003c alt_get_errno
00023f68 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00025cb4 l     F .text	00000008 __fp_unlock
00025cc8 l     F .text	0000019c __sinit.part.1
00025e64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00026968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00026a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00026b44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00026c5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00026d9c l     F .text	0000003c alt_get_errno
0002a558 g     O .bss	00000004 alt_instruction_exception_handler
00020a18 g     F .text	00000148 death
00026820 g     F .text	00000054 _isatty_r
00022b0c g     F .text	0000007c alt_main
000212b4 g     F .text	000000e0 lcdSetAddr
0002a58c g     O .bss	00000100 alt_irq
00026874 g     F .text	00000060 _lseek_r
00028a78 g       *ABS*	00000000 __flash_rwdata_start
0002a68c g       *ABS*	00000000 __alt_heap_start
00020f78 g     F .text	0000003c handleGameTimer
000265a8 g     F .text	0000005c __sseek
00026014 g     F .text	00000010 __sinit
000215c0 g     F .text	00000060 startTimer
00025e6c g     F .text	00000078 __sfmoreglue
00022bac g     F .text	00000024 __malloc_unlock
00024ec8 g     F .text	0000015c memmove
00025ffc g     F .text	00000018 _cleanup
00022bd0 g     F .text	0000003c alt_putstr
00020ff0 g     F .text	00000028 readSwitch
000243d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00021018 g     F .text	00000028 readKey
00020000 g     F .entry	0000000c __reset
00020ee4 g     F .text	00000048 clearSema
00021560 g     F .text	00000060 initTimers
00020020 g       *ABS*	00000000 __flash_exceptions_start
000267c4 g     F .text	0000005c _fstat_r
0002a544 g     O .bss	00000004 errno
00026524 g     F .text	00000008 __seofread
000208b4 g     F .text	000000f8 updatePlayer
00021040 g     F .text	0000003c setLEDs
00020cc0 g     F .text	00000224 updateLCD
0002a550 g     O .bss	00000004 alt_argv
00030a34 g       *ABS*	00000000 _gp
000209ac g     F .text	0000006c delayMs
000288b4 g     O .rwdata	00000180 alt_fd_list
000243fc g     F .text	00000090 alt_find_dev
00024d80 g     F .text	00000148 memcpy
00025cbc g     F .text	0000000c _cleanup_r
00021410 g     F .text	000000c4 lcdWrite
00023eb0 g     F .text	0000007c alt_io_redirect
00026ed8 g       *ABS*	00000000 __DTOR_END__
0002107c g     F .text	00000194 setSevenSeg
00023d30 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000233b0 g     F .text	0000021c altera_avalon_jtag_uart_read
0002193c g     F .text	00000014 malloc
00021858 g     F .text	00000064 .hidden __udivsi3
00026a98 g     F .text	000000ac isatty
00026fc0 g     O .rwdata	00000020 game_matrix
0002a540 g     O .bss	00000004 __malloc_top_pad
00024758 g     F .text	000004c8 __sfvwrite_r
000221ec g     F .text	00000054 _sbrk_r
000268d4 g     F .text	00000060 _read_r
00028a68 g     O .rwdata	00000004 alt_max_fd
000266c0 g     F .text	000000f0 _fclose_r
00025c84 g     F .text	00000030 fflush
0002a53c g     O .bss	00000004 __malloc_max_sbrked_mem
0002172c g     F .text	00000034 millisToClock
00026b80 g     F .text	000000dc lseek
00028a48 g     O .rwdata	00000004 _global_impure_ptr
00025024 g     F .text	00000564 _realloc_r
00020fb4 g     F .text	0000003c handleLCDTimer
0002a68c g       *ABS*	00000000 __bss_end
00022930 g     F .text	000000f0 alt_iic_isr_register
000242d0 g     F .text	00000108 alt_tick
00021394 g     F .text	0000007c lcdWriteStr
00026034 g     F .text	00000018 __fp_lock_all
000228e4 g     F .text	0000004c alt_ic_irq_enabled
00024234 g     F .text	0000009c alt_alarm_stop
0002a548 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002888c g     O .rwdata	00000028 alt_dev_null
00023b24 g     F .text	00000020 alt_dcache_flush_all
00028a78 g       *ABS*	00000000 __ram_rwdata_end
00028a60 g     O .rwdata	00000008 alt_dev_list
0002a530 g     O .bss	00000004 score
00026dd8 g     F .text	00000100 write
00020ba8 g     F .text	00000118 deathAnimation
00026fc0 g       *ABS*	00000000 __ram_rodata_end
000269a4 g     F .text	000000b8 fstat
00020b60 g     F .text	00000048 gameOver
000218bc g     F .text	00000058 .hidden __umodsi3
0002a68c g       *ABS*	00000000 end
00022eec g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00026ed8 g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00023868 g     F .text	0000007c alt_avalon_timer_sc_init
000235cc g     F .text	00000224 altera_avalon_jtag_uart_write
00026024 g     F .text	00000004 __sfp_lock_acquire
00024c20 g     F .text	000000e4 memchr
00022364 g     F .text	00000310 _free_r
00021210 g     F .text	000000a4 lcdInit
0002588c g     F .text	00000180 __call_exitprocs
00028a40 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002a55c g     O .bss	00000004 _alt_tick_rate
00022188 g     F .text	00000064 rand
0002a560 g     O .bss	00000004 _alt_nticks
00026c98 g     F .text	00000104 read
00022d28 g     F .text	00000060 alt_sys_init
00025774 g     F .text	00000118 __register_exitproc
00028a3d g     O .rwdata	00000001 gameSema
00023258 g     F .text	00000068 altera_avalon_jtag_uart_close
00021914 g     F .text	00000028 .hidden __mulsi3
00026fc0 g       *ABS*	00000000 __ram_rwdata_start
00026ed8 g       *ABS*	00000000 __ram_rodata_start
0002a564 g     O .bss	00000028 __malloc_current_mallinfo
00022d88 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024594 g     F .text	000000c4 alt_get_fd
0002666c g     F .text	00000054 _close_r
00024d04 g     F .text	0000007c memcmp
00022e48 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a68c g       *ABS*	00000000 __alt_stack_base
00022e98 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00025620 g     F .text	00000154 __swsetup_r
00025ee4 g     F .text	00000118 __sfp
00027000 g     O .rwdata	00000408 __malloc_av_
00026030 g     F .text	00000004 __sinit_lock_release
000264d0 g     F .text	00000054 __sread
0002448c g     F .text	00000108 alt_find_file
00023bac g     F .text	000000a4 alt_dev_llist_insert
00022b88 g     F .text	00000024 __malloc_lock
00022c0c g     F .text	000000b0 sbrk
00025c28 g     F .text	0000005c _fflush_r
0002a530 g       *ABS*	00000000 __bss_start
000263a8 g     F .text	00000128 memset
0002026c g     F .text	00000204 main
0002a554 g     O .bss	00000004 alt_envp
0002a538 g     O .bss	00000004 __malloc_max_total_mem
00022de8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022170 g     F .text	00000018 srand
00026604 g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
000267b0 g     F .text	00000014 fclose
00021964 g     F .text	0000080c _malloc_r
0002050c g     F .text	00000184 createAsteroid
00028a6c g     O .rwdata	00000004 alt_errno
00026064 g     F .text	000000c4 _fwalk
00020708 g     F .text	00000158 update_matrix
00021760 g     F .text	00000084 .hidden __divsi3
00022240 g     F .text	00000124 _malloc_trim_r
00026ed8 g       *ABS*	00000000 __CTOR_END__
00026ed8 g       *ABS*	00000000 __flash_rodata_start
00026ed8 g       *ABS*	00000000 __DTOR_LIST__
0002a534 g     O .bss	00000004 count
00020f2c g     F .text	0000004c getSema
00028a34 g     O .rwdata	00000001 lives
00021620 g     F .text	00000060 stopTimer
00022cf0 g     F .text	00000038 alt_irq_init
000241b0 g     F .text	00000084 alt_release_fd
00024658 g     F .text	00000014 atexit
0002660c g     F .text	00000060 _write_r
00028a4c g     O .rwdata	00000004 _impure_ptr
0002a54c g     O .bss	00000004 alt_argc
00025a0c g     F .text	0000021c __sflush_r
00023cb0 g     F .text	00000060 _do_dtors
00020860 g     F .text	00000054 draw_player
00020020 g       .exceptions	00000000 alt_irq_entry
0002604c g     F .text	00000018 __fp_unlock_all
00028a58 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00022780 g     F .text	00000050 alt_ic_isr_register
00028a78 g       *ABS*	00000000 _edata
00026f68 g     O .rodata	00000028 HexArray
0002a68c g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
000232c0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000246a4 g     F .text	0000009c _fputs_r
00022858 g     F .text	0000008c alt_ic_irq_disable
0002652c g     F .text	0000007c __swrite
00028a44 g     O .rwdata	00000004 __malloc_trim_threshold
0002466c g     F .text	00000038 exit
00021680 g     F .text	000000ac setTimer
00026128 g     F .text	000000c4 _fwalk_reent
000217e4 g     F .text	00000074 .hidden __modsi3
00026f4c g     O .rodata	0000001c commands
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00026028 g     F .text	00000004 __sfp_lock_release
000214d4 g     F .text	0000008c lcdClear
00020470 g     F .text	0000009c start
00020690 g     F .text	00000078 free_array
00020000 g       *ABS*	00000000 __alt_mem_onchip_ram
00026934 g     F .text	00000034 _exit
000238e4 g     F .text	0000012c alt_alarm_start
00022674 g     F .text	0000010c .hidden __muldi3
000261ec g     F .text	000001bc __smakebuf_r
00025588 g     F .text	00000098 strlen
00024054 g     F .text	0000015c open
00023d10 g     F .text	00000020 alt_icache_flush_all
00024740 g     F .text	00000018 fputs
00028a50 g     O .rwdata	00000004 alt_priority_mask
00028a3c g     O .rwdata	00000001 lcdSema
000227d0 g     F .text	00000088 alt_ic_irq_enable
00028a70 g     O .rwdata	00000008 alt_alarm_list
00023c50 g     F .text	00000060 _do_ctors
00023a4c g     F .text	000000d8 close
00022a88 g     F .text	00000084 alt_load
00021950 g     F .text	00000014 free
0002602c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a96304 	addi	r2,r2,-23156
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a96304 	addi	r2,r2,-23156
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe712c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6c917 	ldw	r2,-25820(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6c917 	ldw	r2,-25820(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6828d14 	ori	gp,gp,2612
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a94c14 	ori	r2,r2,42288

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e9a314 	ori	r3,r3,42636

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	0022a880 	call	22a88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	0022b0c0 	call	22b0c <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7268>

0002026c <main>:
void draw_player(uint8_t data);
void deathAnimation(uint8_t row);


// Entry point for the program
int main(){
   2026c:	defff904 	addi	sp,sp,-28
   20270:	dfc00615 	stw	ra,24(sp)
   20274:	df000515 	stw	fp,20(sp)
   20278:	df000504 	addi	fp,sp,20
	uint8_t switch_data; // The value read in from switch 17
	uint8_t hit;         // Collision detection, 0 - Not hit, 1 - hit by asteroid, 2 - hit by black hole

	// Initializations
	initTimers();
   2027c:	00215600 	call	21560 <initTimers>
	lcdInit();
   20280:	00212100 	call	21210 <lcdInit>

	// Clear the hex display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, 0x0FFFFFFF);
   20284:	00c40034 	movhi	r3,4096
   20288:	18ffffc4 	addi	r3,r3,-1
   2028c:	00800134 	movhi	r2,4
   20290:	10841404 	addi	r2,r2,4176
   20294:	10c00035 	stwio	r3,0(r2)

	// Left in here from the tutorial for nostalgia
	alt_putstr("Ciao from Nios II!\n");
   20298:	010000b4 	movhi	r4,2
   2029c:	211bb604 	addi	r4,r4,28376
   202a0:	0022bd00 	call	22bd0 <alt_putstr>

	// Set the LEDs
	uint8_t led_pattern = 0x00;
   202a4:	e03ffb05 	stb	zero,-20(fp)
	for(int i = 0; i < lives; i++){led_pattern |= 0x01 << i;}
   202a8:	e03ffc15 	stw	zero,-16(fp)
   202ac:	00000a06 	br	202d8 <main+0x6c>
   202b0:	00c00044 	movi	r3,1
   202b4:	e0bffc17 	ldw	r2,-16(fp)
   202b8:	1884983a 	sll	r2,r3,r2
   202bc:	1007883a 	mov	r3,r2
   202c0:	e0bffb03 	ldbu	r2,-20(fp)
   202c4:	1884b03a 	or	r2,r3,r2
   202c8:	e0bffb05 	stb	r2,-20(fp)
   202cc:	e0bffc17 	ldw	r2,-16(fp)
   202d0:	10800044 	addi	r2,r2,1
   202d4:	e0bffc15 	stw	r2,-16(fp)
   202d8:	d0a00003 	ldbu	r2,-32768(gp)
   202dc:	10803fcc 	andi	r2,r2,255
   202e0:	e0fffc17 	ldw	r3,-16(fp)
   202e4:	18bff216 	blt	r3,r2,202b0 <__alt_data_end+0xfffe72b0>
	setLEDs(led_pattern);
   202e8:	e0bffb03 	ldbu	r2,-20(fp)
   202ec:	1009883a 	mov	r4,r2
   202f0:	00210400 	call	21040 <setLEDs>

	// Set the game timer to 100ms and start
	setTimer(GAME_TIMER, 100000);
   202f4:	014000b4 	movhi	r5,2
   202f8:	2961a804 	addi	r5,r5,-31072
   202fc:	01000044 	movi	r4,1
   20300:	00216800 	call	21680 <setTimer>
	startTimer(GAME_TIMER);
   20304:	01000044 	movi	r4,1
   20308:	00215c00 	call	215c0 <startTimer>

	// Enter the start screen and wait for player to press Key 2
	start();
   2030c:	00204700 	call	20470 <start>

	// Clear the lcd and draw the player
	lcdClear();
   20310:	00214d40 	call	214d4 <lcdClear>
	switch_data = readSwitch();
   20314:	0020ff00 	call	20ff0 <readSwitch>
   20318:	e0bfff05 	stb	r2,-4(fp)
	draw_player(switch_data);
   2031c:	e0bfff03 	ldbu	r2,-4(fp)
   20320:	1009883a 	mov	r4,r2
   20324:	00208600 	call	20860 <draw_player>

	// Seed the random number generator
	srand(count);
   20328:	d0a6c017 	ldw	r2,-25856(gp)
   2032c:	1009883a 	mov	r4,r2
   20330:	00221700 	call	22170 <srand>

	// Main loop
	while(1) {
		// Clear the semaphore and wait until the game timer sets it
		// This controls the framerate to 10 Hz
		clearSema(GAME_TIMER);
   20334:	01000044 	movi	r4,1
   20338:	0020ee40 	call	20ee4 <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   2033c:	0001883a 	nop
   20340:	01000044 	movi	r4,1
   20344:	0020f2c0 	call	20f2c <getSema>
   20348:	10803fcc 	andi	r2,r2,255
   2034c:	103ffc26 	beq	r2,zero,20340 <__alt_data_end+0xfffe7340>

		// Set the score
		if(score >= 9999){score = 9999;}
   20350:	d0a6bf17 	ldw	r2,-25860(gp)
   20354:	1089c3f0 	cmpltui	r2,r2,9999
   20358:	1000031e 	bne	r2,zero,20368 <main+0xfc>
   2035c:	0089c3c4 	movi	r2,9999
   20360:	d0a6bf15 	stw	r2,-25860(gp)
   20364:	00000306 	br	20374 <main+0x108>
		else{score++;}
   20368:	d0a6bf17 	ldw	r2,-25860(gp)
   2036c:	10800044 	addi	r2,r2,1
   20370:	d0a6bf15 	stw	r2,-25860(gp)
		setSevenSeg(score);
   20374:	d0a6bf17 	ldw	r2,-25860(gp)
   20378:	1009883a 	mov	r4,r2
   2037c:	002107c0 	call	2107c <setSevenSeg>

		// Read in the state of switch 17
		switch_data = readSwitch();
   20380:	0020ff00 	call	20ff0 <readSwitch>
   20384:	e0bfff05 	stb	r2,-4(fp)

		// Overwrite the player
		if(game_matrix[0][PLAYER_COLUMN] == PLAYER){game_matrix[0][PLAYER_COLUMN] = BLANK;}
   20388:	008000b4 	movhi	r2,2
   2038c:	109bf004 	addi	r2,r2,28608
   20390:	10800043 	ldbu	r2,1(r2)
   20394:	10803fcc 	andi	r2,r2,255
   20398:	10803d98 	cmpnei	r2,r2,246
   2039c:	1000041e 	bne	r2,zero,203b0 <main+0x144>
   203a0:	008000b4 	movhi	r2,2
   203a4:	109bf004 	addi	r2,r2,28608
   203a8:	00c00804 	movi	r3,32
   203ac:	10c00045 	stb	r3,1(r2)
		if(game_matrix[1][PLAYER_COLUMN] == PLAYER){game_matrix[1][PLAYER_COLUMN] = BLANK;}
   203b0:	008000b4 	movhi	r2,2
   203b4:	109bf004 	addi	r2,r2,28608
   203b8:	10800443 	ldbu	r2,17(r2)
   203bc:	10803fcc 	andi	r2,r2,255
   203c0:	10803d98 	cmpnei	r2,r2,246
   203c4:	1000041e 	bne	r2,zero,203d8 <main+0x16c>
   203c8:	008000b4 	movhi	r2,2
   203cc:	109bf004 	addi	r2,r2,28608
   203d0:	00c00804 	movi	r3,32
   203d4:	10c00445 	stb	r3,17(r2)

		// Move matrix 1 column to the left, generate new column on the right
		update_matrix();
   203d8:	00207080 	call	20708 <update_matrix>

		// Update the player and check if the player has been hit
		hit = updatePlayer(switch_data);
   203dc:	e0bfff03 	ldbu	r2,-4(fp)
   203e0:	1009883a 	mov	r4,r2
   203e4:	00208b40 	call	208b4 <updatePlayer>
   203e8:	e0bfff45 	stb	r2,-3(fp)

		// Update the LCD
		updateLCD();
   203ec:	0020cc00 	call	20cc0 <updateLCD>

		// If the player has been hit
		if(hit != 0x00){
   203f0:	e0bfff43 	ldbu	r2,-3(fp)
   203f4:	103fcf26 	beq	r2,zero,20334 <__alt_data_end+0xfffe7334>
			if(hit == 0x02){ // If hit by a black hole, game over
   203f8:	e0bfff43 	ldbu	r2,-3(fp)
   203fc:	10800098 	cmpnei	r2,r2,2
   20400:	1000021e 	bne	r2,zero,2040c <main+0x1a0>
				lives = 0;
   20404:	d0200005 	stb	zero,-32768(gp)
   20408:	00000306 	br	20418 <main+0x1ac>
			} else { // If hit by an asteroid, lose a life
				lives--;
   2040c:	d0a00003 	ldbu	r2,-32768(gp)
   20410:	10bfffc4 	addi	r2,r2,-1
   20414:	d0a00005 	stb	r2,-32768(gp)
			}

			// Set the LEDs
			uint8_t led_pattern = 0x00;
   20418:	e03ffd05 	stb	zero,-12(fp)
			for(int i = 0; i < lives; i++){led_pattern |= 0x01 << i;}
   2041c:	e03ffe15 	stw	zero,-8(fp)
   20420:	00000a06 	br	2044c <main+0x1e0>
   20424:	00c00044 	movi	r3,1
   20428:	e0bffe17 	ldw	r2,-8(fp)
   2042c:	1884983a 	sll	r2,r3,r2
   20430:	1007883a 	mov	r3,r2
   20434:	e0bffd03 	ldbu	r2,-12(fp)
   20438:	1884b03a 	or	r2,r3,r2
   2043c:	e0bffd05 	stb	r2,-12(fp)
   20440:	e0bffe17 	ldw	r2,-8(fp)
   20444:	10800044 	addi	r2,r2,1
   20448:	e0bffe15 	stw	r2,-8(fp)
   2044c:	d0a00003 	ldbu	r2,-32768(gp)
   20450:	10803fcc 	andi	r2,r2,255
   20454:	e0fffe17 	ldw	r3,-8(fp)
   20458:	18bff216 	blt	r3,r2,20424 <__alt_data_end+0xfffe7424>
			setLEDs(led_pattern);
   2045c:	e0bffd03 	ldbu	r2,-12(fp)
   20460:	1009883a 	mov	r4,r2
   20464:	00210400 	call	21040 <setLEDs>

			// Go to function that handles the player losing a life
			death();
   20468:	0020a180 	call	20a18 <death>
		}
	}
   2046c:	003fb106 	br	20334 <__alt_data_end+0xfffe7334>

00020470 <start>:
	return 0;
}


// Displays the starting screen and waits for the player to press Key 2
void start(void){
   20470:	defffd04 	addi	sp,sp,-12
   20474:	dfc00215 	stw	ra,8(sp)
   20478:	df000115 	stw	fp,4(sp)
   2047c:	df000104 	addi	fp,sp,4
	uint8_t key_data = 1;
   20480:	00800044 	movi	r2,1
   20484:	e0bfff05 	stb	r2,-4(fp)

	// Clears LCD and displays title
	lcdClear();
   20488:	00214d40 	call	214d4 <lcdClear>
	lcdSetAddr(0, 0);
   2048c:	000b883a 	mov	r5,zero
   20490:	0009883a 	mov	r4,zero
   20494:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWriteStr("** ASTRODODGE **\0");
   20498:	010000b4 	movhi	r4,2
   2049c:	211bbb04 	addi	r4,r4,28396
   204a0:	00213940 	call	21394 <lcdWriteStr>

	// Display the next line
	lcdSetAddr(1, 2);
   204a4:	01400084 	movi	r5,2
   204a8:	01000044 	movi	r4,1
   204ac:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWriteStr("Press KEY2!");
   204b0:	010000b4 	movhi	r4,2
   204b4:	211bc004 	addi	r4,r4,28416
   204b8:	00213940 	call	21394 <lcdWriteStr>

	// Wait for player to press Key 2
	while(key_data == 1) {
   204bc:	00000a06 	br	204e8 <start+0x78>
		key_data = readKey();
   204c0:	00210180 	call	21018 <readKey>
   204c4:	e0bfff05 	stb	r2,-4(fp)

		// Increment count to seed the random number generator
		count++;
   204c8:	d0a6c017 	ldw	r2,-25856(gp)
   204cc:	10800044 	addi	r2,r2,1
   204d0:	d0a6c015 	stw	r2,-25856(gp)
		if(count >= 1000000){
   204d4:	d0e6c017 	ldw	r3,-25856(gp)
   204d8:	008003f4 	movhi	r2,15
   204dc:	10908fc4 	addi	r2,r2,16959
   204e0:	10c0012e 	bgeu	r2,r3,204e8 <start+0x78>
			count = 0;
   204e4:	d026c015 	stw	zero,-25856(gp)
	// Display the next line
	lcdSetAddr(1, 2);
	lcdWriteStr("Press KEY2!");

	// Wait for player to press Key 2
	while(key_data == 1) {
   204e8:	e0bfff03 	ldbu	r2,-4(fp)
   204ec:	10800060 	cmpeqi	r2,r2,1
   204f0:	103ff31e 	bne	r2,zero,204c0 <__alt_data_end+0xfffe74c0>
		count++;
		if(count >= 1000000){
			count = 0;
		}
	}
}
   204f4:	0001883a 	nop
   204f8:	e037883a 	mov	sp,fp
   204fc:	dfc00117 	ldw	ra,4(sp)
   20500:	df000017 	ldw	fp,0(sp)
   20504:	dec00204 	addi	sp,sp,8
   20508:	f800283a 	ret

0002050c <createAsteroid>:


// Creates a 2x1 array with an asteroid randomly in one of the rows
uint8_t **createAsteroid(void){
   2050c:	defff804 	addi	sp,sp,-32
   20510:	dfc00715 	stw	ra,28(sp)
   20514:	df000615 	stw	fp,24(sp)
   20518:	dc000515 	stw	r16,20(sp)
   2051c:	df000604 	addi	fp,sp,24
	// Allocate space for the new asteroid matrix
	uint8_t **newAsteroid = (uint8_t**)malloc(2 * sizeof(uint8_t*));
   20520:	01000204 	movi	r4,8
   20524:	002193c0 	call	2193c <malloc>
   20528:	e0bffc15 	stw	r2,-16(fp)

	// Array to index the different asteroids and black hole
	uint8_t asteroids[4] = {ASTEROID_0, ASTEROID_1, ASTEROID_2, BLACK_HOLE};
   2052c:	00800a84 	movi	r2,42
   20530:	e0bffd45 	stb	r2,-11(fp)
   20534:	00bffbc4 	movi	r2,-17
   20538:	e0bffd85 	stb	r2,-10(fp)
   2053c:	00bffc84 	movi	r2,-14
   20540:	e0bffdc5 	stb	r2,-9(fp)
   20544:	00bfffc4 	movi	r2,-1
   20548:	e0bffe05 	stb	r2,-8(fp)

	// Randomly generate an asteroid and a row
	uint8_t randomAsteroid = rand() % 4;
   2054c:	00221880 	call	22188 <rand>
   20550:	1007883a 	mov	r3,r2
   20554:	00a00034 	movhi	r2,32768
   20558:	108000c4 	addi	r2,r2,3
   2055c:	1884703a 	and	r2,r3,r2
   20560:	1000040e 	bge	r2,zero,20574 <createAsteroid+0x68>
   20564:	10bfffc4 	addi	r2,r2,-1
   20568:	00ffff04 	movi	r3,-4
   2056c:	10c4b03a 	or	r2,r2,r3
   20570:	10800044 	addi	r2,r2,1
   20574:	e0bffa05 	stb	r2,-24(fp)
	uint8_t randomRow = rand() % 2;
   20578:	00221880 	call	22188 <rand>
   2057c:	1007883a 	mov	r3,r2
   20580:	00a00034 	movhi	r2,32768
   20584:	10800044 	addi	r2,r2,1
   20588:	1884703a 	and	r2,r3,r2
   2058c:	1000040e 	bge	r2,zero,205a0 <createAsteroid+0x94>
   20590:	10bfffc4 	addi	r2,r2,-1
   20594:	00ffff84 	movi	r3,-2
   20598:	10c4b03a 	or	r2,r2,r3
   2059c:	10800044 	addi	r2,r2,1
   205a0:	e0bffd05 	stb	r2,-12(fp)

	// If it is a black hole, randomly generate a number out of 4 again
	if (randomAsteroid == 3)
   205a4:	e0bffa03 	ldbu	r2,-24(fp)
   205a8:	108000d8 	cmpnei	r2,r2,3
   205ac:	10000b1e 	bne	r2,zero,205dc <createAsteroid+0xd0>
		randomAsteroid = rand() % 4;
   205b0:	00221880 	call	22188 <rand>
   205b4:	1007883a 	mov	r3,r2
   205b8:	00a00034 	movhi	r2,32768
   205bc:	108000c4 	addi	r2,r2,3
   205c0:	1884703a 	and	r2,r3,r2
   205c4:	1000040e 	bge	r2,zero,205d8 <createAsteroid+0xcc>
   205c8:	10bfffc4 	addi	r2,r2,-1
   205cc:	00ffff04 	movi	r3,-4
   205d0:	10c4b03a 	or	r2,r2,r3
   205d4:	10800044 	addi	r2,r2,1
   205d8:	e0bffa05 	stb	r2,-24(fp)

	// Clear the newAsteroid array
    for(int i = 0; i < 2; ++i) {
   205dc:	e03ffb15 	stw	zero,-20(fp)
   205e0:	00001506 	br	20638 <createAsteroid+0x12c>
    	newAsteroid[i] = (uint8_t*)malloc(sizeof(uint8_t));
   205e4:	e0bffb17 	ldw	r2,-20(fp)
   205e8:	1085883a 	add	r2,r2,r2
   205ec:	1085883a 	add	r2,r2,r2
   205f0:	1007883a 	mov	r3,r2
   205f4:	e0bffc17 	ldw	r2,-16(fp)
   205f8:	10e1883a 	add	r16,r2,r3
   205fc:	01000044 	movi	r4,1
   20600:	002193c0 	call	2193c <malloc>
   20604:	80800015 	stw	r2,0(r16)
    	newAsteroid[i][0] = BLANK;	// blank spaces
   20608:	e0bffb17 	ldw	r2,-20(fp)
   2060c:	1085883a 	add	r2,r2,r2
   20610:	1085883a 	add	r2,r2,r2
   20614:	1007883a 	mov	r3,r2
   20618:	e0bffc17 	ldw	r2,-16(fp)
   2061c:	10c5883a 	add	r2,r2,r3
   20620:	10800017 	ldw	r2,0(r2)
   20624:	00c00804 	movi	r3,32
   20628:	10c00005 	stb	r3,0(r2)
	// If it is a black hole, randomly generate a number out of 4 again
	if (randomAsteroid == 3)
		randomAsteroid = rand() % 4;

	// Clear the newAsteroid array
    for(int i = 0; i < 2; ++i) {
   2062c:	e0bffb17 	ldw	r2,-20(fp)
   20630:	10800044 	addi	r2,r2,1
   20634:	e0bffb15 	stw	r2,-20(fp)
   20638:	e0bffb17 	ldw	r2,-20(fp)
   2063c:	10800090 	cmplti	r2,r2,2
   20640:	103fe81e 	bne	r2,zero,205e4 <__alt_data_end+0xfffe75e4>
    	newAsteroid[i] = (uint8_t*)malloc(sizeof(uint8_t));
    	newAsteroid[i][0] = BLANK;	// blank spaces
    }

    // Insert the asteroid in the random row
	newAsteroid[randomRow][0] = asteroids[randomAsteroid];
   20644:	e0bffd03 	ldbu	r2,-12(fp)
   20648:	1085883a 	add	r2,r2,r2
   2064c:	1085883a 	add	r2,r2,r2
   20650:	1007883a 	mov	r3,r2
   20654:	e0bffc17 	ldw	r2,-16(fp)
   20658:	10c5883a 	add	r2,r2,r3
   2065c:	10800017 	ldw	r2,0(r2)
   20660:	e0fffa03 	ldbu	r3,-24(fp)
   20664:	e13ffd44 	addi	r4,fp,-11
   20668:	20c7883a 	add	r3,r4,r3
   2066c:	18c00003 	ldbu	r3,0(r3)
   20670:	10c00005 	stb	r3,0(r2)

	// Return the matrix
	return newAsteroid;
   20674:	e0bffc17 	ldw	r2,-16(fp)
}
   20678:	e6ffff04 	addi	sp,fp,-4
   2067c:	dfc00217 	ldw	ra,8(sp)
   20680:	df000117 	ldw	fp,4(sp)
   20684:	dc000017 	ldw	r16,0(sp)
   20688:	dec00304 	addi	sp,sp,12
   2068c:	f800283a 	ret

00020690 <free_array>:


// Call after the 2x1 array is done being used
void free_array(uint8_t** array){
   20690:	defffc04 	addi	sp,sp,-16
   20694:	dfc00315 	stw	ra,12(sp)
   20698:	df000215 	stw	fp,8(sp)
   2069c:	df000204 	addi	fp,sp,8
   206a0:	e13fff15 	stw	r4,-4(fp)
    // Don't forget to free the allocated memory
    for (int i = 0; i < 2; ++i) {
   206a4:	e03ffe15 	stw	zero,-8(fp)
   206a8:	00000c06 	br	206dc <free_array+0x4c>
        free(array[i]);
   206ac:	e0bffe17 	ldw	r2,-8(fp)
   206b0:	1085883a 	add	r2,r2,r2
   206b4:	1085883a 	add	r2,r2,r2
   206b8:	1007883a 	mov	r3,r2
   206bc:	e0bfff17 	ldw	r2,-4(fp)
   206c0:	10c5883a 	add	r2,r2,r3
   206c4:	10800017 	ldw	r2,0(r2)
   206c8:	1009883a 	mov	r4,r2
   206cc:	00219500 	call	21950 <free>


// Call after the 2x1 array is done being used
void free_array(uint8_t** array){
    // Don't forget to free the allocated memory
    for (int i = 0; i < 2; ++i) {
   206d0:	e0bffe17 	ldw	r2,-8(fp)
   206d4:	10800044 	addi	r2,r2,1
   206d8:	e0bffe15 	stw	r2,-8(fp)
   206dc:	e0bffe17 	ldw	r2,-8(fp)
   206e0:	10800090 	cmplti	r2,r2,2
   206e4:	103ff11e 	bne	r2,zero,206ac <__alt_data_end+0xfffe76ac>
        free(array[i]);
    }
    free(array);
   206e8:	e13fff17 	ldw	r4,-4(fp)
   206ec:	00219500 	call	21950 <free>
}
   206f0:	0001883a 	nop
   206f4:	e037883a 	mov	sp,fp
   206f8:	dfc00117 	ldw	ra,4(sp)
   206fc:	df000017 	ldw	fp,0(sp)
   20700:	dec00204 	addi	sp,sp,8
   20704:	f800283a 	ret

00020708 <update_matrix>:


// Shifts the game matrix to the left and adds a new column on the right
void update_matrix(void){
   20708:	defffb04 	addi	sp,sp,-20
   2070c:	dfc00415 	stw	ra,16(sp)
   20710:	df000315 	stw	fp,12(sp)
   20714:	df000304 	addi	fp,sp,12
	// Container for the new column
	uint8_t** new_col;
	static int count = 1; // Used as a timer to generate new asteroids to leave room for the player to dodge

	// Shift each value to the left
	for (int i = 0; i < LCD_ROWS; i++) {
   20718:	e03ffd15 	stw	zero,-12(fp)
   2071c:	00001c06 	br	20790 <update_matrix+0x88>
		for (int j = 0; j < LCD_COLS - 1; j++) {
   20720:	e03ffe15 	stw	zero,-8(fp)
   20724:	00001406 	br	20778 <update_matrix+0x70>
			game_matrix[i][j] = game_matrix[i][j + 1];
   20728:	e0bffe17 	ldw	r2,-8(fp)
   2072c:	10c00044 	addi	r3,r2,1
   20730:	008000b4 	movhi	r2,2
   20734:	109bf004 	addi	r2,r2,28608
   20738:	e13ffd17 	ldw	r4,-12(fp)
   2073c:	2008913a 	slli	r4,r4,4
   20740:	1105883a 	add	r2,r2,r4
   20744:	10c5883a 	add	r2,r2,r3
   20748:	10c00003 	ldbu	r3,0(r2)
   2074c:	008000b4 	movhi	r2,2
   20750:	109bf004 	addi	r2,r2,28608
   20754:	e13ffd17 	ldw	r4,-12(fp)
   20758:	2008913a 	slli	r4,r4,4
   2075c:	1109883a 	add	r4,r2,r4
   20760:	e0bffe17 	ldw	r2,-8(fp)
   20764:	2085883a 	add	r2,r4,r2
   20768:	10c00005 	stb	r3,0(r2)
	uint8_t** new_col;
	static int count = 1; // Used as a timer to generate new asteroids to leave room for the player to dodge

	// Shift each value to the left
	for (int i = 0; i < LCD_ROWS; i++) {
		for (int j = 0; j < LCD_COLS - 1; j++) {
   2076c:	e0bffe17 	ldw	r2,-8(fp)
   20770:	10800044 	addi	r2,r2,1
   20774:	e0bffe15 	stw	r2,-8(fp)
   20778:	e0bffe17 	ldw	r2,-8(fp)
   2077c:	108003d0 	cmplti	r2,r2,15
   20780:	103fe91e 	bne	r2,zero,20728 <__alt_data_end+0xfffe7728>
	// Container for the new column
	uint8_t** new_col;
	static int count = 1; // Used as a timer to generate new asteroids to leave room for the player to dodge

	// Shift each value to the left
	for (int i = 0; i < LCD_ROWS; i++) {
   20784:	e0bffd17 	ldw	r2,-12(fp)
   20788:	10800044 	addi	r2,r2,1
   2078c:	e0bffd15 	stw	r2,-12(fp)
   20790:	e0bffd17 	ldw	r2,-12(fp)
   20794:	10800090 	cmplti	r2,r2,2
   20798:	103fe11e 	bne	r2,zero,20720 <__alt_data_end+0xfffe7720>
			game_matrix[i][j] = game_matrix[i][j + 1];
		}
	}

	// Check if it is time to generate a new asteroid
	if(count <= 0){
   2079c:	d0a00117 	ldw	r2,-32764(gp)
   207a0:	00801e16 	blt	zero,r2,2081c <update_matrix+0x114>
		// Set the count again
		count = (rand() % 4) + 2;
   207a4:	00221880 	call	22188 <rand>
   207a8:	1007883a 	mov	r3,r2
   207ac:	00a00034 	movhi	r2,32768
   207b0:	108000c4 	addi	r2,r2,3
   207b4:	1884703a 	and	r2,r3,r2
   207b8:	1000040e 	bge	r2,zero,207cc <update_matrix+0xc4>
   207bc:	10bfffc4 	addi	r2,r2,-1
   207c0:	00ffff04 	movi	r3,-4
   207c4:	10c4b03a 	or	r2,r2,r3
   207c8:	10800044 	addi	r2,r2,1
   207cc:	10800084 	addi	r2,r2,2
   207d0:	d0a00115 	stw	r2,-32764(gp)

		// Get the new column with the asteroid
		new_col = createAsteroid();
   207d4:	002050c0 	call	2050c <createAsteroid>
   207d8:	e0bfff15 	stw	r2,-4(fp)
		game_matrix[0][LCD_COLS - 1] = new_col[0][0]; // update top right bit
   207dc:	e0bfff17 	ldw	r2,-4(fp)
   207e0:	10800017 	ldw	r2,0(r2)
   207e4:	10c00003 	ldbu	r3,0(r2)
   207e8:	008000b4 	movhi	r2,2
   207ec:	109bf004 	addi	r2,r2,28608
   207f0:	10c003c5 	stb	r3,15(r2)
		game_matrix[1][LCD_COLS - 1] = new_col[1][0]; // update bottom left bit
   207f4:	e0bfff17 	ldw	r2,-4(fp)
   207f8:	10800104 	addi	r2,r2,4
   207fc:	10800017 	ldw	r2,0(r2)
   20800:	10c00003 	ldbu	r3,0(r2)
   20804:	008000b4 	movhi	r2,2
   20808:	109bf004 	addi	r2,r2,28608
   2080c:	10c007c5 	stb	r3,31(r2)
		free_array(new_col); // Free the memory
   20810:	e13fff17 	ldw	r4,-4(fp)
   20814:	00206900 	call	20690 <free_array>
	} else {
		game_matrix[0][LCD_COLS - 1] = BLANK; // update top right bit
		game_matrix[1][LCD_COLS - 1] = BLANK; // update bottom right bit
		count--;
	}
}
   20818:	00000b06 	br	20848 <update_matrix+0x140>
		new_col = createAsteroid();
		game_matrix[0][LCD_COLS - 1] = new_col[0][0]; // update top right bit
		game_matrix[1][LCD_COLS - 1] = new_col[1][0]; // update bottom left bit
		free_array(new_col); // Free the memory
	} else {
		game_matrix[0][LCD_COLS - 1] = BLANK; // update top right bit
   2081c:	008000b4 	movhi	r2,2
   20820:	109bf004 	addi	r2,r2,28608
   20824:	00c00804 	movi	r3,32
   20828:	10c003c5 	stb	r3,15(r2)
		game_matrix[1][LCD_COLS - 1] = BLANK; // update bottom right bit
   2082c:	008000b4 	movhi	r2,2
   20830:	109bf004 	addi	r2,r2,28608
   20834:	00c00804 	movi	r3,32
   20838:	10c007c5 	stb	r3,31(r2)
		count--;
   2083c:	d0a00117 	ldw	r2,-32764(gp)
   20840:	10bfffc4 	addi	r2,r2,-1
   20844:	d0a00115 	stw	r2,-32764(gp)
	}
}
   20848:	0001883a 	nop
   2084c:	e037883a 	mov	sp,fp
   20850:	dfc00117 	ldw	ra,4(sp)
   20854:	df000017 	ldw	fp,0(sp)
   20858:	dec00204 	addi	sp,sp,8
   2085c:	f800283a 	ret

00020860 <draw_player>:


// Draws the player on the screen
void draw_player(uint8_t data){
   20860:	defffd04 	addi	sp,sp,-12
   20864:	dfc00215 	stw	ra,8(sp)
   20868:	df000115 	stw	fp,4(sp)
   2086c:	df000104 	addi	fp,sp,4
   20870:	2005883a 	mov	r2,r4
   20874:	e0bfff05 	stb	r2,-4(fp)
	// Sets the LCD address to the player location
	lcdSetAddr((~data) & 0x01, PLAYER_COLUMN);
   20878:	e0bfff03 	ldbu	r2,-4(fp)
   2087c:	1080004c 	andi	r2,r2,1
   20880:	1005003a 	cmpeq	r2,r2,zero
   20884:	10803fcc 	andi	r2,r2,255
   20888:	01400044 	movi	r5,1
   2088c:	1009883a 	mov	r4,r2
   20890:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(PLAYER);
   20894:	01003d84 	movi	r4,246
   20898:	00214100 	call	21410 <lcdWrite>
}
   2089c:	0001883a 	nop
   208a0:	e037883a 	mov	sp,fp
   208a4:	dfc00117 	ldw	ra,4(sp)
   208a8:	df000017 	ldw	fp,0(sp)
   208ac:	dec00204 	addi	sp,sp,8
   208b0:	f800283a 	ret

000208b4 <updatePlayer>:


// Update the player and check for collision with an asteroid
// Returns 0 if not hit, 1 if hit by an asteroid, and 2 if hit by a black hole
uint8_t updatePlayer(uint8_t data){
   208b4:	defffd04 	addi	sp,sp,-12
   208b8:	df000215 	stw	fp,8(sp)
   208bc:	df000204 	addi	fp,sp,8
   208c0:	2005883a 	mov	r2,r4
   208c4:	e0bfff05 	stb	r2,-4(fp)
	// Switch is backwards from the LCD (LCD 1 = lower row, switch 1 = upwards direction)
	uint8_t row = (~data) & 0x01;
   208c8:	e0bfff03 	ldbu	r2,-4(fp)
   208cc:	1080004c 	andi	r2,r2,1
   208d0:	1005003a 	cmpeq	r2,r2,zero
   208d4:	e0bffe05 	stb	r2,-8(fp)

	// Check if the player moved
	// Set the location of the player in the game matrix
	// Return collision status
	if(game_matrix[row][PLAYER_COLUMN] != BLANK){
   208d8:	e0fffe03 	ldbu	r3,-8(fp)
   208dc:	008000b4 	movhi	r2,2
   208e0:	109bf004 	addi	r2,r2,28608
   208e4:	1806913a 	slli	r3,r3,4
   208e8:	10c5883a 	add	r2,r2,r3
   208ec:	10800044 	addi	r2,r2,1
   208f0:	10800003 	ldbu	r2,0(r2)
   208f4:	10803fcc 	andi	r2,r2,255
   208f8:	10800820 	cmpeqi	r2,r2,32
   208fc:	10001e1e 	bne	r2,zero,20978 <updatePlayer+0xc4>
		// Check what the player was hit by
		if(game_matrix[row][PLAYER_COLUMN] == BLACK_HOLE){
   20900:	e0fffe03 	ldbu	r3,-8(fp)
   20904:	008000b4 	movhi	r2,2
   20908:	109bf004 	addi	r2,r2,28608
   2090c:	1806913a 	slli	r3,r3,4
   20910:	10c5883a 	add	r2,r2,r3
   20914:	10800044 	addi	r2,r2,1
   20918:	10800003 	ldbu	r2,0(r2)
   2091c:	10803fcc 	andi	r2,r2,255
   20920:	10803fd8 	cmpnei	r2,r2,255
   20924:	10000a1e 	bne	r2,zero,20950 <updatePlayer+0x9c>
			game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20928:	e0fffe03 	ldbu	r3,-8(fp)
   2092c:	008000b4 	movhi	r2,2
   20930:	109bf004 	addi	r2,r2,28608
   20934:	1806913a 	slli	r3,r3,4
   20938:	10c5883a 	add	r2,r2,r3
   2093c:	10800044 	addi	r2,r2,1
   20940:	00fffd84 	movi	r3,-10
   20944:	10c00005 	stb	r3,0(r2)
			return 0x02; // hit by a black hole
   20948:	00800084 	movi	r2,2
   2094c:	00001306 	br	2099c <updatePlayer+0xe8>
		} else {
			game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20950:	e0fffe03 	ldbu	r3,-8(fp)
   20954:	008000b4 	movhi	r2,2
   20958:	109bf004 	addi	r2,r2,28608
   2095c:	1806913a 	slli	r3,r3,4
   20960:	10c5883a 	add	r2,r2,r3
   20964:	10800044 	addi	r2,r2,1
   20968:	00fffd84 	movi	r3,-10
   2096c:	10c00005 	stb	r3,0(r2)
			return 0x01; // hit by an asteroid
   20970:	00800044 	movi	r2,1
   20974:	00000906 	br	2099c <updatePlayer+0xe8>
		}
	} else {
		game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20978:	e0fffe03 	ldbu	r3,-8(fp)
   2097c:	008000b4 	movhi	r2,2
   20980:	109bf004 	addi	r2,r2,28608
   20984:	1806913a 	slli	r3,r3,4
   20988:	10c5883a 	add	r2,r2,r3
   2098c:	10800044 	addi	r2,r2,1
   20990:	00fffd84 	movi	r3,-10
   20994:	10c00005 	stb	r3,0(r2)
		return 0x00; // not hit
   20998:	0005883a 	mov	r2,zero
	}
}
   2099c:	e037883a 	mov	sp,fp
   209a0:	df000017 	ldw	fp,0(sp)
   209a4:	dec00104 	addi	sp,sp,4
   209a8:	f800283a 	ret

000209ac <delayMs>:


// Delays in increments of 100 ms using the game timer
void delayMs(uint32_t milliseconds) {
   209ac:	defffc04 	addi	sp,sp,-16
   209b0:	dfc00315 	stw	ra,12(sp)
   209b4:	df000215 	stw	fp,8(sp)
   209b8:	df000204 	addi	fp,sp,8
   209bc:	e13fff15 	stw	r4,-4(fp)
	// Delay for the appropriate number of milliseconds
	for(uint32_t i = 100; i <= milliseconds; i += 100){
   209c0:	00801904 	movi	r2,100
   209c4:	e0bffe15 	stw	r2,-8(fp)
   209c8:	00000a06 	br	209f4 <delayMs+0x48>
		clearSema(GAME_TIMER);
   209cc:	01000044 	movi	r4,1
   209d0:	0020ee40 	call	20ee4 <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   209d4:	0001883a 	nop
   209d8:	01000044 	movi	r4,1
   209dc:	0020f2c0 	call	20f2c <getSema>
   209e0:	10803fcc 	andi	r2,r2,255
   209e4:	103ffc26 	beq	r2,zero,209d8 <__alt_data_end+0xfffe79d8>


// Delays in increments of 100 ms using the game timer
void delayMs(uint32_t milliseconds) {
	// Delay for the appropriate number of milliseconds
	for(uint32_t i = 100; i <= milliseconds; i += 100){
   209e8:	e0bffe17 	ldw	r2,-8(fp)
   209ec:	10801904 	addi	r2,r2,100
   209f0:	e0bffe15 	stw	r2,-8(fp)
   209f4:	e0bffe17 	ldw	r2,-8(fp)
   209f8:	e0ffff17 	ldw	r3,-4(fp)
   209fc:	18bff32e 	bgeu	r3,r2,209cc <__alt_data_end+0xfffe79cc>
		clearSema(GAME_TIMER);
		while(getSema(GAME_TIMER) == 0){};
	}
}
   20a00:	0001883a 	nop
   20a04:	e037883a 	mov	sp,fp
   20a08:	dfc00117 	ldw	ra,4(sp)
   20a0c:	df000017 	ldw	fp,0(sp)
   20a10:	dec00204 	addi	sp,sp,8
   20a14:	f800283a 	ret

00020a18 <death>:


// Handles the death of the player
void death(void){
   20a18:	defffa04 	addi	sp,sp,-24
   20a1c:	dfc00515 	stw	ra,20(sp)
   20a20:	df000415 	stw	fp,16(sp)
   20a24:	df000404 	addi	fp,sp,16
	// Check where player dies
	uint8_t row;
	if(game_matrix[0][PLAYER_COLUMN] == PLAYER)
   20a28:	008000b4 	movhi	r2,2
   20a2c:	109bf004 	addi	r2,r2,28608
   20a30:	10800043 	ldbu	r2,1(r2)
   20a34:	10803fcc 	andi	r2,r2,255
   20a38:	10803d98 	cmpnei	r2,r2,246
   20a3c:	1000021e 	bne	r2,zero,20a48 <death+0x30>
		row = 0;
   20a40:	e03ffc05 	stb	zero,-16(fp)
   20a44:	00000206 	br	20a50 <death+0x38>
	else
		row = 1;
   20a48:	00800044 	movi	r2,1
   20a4c:	e0bffc05 	stb	r2,-16(fp)

	// Play the death animation
	deathAnimation(row);
   20a50:	e0bffc03 	ldbu	r2,-16(fp)
   20a54:	1009883a 	mov	r4,r2
   20a58:	0020ba80 	call	20ba8 <deathAnimation>

	// Check number of lives remaining
	if(lives == 0){
   20a5c:	d0a00003 	ldbu	r2,-32768(gp)
   20a60:	10803fcc 	andi	r2,r2,255
   20a64:	1000021e 	bne	r2,zero,20a70 <death+0x58>
		gameOver(); // Never returns
   20a68:	0020b600 	call	20b60 <gameOver>

		// Draw the player
		uint8_t switch_data = readSwitch();
		draw_player(switch_data);
	}
}
   20a6c:	00003606 	br	20b48 <death+0x130>
	// Check number of lives remaining
	if(lives == 0){
		gameOver(); // Never returns
	} else {
		// Write the number of lives remaining to the LCD
		lcdClear();
   20a70:	00214d40 	call	214d4 <lcdClear>
		lcdSetAddr(0,4);
   20a74:	01400104 	movi	r5,4
   20a78:	0009883a 	mov	r4,zero
   20a7c:	00212b40 	call	212b4 <lcdSetAddr>
		lcdWriteStr("LIVES: \0");
   20a80:	010000b4 	movhi	r4,2
   20a84:	211bc304 	addi	r4,r4,28428
   20a88:	00213940 	call	21394 <lcdWriteStr>
		lcdWrite(lives+48);
   20a8c:	d0a00003 	ldbu	r2,-32768(gp)
   20a90:	10800c04 	addi	r2,r2,48
   20a94:	10803fcc 	andi	r2,r2,255
   20a98:	1009883a 	mov	r4,r2
   20a9c:	00214100 	call	21410 <lcdWrite>

		// Tell the player to press Key 2
		lcdSetAddr(1,0);
   20aa0:	000b883a 	mov	r5,zero
   20aa4:	01000044 	movi	r4,1
   20aa8:	00212b40 	call	212b4 <lcdSetAddr>
		lcdWriteStr("   PRESS KEY2   \0");
   20aac:	010000b4 	movhi	r4,2
   20ab0:	211bc604 	addi	r4,r4,28440
   20ab4:	00213940 	call	21394 <lcdWriteStr>

		// Wait until Key 2 is pressed
		while(readKey() == 1);
   20ab8:	0001883a 	nop
   20abc:	00210180 	call	21018 <readKey>
   20ac0:	10803fcc 	andi	r2,r2,255
   20ac4:	10800060 	cmpeqi	r2,r2,1
   20ac8:	103ffc1e 	bne	r2,zero,20abc <__alt_data_end+0xfffe7abc>

		// Clear the LCD and game matrix
		lcdClear();
   20acc:	00214d40 	call	214d4 <lcdClear>
		for(int i = 0; i < LCD_ROWS; i++){
   20ad0:	e03ffd15 	stw	zero,-12(fp)
   20ad4:	00001406 	br	20b28 <death+0x110>
			for(int j = 0; j < LCD_COLS; j++){
   20ad8:	e03ffe15 	stw	zero,-8(fp)
   20adc:	00000c06 	br	20b10 <death+0xf8>
				game_matrix[i][j] = BLANK;
   20ae0:	008000b4 	movhi	r2,2
   20ae4:	109bf004 	addi	r2,r2,28608
   20ae8:	e0fffd17 	ldw	r3,-12(fp)
   20aec:	1806913a 	slli	r3,r3,4
   20af0:	10c7883a 	add	r3,r2,r3
   20af4:	e0bffe17 	ldw	r2,-8(fp)
   20af8:	1885883a 	add	r2,r3,r2
   20afc:	00c00804 	movi	r3,32
   20b00:	10c00005 	stb	r3,0(r2)
		while(readKey() == 1);

		// Clear the LCD and game matrix
		lcdClear();
		for(int i = 0; i < LCD_ROWS; i++){
			for(int j = 0; j < LCD_COLS; j++){
   20b04:	e0bffe17 	ldw	r2,-8(fp)
   20b08:	10800044 	addi	r2,r2,1
   20b0c:	e0bffe15 	stw	r2,-8(fp)
   20b10:	e0bffe17 	ldw	r2,-8(fp)
   20b14:	10800410 	cmplti	r2,r2,16
   20b18:	103ff11e 	bne	r2,zero,20ae0 <__alt_data_end+0xfffe7ae0>
		// Wait until Key 2 is pressed
		while(readKey() == 1);

		// Clear the LCD and game matrix
		lcdClear();
		for(int i = 0; i < LCD_ROWS; i++){
   20b1c:	e0bffd17 	ldw	r2,-12(fp)
   20b20:	10800044 	addi	r2,r2,1
   20b24:	e0bffd15 	stw	r2,-12(fp)
   20b28:	e0bffd17 	ldw	r2,-12(fp)
   20b2c:	10800090 	cmplti	r2,r2,2
   20b30:	103fe91e 	bne	r2,zero,20ad8 <__alt_data_end+0xfffe7ad8>
				game_matrix[i][j] = BLANK;
			}
		}

		// Draw the player
		uint8_t switch_data = readSwitch();
   20b34:	0020ff00 	call	20ff0 <readSwitch>
   20b38:	e0bfff05 	stb	r2,-4(fp)
		draw_player(switch_data);
   20b3c:	e0bfff03 	ldbu	r2,-4(fp)
   20b40:	1009883a 	mov	r4,r2
   20b44:	00208600 	call	20860 <draw_player>
	}
}
   20b48:	0001883a 	nop
   20b4c:	e037883a 	mov	sp,fp
   20b50:	dfc00117 	ldw	ra,4(sp)
   20b54:	df000017 	ldw	fp,0(sp)
   20b58:	dec00204 	addi	sp,sp,8
   20b5c:	f800283a 	ret

00020b60 <gameOver>:


// Displays game over message and never returns
void gameOver(void){
   20b60:	defffe04 	addi	sp,sp,-8
   20b64:	dfc00115 	stw	ra,4(sp)
   20b68:	df000015 	stw	fp,0(sp)
   20b6c:	d839883a 	mov	fp,sp
	// Clear the LCD
	lcdClear();
   20b70:	00214d40 	call	214d4 <lcdClear>

	// Display game over message
	lcdSetAddr(0,4);
   20b74:	01400104 	movi	r5,4
   20b78:	0009883a 	mov	r4,zero
   20b7c:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWriteStr("GAMEOVER\0");
   20b80:	010000b4 	movhi	r4,2
   20b84:	211bcb04 	addi	r4,r4,28460
   20b88:	00213940 	call	21394 <lcdWriteStr>

	// Prompt the player to restart the board
	lcdSetAddr(1,1);
   20b8c:	01400044 	movi	r5,1
   20b90:	01000044 	movi	r4,1
   20b94:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWriteStr("KEY0 TO RESTART\0");
   20b98:	010000b4 	movhi	r4,2
   20b9c:	211bce04 	addi	r4,r4,28472
   20ba0:	00213940 	call	21394 <lcdWriteStr>

	// Wait forever
	while(1);
   20ba4:	003fff06 	br	20ba4 <__alt_data_end+0xfffe7ba4>

00020ba8 <deathAnimation>:
}


// Plays the death animation of the player on the LCD
void deathAnimation(uint8_t row){
   20ba8:	defffc04 	addi	sp,sp,-16
   20bac:	dfc00315 	stw	ra,12(sp)
   20bb0:	df000215 	stw	fp,8(sp)
   20bb4:	df000204 	addi	fp,sp,8
   20bb8:	2005883a 	mov	r2,r4
   20bbc:	e0bfff05 	stb	r2,-4(fp)
	uint32_t delay = 100;
   20bc0:	00801904 	movi	r2,100
   20bc4:	e0bffe15 	stw	r2,-8(fp)

	// Small
	lcdSetAddr(row,1);
   20bc8:	e0bfff03 	ldbu	r2,-4(fp)
   20bcc:	01400044 	movi	r5,1
   20bd0:	1009883a 	mov	r4,r2
   20bd4:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(0xA1);
   20bd8:	01002844 	movi	r4,161
   20bdc:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20be0:	e13ffe17 	ldw	r4,-8(fp)
   20be4:	00209ac0 	call	209ac <delayMs>
	// Medium
	lcdSetAddr(row,1);
   20be8:	e0bfff03 	ldbu	r2,-4(fp)
   20bec:	01400044 	movi	r5,1
   20bf0:	1009883a 	mov	r4,r2
   20bf4:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(0x6F);
   20bf8:	01001bc4 	movi	r4,111
   20bfc:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20c00:	e13ffe17 	ldw	r4,-8(fp)
   20c04:	00209ac0 	call	209ac <delayMs>
	// Large
	lcdSetAddr(row,1);
   20c08:	e0bfff03 	ldbu	r2,-4(fp)
   20c0c:	01400044 	movi	r5,1
   20c10:	1009883a 	mov	r4,r2
   20c14:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(0x4F);
   20c18:	010013c4 	movi	r4,79
   20c1c:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20c20:	e13ffe17 	ldw	r4,-8(fp)
   20c24:	00209ac0 	call	209ac <delayMs>
	// XL
	lcdSetAddr(row,1);
   20c28:	e0bfff03 	ldbu	r2,-4(fp)
   20c2c:	01400044 	movi	r5,1
   20c30:	1009883a 	mov	r4,r2
   20c34:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite('X');
   20c38:	01001604 	movi	r4,88
   20c3c:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20c40:	e13ffe17 	ldw	r4,-8(fp)
   20c44:	00209ac0 	call	209ac <delayMs>
	// Large
	lcdSetAddr(row,1);
   20c48:	e0bfff03 	ldbu	r2,-4(fp)
   20c4c:	01400044 	movi	r5,1
   20c50:	1009883a 	mov	r4,r2
   20c54:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(0x4F);
   20c58:	010013c4 	movi	r4,79
   20c5c:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20c60:	e13ffe17 	ldw	r4,-8(fp)
   20c64:	00209ac0 	call	209ac <delayMs>
	// Medium
	lcdSetAddr(row,1);
   20c68:	e0bfff03 	ldbu	r2,-4(fp)
   20c6c:	01400044 	movi	r5,1
   20c70:	1009883a 	mov	r4,r2
   20c74:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(0x6F);
   20c78:	01001bc4 	movi	r4,111
   20c7c:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20c80:	e13ffe17 	ldw	r4,-8(fp)
   20c84:	00209ac0 	call	209ac <delayMs>
	// Small
	lcdSetAddr(row,1);
   20c88:	e0bfff03 	ldbu	r2,-4(fp)
   20c8c:	01400044 	movi	r5,1
   20c90:	1009883a 	mov	r4,r2
   20c94:	00212b40 	call	212b4 <lcdSetAddr>
	lcdWrite(0xA1);
   20c98:	01002844 	movi	r4,161
   20c9c:	00214100 	call	21410 <lcdWrite>
	delayMs(delay);
   20ca0:	e13ffe17 	ldw	r4,-8(fp)
   20ca4:	00209ac0 	call	209ac <delayMs>
}
   20ca8:	0001883a 	nop
   20cac:	e037883a 	mov	sp,fp
   20cb0:	dfc00117 	ldw	ra,4(sp)
   20cb4:	df000017 	ldw	fp,0(sp)
   20cb8:	dec00204 	addi	sp,sp,8
   20cbc:	f800283a 	ret

00020cc0 <updateLCD>:


// Updates the LCD from the game matrix
void updateLCD(void){
   20cc0:	defff904 	addi	sp,sp,-28
   20cc4:	dfc00615 	stw	ra,24(sp)
   20cc8:	df000515 	stw	fp,20(sp)
   20ccc:	df000504 	addi	fp,sp,20
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK}
	};

	// Get what row the player is on in the current and previous matrices
	uint8_t newPlayerRow  = (game_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
   20cd0:	008000b4 	movhi	r2,2
   20cd4:	109bf004 	addi	r2,r2,28608
   20cd8:	10800043 	ldbu	r2,1(r2)
   20cdc:	10803fcc 	andi	r2,r2,255
   20ce0:	10803d98 	cmpnei	r2,r2,246
   20ce4:	e0bfff05 	stb	r2,-4(fp)
	uint8_t prevPlayerRow = (prev_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
   20ce8:	008000b4 	movhi	r2,2
   20cec:	109bf804 	addi	r2,r2,28640
   20cf0:	10800043 	ldbu	r2,1(r2)
   20cf4:	10803fcc 	andi	r2,r2,255
   20cf8:	10803d98 	cmpnei	r2,r2,246
   20cfc:	e0bfff45 	stb	r2,-3(fp)

	// Update the player first (this will look smoother)
	if(newPlayerRow != prevPlayerRow){
   20d00:	e0ffff03 	ldbu	r3,-4(fp)
   20d04:	e0bfff43 	ldbu	r2,-3(fp)
   20d08:	18800c26 	beq	r3,r2,20d3c <updateLCD+0x7c>
		// Write the new player to the LCD
		lcdSetAddr(newPlayerRow, PLAYER_COLUMN);
   20d0c:	e0bfff03 	ldbu	r2,-4(fp)
   20d10:	01400044 	movi	r5,1
   20d14:	1009883a 	mov	r4,r2
   20d18:	00212b40 	call	212b4 <lcdSetAddr>
		lcdWrite(PLAYER);
   20d1c:	01003d84 	movi	r4,246
   20d20:	00214100 	call	21410 <lcdWrite>

		// Clear previous player's image
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
   20d24:	e0bfff43 	ldbu	r2,-3(fp)
   20d28:	01400044 	movi	r5,1
   20d2c:	1009883a 	mov	r4,r2
   20d30:	00212b40 	call	212b4 <lcdSetAddr>
		lcdWrite(BLANK);
   20d34:	01000804 	movi	r4,32
   20d38:	00214100 	call	21410 <lcdWrite>
	}

	// Drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
   20d3c:	e03ffb15 	stw	zero,-20(fp)
   20d40:	00003f06 	br	20e40 <updateLCD+0x180>
		for(int j = 0; j < LCD_COLS; j++){
   20d44:	e03ffc15 	stw	zero,-16(fp)
   20d48:	00003706 	br	20e28 <updateLCD+0x168>
			uint8_t prev = prev_matrix[i][j];
   20d4c:	008000b4 	movhi	r2,2
   20d50:	109bf804 	addi	r2,r2,28640
   20d54:	e0fffb17 	ldw	r3,-20(fp)
   20d58:	1806913a 	slli	r3,r3,4
   20d5c:	10c7883a 	add	r3,r2,r3
   20d60:	e0bffc17 	ldw	r2,-16(fp)
   20d64:	1885883a 	add	r2,r3,r2
   20d68:	10800003 	ldbu	r2,0(r2)
   20d6c:	e0bfff85 	stb	r2,-2(fp)
			uint8_t new = game_matrix[i][j];
   20d70:	008000b4 	movhi	r2,2
   20d74:	109bf004 	addi	r2,r2,28608
   20d78:	e0fffb17 	ldw	r3,-20(fp)
   20d7c:	1806913a 	slli	r3,r3,4
   20d80:	10c7883a 	add	r3,r2,r3
   20d84:	e0bffc17 	ldw	r2,-16(fp)
   20d88:	1885883a 	add	r2,r3,r2
   20d8c:	10800003 	ldbu	r2,0(r2)
   20d90:	e0bfffc5 	stb	r2,-1(fp)

			// Player is already updated
			if(new == PLAYER){
   20d94:	e0bfffc3 	ldbu	r2,-1(fp)
   20d98:	10803d98 	cmpnei	r2,r2,246
   20d9c:	10001e26 	beq	r2,zero,20e18 <updateLCD+0x158>
				continue;
			}

			// If there is an asteroid
			if(new != BLANK){
   20da0:	e0bfffc3 	ldbu	r2,-1(fp)
   20da4:	10800820 	cmpeqi	r2,r2,32
   20da8:	10000b1e 	bne	r2,zero,20dd8 <updateLCD+0x118>
				// Draw asteroid
				lcdSetAddr(i, j);
   20dac:	e0bffb17 	ldw	r2,-20(fp)
   20db0:	10c03fcc 	andi	r3,r2,255
   20db4:	e0bffc17 	ldw	r2,-16(fp)
   20db8:	10803fcc 	andi	r2,r2,255
   20dbc:	100b883a 	mov	r5,r2
   20dc0:	1809883a 	mov	r4,r3
   20dc4:	00212b40 	call	212b4 <lcdSetAddr>
				lcdWrite(new);
   20dc8:	e0bfffc3 	ldbu	r2,-1(fp)
   20dcc:	1009883a 	mov	r4,r2
   20dd0:	00214100 	call	21410 <lcdWrite>
   20dd4:	00001106 	br	20e1c <updateLCD+0x15c>
			} else {
				// Check for old asteroids
				if(prev != BLANK && prev != PLAYER){
   20dd8:	e0bfff83 	ldbu	r2,-2(fp)
   20ddc:	10800820 	cmpeqi	r2,r2,32
   20de0:	10000e1e 	bne	r2,zero,20e1c <updateLCD+0x15c>
   20de4:	e0bfff83 	ldbu	r2,-2(fp)
   20de8:	10803da0 	cmpeqi	r2,r2,246
   20dec:	10000b1e 	bne	r2,zero,20e1c <updateLCD+0x15c>
					lcdSetAddr(i, j);
   20df0:	e0bffb17 	ldw	r2,-20(fp)
   20df4:	10c03fcc 	andi	r3,r2,255
   20df8:	e0bffc17 	ldw	r2,-16(fp)
   20dfc:	10803fcc 	andi	r2,r2,255
   20e00:	100b883a 	mov	r5,r2
   20e04:	1809883a 	mov	r4,r3
   20e08:	00212b40 	call	212b4 <lcdSetAddr>
					lcdWrite(BLANK);
   20e0c:	01000804 	movi	r4,32
   20e10:	00214100 	call	21410 <lcdWrite>
   20e14:	00000106 	br	20e1c <updateLCD+0x15c>
			uint8_t prev = prev_matrix[i][j];
			uint8_t new = game_matrix[i][j];

			// Player is already updated
			if(new == PLAYER){
				continue;
   20e18:	0001883a 	nop
		lcdWrite(BLANK);
	}

	// Drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
   20e1c:	e0bffc17 	ldw	r2,-16(fp)
   20e20:	10800044 	addi	r2,r2,1
   20e24:	e0bffc15 	stw	r2,-16(fp)
   20e28:	e0bffc17 	ldw	r2,-16(fp)
   20e2c:	10800410 	cmplti	r2,r2,16
   20e30:	103fc61e 	bne	r2,zero,20d4c <__alt_data_end+0xfffe7d4c>
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
		lcdWrite(BLANK);
	}

	// Drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
   20e34:	e0bffb17 	ldw	r2,-20(fp)
   20e38:	10800044 	addi	r2,r2,1
   20e3c:	e0bffb15 	stw	r2,-20(fp)
   20e40:	e0bffb17 	ldw	r2,-20(fp)
   20e44:	10800090 	cmplti	r2,r2,2
   20e48:	103fbe1e 	bne	r2,zero,20d44 <__alt_data_end+0xfffe7d44>
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
   20e4c:	e03ffd15 	stw	zero,-12(fp)
   20e50:	00001b06 	br	20ec0 <updateLCD+0x200>
		for(int j = 0; j < LCD_COLS; j++){
   20e54:	e03ffe15 	stw	zero,-8(fp)
   20e58:	00001306 	br	20ea8 <updateLCD+0x1e8>
			prev_matrix[i][j] = game_matrix[i][j];
   20e5c:	008000b4 	movhi	r2,2
   20e60:	109bf004 	addi	r2,r2,28608
   20e64:	e0fffd17 	ldw	r3,-12(fp)
   20e68:	1806913a 	slli	r3,r3,4
   20e6c:	10c7883a 	add	r3,r2,r3
   20e70:	e0bffe17 	ldw	r2,-8(fp)
   20e74:	1885883a 	add	r2,r3,r2
   20e78:	10c00003 	ldbu	r3,0(r2)
   20e7c:	008000b4 	movhi	r2,2
   20e80:	109bf804 	addi	r2,r2,28640
   20e84:	e13ffd17 	ldw	r4,-12(fp)
   20e88:	2008913a 	slli	r4,r4,4
   20e8c:	1109883a 	add	r4,r2,r4
   20e90:	e0bffe17 	ldw	r2,-8(fp)
   20e94:	2085883a 	add	r2,r4,r2
   20e98:	10c00005 	stb	r3,0(r2)
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
   20e9c:	e0bffe17 	ldw	r2,-8(fp)
   20ea0:	10800044 	addi	r2,r2,1
   20ea4:	e0bffe15 	stw	r2,-8(fp)
   20ea8:	e0bffe17 	ldw	r2,-8(fp)
   20eac:	10800410 	cmplti	r2,r2,16
   20eb0:	103fea1e 	bne	r2,zero,20e5c <__alt_data_end+0xfffe7e5c>
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
   20eb4:	e0bffd17 	ldw	r2,-12(fp)
   20eb8:	10800044 	addi	r2,r2,1
   20ebc:	e0bffd15 	stw	r2,-12(fp)
   20ec0:	e0bffd17 	ldw	r2,-12(fp)
   20ec4:	10800090 	cmplti	r2,r2,2
   20ec8:	103fe21e 	bne	r2,zero,20e54 <__alt_data_end+0xfffe7e54>
		for(int j = 0; j < LCD_COLS; j++){
			prev_matrix[i][j] = game_matrix[i][j];
		}
	}
}
   20ecc:	0001883a 	nop
   20ed0:	e037883a 	mov	sp,fp
   20ed4:	dfc00117 	ldw	ra,4(sp)
   20ed8:	df000017 	ldw	fp,0(sp)
   20edc:	dec00204 	addi	sp,sp,8
   20ee0:	f800283a 	ret

00020ee4 <clearSema>:
uint8_t lcdSema = 1;
uint8_t gameSema = 1;


// Clear the semaphore inputted
void clearSema(uint8_t timerNum){
   20ee4:	defffe04 	addi	sp,sp,-8
   20ee8:	df000115 	stw	fp,4(sp)
   20eec:	df000104 	addi	fp,sp,4
   20ef0:	2005883a 	mov	r2,r4
   20ef4:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20ef8:	e0bfff03 	ldbu	r2,-4(fp)
   20efc:	1000021e 	bne	r2,zero,20f08 <clearSema+0x24>
		lcdSema = 0;
   20f00:	d0200205 	stb	zero,-32760(gp)
	else if(timerNum == GAME_TIMER)
		gameSema = 0;
}
   20f04:	00000406 	br	20f18 <clearSema+0x34>

// Clear the semaphore inputted
void clearSema(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		lcdSema = 0;
	else if(timerNum == GAME_TIMER)
   20f08:	e0bfff03 	ldbu	r2,-4(fp)
   20f0c:	10800058 	cmpnei	r2,r2,1
   20f10:	1000011e 	bne	r2,zero,20f18 <clearSema+0x34>
		gameSema = 0;
   20f14:	d0200245 	stb	zero,-32759(gp)
}
   20f18:	0001883a 	nop
   20f1c:	e037883a 	mov	sp,fp
   20f20:	df000017 	ldw	fp,0(sp)
   20f24:	dec00104 	addi	sp,sp,4
   20f28:	f800283a 	ret

00020f2c <getSema>:


// Get the value of the semaphore inputted
uint8_t getSema(uint8_t timerNum){
   20f2c:	defffe04 	addi	sp,sp,-8
   20f30:	df000115 	stw	fp,4(sp)
   20f34:	df000104 	addi	fp,sp,4
   20f38:	2005883a 	mov	r2,r4
   20f3c:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20f40:	e0bfff03 	ldbu	r2,-4(fp)
   20f44:	1000021e 	bne	r2,zero,20f50 <getSema+0x24>
		return lcdSema;
   20f48:	d0a00203 	ldbu	r2,-32760(gp)
   20f4c:	00000606 	br	20f68 <getSema+0x3c>
	else if(timerNum == GAME_TIMER)
   20f50:	e0bfff03 	ldbu	r2,-4(fp)
   20f54:	10800058 	cmpnei	r2,r2,1
   20f58:	1000021e 	bne	r2,zero,20f64 <getSema+0x38>
		return gameSema;
   20f5c:	d0a00243 	ldbu	r2,-32759(gp)
   20f60:	00000106 	br	20f68 <getSema+0x3c>
	else
		return 0;
   20f64:	0005883a 	mov	r2,zero
}
   20f68:	e037883a 	mov	sp,fp
   20f6c:	df000017 	ldw	fp,0(sp)
   20f70:	dec00104 	addi	sp,sp,4
   20f74:	f800283a 	ret

00020f78 <handleGameTimer>:


// ISR for the game timer
void handleGameTimer(void* isr_context){
   20f78:	defffe04 	addi	sp,sp,-8
   20f7c:	df000115 	stw	fp,4(sp)
   20f80:	df000104 	addi	fp,sp,4
   20f84:	e13fff15 	stw	r4,-4(fp)
	// Set the game semaphore
	gameSema = 1;
   20f88:	00800044 	movi	r2,1
   20f8c:	d0a00245 	stb	r2,-32759(gp)

	// Acknowledge the interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_GAME_BASE, 0);
   20f90:	0007883a 	mov	r3,zero
   20f94:	00800134 	movhi	r2,4
   20f98:	10840804 	addi	r2,r2,4128
   20f9c:	10c00035 	stwio	r3,0(r2)
}
   20fa0:	0001883a 	nop
   20fa4:	e037883a 	mov	sp,fp
   20fa8:	df000017 	ldw	fp,0(sp)
   20fac:	dec00104 	addi	sp,sp,4
   20fb0:	f800283a 	ret

00020fb4 <handleLCDTimer>:


// ISR for the LCD timer
void handleLCDTimer(void* context){
   20fb4:	defffe04 	addi	sp,sp,-8
   20fb8:	df000115 	stw	fp,4(sp)
   20fbc:	df000104 	addi	fp,sp,4
   20fc0:	e13fff15 	stw	r4,-4(fp)
	// Set the LCD semaphore
	lcdSema = 1;
   20fc4:	00800044 	movi	r2,1
   20fc8:	d0a00205 	stb	r2,-32760(gp)

	// Acknowledge the interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_LCD_BASE, 0);
   20fcc:	0007883a 	mov	r3,zero
   20fd0:	00800134 	movhi	r2,4
   20fd4:	10840004 	addi	r2,r2,4096
   20fd8:	10c00035 	stwio	r3,0(r2)
}
   20fdc:	0001883a 	nop
   20fe0:	e037883a 	mov	sp,fp
   20fe4:	df000017 	ldw	fp,0(sp)
   20fe8:	dec00104 	addi	sp,sp,4
   20fec:	f800283a 	ret

00020ff0 <readSwitch>:


// Return the value of switch 17
uint8_t readSwitch(void){
   20ff0:	deffff04 	addi	sp,sp,-4
   20ff4:	df000015 	stw	fp,0(sp)
   20ff8:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   20ffc:	00800134 	movhi	r2,4
   21000:	10842004 	addi	r2,r2,4224
   21004:	10800037 	ldwio	r2,0(r2)
}
   21008:	e037883a 	mov	sp,fp
   2100c:	df000017 	ldw	fp,0(sp)
   21010:	dec00104 	addi	sp,sp,4
   21014:	f800283a 	ret

00021018 <readKey>:


// Return the value of key 2
uint8_t readKey(void){
   21018:	deffff04 	addi	sp,sp,-4
   2101c:	df000015 	stw	fp,0(sp)
   21020:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
   21024:	00800134 	movhi	r2,4
   21028:	10841804 	addi	r2,r2,4192
   2102c:	10800037 	ldwio	r2,0(r2)
}
   21030:	e037883a 	mov	sp,fp
   21034:	df000017 	ldw	fp,0(sp)
   21038:	dec00104 	addi	sp,sp,4
   2103c:	f800283a 	ret

00021040 <setLEDs>:


// Set the state of the LEDs
void setLEDs(uint8_t led_pattern){
   21040:	defffe04 	addi	sp,sp,-8
   21044:	df000115 	stw	fp,4(sp)
   21048:	df000104 	addi	fp,sp,4
   2104c:	2005883a 	mov	r2,r4
   21050:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (led_pattern&0x0F));
   21054:	e0bfff03 	ldbu	r2,-4(fp)
   21058:	10c003cc 	andi	r3,r2,15
   2105c:	00800134 	movhi	r2,4
   21060:	10841c04 	addi	r2,r2,4208
   21064:	10c00035 	stwio	r3,0(r2)
}
   21068:	0001883a 	nop
   2106c:	e037883a 	mov	sp,fp
   21070:	df000017 	ldw	fp,0(sp)
   21074:	dec00104 	addi	sp,sp,4
   21078:	f800283a 	ret

0002107c <setSevenSeg>:


// Set the state of the four seven segment displays
void setSevenSeg(uint32_t num){
   2107c:	defff804 	addi	sp,sp,-32
   21080:	dfc00715 	stw	ra,28(sp)
   21084:	df000615 	stw	fp,24(sp)
   21088:	df000604 	addi	fp,sp,24
   2108c:	e13fff15 	stw	r4,-4(fp)
	int ones, tens, hundreds, thousands;

	// Calculate the values of the ones, tens, hundreds, and thousands place
	ones = num % 10;
   21090:	e0bfff17 	ldw	r2,-4(fp)
   21094:	01400284 	movi	r5,10
   21098:	1009883a 	mov	r4,r2
   2109c:	00218bc0 	call	218bc <__umodsi3>
   210a0:	e0bffb15 	stw	r2,-20(fp)
	tens = (num/10) % 10;
   210a4:	e0bfff17 	ldw	r2,-4(fp)
   210a8:	01400284 	movi	r5,10
   210ac:	1009883a 	mov	r4,r2
   210b0:	00218580 	call	21858 <__udivsi3>
   210b4:	01400284 	movi	r5,10
   210b8:	1009883a 	mov	r4,r2
   210bc:	00218bc0 	call	218bc <__umodsi3>
   210c0:	e0bffc15 	stw	r2,-16(fp)
	hundreds = (num/100) % 10;
   210c4:	e0bfff17 	ldw	r2,-4(fp)
   210c8:	01401904 	movi	r5,100
   210cc:	1009883a 	mov	r4,r2
   210d0:	00218580 	call	21858 <__udivsi3>
   210d4:	01400284 	movi	r5,10
   210d8:	1009883a 	mov	r4,r2
   210dc:	00218bc0 	call	218bc <__umodsi3>
   210e0:	e0bffd15 	stw	r2,-12(fp)
	thousands = (num/1000) % 10;
   210e4:	e0bfff17 	ldw	r2,-4(fp)
   210e8:	0140fa04 	movi	r5,1000
   210ec:	1009883a 	mov	r4,r2
   210f0:	00218580 	call	21858 <__udivsi3>
   210f4:	01400284 	movi	r5,10
   210f8:	1009883a 	mov	r4,r2
   210fc:	00218bc0 	call	218bc <__umodsi3>
   21100:	e0bffe15 	stw	r2,-8(fp)

	// Set value for the GPIO register
	uint32_t hex_data = 0xFFFFFFFF;
   21104:	00bfffc4 	movi	r2,-1
   21108:	e0bffa15 	stw	r2,-24(fp)
	if(num > 999)
   2110c:	e0bfff17 	ldw	r2,-4(fp)
   21110:	1080fa30 	cmpltui	r2,r2,1000
   21114:	10000a1e 	bne	r2,zero,21140 <setSevenSeg+0xc4>
		hex_data &= HexArray[thousands];
   21118:	008000b4 	movhi	r2,2
   2111c:	109bda04 	addi	r2,r2,28520
   21120:	e0fffe17 	ldw	r3,-8(fp)
   21124:	18c7883a 	add	r3,r3,r3
   21128:	18c7883a 	add	r3,r3,r3
   2112c:	10c5883a 	add	r2,r2,r3
   21130:	10800017 	ldw	r2,0(r2)
   21134:	e0fffa17 	ldw	r3,-24(fp)
   21138:	1884703a 	and	r2,r3,r2
   2113c:	e0bffa15 	stw	r2,-24(fp)
	if(num > 99)
   21140:	e0bfff17 	ldw	r2,-4(fp)
   21144:	10801930 	cmpltui	r2,r2,100
   21148:	10000c1e 	bne	r2,zero,2117c <setSevenSeg+0x100>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[hundreds]);
   2114c:	e0bffa17 	ldw	r2,-24(fp)
   21150:	100491fa 	slli	r2,r2,7
   21154:	11001fd4 	ori	r4,r2,127
   21158:	008000b4 	movhi	r2,2
   2115c:	109bda04 	addi	r2,r2,28520
   21160:	e0fffd17 	ldw	r3,-12(fp)
   21164:	18c7883a 	add	r3,r3,r3
   21168:	18c7883a 	add	r3,r3,r3
   2116c:	10c5883a 	add	r2,r2,r3
   21170:	10800017 	ldw	r2,0(r2)
   21174:	2084703a 	and	r2,r4,r2
   21178:	e0bffa15 	stw	r2,-24(fp)
	if(num > 9)
   2117c:	e0bfff17 	ldw	r2,-4(fp)
   21180:	108002b0 	cmpltui	r2,r2,10
   21184:	10000c1e 	bne	r2,zero,211b8 <setSevenSeg+0x13c>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[tens]);
   21188:	e0bffa17 	ldw	r2,-24(fp)
   2118c:	100491fa 	slli	r2,r2,7
   21190:	11001fd4 	ori	r4,r2,127
   21194:	008000b4 	movhi	r2,2
   21198:	109bda04 	addi	r2,r2,28520
   2119c:	e0fffc17 	ldw	r3,-16(fp)
   211a0:	18c7883a 	add	r3,r3,r3
   211a4:	18c7883a 	add	r3,r3,r3
   211a8:	10c5883a 	add	r2,r2,r3
   211ac:	10800017 	ldw	r2,0(r2)
   211b0:	2084703a 	and	r2,r4,r2
   211b4:	e0bffa15 	stw	r2,-24(fp)

	hex_data = (((hex_data << 7) | 0x7F) & HexArray[ones]);
   211b8:	e0bffa17 	ldw	r2,-24(fp)
   211bc:	100491fa 	slli	r2,r2,7
   211c0:	11001fd4 	ori	r4,r2,127
   211c4:	008000b4 	movhi	r2,2
   211c8:	109bda04 	addi	r2,r2,28520
   211cc:	e0fffb17 	ldw	r3,-20(fp)
   211d0:	18c7883a 	add	r3,r3,r3
   211d4:	18c7883a 	add	r3,r3,r3
   211d8:	10c5883a 	add	r2,r2,r3
   211dc:	10800017 	ldw	r2,0(r2)
   211e0:	2084703a 	and	r2,r4,r2
   211e4:	e0bffa15 	stw	r2,-24(fp)

	// Display on the seven segment display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, hex_data);
   211e8:	e0fffa17 	ldw	r3,-24(fp)
   211ec:	00800134 	movhi	r2,4
   211f0:	10841404 	addi	r2,r2,4176
   211f4:	10c00035 	stwio	r3,0(r2)
}
   211f8:	0001883a 	nop
   211fc:	e037883a 	mov	sp,fp
   21200:	dfc00117 	ldw	ra,4(sp)
   21204:	df000017 	ldw	fp,0(sp)
   21208:	dec00204 	addi	sp,sp,8
   2120c:	f800283a 	ret

00021210 <lcdInit>:


// Initializes the LCD
void lcdInit(void){
   21210:	defffd04 	addi	sp,sp,-12
   21214:	dfc00215 	stw	ra,8(sp)
   21218:	df000115 	stw	fp,4(sp)
   2121c:	df000104 	addi	fp,sp,4
	// Set the LCD timer to 5 ms and start
	setTimer(LCD_TIMER,5000);
   21220:	0144e204 	movi	r5,5000
   21224:	0009883a 	mov	r4,zero
   21228:	00216800 	call	21680 <setTimer>
	startTimer(LCD_TIMER);
   2122c:	0009883a 	mov	r4,zero
   21230:	00215c00 	call	215c0 <startTimer>

	// Write each initialization command to the LCD
	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   21234:	e03fff15 	stw	zero,-4(fp)
   21238:	00001306 	br	21288 <lcdInit+0x78>
		while(lcdSema == 0){};
   2123c:	0001883a 	nop
   21240:	d0a00203 	ldbu	r2,-32760(gp)
   21244:	10803fcc 	andi	r2,r2,255
   21248:	103ffd26 	beq	r2,zero,21240 <__alt_data_end+0xfffe8240>
		lcdSema = 0;
   2124c:	d0200205 	stb	zero,-32760(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
   21250:	008000b4 	movhi	r2,2
   21254:	109bd304 	addi	r2,r2,28492
   21258:	e0ffff17 	ldw	r3,-4(fp)
   2125c:	18c7883a 	add	r3,r3,r3
   21260:	10c5883a 	add	r2,r2,r3
   21264:	1080000b 	ldhu	r2,0(r2)
   21268:	10bfffcc 	andi	r2,r2,65535
   2126c:	10c3ffcc 	andi	r3,r2,4095
   21270:	00800134 	movhi	r2,4
   21274:	10841004 	addi	r2,r2,4160
   21278:	10c00035 	stwio	r3,0(r2)
	// Set the LCD timer to 5 ms and start
	setTimer(LCD_TIMER,5000);
	startTimer(LCD_TIMER);

	// Write each initialization command to the LCD
	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   2127c:	e0bfff17 	ldw	r2,-4(fp)
   21280:	10800044 	addi	r2,r2,1
   21284:	e0bfff15 	stw	r2,-4(fp)
   21288:	e0bfff17 	ldw	r2,-4(fp)
   2128c:	10800390 	cmplti	r2,r2,14
   21290:	103fea1e 	bne	r2,zero,2123c <__alt_data_end+0xfffe823c>
		lcdSema = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
	}

	// Stop the timer once done
	stopTimer(LCD_TIMER);
   21294:	0009883a 	mov	r4,zero
   21298:	00216200 	call	21620 <stopTimer>
}
   2129c:	0001883a 	nop
   212a0:	e037883a 	mov	sp,fp
   212a4:	dfc00117 	ldw	ra,4(sp)
   212a8:	df000017 	ldw	fp,0(sp)
   212ac:	dec00204 	addi	sp,sp,8
   212b0:	f800283a 	ret

000212b4 <lcdSetAddr>:


// Sets the location of the LCD to write
void lcdSetAddr(uint8_t row, uint8_t col){
   212b4:	defffb04 	addi	sp,sp,-20
   212b8:	dfc00415 	stw	ra,16(sp)
   212bc:	df000315 	stw	fp,12(sp)
   212c0:	df000304 	addi	fp,sp,12
   212c4:	2007883a 	mov	r3,r4
   212c8:	2805883a 	mov	r2,r5
   212cc:	e0fffe05 	stb	r3,-8(fp)
   212d0:	e0bfff05 	stb	r2,-4(fp)
	// Create the command to send to the LCD
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   212d4:	e03ffd0d 	sth	zero,-12(fp)
	lcdData = row * 0x40 + col;
   212d8:	e0bffe03 	ldbu	r2,-8(fp)
   212dc:	100491ba 	slli	r2,r2,6
   212e0:	1007883a 	mov	r3,r2
   212e4:	e0bfff03 	ldbu	r2,-4(fp)
   212e8:	1885883a 	add	r2,r3,r2
   212ec:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x80;
   212f0:	e0bffd0b 	ldhu	r2,-12(fp)
   212f4:	10802014 	ori	r2,r2,128
   212f8:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x9 << 8;
   212fc:	e0bffd0b 	ldhu	r2,-12(fp)
   21300:	10824014 	ori	r2,r2,2304
   21304:	e0bffd0d 	sth	r2,-12(fp)

	// Set the timer to 1 ms and start
	setTimer(LCD_TIMER, 1000);
   21308:	0140fa04 	movi	r5,1000
   2130c:	0009883a 	mov	r4,zero
   21310:	00216800 	call	21680 <setTimer>
	startTimer(LCD_TIMER);
   21314:	0009883a 	mov	r4,zero
   21318:	00215c00 	call	215c0 <startTimer>

	// Wait for 1 ms (lcdSema set to 1 by the LCD timer
	lcdSema = 0;
   2131c:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21320:	0001883a 	nop
   21324:	d0a00203 	ldbu	r2,-32760(gp)
   21328:	10803fcc 	andi	r2,r2,255
   2132c:	103ffd26 	beq	r2,zero,21324 <__alt_data_end+0xfffe8324>

	// Write the data to the LCD
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   21330:	e0fffd0b 	ldhu	r3,-12(fp)
   21334:	00800134 	movhi	r2,4
   21338:	10841004 	addi	r2,r2,4160
   2133c:	10c00035 	stwio	r3,0(r2)

	// Clear the enable bit to create a falling edge
	lcdData &= ~0x0800;
   21340:	e0fffd0b 	ldhu	r3,-12(fp)
   21344:	00bdffc4 	movi	r2,-2049
   21348:	1884703a 	and	r2,r3,r2
   2134c:	e0bffd0d 	sth	r2,-12(fp)

	// Wait for 1 ms
	lcdSema = 0;
   21350:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21354:	0001883a 	nop
   21358:	d0a00203 	ldbu	r2,-32760(gp)
   2135c:	10803fcc 	andi	r2,r2,255
   21360:	103ffd26 	beq	r2,zero,21358 <__alt_data_end+0xfffe8358>

	// Write the data to the LCD
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   21364:	e0fffd0b 	ldhu	r3,-12(fp)
   21368:	00800134 	movhi	r2,4
   2136c:	10841004 	addi	r2,r2,4160
   21370:	10c00035 	stwio	r3,0(r2)

	// Stop the timer once done
	stopTimer(LCD_TIMER);
   21374:	0009883a 	mov	r4,zero
   21378:	00216200 	call	21620 <stopTimer>
}
   2137c:	0001883a 	nop
   21380:	e037883a 	mov	sp,fp
   21384:	dfc00117 	ldw	ra,4(sp)
   21388:	df000017 	ldw	fp,0(sp)
   2138c:	dec00204 	addi	sp,sp,8
   21390:	f800283a 	ret

00021394 <lcdWriteStr>:


// Writes a null-terminated string to the LCD
void lcdWriteStr(char str[]){
   21394:	defffc04 	addi	sp,sp,-16
   21398:	dfc00315 	stw	ra,12(sp)
   2139c:	df000215 	stw	fp,8(sp)
   213a0:	df000204 	addi	fp,sp,8
   213a4:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
   213a8:	e03ffe15 	stw	zero,-8(fp)

	// Write each character to the LCD
	while(str[i] != '\0'){
   213ac:	00000a06 	br	213d8 <lcdWriteStr+0x44>
		lcdWrite((uint8_t)str[i++]);
   213b0:	e0bffe17 	ldw	r2,-8(fp)
   213b4:	10c00044 	addi	r3,r2,1
   213b8:	e0fffe15 	stw	r3,-8(fp)
   213bc:	1007883a 	mov	r3,r2
   213c0:	e0bfff17 	ldw	r2,-4(fp)
   213c4:	10c5883a 	add	r2,r2,r3
   213c8:	10800003 	ldbu	r2,0(r2)
   213cc:	10803fcc 	andi	r2,r2,255
   213d0:	1009883a 	mov	r4,r2
   213d4:	00214100 	call	21410 <lcdWrite>
// Writes a null-terminated string to the LCD
void lcdWriteStr(char str[]){
	int i = 0;

	// Write each character to the LCD
	while(str[i] != '\0'){
   213d8:	e0bffe17 	ldw	r2,-8(fp)
   213dc:	e0ffff17 	ldw	r3,-4(fp)
   213e0:	1885883a 	add	r2,r3,r2
   213e4:	10800003 	ldbu	r2,0(r2)
   213e8:	10803fcc 	andi	r2,r2,255
   213ec:	1080201c 	xori	r2,r2,128
   213f0:	10bfe004 	addi	r2,r2,-128
   213f4:	103fee1e 	bne	r2,zero,213b0 <__alt_data_end+0xfffe83b0>
		lcdWrite((uint8_t)str[i++]);
	}
}
   213f8:	0001883a 	nop
   213fc:	e037883a 	mov	sp,fp
   21400:	dfc00117 	ldw	ra,4(sp)
   21404:	df000017 	ldw	fp,0(sp)
   21408:	dec00204 	addi	sp,sp,8
   2140c:	f800283a 	ret

00021410 <lcdWrite>:


// Writes a character to the LCD
void lcdWrite(uint8_t data){
   21410:	defffc04 	addi	sp,sp,-16
   21414:	dfc00315 	stw	ra,12(sp)
   21418:	df000215 	stw	fp,8(sp)
   2141c:	df000204 	addi	fp,sp,8
   21420:	2005883a 	mov	r2,r4
   21424:	e0bfff05 	stb	r2,-4(fp)
	// Create the command to write a character to the LCD
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   21428:	e03ffe0d 	sth	zero,-8(fp)
	lcdData |= data;
   2142c:	e0ffff03 	ldbu	r3,-4(fp)
   21430:	e0bffe0b 	ldhu	r2,-8(fp)
   21434:	1884b03a 	or	r2,r3,r2
   21438:	e0bffe0d 	sth	r2,-8(fp)
	lcdData |= 0xB << 8;
   2143c:	e0bffe0b 	ldhu	r2,-8(fp)
   21440:	1082c014 	ori	r2,r2,2816
   21444:	e0bffe0d 	sth	r2,-8(fp)

	// Set the timer to 1 ms and start the timer
	setTimer(LCD_TIMER, 1000);
   21448:	0140fa04 	movi	r5,1000
   2144c:	0009883a 	mov	r4,zero
   21450:	00216800 	call	21680 <setTimer>
	startTimer(LCD_TIMER);
   21454:	0009883a 	mov	r4,zero
   21458:	00215c00 	call	215c0 <startTimer>

	// Wait for 1 ms (set by the lcd timer
	lcdSema = 0;
   2145c:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21460:	0001883a 	nop
   21464:	d0a00203 	ldbu	r2,-32760(gp)
   21468:	10803fcc 	andi	r2,r2,255
   2146c:	103ffd26 	beq	r2,zero,21464 <__alt_data_end+0xfffe8464>

	// Write the data to the LCD
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   21470:	e0fffe0b 	ldhu	r3,-8(fp)
   21474:	00800134 	movhi	r2,4
   21478:	10841004 	addi	r2,r2,4160
   2147c:	10c00035 	stwio	r3,0(r2)

	// Clear the enable bit
	lcdData &= ~0x0800;
   21480:	e0fffe0b 	ldhu	r3,-8(fp)
   21484:	00bdffc4 	movi	r2,-2049
   21488:	1884703a 	and	r2,r3,r2
   2148c:	e0bffe0d 	sth	r2,-8(fp)

	// Wait for 1 ms (set by the LCD timer)
	lcdSema = 0;
   21490:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21494:	0001883a 	nop
   21498:	d0a00203 	ldbu	r2,-32760(gp)
   2149c:	10803fcc 	andi	r2,r2,255
   214a0:	103ffd26 	beq	r2,zero,21498 <__alt_data_end+0xfffe8498>

	// Waite the data to the LCD
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   214a4:	e0fffe0b 	ldhu	r3,-8(fp)
   214a8:	00800134 	movhi	r2,4
   214ac:	10841004 	addi	r2,r2,4160
   214b0:	10c00035 	stwio	r3,0(r2)

	// Stop the timer when done
	stopTimer(LCD_TIMER);
   214b4:	0009883a 	mov	r4,zero
   214b8:	00216200 	call	21620 <stopTimer>
}
   214bc:	0001883a 	nop
   214c0:	e037883a 	mov	sp,fp
   214c4:	dfc00117 	ldw	ra,4(sp)
   214c8:	df000017 	ldw	fp,0(sp)
   214cc:	dec00204 	addi	sp,sp,8
   214d0:	f800283a 	ret

000214d4 <lcdClear>:


// Clears the lcd
void lcdClear(){
   214d4:	defffe04 	addi	sp,sp,-8
   214d8:	dfc00115 	stw	ra,4(sp)
   214dc:	df000015 	stw	fp,0(sp)
   214e0:	d839883a 	mov	fp,sp
	// Set the timer to 1.52 ms
	setTimer(LCD_TIMER, 1520);
   214e4:	01417c04 	movi	r5,1520
   214e8:	0009883a 	mov	r4,zero
   214ec:	00216800 	call	21680 <setTimer>
	startTimer(LCD_TIMER);
   214f0:	0009883a 	mov	r4,zero
   214f4:	00215c00 	call	215c0 <startTimer>

	// Wait for 1.52 ms (set by the LCD semaphore)
	lcdSema = 0;
   214f8:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   214fc:	0001883a 	nop
   21500:	d0a00203 	ldbu	r2,-32760(gp)
   21504:	10803fcc 	andi	r2,r2,255
   21508:	103ffd26 	beq	r2,zero,21500 <__alt_data_end+0xfffe8500>

	// Send the command to clear (EN high)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x801);
   2150c:	00c20044 	movi	r3,2049
   21510:	00800134 	movhi	r2,4
   21514:	10841004 	addi	r2,r2,4160
   21518:	10c00035 	stwio	r3,0(r2)

	// Wait for 1.52 ms (set by the LCD semaphore)
	lcdSema = 0;
   2151c:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21520:	0001883a 	nop
   21524:	d0a00203 	ldbu	r2,-32760(gp)
   21528:	10803fcc 	andi	r2,r2,255
   2152c:	103ffd26 	beq	r2,zero,21524 <__alt_data_end+0xfffe8524>

	// Send the command to clear (EN low)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x001);
   21530:	00c00044 	movi	r3,1
   21534:	00800134 	movhi	r2,4
   21538:	10841004 	addi	r2,r2,4160
   2153c:	10c00035 	stwio	r3,0(r2)

	// Stop the timer when done
	stopTimer(LCD_TIMER);
   21540:	0009883a 	mov	r4,zero
   21544:	00216200 	call	21620 <stopTimer>
}
   21548:	0001883a 	nop
   2154c:	e037883a 	mov	sp,fp
   21550:	dfc00117 	ldw	ra,4(sp)
   21554:	df000017 	ldw	fp,0(sp)
   21558:	dec00204 	addi	sp,sp,8
   2155c:	f800283a 	ret

00021560 <initTimers>:


// Set the ISR's for the timers
void initTimers(void){
   21560:	defffd04 	addi	sp,sp,-12
   21564:	dfc00215 	stw	ra,8(sp)
   21568:	df000115 	stw	fp,4(sp)
   2156c:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(TIMER_GAME_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_GAME_IRQ, &handleGameTimer, NULL, NULL);
   21570:	d8000015 	stw	zero,0(sp)
   21574:	000f883a 	mov	r7,zero
   21578:	018000b4 	movhi	r6,2
   2157c:	3183de04 	addi	r6,r6,3960
   21580:	01400044 	movi	r5,1
   21584:	0009883a 	mov	r4,zero
   21588:	00227800 	call	22780 <alt_ic_isr_register>
	alt_ic_isr_register(TIMER_LCD_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_LCD_IRQ, &handleLCDTimer, NULL, NULL);
   2158c:	d8000015 	stw	zero,0(sp)
   21590:	000f883a 	mov	r7,zero
   21594:	018000b4 	movhi	r6,2
   21598:	3183ed04 	addi	r6,r6,4020
   2159c:	01400084 	movi	r5,2
   215a0:	0009883a 	mov	r4,zero
   215a4:	00227800 	call	22780 <alt_ic_isr_register>
}
   215a8:	0001883a 	nop
   215ac:	e037883a 	mov	sp,fp
   215b0:	dfc00117 	ldw	ra,4(sp)
   215b4:	df000017 	ldw	fp,0(sp)
   215b8:	dec00204 	addi	sp,sp,8
   215bc:	f800283a 	ret

000215c0 <startTimer>:


// Starts the corresponding timer
void startTimer(uint8_t timerNum){
   215c0:	defffe04 	addi	sp,sp,-8
   215c4:	df000115 	stw	fp,4(sp)
   215c8:	df000104 	addi	fp,sp,4
   215cc:	2005883a 	mov	r2,r4
   215d0:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   215d4:	e0bfff03 	ldbu	r2,-4(fp)
   215d8:	1000051e 	bne	r2,zero,215f0 <startTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
   215dc:	00c001c4 	movi	r3,7
   215e0:	00800134 	movhi	r2,4
   215e4:	10840104 	addi	r2,r2,4100
   215e8:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
}
   215ec:	00000706 	br	2160c <startTimer+0x4c>

// Starts the corresponding timer
void startTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
	else if(timerNum == GAME_TIMER)
   215f0:	e0bfff03 	ldbu	r2,-4(fp)
   215f4:	10800058 	cmpnei	r2,r2,1
   215f8:	1000041e 	bne	r2,zero,2160c <startTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
   215fc:	00c001c4 	movi	r3,7
   21600:	00800134 	movhi	r2,4
   21604:	10840904 	addi	r2,r2,4132
   21608:	10c00035 	stwio	r3,0(r2)
}
   2160c:	0001883a 	nop
   21610:	e037883a 	mov	sp,fp
   21614:	df000017 	ldw	fp,0(sp)
   21618:	dec00104 	addi	sp,sp,4
   2161c:	f800283a 	ret

00021620 <stopTimer>:


// Stops the corresponding timer
void stopTimer(uint8_t timerNum){
   21620:	defffe04 	addi	sp,sp,-8
   21624:	df000115 	stw	fp,4(sp)
   21628:	df000104 	addi	fp,sp,4
   2162c:	2005883a 	mov	r2,r4
   21630:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   21634:	e0bfff03 	ldbu	r2,-4(fp)
   21638:	1000051e 	bne	r2,zero,21650 <stopTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
   2163c:	00c002c4 	movi	r3,11
   21640:	00800134 	movhi	r2,4
   21644:	10840104 	addi	r2,r2,4100
   21648:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);

}
   2164c:	00000706 	br	2166c <stopTimer+0x4c>

// Stops the corresponding timer
void stopTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
	else if(timerNum == GAME_TIMER)
   21650:	e0bfff03 	ldbu	r2,-4(fp)
   21654:	10800058 	cmpnei	r2,r2,1
   21658:	1000041e 	bne	r2,zero,2166c <stopTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);
   2165c:	00c002c4 	movi	r3,11
   21660:	00800134 	movhi	r2,4
   21664:	10840904 	addi	r2,r2,4132
   21668:	10c00035 	stwio	r3,0(r2)

}
   2166c:	0001883a 	nop
   21670:	e037883a 	mov	sp,fp
   21674:	df000017 	ldw	fp,0(sp)
   21678:	dec00104 	addi	sp,sp,4
   2167c:	f800283a 	ret

00021680 <setTimer>:


// Sets the corresponding timer to a microsecond delay
void setTimer(uint8_t timerNum, uint32_t microsec){
   21680:	defffa04 	addi	sp,sp,-24
   21684:	dfc00515 	stw	ra,20(sp)
   21688:	df000415 	stw	fp,16(sp)
   2168c:	df000404 	addi	fp,sp,16
   21690:	2005883a 	mov	r2,r4
   21694:	e17fff15 	stw	r5,-4(fp)
   21698:	e0bffe05 	stb	r2,-8(fp)
	// Calculate the number of cycles to delay
	uint32_t cycles = millisToClock(microsec);
   2169c:	e13fff17 	ldw	r4,-4(fp)
   216a0:	002172c0 	call	2172c <millisToClock>
   216a4:	e0bffc15 	stw	r2,-16(fp)

	// Stores the timer delay to the upper and lower registers
	uint16_t lower = (uint16_t)(cycles&0x0000FFFF);
   216a8:	e0bffc17 	ldw	r2,-16(fp)
   216ac:	e0bffd0d 	sth	r2,-12(fp)
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);
   216b0:	e0bffc17 	ldw	r2,-16(fp)
   216b4:	1004d43a 	srli	r2,r2,16
   216b8:	e0bffd8d 	sth	r2,-10(fp)

	// Set the registers for the corresponding timer
	if(timerNum == LCD_TIMER){
   216bc:	e0bffe03 	ldbu	r2,-8(fp)
   216c0:	1000091e 	bne	r2,zero,216e8 <setTimer+0x68>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
   216c4:	e0fffd0b 	ldhu	r3,-12(fp)
   216c8:	00800134 	movhi	r2,4
   216cc:	10840204 	addi	r2,r2,4104
   216d0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
   216d4:	e0fffd8b 	ldhu	r3,-10(fp)
   216d8:	00800134 	movhi	r2,4
   216dc:	10840304 	addi	r2,r2,4108
   216e0:	10c00035 	stwio	r3,0(r2)
	}else if(timerNum == GAME_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
	}
}
   216e4:	00000b06 	br	21714 <setTimer+0x94>

	// Set the registers for the corresponding timer
	if(timerNum == LCD_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
	}else if(timerNum == GAME_TIMER){
   216e8:	e0bffe03 	ldbu	r2,-8(fp)
   216ec:	10800058 	cmpnei	r2,r2,1
   216f0:	1000081e 	bne	r2,zero,21714 <setTimer+0x94>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
   216f4:	e0fffd0b 	ldhu	r3,-12(fp)
   216f8:	00800134 	movhi	r2,4
   216fc:	10840a04 	addi	r2,r2,4136
   21700:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
   21704:	e0fffd8b 	ldhu	r3,-10(fp)
   21708:	00800134 	movhi	r2,4
   2170c:	10840b04 	addi	r2,r2,4140
   21710:	10c00035 	stwio	r3,0(r2)
	}
}
   21714:	0001883a 	nop
   21718:	e037883a 	mov	sp,fp
   2171c:	dfc00117 	ldw	ra,4(sp)
   21720:	df000017 	ldw	fp,0(sp)
   21724:	dec00204 	addi	sp,sp,8
   21728:	f800283a 	ret

0002172c <millisToClock>:


// Converts from milliseconds to clock cycles
uint32_t millisToClock(uint32_t microsec){
   2172c:	defffd04 	addi	sp,sp,-12
   21730:	dfc00215 	stw	ra,8(sp)
   21734:	df000115 	stw	fp,4(sp)
   21738:	df000104 	addi	fp,sp,4
   2173c:	e13fff15 	stw	r4,-4(fp)
	return CLOCK_FREQ / 1000000 * microsec;
   21740:	01400c84 	movi	r5,50
   21744:	e13fff17 	ldw	r4,-4(fp)
   21748:	00219140 	call	21914 <__mulsi3>
}
   2174c:	e037883a 	mov	sp,fp
   21750:	dfc00117 	ldw	ra,4(sp)
   21754:	df000017 	ldw	fp,0(sp)
   21758:	dec00204 	addi	sp,sp,8
   2175c:	f800283a 	ret

00021760 <__divsi3>:
   21760:	20001b16 	blt	r4,zero,217d0 <__divsi3+0x70>
   21764:	000f883a 	mov	r7,zero
   21768:	28001616 	blt	r5,zero,217c4 <__divsi3+0x64>
   2176c:	200d883a 	mov	r6,r4
   21770:	29001a2e 	bgeu	r5,r4,217dc <__divsi3+0x7c>
   21774:	00800804 	movi	r2,32
   21778:	00c00044 	movi	r3,1
   2177c:	00000106 	br	21784 <__divsi3+0x24>
   21780:	10000d26 	beq	r2,zero,217b8 <__divsi3+0x58>
   21784:	294b883a 	add	r5,r5,r5
   21788:	10bfffc4 	addi	r2,r2,-1
   2178c:	18c7883a 	add	r3,r3,r3
   21790:	293ffb36 	bltu	r5,r4,21780 <__alt_data_end+0xfffe8780>
   21794:	0005883a 	mov	r2,zero
   21798:	18000726 	beq	r3,zero,217b8 <__divsi3+0x58>
   2179c:	0005883a 	mov	r2,zero
   217a0:	31400236 	bltu	r6,r5,217ac <__divsi3+0x4c>
   217a4:	314dc83a 	sub	r6,r6,r5
   217a8:	10c4b03a 	or	r2,r2,r3
   217ac:	1806d07a 	srli	r3,r3,1
   217b0:	280ad07a 	srli	r5,r5,1
   217b4:	183ffa1e 	bne	r3,zero,217a0 <__alt_data_end+0xfffe87a0>
   217b8:	38000126 	beq	r7,zero,217c0 <__divsi3+0x60>
   217bc:	0085c83a 	sub	r2,zero,r2
   217c0:	f800283a 	ret
   217c4:	014bc83a 	sub	r5,zero,r5
   217c8:	39c0005c 	xori	r7,r7,1
   217cc:	003fe706 	br	2176c <__alt_data_end+0xfffe876c>
   217d0:	0109c83a 	sub	r4,zero,r4
   217d4:	01c00044 	movi	r7,1
   217d8:	003fe306 	br	21768 <__alt_data_end+0xfffe8768>
   217dc:	00c00044 	movi	r3,1
   217e0:	003fee06 	br	2179c <__alt_data_end+0xfffe879c>

000217e4 <__modsi3>:
   217e4:	20001716 	blt	r4,zero,21844 <__modsi3+0x60>
   217e8:	000f883a 	mov	r7,zero
   217ec:	2005883a 	mov	r2,r4
   217f0:	28001216 	blt	r5,zero,2183c <__modsi3+0x58>
   217f4:	2900162e 	bgeu	r5,r4,21850 <__modsi3+0x6c>
   217f8:	01800804 	movi	r6,32
   217fc:	00c00044 	movi	r3,1
   21800:	00000106 	br	21808 <__modsi3+0x24>
   21804:	30000a26 	beq	r6,zero,21830 <__modsi3+0x4c>
   21808:	294b883a 	add	r5,r5,r5
   2180c:	31bfffc4 	addi	r6,r6,-1
   21810:	18c7883a 	add	r3,r3,r3
   21814:	293ffb36 	bltu	r5,r4,21804 <__alt_data_end+0xfffe8804>
   21818:	18000526 	beq	r3,zero,21830 <__modsi3+0x4c>
   2181c:	1806d07a 	srli	r3,r3,1
   21820:	11400136 	bltu	r2,r5,21828 <__modsi3+0x44>
   21824:	1145c83a 	sub	r2,r2,r5
   21828:	280ad07a 	srli	r5,r5,1
   2182c:	183ffb1e 	bne	r3,zero,2181c <__alt_data_end+0xfffe881c>
   21830:	38000126 	beq	r7,zero,21838 <__modsi3+0x54>
   21834:	0085c83a 	sub	r2,zero,r2
   21838:	f800283a 	ret
   2183c:	014bc83a 	sub	r5,zero,r5
   21840:	003fec06 	br	217f4 <__alt_data_end+0xfffe87f4>
   21844:	0109c83a 	sub	r4,zero,r4
   21848:	01c00044 	movi	r7,1
   2184c:	003fe706 	br	217ec <__alt_data_end+0xfffe87ec>
   21850:	00c00044 	movi	r3,1
   21854:	003ff106 	br	2181c <__alt_data_end+0xfffe881c>

00021858 <__udivsi3>:
   21858:	200d883a 	mov	r6,r4
   2185c:	2900152e 	bgeu	r5,r4,218b4 <__udivsi3+0x5c>
   21860:	28001416 	blt	r5,zero,218b4 <__udivsi3+0x5c>
   21864:	00800804 	movi	r2,32
   21868:	00c00044 	movi	r3,1
   2186c:	00000206 	br	21878 <__udivsi3+0x20>
   21870:	10000e26 	beq	r2,zero,218ac <__udivsi3+0x54>
   21874:	28000516 	blt	r5,zero,2188c <__udivsi3+0x34>
   21878:	294b883a 	add	r5,r5,r5
   2187c:	10bfffc4 	addi	r2,r2,-1
   21880:	18c7883a 	add	r3,r3,r3
   21884:	293ffa36 	bltu	r5,r4,21870 <__alt_data_end+0xfffe8870>
   21888:	18000826 	beq	r3,zero,218ac <__udivsi3+0x54>
   2188c:	0005883a 	mov	r2,zero
   21890:	31400236 	bltu	r6,r5,2189c <__udivsi3+0x44>
   21894:	314dc83a 	sub	r6,r6,r5
   21898:	10c4b03a 	or	r2,r2,r3
   2189c:	1806d07a 	srli	r3,r3,1
   218a0:	280ad07a 	srli	r5,r5,1
   218a4:	183ffa1e 	bne	r3,zero,21890 <__alt_data_end+0xfffe8890>
   218a8:	f800283a 	ret
   218ac:	0005883a 	mov	r2,zero
   218b0:	f800283a 	ret
   218b4:	00c00044 	movi	r3,1
   218b8:	003ff406 	br	2188c <__alt_data_end+0xfffe888c>

000218bc <__umodsi3>:
   218bc:	2005883a 	mov	r2,r4
   218c0:	2900122e 	bgeu	r5,r4,2190c <__umodsi3+0x50>
   218c4:	28001116 	blt	r5,zero,2190c <__umodsi3+0x50>
   218c8:	01800804 	movi	r6,32
   218cc:	00c00044 	movi	r3,1
   218d0:	00000206 	br	218dc <__umodsi3+0x20>
   218d4:	30000c26 	beq	r6,zero,21908 <__umodsi3+0x4c>
   218d8:	28000516 	blt	r5,zero,218f0 <__umodsi3+0x34>
   218dc:	294b883a 	add	r5,r5,r5
   218e0:	31bfffc4 	addi	r6,r6,-1
   218e4:	18c7883a 	add	r3,r3,r3
   218e8:	293ffa36 	bltu	r5,r4,218d4 <__alt_data_end+0xfffe88d4>
   218ec:	18000626 	beq	r3,zero,21908 <__umodsi3+0x4c>
   218f0:	1806d07a 	srli	r3,r3,1
   218f4:	11400136 	bltu	r2,r5,218fc <__umodsi3+0x40>
   218f8:	1145c83a 	sub	r2,r2,r5
   218fc:	280ad07a 	srli	r5,r5,1
   21900:	183ffb1e 	bne	r3,zero,218f0 <__alt_data_end+0xfffe88f0>
   21904:	f800283a 	ret
   21908:	f800283a 	ret
   2190c:	00c00044 	movi	r3,1
   21910:	003ff706 	br	218f0 <__alt_data_end+0xfffe88f0>

00021914 <__mulsi3>:
   21914:	0005883a 	mov	r2,zero
   21918:	20000726 	beq	r4,zero,21938 <__mulsi3+0x24>
   2191c:	20c0004c 	andi	r3,r4,1
   21920:	2008d07a 	srli	r4,r4,1
   21924:	18000126 	beq	r3,zero,2192c <__mulsi3+0x18>
   21928:	1145883a 	add	r2,r2,r5
   2192c:	294b883a 	add	r5,r5,r5
   21930:	203ffa1e 	bne	r4,zero,2191c <__alt_data_end+0xfffe891c>
   21934:	f800283a 	ret
   21938:	f800283a 	ret

0002193c <malloc>:
   2193c:	008000f4 	movhi	r2,3
   21940:	10a29304 	addi	r2,r2,-30132
   21944:	200b883a 	mov	r5,r4
   21948:	11000017 	ldw	r4,0(r2)
   2194c:	00219641 	jmpi	21964 <_malloc_r>

00021950 <free>:
   21950:	008000f4 	movhi	r2,3
   21954:	10a29304 	addi	r2,r2,-30132
   21958:	200b883a 	mov	r5,r4
   2195c:	11000017 	ldw	r4,0(r2)
   21960:	00223641 	jmpi	22364 <_free_r>

00021964 <_malloc_r>:
   21964:	defff504 	addi	sp,sp,-44
   21968:	dc800315 	stw	r18,12(sp)
   2196c:	dfc00a15 	stw	ra,40(sp)
   21970:	df000915 	stw	fp,36(sp)
   21974:	ddc00815 	stw	r23,32(sp)
   21978:	dd800715 	stw	r22,28(sp)
   2197c:	dd400615 	stw	r21,24(sp)
   21980:	dd000515 	stw	r20,20(sp)
   21984:	dcc00415 	stw	r19,16(sp)
   21988:	dc400215 	stw	r17,8(sp)
   2198c:	dc000115 	stw	r16,4(sp)
   21990:	288002c4 	addi	r2,r5,11
   21994:	00c00584 	movi	r3,22
   21998:	2025883a 	mov	r18,r4
   2199c:	18807f2e 	bgeu	r3,r2,21b9c <_malloc_r+0x238>
   219a0:	047ffe04 	movi	r17,-8
   219a4:	1462703a 	and	r17,r2,r17
   219a8:	8800a316 	blt	r17,zero,21c38 <_malloc_r+0x2d4>
   219ac:	8940a236 	bltu	r17,r5,21c38 <_malloc_r+0x2d4>
   219b0:	0022b880 	call	22b88 <__malloc_lock>
   219b4:	00807dc4 	movi	r2,503
   219b8:	1441e92e 	bgeu	r2,r17,22160 <_malloc_r+0x7fc>
   219bc:	8804d27a 	srli	r2,r17,9
   219c0:	1000a126 	beq	r2,zero,21c48 <_malloc_r+0x2e4>
   219c4:	00c00104 	movi	r3,4
   219c8:	18811e36 	bltu	r3,r2,21e44 <_malloc_r+0x4e0>
   219cc:	8804d1ba 	srli	r2,r17,6
   219d0:	12000e44 	addi	r8,r2,57
   219d4:	11c00e04 	addi	r7,r2,56
   219d8:	4209883a 	add	r4,r8,r8
   219dc:	04c000b4 	movhi	r19,2
   219e0:	2109883a 	add	r4,r4,r4
   219e4:	9cdc0004 	addi	r19,r19,28672
   219e8:	2109883a 	add	r4,r4,r4
   219ec:	9909883a 	add	r4,r19,r4
   219f0:	24000117 	ldw	r16,4(r4)
   219f4:	213ffe04 	addi	r4,r4,-8
   219f8:	24009726 	beq	r4,r16,21c58 <_malloc_r+0x2f4>
   219fc:	80800117 	ldw	r2,4(r16)
   21a00:	01bfff04 	movi	r6,-4
   21a04:	014003c4 	movi	r5,15
   21a08:	1184703a 	and	r2,r2,r6
   21a0c:	1447c83a 	sub	r3,r2,r17
   21a10:	28c00716 	blt	r5,r3,21a30 <_malloc_r+0xcc>
   21a14:	1800920e 	bge	r3,zero,21c60 <_malloc_r+0x2fc>
   21a18:	84000317 	ldw	r16,12(r16)
   21a1c:	24008e26 	beq	r4,r16,21c58 <_malloc_r+0x2f4>
   21a20:	80800117 	ldw	r2,4(r16)
   21a24:	1184703a 	and	r2,r2,r6
   21a28:	1447c83a 	sub	r3,r2,r17
   21a2c:	28fff90e 	bge	r5,r3,21a14 <__alt_data_end+0xfffe8a14>
   21a30:	3809883a 	mov	r4,r7
   21a34:	018000b4 	movhi	r6,2
   21a38:	9c000417 	ldw	r16,16(r19)
   21a3c:	319c0004 	addi	r6,r6,28672
   21a40:	32000204 	addi	r8,r6,8
   21a44:	82013426 	beq	r16,r8,21f18 <_malloc_r+0x5b4>
   21a48:	80c00117 	ldw	r3,4(r16)
   21a4c:	00bfff04 	movi	r2,-4
   21a50:	188e703a 	and	r7,r3,r2
   21a54:	3c45c83a 	sub	r2,r7,r17
   21a58:	00c003c4 	movi	r3,15
   21a5c:	18811f16 	blt	r3,r2,21edc <_malloc_r+0x578>
   21a60:	32000515 	stw	r8,20(r6)
   21a64:	32000415 	stw	r8,16(r6)
   21a68:	10007f0e 	bge	r2,zero,21c68 <_malloc_r+0x304>
   21a6c:	00807fc4 	movi	r2,511
   21a70:	11c0fd36 	bltu	r2,r7,21e68 <_malloc_r+0x504>
   21a74:	3806d0fa 	srli	r3,r7,3
   21a78:	01c00044 	movi	r7,1
   21a7c:	30800117 	ldw	r2,4(r6)
   21a80:	19400044 	addi	r5,r3,1
   21a84:	294b883a 	add	r5,r5,r5
   21a88:	1807d0ba 	srai	r3,r3,2
   21a8c:	294b883a 	add	r5,r5,r5
   21a90:	294b883a 	add	r5,r5,r5
   21a94:	298b883a 	add	r5,r5,r6
   21a98:	38c6983a 	sll	r3,r7,r3
   21a9c:	29c00017 	ldw	r7,0(r5)
   21aa0:	2a7ffe04 	addi	r9,r5,-8
   21aa4:	1886b03a 	or	r3,r3,r2
   21aa8:	82400315 	stw	r9,12(r16)
   21aac:	81c00215 	stw	r7,8(r16)
   21ab0:	30c00115 	stw	r3,4(r6)
   21ab4:	2c000015 	stw	r16,0(r5)
   21ab8:	3c000315 	stw	r16,12(r7)
   21abc:	2005d0ba 	srai	r2,r4,2
   21ac0:	01400044 	movi	r5,1
   21ac4:	288a983a 	sll	r5,r5,r2
   21ac8:	19406f36 	bltu	r3,r5,21c88 <_malloc_r+0x324>
   21acc:	28c4703a 	and	r2,r5,r3
   21ad0:	10000a1e 	bne	r2,zero,21afc <_malloc_r+0x198>
   21ad4:	00bfff04 	movi	r2,-4
   21ad8:	294b883a 	add	r5,r5,r5
   21adc:	2088703a 	and	r4,r4,r2
   21ae0:	28c4703a 	and	r2,r5,r3
   21ae4:	21000104 	addi	r4,r4,4
   21ae8:	1000041e 	bne	r2,zero,21afc <_malloc_r+0x198>
   21aec:	294b883a 	add	r5,r5,r5
   21af0:	28c4703a 	and	r2,r5,r3
   21af4:	21000104 	addi	r4,r4,4
   21af8:	103ffc26 	beq	r2,zero,21aec <__alt_data_end+0xfffe8aec>
   21afc:	02bfff04 	movi	r10,-4
   21b00:	024003c4 	movi	r9,15
   21b04:	21800044 	addi	r6,r4,1
   21b08:	318d883a 	add	r6,r6,r6
   21b0c:	318d883a 	add	r6,r6,r6
   21b10:	318d883a 	add	r6,r6,r6
   21b14:	998d883a 	add	r6,r19,r6
   21b18:	333ffe04 	addi	r12,r6,-8
   21b1c:	2017883a 	mov	r11,r4
   21b20:	31800104 	addi	r6,r6,4
   21b24:	34000017 	ldw	r16,0(r6)
   21b28:	31fffd04 	addi	r7,r6,-12
   21b2c:	81c0041e 	bne	r16,r7,21b40 <_malloc_r+0x1dc>
   21b30:	0000fb06 	br	21f20 <_malloc_r+0x5bc>
   21b34:	1801030e 	bge	r3,zero,21f44 <_malloc_r+0x5e0>
   21b38:	84000317 	ldw	r16,12(r16)
   21b3c:	81c0f826 	beq	r16,r7,21f20 <_malloc_r+0x5bc>
   21b40:	80800117 	ldw	r2,4(r16)
   21b44:	1284703a 	and	r2,r2,r10
   21b48:	1447c83a 	sub	r3,r2,r17
   21b4c:	48fff90e 	bge	r9,r3,21b34 <__alt_data_end+0xfffe8b34>
   21b50:	80800317 	ldw	r2,12(r16)
   21b54:	81000217 	ldw	r4,8(r16)
   21b58:	89400054 	ori	r5,r17,1
   21b5c:	81400115 	stw	r5,4(r16)
   21b60:	20800315 	stw	r2,12(r4)
   21b64:	11000215 	stw	r4,8(r2)
   21b68:	8463883a 	add	r17,r16,r17
   21b6c:	9c400515 	stw	r17,20(r19)
   21b70:	9c400415 	stw	r17,16(r19)
   21b74:	18800054 	ori	r2,r3,1
   21b78:	88800115 	stw	r2,4(r17)
   21b7c:	8a000315 	stw	r8,12(r17)
   21b80:	8a000215 	stw	r8,8(r17)
   21b84:	88e3883a 	add	r17,r17,r3
   21b88:	88c00015 	stw	r3,0(r17)
   21b8c:	9009883a 	mov	r4,r18
   21b90:	0022bac0 	call	22bac <__malloc_unlock>
   21b94:	80800204 	addi	r2,r16,8
   21b98:	00001b06 	br	21c08 <_malloc_r+0x2a4>
   21b9c:	04400404 	movi	r17,16
   21ba0:	89402536 	bltu	r17,r5,21c38 <_malloc_r+0x2d4>
   21ba4:	0022b880 	call	22b88 <__malloc_lock>
   21ba8:	00800184 	movi	r2,6
   21bac:	01000084 	movi	r4,2
   21bb0:	04c000b4 	movhi	r19,2
   21bb4:	1085883a 	add	r2,r2,r2
   21bb8:	9cdc0004 	addi	r19,r19,28672
   21bbc:	1085883a 	add	r2,r2,r2
   21bc0:	9885883a 	add	r2,r19,r2
   21bc4:	14000117 	ldw	r16,4(r2)
   21bc8:	10fffe04 	addi	r3,r2,-8
   21bcc:	80c0d926 	beq	r16,r3,21f34 <_malloc_r+0x5d0>
   21bd0:	80c00117 	ldw	r3,4(r16)
   21bd4:	81000317 	ldw	r4,12(r16)
   21bd8:	00bfff04 	movi	r2,-4
   21bdc:	1884703a 	and	r2,r3,r2
   21be0:	81400217 	ldw	r5,8(r16)
   21be4:	8085883a 	add	r2,r16,r2
   21be8:	10c00117 	ldw	r3,4(r2)
   21bec:	29000315 	stw	r4,12(r5)
   21bf0:	21400215 	stw	r5,8(r4)
   21bf4:	18c00054 	ori	r3,r3,1
   21bf8:	10c00115 	stw	r3,4(r2)
   21bfc:	9009883a 	mov	r4,r18
   21c00:	0022bac0 	call	22bac <__malloc_unlock>
   21c04:	80800204 	addi	r2,r16,8
   21c08:	dfc00a17 	ldw	ra,40(sp)
   21c0c:	df000917 	ldw	fp,36(sp)
   21c10:	ddc00817 	ldw	r23,32(sp)
   21c14:	dd800717 	ldw	r22,28(sp)
   21c18:	dd400617 	ldw	r21,24(sp)
   21c1c:	dd000517 	ldw	r20,20(sp)
   21c20:	dcc00417 	ldw	r19,16(sp)
   21c24:	dc800317 	ldw	r18,12(sp)
   21c28:	dc400217 	ldw	r17,8(sp)
   21c2c:	dc000117 	ldw	r16,4(sp)
   21c30:	dec00b04 	addi	sp,sp,44
   21c34:	f800283a 	ret
   21c38:	00800304 	movi	r2,12
   21c3c:	90800015 	stw	r2,0(r18)
   21c40:	0005883a 	mov	r2,zero
   21c44:	003ff006 	br	21c08 <__alt_data_end+0xfffe8c08>
   21c48:	01002004 	movi	r4,128
   21c4c:	02001004 	movi	r8,64
   21c50:	01c00fc4 	movi	r7,63
   21c54:	003f6106 	br	219dc <__alt_data_end+0xfffe89dc>
   21c58:	4009883a 	mov	r4,r8
   21c5c:	003f7506 	br	21a34 <__alt_data_end+0xfffe8a34>
   21c60:	81000317 	ldw	r4,12(r16)
   21c64:	003fde06 	br	21be0 <__alt_data_end+0xfffe8be0>
   21c68:	81c5883a 	add	r2,r16,r7
   21c6c:	11400117 	ldw	r5,4(r2)
   21c70:	9009883a 	mov	r4,r18
   21c74:	29400054 	ori	r5,r5,1
   21c78:	11400115 	stw	r5,4(r2)
   21c7c:	0022bac0 	call	22bac <__malloc_unlock>
   21c80:	80800204 	addi	r2,r16,8
   21c84:	003fe006 	br	21c08 <__alt_data_end+0xfffe8c08>
   21c88:	9c000217 	ldw	r16,8(r19)
   21c8c:	00bfff04 	movi	r2,-4
   21c90:	85800117 	ldw	r22,4(r16)
   21c94:	b0ac703a 	and	r22,r22,r2
   21c98:	b4400336 	bltu	r22,r17,21ca8 <_malloc_r+0x344>
   21c9c:	b445c83a 	sub	r2,r22,r17
   21ca0:	00c003c4 	movi	r3,15
   21ca4:	18805d16 	blt	r3,r2,21e1c <_malloc_r+0x4b8>
   21ca8:	05c000f4 	movhi	r23,3
   21cac:	008000f4 	movhi	r2,3
   21cb0:	10a95004 	addi	r2,r2,-23232
   21cb4:	bde29004 	addi	r23,r23,-30144
   21cb8:	15400017 	ldw	r21,0(r2)
   21cbc:	b8c00017 	ldw	r3,0(r23)
   21cc0:	00bfffc4 	movi	r2,-1
   21cc4:	858d883a 	add	r6,r16,r22
   21cc8:	8d6b883a 	add	r21,r17,r21
   21ccc:	1880ea26 	beq	r3,r2,22078 <_malloc_r+0x714>
   21cd0:	ad4403c4 	addi	r21,r21,4111
   21cd4:	00bc0004 	movi	r2,-4096
   21cd8:	a8aa703a 	and	r21,r21,r2
   21cdc:	a80b883a 	mov	r5,r21
   21ce0:	9009883a 	mov	r4,r18
   21ce4:	d9800015 	stw	r6,0(sp)
   21ce8:	00221ec0 	call	221ec <_sbrk_r>
   21cec:	1029883a 	mov	r20,r2
   21cf0:	00bfffc4 	movi	r2,-1
   21cf4:	d9800017 	ldw	r6,0(sp)
   21cf8:	a080e826 	beq	r20,r2,2209c <_malloc_r+0x738>
   21cfc:	a180a636 	bltu	r20,r6,21f98 <_malloc_r+0x634>
   21d00:	070000f4 	movhi	fp,3
   21d04:	e7295904 	addi	fp,fp,-23196
   21d08:	e0800017 	ldw	r2,0(fp)
   21d0c:	a887883a 	add	r3,r21,r2
   21d10:	e0c00015 	stw	r3,0(fp)
   21d14:	3500e626 	beq	r6,r20,220b0 <_malloc_r+0x74c>
   21d18:	b9000017 	ldw	r4,0(r23)
   21d1c:	00bfffc4 	movi	r2,-1
   21d20:	2080ee26 	beq	r4,r2,220dc <_malloc_r+0x778>
   21d24:	a185c83a 	sub	r2,r20,r6
   21d28:	10c5883a 	add	r2,r2,r3
   21d2c:	e0800015 	stw	r2,0(fp)
   21d30:	a0c001cc 	andi	r3,r20,7
   21d34:	1800bc26 	beq	r3,zero,22028 <_malloc_r+0x6c4>
   21d38:	a0e9c83a 	sub	r20,r20,r3
   21d3c:	00840204 	movi	r2,4104
   21d40:	a5000204 	addi	r20,r20,8
   21d44:	10c7c83a 	sub	r3,r2,r3
   21d48:	a545883a 	add	r2,r20,r21
   21d4c:	1083ffcc 	andi	r2,r2,4095
   21d50:	18abc83a 	sub	r21,r3,r2
   21d54:	a80b883a 	mov	r5,r21
   21d58:	9009883a 	mov	r4,r18
   21d5c:	00221ec0 	call	221ec <_sbrk_r>
   21d60:	00ffffc4 	movi	r3,-1
   21d64:	10c0e126 	beq	r2,r3,220ec <_malloc_r+0x788>
   21d68:	1505c83a 	sub	r2,r2,r20
   21d6c:	1545883a 	add	r2,r2,r21
   21d70:	10800054 	ori	r2,r2,1
   21d74:	e0c00017 	ldw	r3,0(fp)
   21d78:	9d000215 	stw	r20,8(r19)
   21d7c:	a0800115 	stw	r2,4(r20)
   21d80:	a8c7883a 	add	r3,r21,r3
   21d84:	e0c00015 	stw	r3,0(fp)
   21d88:	84c00e26 	beq	r16,r19,21dc4 <_malloc_r+0x460>
   21d8c:	018003c4 	movi	r6,15
   21d90:	3580a72e 	bgeu	r6,r22,22030 <_malloc_r+0x6cc>
   21d94:	81400117 	ldw	r5,4(r16)
   21d98:	013ffe04 	movi	r4,-8
   21d9c:	b0bffd04 	addi	r2,r22,-12
   21da0:	1104703a 	and	r2,r2,r4
   21da4:	2900004c 	andi	r4,r5,1
   21da8:	2088b03a 	or	r4,r4,r2
   21dac:	81000115 	stw	r4,4(r16)
   21db0:	01400144 	movi	r5,5
   21db4:	8089883a 	add	r4,r16,r2
   21db8:	21400115 	stw	r5,4(r4)
   21dbc:	21400215 	stw	r5,8(r4)
   21dc0:	3080cd36 	bltu	r6,r2,220f8 <_malloc_r+0x794>
   21dc4:	008000f4 	movhi	r2,3
   21dc8:	10a94f04 	addi	r2,r2,-23236
   21dcc:	11000017 	ldw	r4,0(r2)
   21dd0:	20c0012e 	bgeu	r4,r3,21dd8 <_malloc_r+0x474>
   21dd4:	10c00015 	stw	r3,0(r2)
   21dd8:	008000f4 	movhi	r2,3
   21ddc:	10a94e04 	addi	r2,r2,-23240
   21de0:	11000017 	ldw	r4,0(r2)
   21de4:	9c000217 	ldw	r16,8(r19)
   21de8:	20c0012e 	bgeu	r4,r3,21df0 <_malloc_r+0x48c>
   21dec:	10c00015 	stw	r3,0(r2)
   21df0:	80c00117 	ldw	r3,4(r16)
   21df4:	00bfff04 	movi	r2,-4
   21df8:	1886703a 	and	r3,r3,r2
   21dfc:	1c45c83a 	sub	r2,r3,r17
   21e00:	1c400236 	bltu	r3,r17,21e0c <_malloc_r+0x4a8>
   21e04:	00c003c4 	movi	r3,15
   21e08:	18800416 	blt	r3,r2,21e1c <_malloc_r+0x4b8>
   21e0c:	9009883a 	mov	r4,r18
   21e10:	0022bac0 	call	22bac <__malloc_unlock>
   21e14:	0005883a 	mov	r2,zero
   21e18:	003f7b06 	br	21c08 <__alt_data_end+0xfffe8c08>
   21e1c:	88c00054 	ori	r3,r17,1
   21e20:	80c00115 	stw	r3,4(r16)
   21e24:	8463883a 	add	r17,r16,r17
   21e28:	10800054 	ori	r2,r2,1
   21e2c:	9c400215 	stw	r17,8(r19)
   21e30:	88800115 	stw	r2,4(r17)
   21e34:	9009883a 	mov	r4,r18
   21e38:	0022bac0 	call	22bac <__malloc_unlock>
   21e3c:	80800204 	addi	r2,r16,8
   21e40:	003f7106 	br	21c08 <__alt_data_end+0xfffe8c08>
   21e44:	00c00504 	movi	r3,20
   21e48:	18804a2e 	bgeu	r3,r2,21f74 <_malloc_r+0x610>
   21e4c:	00c01504 	movi	r3,84
   21e50:	18806e36 	bltu	r3,r2,2200c <_malloc_r+0x6a8>
   21e54:	8804d33a 	srli	r2,r17,12
   21e58:	12001bc4 	addi	r8,r2,111
   21e5c:	11c01b84 	addi	r7,r2,110
   21e60:	4209883a 	add	r4,r8,r8
   21e64:	003edd06 	br	219dc <__alt_data_end+0xfffe89dc>
   21e68:	3804d27a 	srli	r2,r7,9
   21e6c:	00c00104 	movi	r3,4
   21e70:	1880442e 	bgeu	r3,r2,21f84 <_malloc_r+0x620>
   21e74:	00c00504 	movi	r3,20
   21e78:	18808136 	bltu	r3,r2,22080 <_malloc_r+0x71c>
   21e7c:	11401704 	addi	r5,r2,92
   21e80:	10c016c4 	addi	r3,r2,91
   21e84:	294b883a 	add	r5,r5,r5
   21e88:	294b883a 	add	r5,r5,r5
   21e8c:	294b883a 	add	r5,r5,r5
   21e90:	994b883a 	add	r5,r19,r5
   21e94:	28800017 	ldw	r2,0(r5)
   21e98:	018000b4 	movhi	r6,2
   21e9c:	297ffe04 	addi	r5,r5,-8
   21ea0:	319c0004 	addi	r6,r6,28672
   21ea4:	28806526 	beq	r5,r2,2203c <_malloc_r+0x6d8>
   21ea8:	01bfff04 	movi	r6,-4
   21eac:	10c00117 	ldw	r3,4(r2)
   21eb0:	1986703a 	and	r3,r3,r6
   21eb4:	38c0022e 	bgeu	r7,r3,21ec0 <_malloc_r+0x55c>
   21eb8:	10800217 	ldw	r2,8(r2)
   21ebc:	28bffb1e 	bne	r5,r2,21eac <__alt_data_end+0xfffe8eac>
   21ec0:	11400317 	ldw	r5,12(r2)
   21ec4:	98c00117 	ldw	r3,4(r19)
   21ec8:	81400315 	stw	r5,12(r16)
   21ecc:	80800215 	stw	r2,8(r16)
   21ed0:	2c000215 	stw	r16,8(r5)
   21ed4:	14000315 	stw	r16,12(r2)
   21ed8:	003ef806 	br	21abc <__alt_data_end+0xfffe8abc>
   21edc:	88c00054 	ori	r3,r17,1
   21ee0:	80c00115 	stw	r3,4(r16)
   21ee4:	8463883a 	add	r17,r16,r17
   21ee8:	34400515 	stw	r17,20(r6)
   21eec:	34400415 	stw	r17,16(r6)
   21ef0:	10c00054 	ori	r3,r2,1
   21ef4:	8a000315 	stw	r8,12(r17)
   21ef8:	8a000215 	stw	r8,8(r17)
   21efc:	88c00115 	stw	r3,4(r17)
   21f00:	88a3883a 	add	r17,r17,r2
   21f04:	88800015 	stw	r2,0(r17)
   21f08:	9009883a 	mov	r4,r18
   21f0c:	0022bac0 	call	22bac <__malloc_unlock>
   21f10:	80800204 	addi	r2,r16,8
   21f14:	003f3c06 	br	21c08 <__alt_data_end+0xfffe8c08>
   21f18:	30c00117 	ldw	r3,4(r6)
   21f1c:	003ee706 	br	21abc <__alt_data_end+0xfffe8abc>
   21f20:	5ac00044 	addi	r11,r11,1
   21f24:	588000cc 	andi	r2,r11,3
   21f28:	31800204 	addi	r6,r6,8
   21f2c:	103efd1e 	bne	r2,zero,21b24 <__alt_data_end+0xfffe8b24>
   21f30:	00002406 	br	21fc4 <_malloc_r+0x660>
   21f34:	14000317 	ldw	r16,12(r2)
   21f38:	143f251e 	bne	r2,r16,21bd0 <__alt_data_end+0xfffe8bd0>
   21f3c:	21000084 	addi	r4,r4,2
   21f40:	003ebc06 	br	21a34 <__alt_data_end+0xfffe8a34>
   21f44:	8085883a 	add	r2,r16,r2
   21f48:	10c00117 	ldw	r3,4(r2)
   21f4c:	81000317 	ldw	r4,12(r16)
   21f50:	81400217 	ldw	r5,8(r16)
   21f54:	18c00054 	ori	r3,r3,1
   21f58:	10c00115 	stw	r3,4(r2)
   21f5c:	29000315 	stw	r4,12(r5)
   21f60:	21400215 	stw	r5,8(r4)
   21f64:	9009883a 	mov	r4,r18
   21f68:	0022bac0 	call	22bac <__malloc_unlock>
   21f6c:	80800204 	addi	r2,r16,8
   21f70:	003f2506 	br	21c08 <__alt_data_end+0xfffe8c08>
   21f74:	12001704 	addi	r8,r2,92
   21f78:	11c016c4 	addi	r7,r2,91
   21f7c:	4209883a 	add	r4,r8,r8
   21f80:	003e9606 	br	219dc <__alt_data_end+0xfffe89dc>
   21f84:	3804d1ba 	srli	r2,r7,6
   21f88:	11400e44 	addi	r5,r2,57
   21f8c:	10c00e04 	addi	r3,r2,56
   21f90:	294b883a 	add	r5,r5,r5
   21f94:	003fbc06 	br	21e88 <__alt_data_end+0xfffe8e88>
   21f98:	84ff5926 	beq	r16,r19,21d00 <__alt_data_end+0xfffe8d00>
   21f9c:	008000b4 	movhi	r2,2
   21fa0:	109c0004 	addi	r2,r2,28672
   21fa4:	14000217 	ldw	r16,8(r2)
   21fa8:	00bfff04 	movi	r2,-4
   21fac:	80c00117 	ldw	r3,4(r16)
   21fb0:	1886703a 	and	r3,r3,r2
   21fb4:	003f9106 	br	21dfc <__alt_data_end+0xfffe8dfc>
   21fb8:	60800217 	ldw	r2,8(r12)
   21fbc:	213fffc4 	addi	r4,r4,-1
   21fc0:	1300651e 	bne	r2,r12,22158 <_malloc_r+0x7f4>
   21fc4:	208000cc 	andi	r2,r4,3
   21fc8:	633ffe04 	addi	r12,r12,-8
   21fcc:	103ffa1e 	bne	r2,zero,21fb8 <__alt_data_end+0xfffe8fb8>
   21fd0:	98800117 	ldw	r2,4(r19)
   21fd4:	0146303a 	nor	r3,zero,r5
   21fd8:	1884703a 	and	r2,r3,r2
   21fdc:	98800115 	stw	r2,4(r19)
   21fe0:	294b883a 	add	r5,r5,r5
   21fe4:	117f2836 	bltu	r2,r5,21c88 <__alt_data_end+0xfffe8c88>
   21fe8:	283f2726 	beq	r5,zero,21c88 <__alt_data_end+0xfffe8c88>
   21fec:	2886703a 	and	r3,r5,r2
   21ff0:	5809883a 	mov	r4,r11
   21ff4:	183ec31e 	bne	r3,zero,21b04 <__alt_data_end+0xfffe8b04>
   21ff8:	294b883a 	add	r5,r5,r5
   21ffc:	2886703a 	and	r3,r5,r2
   22000:	21000104 	addi	r4,r4,4
   22004:	183ffc26 	beq	r3,zero,21ff8 <__alt_data_end+0xfffe8ff8>
   22008:	003ebe06 	br	21b04 <__alt_data_end+0xfffe8b04>
   2200c:	00c05504 	movi	r3,340
   22010:	18801236 	bltu	r3,r2,2205c <_malloc_r+0x6f8>
   22014:	8804d3fa 	srli	r2,r17,15
   22018:	12001e04 	addi	r8,r2,120
   2201c:	11c01dc4 	addi	r7,r2,119
   22020:	4209883a 	add	r4,r8,r8
   22024:	003e6d06 	br	219dc <__alt_data_end+0xfffe89dc>
   22028:	00c40004 	movi	r3,4096
   2202c:	003f4606 	br	21d48 <__alt_data_end+0xfffe8d48>
   22030:	00800044 	movi	r2,1
   22034:	a0800115 	stw	r2,4(r20)
   22038:	003f7406 	br	21e0c <__alt_data_end+0xfffe8e0c>
   2203c:	1805d0ba 	srai	r2,r3,2
   22040:	01c00044 	movi	r7,1
   22044:	30c00117 	ldw	r3,4(r6)
   22048:	388e983a 	sll	r7,r7,r2
   2204c:	2805883a 	mov	r2,r5
   22050:	38c6b03a 	or	r3,r7,r3
   22054:	30c00115 	stw	r3,4(r6)
   22058:	003f9b06 	br	21ec8 <__alt_data_end+0xfffe8ec8>
   2205c:	00c15504 	movi	r3,1364
   22060:	18801a36 	bltu	r3,r2,220cc <_malloc_r+0x768>
   22064:	8804d4ba 	srli	r2,r17,18
   22068:	12001f44 	addi	r8,r2,125
   2206c:	11c01f04 	addi	r7,r2,124
   22070:	4209883a 	add	r4,r8,r8
   22074:	003e5906 	br	219dc <__alt_data_end+0xfffe89dc>
   22078:	ad400404 	addi	r21,r21,16
   2207c:	003f1706 	br	21cdc <__alt_data_end+0xfffe8cdc>
   22080:	00c01504 	movi	r3,84
   22084:	18802336 	bltu	r3,r2,22114 <_malloc_r+0x7b0>
   22088:	3804d33a 	srli	r2,r7,12
   2208c:	11401bc4 	addi	r5,r2,111
   22090:	10c01b84 	addi	r3,r2,110
   22094:	294b883a 	add	r5,r5,r5
   22098:	003f7b06 	br	21e88 <__alt_data_end+0xfffe8e88>
   2209c:	9c000217 	ldw	r16,8(r19)
   220a0:	00bfff04 	movi	r2,-4
   220a4:	80c00117 	ldw	r3,4(r16)
   220a8:	1886703a 	and	r3,r3,r2
   220ac:	003f5306 	br	21dfc <__alt_data_end+0xfffe8dfc>
   220b0:	3083ffcc 	andi	r2,r6,4095
   220b4:	103f181e 	bne	r2,zero,21d18 <__alt_data_end+0xfffe8d18>
   220b8:	99000217 	ldw	r4,8(r19)
   220bc:	b545883a 	add	r2,r22,r21
   220c0:	10800054 	ori	r2,r2,1
   220c4:	20800115 	stw	r2,4(r4)
   220c8:	003f3e06 	br	21dc4 <__alt_data_end+0xfffe8dc4>
   220cc:	01003f84 	movi	r4,254
   220d0:	02001fc4 	movi	r8,127
   220d4:	01c01f84 	movi	r7,126
   220d8:	003e4006 	br	219dc <__alt_data_end+0xfffe89dc>
   220dc:	008000f4 	movhi	r2,3
   220e0:	10a29004 	addi	r2,r2,-30144
   220e4:	15000015 	stw	r20,0(r2)
   220e8:	003f1106 	br	21d30 <__alt_data_end+0xfffe8d30>
   220ec:	00800044 	movi	r2,1
   220f0:	002b883a 	mov	r21,zero
   220f4:	003f1f06 	br	21d74 <__alt_data_end+0xfffe8d74>
   220f8:	81400204 	addi	r5,r16,8
   220fc:	9009883a 	mov	r4,r18
   22100:	00223640 	call	22364 <_free_r>
   22104:	008000f4 	movhi	r2,3
   22108:	10a95904 	addi	r2,r2,-23196
   2210c:	10c00017 	ldw	r3,0(r2)
   22110:	003f2c06 	br	21dc4 <__alt_data_end+0xfffe8dc4>
   22114:	00c05504 	movi	r3,340
   22118:	18800536 	bltu	r3,r2,22130 <_malloc_r+0x7cc>
   2211c:	3804d3fa 	srli	r2,r7,15
   22120:	11401e04 	addi	r5,r2,120
   22124:	10c01dc4 	addi	r3,r2,119
   22128:	294b883a 	add	r5,r5,r5
   2212c:	003f5606 	br	21e88 <__alt_data_end+0xfffe8e88>
   22130:	00c15504 	movi	r3,1364
   22134:	18800536 	bltu	r3,r2,2214c <_malloc_r+0x7e8>
   22138:	3804d4ba 	srli	r2,r7,18
   2213c:	11401f44 	addi	r5,r2,125
   22140:	10c01f04 	addi	r3,r2,124
   22144:	294b883a 	add	r5,r5,r5
   22148:	003f4f06 	br	21e88 <__alt_data_end+0xfffe8e88>
   2214c:	01403f84 	movi	r5,254
   22150:	00c01f84 	movi	r3,126
   22154:	003f4c06 	br	21e88 <__alt_data_end+0xfffe8e88>
   22158:	98800117 	ldw	r2,4(r19)
   2215c:	003fa006 	br	21fe0 <__alt_data_end+0xfffe8fe0>
   22160:	8808d0fa 	srli	r4,r17,3
   22164:	20800044 	addi	r2,r4,1
   22168:	1085883a 	add	r2,r2,r2
   2216c:	003e9006 	br	21bb0 <__alt_data_end+0xfffe8bb0>

00022170 <srand>:
   22170:	008000f4 	movhi	r2,3
   22174:	10a29304 	addi	r2,r2,-30132
   22178:	10800017 	ldw	r2,0(r2)
   2217c:	11002915 	stw	r4,164(r2)
   22180:	10002a15 	stw	zero,168(r2)
   22184:	f800283a 	ret

00022188 <rand>:
   22188:	008000f4 	movhi	r2,3
   2218c:	defffe04 	addi	sp,sp,-8
   22190:	10a29304 	addi	r2,r2,-30132
   22194:	dc000015 	stw	r16,0(sp)
   22198:	14000017 	ldw	r16,0(r2)
   2219c:	dfc00115 	stw	ra,4(sp)
   221a0:	01932574 	movhi	r6,19605
   221a4:	81002917 	ldw	r4,164(r16)
   221a8:	81402a17 	ldw	r5,168(r16)
   221ac:	01d614b4 	movhi	r7,22610
   221b0:	319fcb44 	addi	r6,r6,32557
   221b4:	39fd0b44 	addi	r7,r7,-3027
   221b8:	00226740 	call	22674 <__muldi3>
   221bc:	11000044 	addi	r4,r2,1
   221c0:	2085803a 	cmpltu	r2,r4,r2
   221c4:	10c7883a 	add	r3,r2,r3
   221c8:	00a00034 	movhi	r2,32768
   221cc:	10bfffc4 	addi	r2,r2,-1
   221d0:	1884703a 	and	r2,r3,r2
   221d4:	81002915 	stw	r4,164(r16)
   221d8:	80c02a15 	stw	r3,168(r16)
   221dc:	dfc00117 	ldw	ra,4(sp)
   221e0:	dc000017 	ldw	r16,0(sp)
   221e4:	dec00204 	addi	sp,sp,8
   221e8:	f800283a 	ret

000221ec <_sbrk_r>:
   221ec:	defffd04 	addi	sp,sp,-12
   221f0:	dc000015 	stw	r16,0(sp)
   221f4:	040000f4 	movhi	r16,3
   221f8:	dc400115 	stw	r17,4(sp)
   221fc:	84295104 	addi	r16,r16,-23228
   22200:	2023883a 	mov	r17,r4
   22204:	2809883a 	mov	r4,r5
   22208:	dfc00215 	stw	ra,8(sp)
   2220c:	80000015 	stw	zero,0(r16)
   22210:	0022c0c0 	call	22c0c <sbrk>
   22214:	00ffffc4 	movi	r3,-1
   22218:	10c00526 	beq	r2,r3,22230 <_sbrk_r+0x44>
   2221c:	dfc00217 	ldw	ra,8(sp)
   22220:	dc400117 	ldw	r17,4(sp)
   22224:	dc000017 	ldw	r16,0(sp)
   22228:	dec00304 	addi	sp,sp,12
   2222c:	f800283a 	ret
   22230:	80c00017 	ldw	r3,0(r16)
   22234:	183ff926 	beq	r3,zero,2221c <__alt_data_end+0xfffe921c>
   22238:	88c00015 	stw	r3,0(r17)
   2223c:	003ff706 	br	2221c <__alt_data_end+0xfffe921c>

00022240 <_malloc_trim_r>:
   22240:	defffb04 	addi	sp,sp,-20
   22244:	dcc00315 	stw	r19,12(sp)
   22248:	04c000b4 	movhi	r19,2
   2224c:	dc800215 	stw	r18,8(sp)
   22250:	dc400115 	stw	r17,4(sp)
   22254:	dc000015 	stw	r16,0(sp)
   22258:	dfc00415 	stw	ra,16(sp)
   2225c:	2821883a 	mov	r16,r5
   22260:	9cdc0004 	addi	r19,r19,28672
   22264:	2025883a 	mov	r18,r4
   22268:	0022b880 	call	22b88 <__malloc_lock>
   2226c:	98800217 	ldw	r2,8(r19)
   22270:	14400117 	ldw	r17,4(r2)
   22274:	00bfff04 	movi	r2,-4
   22278:	88a2703a 	and	r17,r17,r2
   2227c:	8c21c83a 	sub	r16,r17,r16
   22280:	8403fbc4 	addi	r16,r16,4079
   22284:	8020d33a 	srli	r16,r16,12
   22288:	0083ffc4 	movi	r2,4095
   2228c:	843fffc4 	addi	r16,r16,-1
   22290:	8020933a 	slli	r16,r16,12
   22294:	1400060e 	bge	r2,r16,222b0 <_malloc_trim_r+0x70>
   22298:	000b883a 	mov	r5,zero
   2229c:	9009883a 	mov	r4,r18
   222a0:	00221ec0 	call	221ec <_sbrk_r>
   222a4:	98c00217 	ldw	r3,8(r19)
   222a8:	1c47883a 	add	r3,r3,r17
   222ac:	10c00a26 	beq	r2,r3,222d8 <_malloc_trim_r+0x98>
   222b0:	9009883a 	mov	r4,r18
   222b4:	0022bac0 	call	22bac <__malloc_unlock>
   222b8:	0005883a 	mov	r2,zero
   222bc:	dfc00417 	ldw	ra,16(sp)
   222c0:	dcc00317 	ldw	r19,12(sp)
   222c4:	dc800217 	ldw	r18,8(sp)
   222c8:	dc400117 	ldw	r17,4(sp)
   222cc:	dc000017 	ldw	r16,0(sp)
   222d0:	dec00504 	addi	sp,sp,20
   222d4:	f800283a 	ret
   222d8:	040bc83a 	sub	r5,zero,r16
   222dc:	9009883a 	mov	r4,r18
   222e0:	00221ec0 	call	221ec <_sbrk_r>
   222e4:	00ffffc4 	movi	r3,-1
   222e8:	10c00d26 	beq	r2,r3,22320 <_malloc_trim_r+0xe0>
   222ec:	00c000f4 	movhi	r3,3
   222f0:	18e95904 	addi	r3,r3,-23196
   222f4:	18800017 	ldw	r2,0(r3)
   222f8:	99000217 	ldw	r4,8(r19)
   222fc:	8c23c83a 	sub	r17,r17,r16
   22300:	8c400054 	ori	r17,r17,1
   22304:	1421c83a 	sub	r16,r2,r16
   22308:	24400115 	stw	r17,4(r4)
   2230c:	9009883a 	mov	r4,r18
   22310:	1c000015 	stw	r16,0(r3)
   22314:	0022bac0 	call	22bac <__malloc_unlock>
   22318:	00800044 	movi	r2,1
   2231c:	003fe706 	br	222bc <__alt_data_end+0xfffe92bc>
   22320:	000b883a 	mov	r5,zero
   22324:	9009883a 	mov	r4,r18
   22328:	00221ec0 	call	221ec <_sbrk_r>
   2232c:	99000217 	ldw	r4,8(r19)
   22330:	014003c4 	movi	r5,15
   22334:	1107c83a 	sub	r3,r2,r4
   22338:	28ffdd0e 	bge	r5,r3,222b0 <__alt_data_end+0xfffe92b0>
   2233c:	014000f4 	movhi	r5,3
   22340:	29629004 	addi	r5,r5,-30144
   22344:	29400017 	ldw	r5,0(r5)
   22348:	18c00054 	ori	r3,r3,1
   2234c:	20c00115 	stw	r3,4(r4)
   22350:	00c000f4 	movhi	r3,3
   22354:	1145c83a 	sub	r2,r2,r5
   22358:	18e95904 	addi	r3,r3,-23196
   2235c:	18800015 	stw	r2,0(r3)
   22360:	003fd306 	br	222b0 <__alt_data_end+0xfffe92b0>

00022364 <_free_r>:
   22364:	28004126 	beq	r5,zero,2246c <_free_r+0x108>
   22368:	defffd04 	addi	sp,sp,-12
   2236c:	dc400115 	stw	r17,4(sp)
   22370:	dc000015 	stw	r16,0(sp)
   22374:	2023883a 	mov	r17,r4
   22378:	2821883a 	mov	r16,r5
   2237c:	dfc00215 	stw	ra,8(sp)
   22380:	0022b880 	call	22b88 <__malloc_lock>
   22384:	81ffff17 	ldw	r7,-4(r16)
   22388:	00bfff84 	movi	r2,-2
   2238c:	010000b4 	movhi	r4,2
   22390:	81bffe04 	addi	r6,r16,-8
   22394:	3884703a 	and	r2,r7,r2
   22398:	211c0004 	addi	r4,r4,28672
   2239c:	308b883a 	add	r5,r6,r2
   223a0:	2a400117 	ldw	r9,4(r5)
   223a4:	22000217 	ldw	r8,8(r4)
   223a8:	00ffff04 	movi	r3,-4
   223ac:	48c6703a 	and	r3,r9,r3
   223b0:	2a005726 	beq	r5,r8,22510 <_free_r+0x1ac>
   223b4:	28c00115 	stw	r3,4(r5)
   223b8:	39c0004c 	andi	r7,r7,1
   223bc:	3800091e 	bne	r7,zero,223e4 <_free_r+0x80>
   223c0:	823ffe17 	ldw	r8,-8(r16)
   223c4:	22400204 	addi	r9,r4,8
   223c8:	320dc83a 	sub	r6,r6,r8
   223cc:	31c00217 	ldw	r7,8(r6)
   223d0:	1205883a 	add	r2,r2,r8
   223d4:	3a406526 	beq	r7,r9,2256c <_free_r+0x208>
   223d8:	32000317 	ldw	r8,12(r6)
   223dc:	3a000315 	stw	r8,12(r7)
   223e0:	41c00215 	stw	r7,8(r8)
   223e4:	28cf883a 	add	r7,r5,r3
   223e8:	39c00117 	ldw	r7,4(r7)
   223ec:	39c0004c 	andi	r7,r7,1
   223f0:	38003a26 	beq	r7,zero,224dc <_free_r+0x178>
   223f4:	10c00054 	ori	r3,r2,1
   223f8:	30c00115 	stw	r3,4(r6)
   223fc:	3087883a 	add	r3,r6,r2
   22400:	18800015 	stw	r2,0(r3)
   22404:	00c07fc4 	movi	r3,511
   22408:	18801936 	bltu	r3,r2,22470 <_free_r+0x10c>
   2240c:	1004d0fa 	srli	r2,r2,3
   22410:	01c00044 	movi	r7,1
   22414:	21400117 	ldw	r5,4(r4)
   22418:	10c00044 	addi	r3,r2,1
   2241c:	18c7883a 	add	r3,r3,r3
   22420:	1005d0ba 	srai	r2,r2,2
   22424:	18c7883a 	add	r3,r3,r3
   22428:	18c7883a 	add	r3,r3,r3
   2242c:	1907883a 	add	r3,r3,r4
   22430:	3884983a 	sll	r2,r7,r2
   22434:	19c00017 	ldw	r7,0(r3)
   22438:	1a3ffe04 	addi	r8,r3,-8
   2243c:	1144b03a 	or	r2,r2,r5
   22440:	32000315 	stw	r8,12(r6)
   22444:	31c00215 	stw	r7,8(r6)
   22448:	20800115 	stw	r2,4(r4)
   2244c:	19800015 	stw	r6,0(r3)
   22450:	39800315 	stw	r6,12(r7)
   22454:	8809883a 	mov	r4,r17
   22458:	dfc00217 	ldw	ra,8(sp)
   2245c:	dc400117 	ldw	r17,4(sp)
   22460:	dc000017 	ldw	r16,0(sp)
   22464:	dec00304 	addi	sp,sp,12
   22468:	0022bac1 	jmpi	22bac <__malloc_unlock>
   2246c:	f800283a 	ret
   22470:	100ad27a 	srli	r5,r2,9
   22474:	00c00104 	movi	r3,4
   22478:	19404a36 	bltu	r3,r5,225a4 <_free_r+0x240>
   2247c:	100ad1ba 	srli	r5,r2,6
   22480:	28c00e44 	addi	r3,r5,57
   22484:	18c7883a 	add	r3,r3,r3
   22488:	29400e04 	addi	r5,r5,56
   2248c:	18c7883a 	add	r3,r3,r3
   22490:	18c7883a 	add	r3,r3,r3
   22494:	1909883a 	add	r4,r3,r4
   22498:	20c00017 	ldw	r3,0(r4)
   2249c:	01c000b4 	movhi	r7,2
   224a0:	213ffe04 	addi	r4,r4,-8
   224a4:	39dc0004 	addi	r7,r7,28672
   224a8:	20c04426 	beq	r4,r3,225bc <_free_r+0x258>
   224ac:	01ffff04 	movi	r7,-4
   224b0:	19400117 	ldw	r5,4(r3)
   224b4:	29ca703a 	and	r5,r5,r7
   224b8:	1140022e 	bgeu	r2,r5,224c4 <_free_r+0x160>
   224bc:	18c00217 	ldw	r3,8(r3)
   224c0:	20fffb1e 	bne	r4,r3,224b0 <__alt_data_end+0xfffe94b0>
   224c4:	19000317 	ldw	r4,12(r3)
   224c8:	31000315 	stw	r4,12(r6)
   224cc:	30c00215 	stw	r3,8(r6)
   224d0:	21800215 	stw	r6,8(r4)
   224d4:	19800315 	stw	r6,12(r3)
   224d8:	003fde06 	br	22454 <__alt_data_end+0xfffe9454>
   224dc:	29c00217 	ldw	r7,8(r5)
   224e0:	10c5883a 	add	r2,r2,r3
   224e4:	00c000b4 	movhi	r3,2
   224e8:	18dc0204 	addi	r3,r3,28680
   224ec:	38c03b26 	beq	r7,r3,225dc <_free_r+0x278>
   224f0:	2a000317 	ldw	r8,12(r5)
   224f4:	11400054 	ori	r5,r2,1
   224f8:	3087883a 	add	r3,r6,r2
   224fc:	3a000315 	stw	r8,12(r7)
   22500:	41c00215 	stw	r7,8(r8)
   22504:	31400115 	stw	r5,4(r6)
   22508:	18800015 	stw	r2,0(r3)
   2250c:	003fbd06 	br	22404 <__alt_data_end+0xfffe9404>
   22510:	39c0004c 	andi	r7,r7,1
   22514:	10c5883a 	add	r2,r2,r3
   22518:	3800071e 	bne	r7,zero,22538 <_free_r+0x1d4>
   2251c:	81fffe17 	ldw	r7,-8(r16)
   22520:	31cdc83a 	sub	r6,r6,r7
   22524:	30c00317 	ldw	r3,12(r6)
   22528:	31400217 	ldw	r5,8(r6)
   2252c:	11c5883a 	add	r2,r2,r7
   22530:	28c00315 	stw	r3,12(r5)
   22534:	19400215 	stw	r5,8(r3)
   22538:	10c00054 	ori	r3,r2,1
   2253c:	30c00115 	stw	r3,4(r6)
   22540:	00c000f4 	movhi	r3,3
   22544:	18e29104 	addi	r3,r3,-30140
   22548:	18c00017 	ldw	r3,0(r3)
   2254c:	21800215 	stw	r6,8(r4)
   22550:	10ffc036 	bltu	r2,r3,22454 <__alt_data_end+0xfffe9454>
   22554:	008000f4 	movhi	r2,3
   22558:	10a95004 	addi	r2,r2,-23232
   2255c:	11400017 	ldw	r5,0(r2)
   22560:	8809883a 	mov	r4,r17
   22564:	00222400 	call	22240 <_malloc_trim_r>
   22568:	003fba06 	br	22454 <__alt_data_end+0xfffe9454>
   2256c:	28c9883a 	add	r4,r5,r3
   22570:	21000117 	ldw	r4,4(r4)
   22574:	2100004c 	andi	r4,r4,1
   22578:	2000391e 	bne	r4,zero,22660 <_free_r+0x2fc>
   2257c:	29c00217 	ldw	r7,8(r5)
   22580:	29000317 	ldw	r4,12(r5)
   22584:	1885883a 	add	r2,r3,r2
   22588:	10c00054 	ori	r3,r2,1
   2258c:	39000315 	stw	r4,12(r7)
   22590:	21c00215 	stw	r7,8(r4)
   22594:	30c00115 	stw	r3,4(r6)
   22598:	308d883a 	add	r6,r6,r2
   2259c:	30800015 	stw	r2,0(r6)
   225a0:	003fac06 	br	22454 <__alt_data_end+0xfffe9454>
   225a4:	00c00504 	movi	r3,20
   225a8:	19401536 	bltu	r3,r5,22600 <_free_r+0x29c>
   225ac:	28c01704 	addi	r3,r5,92
   225b0:	18c7883a 	add	r3,r3,r3
   225b4:	294016c4 	addi	r5,r5,91
   225b8:	003fb406 	br	2248c <__alt_data_end+0xfffe948c>
   225bc:	280bd0ba 	srai	r5,r5,2
   225c0:	00c00044 	movi	r3,1
   225c4:	38800117 	ldw	r2,4(r7)
   225c8:	194a983a 	sll	r5,r3,r5
   225cc:	2007883a 	mov	r3,r4
   225d0:	2884b03a 	or	r2,r5,r2
   225d4:	38800115 	stw	r2,4(r7)
   225d8:	003fbb06 	br	224c8 <__alt_data_end+0xfffe94c8>
   225dc:	21800515 	stw	r6,20(r4)
   225e0:	21800415 	stw	r6,16(r4)
   225e4:	10c00054 	ori	r3,r2,1
   225e8:	31c00315 	stw	r7,12(r6)
   225ec:	31c00215 	stw	r7,8(r6)
   225f0:	30c00115 	stw	r3,4(r6)
   225f4:	308d883a 	add	r6,r6,r2
   225f8:	30800015 	stw	r2,0(r6)
   225fc:	003f9506 	br	22454 <__alt_data_end+0xfffe9454>
   22600:	00c01504 	movi	r3,84
   22604:	19400536 	bltu	r3,r5,2261c <_free_r+0x2b8>
   22608:	100ad33a 	srli	r5,r2,12
   2260c:	28c01bc4 	addi	r3,r5,111
   22610:	18c7883a 	add	r3,r3,r3
   22614:	29401b84 	addi	r5,r5,110
   22618:	003f9c06 	br	2248c <__alt_data_end+0xfffe948c>
   2261c:	00c05504 	movi	r3,340
   22620:	19400536 	bltu	r3,r5,22638 <_free_r+0x2d4>
   22624:	100ad3fa 	srli	r5,r2,15
   22628:	28c01e04 	addi	r3,r5,120
   2262c:	18c7883a 	add	r3,r3,r3
   22630:	29401dc4 	addi	r5,r5,119
   22634:	003f9506 	br	2248c <__alt_data_end+0xfffe948c>
   22638:	00c15504 	movi	r3,1364
   2263c:	19400536 	bltu	r3,r5,22654 <_free_r+0x2f0>
   22640:	100ad4ba 	srli	r5,r2,18
   22644:	28c01f44 	addi	r3,r5,125
   22648:	18c7883a 	add	r3,r3,r3
   2264c:	29401f04 	addi	r5,r5,124
   22650:	003f8e06 	br	2248c <__alt_data_end+0xfffe948c>
   22654:	00c03f84 	movi	r3,254
   22658:	01401f84 	movi	r5,126
   2265c:	003f8b06 	br	2248c <__alt_data_end+0xfffe948c>
   22660:	10c00054 	ori	r3,r2,1
   22664:	30c00115 	stw	r3,4(r6)
   22668:	308d883a 	add	r6,r6,r2
   2266c:	30800015 	stw	r2,0(r6)
   22670:	003f7806 	br	22454 <__alt_data_end+0xfffe9454>

00022674 <__muldi3>:
   22674:	defff604 	addi	sp,sp,-40
   22678:	dd800615 	stw	r22,24(sp)
   2267c:	dd400515 	stw	r21,20(sp)
   22680:	dc400115 	stw	r17,4(sp)
   22684:	357fffcc 	andi	r21,r6,65535
   22688:	2022d43a 	srli	r17,r4,16
   2268c:	25bfffcc 	andi	r22,r4,65535
   22690:	dcc00315 	stw	r19,12(sp)
   22694:	dc800215 	stw	r18,8(sp)
   22698:	2027883a 	mov	r19,r4
   2269c:	2825883a 	mov	r18,r5
   226a0:	b009883a 	mov	r4,r22
   226a4:	a80b883a 	mov	r5,r21
   226a8:	dfc00915 	stw	ra,36(sp)
   226ac:	df000815 	stw	fp,32(sp)
   226b0:	ddc00715 	stw	r23,28(sp)
   226b4:	3839883a 	mov	fp,r7
   226b8:	302ed43a 	srli	r23,r6,16
   226bc:	dd000415 	stw	r20,16(sp)
   226c0:	dc000015 	stw	r16,0(sp)
   226c4:	3029883a 	mov	r20,r6
   226c8:	00219140 	call	21914 <__mulsi3>
   226cc:	a80b883a 	mov	r5,r21
   226d0:	8809883a 	mov	r4,r17
   226d4:	1021883a 	mov	r16,r2
   226d8:	00219140 	call	21914 <__mulsi3>
   226dc:	8809883a 	mov	r4,r17
   226e0:	b80b883a 	mov	r5,r23
   226e4:	102b883a 	mov	r21,r2
   226e8:	00219140 	call	21914 <__mulsi3>
   226ec:	b80b883a 	mov	r5,r23
   226f0:	b009883a 	mov	r4,r22
   226f4:	1023883a 	mov	r17,r2
   226f8:	00219140 	call	21914 <__mulsi3>
   226fc:	8006d43a 	srli	r3,r16,16
   22700:	1545883a 	add	r2,r2,r21
   22704:	1885883a 	add	r2,r3,r2
   22708:	1540022e 	bgeu	r2,r21,22714 <__muldi3+0xa0>
   2270c:	00c00074 	movhi	r3,1
   22710:	88e3883a 	add	r17,r17,r3
   22714:	1006d43a 	srli	r3,r2,16
   22718:	1004943a 	slli	r2,r2,16
   2271c:	e00b883a 	mov	r5,fp
   22720:	9809883a 	mov	r4,r19
   22724:	843fffcc 	andi	r16,r16,65535
   22728:	1c63883a 	add	r17,r3,r17
   2272c:	1421883a 	add	r16,r2,r16
   22730:	00219140 	call	21914 <__mulsi3>
   22734:	900b883a 	mov	r5,r18
   22738:	a009883a 	mov	r4,r20
   2273c:	1027883a 	mov	r19,r2
   22740:	00219140 	call	21914 <__mulsi3>
   22744:	9885883a 	add	r2,r19,r2
   22748:	1447883a 	add	r3,r2,r17
   2274c:	8005883a 	mov	r2,r16
   22750:	dfc00917 	ldw	ra,36(sp)
   22754:	df000817 	ldw	fp,32(sp)
   22758:	ddc00717 	ldw	r23,28(sp)
   2275c:	dd800617 	ldw	r22,24(sp)
   22760:	dd400517 	ldw	r21,20(sp)
   22764:	dd000417 	ldw	r20,16(sp)
   22768:	dcc00317 	ldw	r19,12(sp)
   2276c:	dc800217 	ldw	r18,8(sp)
   22770:	dc400117 	ldw	r17,4(sp)
   22774:	dc000017 	ldw	r16,0(sp)
   22778:	dec00a04 	addi	sp,sp,40
   2277c:	f800283a 	ret

00022780 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22780:	defff904 	addi	sp,sp,-28
   22784:	dfc00615 	stw	ra,24(sp)
   22788:	df000515 	stw	fp,20(sp)
   2278c:	df000504 	addi	fp,sp,20
   22790:	e13ffc15 	stw	r4,-16(fp)
   22794:	e17ffd15 	stw	r5,-12(fp)
   22798:	e1bffe15 	stw	r6,-8(fp)
   2279c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   227a0:	e0800217 	ldw	r2,8(fp)
   227a4:	d8800015 	stw	r2,0(sp)
   227a8:	e1ffff17 	ldw	r7,-4(fp)
   227ac:	e1bffe17 	ldw	r6,-8(fp)
   227b0:	e17ffd17 	ldw	r5,-12(fp)
   227b4:	e13ffc17 	ldw	r4,-16(fp)
   227b8:	00229300 	call	22930 <alt_iic_isr_register>
}  
   227bc:	e037883a 	mov	sp,fp
   227c0:	dfc00117 	ldw	ra,4(sp)
   227c4:	df000017 	ldw	fp,0(sp)
   227c8:	dec00204 	addi	sp,sp,8
   227cc:	f800283a 	ret

000227d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   227d0:	defff904 	addi	sp,sp,-28
   227d4:	df000615 	stw	fp,24(sp)
   227d8:	df000604 	addi	fp,sp,24
   227dc:	e13ffe15 	stw	r4,-8(fp)
   227e0:	e17fff15 	stw	r5,-4(fp)
   227e4:	e0bfff17 	ldw	r2,-4(fp)
   227e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   227ec:	0005303a 	rdctl	r2,status
   227f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   227f4:	e0fffb17 	ldw	r3,-20(fp)
   227f8:	00bfff84 	movi	r2,-2
   227fc:	1884703a 	and	r2,r3,r2
   22800:	1001703a 	wrctl	status,r2
  
  return context;
   22804:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22808:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2280c:	00c00044 	movi	r3,1
   22810:	e0bffa17 	ldw	r2,-24(fp)
   22814:	1884983a 	sll	r2,r3,r2
   22818:	1007883a 	mov	r3,r2
   2281c:	d0a6c517 	ldw	r2,-25836(gp)
   22820:	1884b03a 	or	r2,r3,r2
   22824:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22828:	d0a6c517 	ldw	r2,-25836(gp)
   2282c:	100170fa 	wrctl	ienable,r2
   22830:	e0bffc17 	ldw	r2,-16(fp)
   22834:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22838:	e0bffd17 	ldw	r2,-12(fp)
   2283c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22840:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22844:	0001883a 	nop
}
   22848:	e037883a 	mov	sp,fp
   2284c:	df000017 	ldw	fp,0(sp)
   22850:	dec00104 	addi	sp,sp,4
   22854:	f800283a 	ret

00022858 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22858:	defff904 	addi	sp,sp,-28
   2285c:	df000615 	stw	fp,24(sp)
   22860:	df000604 	addi	fp,sp,24
   22864:	e13ffe15 	stw	r4,-8(fp)
   22868:	e17fff15 	stw	r5,-4(fp)
   2286c:	e0bfff17 	ldw	r2,-4(fp)
   22870:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22874:	0005303a 	rdctl	r2,status
   22878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2287c:	e0fffb17 	ldw	r3,-20(fp)
   22880:	00bfff84 	movi	r2,-2
   22884:	1884703a 	and	r2,r3,r2
   22888:	1001703a 	wrctl	status,r2
  
  return context;
   2288c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22890:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22894:	00c00044 	movi	r3,1
   22898:	e0bffa17 	ldw	r2,-24(fp)
   2289c:	1884983a 	sll	r2,r3,r2
   228a0:	0084303a 	nor	r2,zero,r2
   228a4:	1007883a 	mov	r3,r2
   228a8:	d0a6c517 	ldw	r2,-25836(gp)
   228ac:	1884703a 	and	r2,r3,r2
   228b0:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   228b4:	d0a6c517 	ldw	r2,-25836(gp)
   228b8:	100170fa 	wrctl	ienable,r2
   228bc:	e0bffc17 	ldw	r2,-16(fp)
   228c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   228c4:	e0bffd17 	ldw	r2,-12(fp)
   228c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   228cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   228d0:	0001883a 	nop
}
   228d4:	e037883a 	mov	sp,fp
   228d8:	df000017 	ldw	fp,0(sp)
   228dc:	dec00104 	addi	sp,sp,4
   228e0:	f800283a 	ret

000228e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   228e4:	defffc04 	addi	sp,sp,-16
   228e8:	df000315 	stw	fp,12(sp)
   228ec:	df000304 	addi	fp,sp,12
   228f0:	e13ffe15 	stw	r4,-8(fp)
   228f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   228f8:	000530fa 	rdctl	r2,ienable
   228fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22900:	00c00044 	movi	r3,1
   22904:	e0bfff17 	ldw	r2,-4(fp)
   22908:	1884983a 	sll	r2,r3,r2
   2290c:	1007883a 	mov	r3,r2
   22910:	e0bffd17 	ldw	r2,-12(fp)
   22914:	1884703a 	and	r2,r3,r2
   22918:	1004c03a 	cmpne	r2,r2,zero
   2291c:	10803fcc 	andi	r2,r2,255
}
   22920:	e037883a 	mov	sp,fp
   22924:	df000017 	ldw	fp,0(sp)
   22928:	dec00104 	addi	sp,sp,4
   2292c:	f800283a 	ret

00022930 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22930:	defff504 	addi	sp,sp,-44
   22934:	dfc00a15 	stw	ra,40(sp)
   22938:	df000915 	stw	fp,36(sp)
   2293c:	df000904 	addi	fp,sp,36
   22940:	e13ffc15 	stw	r4,-16(fp)
   22944:	e17ffd15 	stw	r5,-12(fp)
   22948:	e1bffe15 	stw	r6,-8(fp)
   2294c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22950:	00bffa84 	movi	r2,-22
   22954:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22958:	e0bffd17 	ldw	r2,-12(fp)
   2295c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22960:	e0bff817 	ldw	r2,-32(fp)
   22964:	10800808 	cmpgei	r2,r2,32
   22968:	1000271e 	bne	r2,zero,22a08 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2296c:	0005303a 	rdctl	r2,status
   22970:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22974:	e0fffb17 	ldw	r3,-20(fp)
   22978:	00bfff84 	movi	r2,-2
   2297c:	1884703a 	and	r2,r3,r2
   22980:	1001703a 	wrctl	status,r2
  
  return context;
   22984:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22988:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2298c:	008000f4 	movhi	r2,3
   22990:	10a96304 	addi	r2,r2,-23156
   22994:	e0fff817 	ldw	r3,-32(fp)
   22998:	180690fa 	slli	r3,r3,3
   2299c:	10c5883a 	add	r2,r2,r3
   229a0:	e0fffe17 	ldw	r3,-8(fp)
   229a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   229a8:	008000f4 	movhi	r2,3
   229ac:	10a96304 	addi	r2,r2,-23156
   229b0:	e0fff817 	ldw	r3,-32(fp)
   229b4:	180690fa 	slli	r3,r3,3
   229b8:	10c5883a 	add	r2,r2,r3
   229bc:	10800104 	addi	r2,r2,4
   229c0:	e0ffff17 	ldw	r3,-4(fp)
   229c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   229c8:	e0bffe17 	ldw	r2,-8(fp)
   229cc:	10000526 	beq	r2,zero,229e4 <alt_iic_isr_register+0xb4>
   229d0:	e0bff817 	ldw	r2,-32(fp)
   229d4:	100b883a 	mov	r5,r2
   229d8:	e13ffc17 	ldw	r4,-16(fp)
   229dc:	00227d00 	call	227d0 <alt_ic_irq_enable>
   229e0:	00000406 	br	229f4 <alt_iic_isr_register+0xc4>
   229e4:	e0bff817 	ldw	r2,-32(fp)
   229e8:	100b883a 	mov	r5,r2
   229ec:	e13ffc17 	ldw	r4,-16(fp)
   229f0:	00228580 	call	22858 <alt_ic_irq_disable>
   229f4:	e0bff715 	stw	r2,-36(fp)
   229f8:	e0bffa17 	ldw	r2,-24(fp)
   229fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22a00:	e0bff917 	ldw	r2,-28(fp)
   22a04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22a08:	e0bff717 	ldw	r2,-36(fp)
}
   22a0c:	e037883a 	mov	sp,fp
   22a10:	dfc00117 	ldw	ra,4(sp)
   22a14:	df000017 	ldw	fp,0(sp)
   22a18:	dec00204 	addi	sp,sp,8
   22a1c:	f800283a 	ret

00022a20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   22a20:	defffc04 	addi	sp,sp,-16
   22a24:	df000315 	stw	fp,12(sp)
   22a28:	df000304 	addi	fp,sp,12
   22a2c:	e13ffd15 	stw	r4,-12(fp)
   22a30:	e17ffe15 	stw	r5,-8(fp)
   22a34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   22a38:	e0fffe17 	ldw	r3,-8(fp)
   22a3c:	e0bffd17 	ldw	r2,-12(fp)
   22a40:	18800c26 	beq	r3,r2,22a74 <alt_load_section+0x54>
  {
    while( to != end )
   22a44:	00000806 	br	22a68 <alt_load_section+0x48>
    {
      *to++ = *from++;
   22a48:	e0bffe17 	ldw	r2,-8(fp)
   22a4c:	10c00104 	addi	r3,r2,4
   22a50:	e0fffe15 	stw	r3,-8(fp)
   22a54:	e0fffd17 	ldw	r3,-12(fp)
   22a58:	19000104 	addi	r4,r3,4
   22a5c:	e13ffd15 	stw	r4,-12(fp)
   22a60:	18c00017 	ldw	r3,0(r3)
   22a64:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   22a68:	e0fffe17 	ldw	r3,-8(fp)
   22a6c:	e0bfff17 	ldw	r2,-4(fp)
   22a70:	18bff51e 	bne	r3,r2,22a48 <__alt_data_end+0xfffe9a48>
    {
      *to++ = *from++;
    }
  }
}
   22a74:	0001883a 	nop
   22a78:	e037883a 	mov	sp,fp
   22a7c:	df000017 	ldw	fp,0(sp)
   22a80:	dec00104 	addi	sp,sp,4
   22a84:	f800283a 	ret

00022a88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   22a88:	defffe04 	addi	sp,sp,-8
   22a8c:	dfc00115 	stw	ra,4(sp)
   22a90:	df000015 	stw	fp,0(sp)
   22a94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22a98:	018000f4 	movhi	r6,3
   22a9c:	31a29e04 	addi	r6,r6,-30088
   22aa0:	014000b4 	movhi	r5,2
   22aa4:	295bf004 	addi	r5,r5,28608
   22aa8:	010000f4 	movhi	r4,3
   22aac:	21229e04 	addi	r4,r4,-30088
   22ab0:	0022a200 	call	22a20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   22ab4:	018000b4 	movhi	r6,2
   22ab8:	31808c04 	addi	r6,r6,560
   22abc:	014000b4 	movhi	r5,2
   22ac0:	29400804 	addi	r5,r5,32
   22ac4:	010000b4 	movhi	r4,2
   22ac8:	21000804 	addi	r4,r4,32
   22acc:	0022a200 	call	22a20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   22ad0:	018000b4 	movhi	r6,2
   22ad4:	319bf004 	addi	r6,r6,28608
   22ad8:	014000b4 	movhi	r5,2
   22adc:	295bb604 	addi	r5,r5,28376
   22ae0:	010000b4 	movhi	r4,2
   22ae4:	211bb604 	addi	r4,r4,28376
   22ae8:	0022a200 	call	22a20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   22aec:	0023b240 	call	23b24 <alt_dcache_flush_all>
  alt_icache_flush_all();
   22af0:	0023d100 	call	23d10 <alt_icache_flush_all>
}
   22af4:	0001883a 	nop
   22af8:	e037883a 	mov	sp,fp
   22afc:	dfc00117 	ldw	ra,4(sp)
   22b00:	df000017 	ldw	fp,0(sp)
   22b04:	dec00204 	addi	sp,sp,8
   22b08:	f800283a 	ret

00022b0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   22b0c:	defffd04 	addi	sp,sp,-12
   22b10:	dfc00215 	stw	ra,8(sp)
   22b14:	df000115 	stw	fp,4(sp)
   22b18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   22b1c:	0009883a 	mov	r4,zero
   22b20:	0022cf00 	call	22cf0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   22b24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   22b28:	0022d280 	call	22d28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   22b2c:	018000b4 	movhi	r6,2
   22b30:	319be504 	addi	r6,r6,28564
   22b34:	014000b4 	movhi	r5,2
   22b38:	295be504 	addi	r5,r5,28564
   22b3c:	010000b4 	movhi	r4,2
   22b40:	211be504 	addi	r4,r4,28564
   22b44:	0023eb00 	call	23eb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   22b48:	0023c500 	call	23c50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   22b4c:	010000b4 	movhi	r4,2
   22b50:	210f2c04 	addi	r4,r4,15536
   22b54:	00246580 	call	24658 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   22b58:	d0a6c617 	ldw	r2,-25832(gp)
   22b5c:	d0e6c717 	ldw	r3,-25828(gp)
   22b60:	d126c817 	ldw	r4,-25824(gp)
   22b64:	200d883a 	mov	r6,r4
   22b68:	180b883a 	mov	r5,r3
   22b6c:	1009883a 	mov	r4,r2
   22b70:	002026c0 	call	2026c <main>
   22b74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   22b78:	01000044 	movi	r4,1
   22b7c:	0023a4c0 	call	23a4c <close>
  exit (result);
   22b80:	e13fff17 	ldw	r4,-4(fp)
   22b84:	002466c0 	call	2466c <exit>

00022b88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   22b88:	defffe04 	addi	sp,sp,-8
   22b8c:	df000115 	stw	fp,4(sp)
   22b90:	df000104 	addi	fp,sp,4
   22b94:	e13fff15 	stw	r4,-4(fp)
}
   22b98:	0001883a 	nop
   22b9c:	e037883a 	mov	sp,fp
   22ba0:	df000017 	ldw	fp,0(sp)
   22ba4:	dec00104 	addi	sp,sp,4
   22ba8:	f800283a 	ret

00022bac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   22bac:	defffe04 	addi	sp,sp,-8
   22bb0:	df000115 	stw	fp,4(sp)
   22bb4:	df000104 	addi	fp,sp,4
   22bb8:	e13fff15 	stw	r4,-4(fp)
}
   22bbc:	0001883a 	nop
   22bc0:	e037883a 	mov	sp,fp
   22bc4:	df000017 	ldw	fp,0(sp)
   22bc8:	dec00104 	addi	sp,sp,4
   22bcc:	f800283a 	ret

00022bd0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   22bd0:	defffd04 	addi	sp,sp,-12
   22bd4:	dfc00215 	stw	ra,8(sp)
   22bd8:	df000115 	stw	fp,4(sp)
   22bdc:	df000104 	addi	fp,sp,4
   22be0:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   22be4:	d0a00617 	ldw	r2,-32744(gp)
   22be8:	10800217 	ldw	r2,8(r2)
   22bec:	100b883a 	mov	r5,r2
   22bf0:	e13fff17 	ldw	r4,-4(fp)
   22bf4:	00247400 	call	24740 <fputs>
#endif
#endif
}
   22bf8:	e037883a 	mov	sp,fp
   22bfc:	dfc00117 	ldw	ra,4(sp)
   22c00:	df000017 	ldw	fp,0(sp)
   22c04:	dec00204 	addi	sp,sp,8
   22c08:	f800283a 	ret

00022c0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   22c0c:	defff904 	addi	sp,sp,-28
   22c10:	df000615 	stw	fp,24(sp)
   22c14:	df000604 	addi	fp,sp,24
   22c18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c1c:	0005303a 	rdctl	r2,status
   22c20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c24:	e0fffe17 	ldw	r3,-8(fp)
   22c28:	00bfff84 	movi	r2,-2
   22c2c:	1884703a 	and	r2,r3,r2
   22c30:	1001703a 	wrctl	status,r2
  
  return context;
   22c34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   22c38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   22c3c:	d0a00817 	ldw	r2,-32736(gp)
   22c40:	10c000c4 	addi	r3,r2,3
   22c44:	00bfff04 	movi	r2,-4
   22c48:	1884703a 	and	r2,r3,r2
   22c4c:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   22c50:	d0e00817 	ldw	r3,-32736(gp)
   22c54:	e0bfff17 	ldw	r2,-4(fp)
   22c58:	1887883a 	add	r3,r3,r2
   22c5c:	00800134 	movhi	r2,4
   22c60:	10a40004 	addi	r2,r2,-28672
   22c64:	10c0062e 	bgeu	r2,r3,22c80 <sbrk+0x74>
   22c68:	e0bffb17 	ldw	r2,-20(fp)
   22c6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22c70:	e0bffa17 	ldw	r2,-24(fp)
   22c74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   22c78:	00bfffc4 	movi	r2,-1
   22c7c:	00000b06 	br	22cac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   22c80:	d0a00817 	ldw	r2,-32736(gp)
   22c84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   22c88:	d0e00817 	ldw	r3,-32736(gp)
   22c8c:	e0bfff17 	ldw	r2,-4(fp)
   22c90:	1885883a 	add	r2,r3,r2
   22c94:	d0a00815 	stw	r2,-32736(gp)
   22c98:	e0bffb17 	ldw	r2,-20(fp)
   22c9c:	e0bffc15 	stw	r2,-16(fp)
   22ca0:	e0bffc17 	ldw	r2,-16(fp)
   22ca4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   22ca8:	e0bffd17 	ldw	r2,-12(fp)
} 
   22cac:	e037883a 	mov	sp,fp
   22cb0:	df000017 	ldw	fp,0(sp)
   22cb4:	dec00104 	addi	sp,sp,4
   22cb8:	f800283a 	ret

00022cbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22cbc:	defffd04 	addi	sp,sp,-12
   22cc0:	dfc00215 	stw	ra,8(sp)
   22cc4:	df000115 	stw	fp,4(sp)
   22cc8:	df000104 	addi	fp,sp,4
   22ccc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   22cd0:	d1600b04 	addi	r5,gp,-32724
   22cd4:	e13fff17 	ldw	r4,-4(fp)
   22cd8:	0023bac0 	call	23bac <alt_dev_llist_insert>
}
   22cdc:	e037883a 	mov	sp,fp
   22ce0:	dfc00117 	ldw	ra,4(sp)
   22ce4:	df000017 	ldw	fp,0(sp)
   22ce8:	dec00204 	addi	sp,sp,8
   22cec:	f800283a 	ret

00022cf0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   22cf0:	defffd04 	addi	sp,sp,-12
   22cf4:	dfc00215 	stw	ra,8(sp)
   22cf8:	df000115 	stw	fp,4(sp)
   22cfc:	df000104 	addi	fp,sp,4
   22d00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   22d04:	00243d80 	call	243d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   22d08:	00800044 	movi	r2,1
   22d0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   22d10:	0001883a 	nop
   22d14:	e037883a 	mov	sp,fp
   22d18:	dfc00117 	ldw	ra,4(sp)
   22d1c:	df000017 	ldw	fp,0(sp)
   22d20:	dec00204 	addi	sp,sp,8
   22d24:	f800283a 	ret

00022d28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   22d28:	defffe04 	addi	sp,sp,-8
   22d2c:	dfc00115 	stw	ra,4(sp)
   22d30:	df000015 	stw	fp,0(sp)
   22d34:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_GAME, timer_game);
   22d38:	01c00284 	movi	r7,10
   22d3c:	01800044 	movi	r6,1
   22d40:	000b883a 	mov	r5,zero
   22d44:	01000134 	movhi	r4,4
   22d48:	21040804 	addi	r4,r4,4128
   22d4c:	00238680 	call	23868 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_LCD, timer_lcd);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   22d50:	000d883a 	mov	r6,zero
   22d54:	000b883a 	mov	r5,zero
   22d58:	010000b4 	movhi	r4,2
   22d5c:	211e1504 	addi	r4,r4,30804
   22d60:	0022eec0 	call	22eec <altera_avalon_jtag_uart_init>
   22d64:	010000b4 	movhi	r4,2
   22d68:	211e0b04 	addi	r4,r4,30764
   22d6c:	0022cbc0 	call	22cbc <alt_dev_reg>
}
   22d70:	0001883a 	nop
   22d74:	e037883a 	mov	sp,fp
   22d78:	dfc00117 	ldw	ra,4(sp)
   22d7c:	df000017 	ldw	fp,0(sp)
   22d80:	dec00204 	addi	sp,sp,8
   22d84:	f800283a 	ret

00022d88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22d88:	defffa04 	addi	sp,sp,-24
   22d8c:	dfc00515 	stw	ra,20(sp)
   22d90:	df000415 	stw	fp,16(sp)
   22d94:	df000404 	addi	fp,sp,16
   22d98:	e13ffd15 	stw	r4,-12(fp)
   22d9c:	e17ffe15 	stw	r5,-8(fp)
   22da0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22da4:	e0bffd17 	ldw	r2,-12(fp)
   22da8:	10800017 	ldw	r2,0(r2)
   22dac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22db0:	e0bffc17 	ldw	r2,-16(fp)
   22db4:	10c00a04 	addi	r3,r2,40
   22db8:	e0bffd17 	ldw	r2,-12(fp)
   22dbc:	10800217 	ldw	r2,8(r2)
   22dc0:	100f883a 	mov	r7,r2
   22dc4:	e1bfff17 	ldw	r6,-4(fp)
   22dc8:	e17ffe17 	ldw	r5,-8(fp)
   22dcc:	1809883a 	mov	r4,r3
   22dd0:	00233b00 	call	233b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   22dd4:	e037883a 	mov	sp,fp
   22dd8:	dfc00117 	ldw	ra,4(sp)
   22ddc:	df000017 	ldw	fp,0(sp)
   22de0:	dec00204 	addi	sp,sp,8
   22de4:	f800283a 	ret

00022de8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22de8:	defffa04 	addi	sp,sp,-24
   22dec:	dfc00515 	stw	ra,20(sp)
   22df0:	df000415 	stw	fp,16(sp)
   22df4:	df000404 	addi	fp,sp,16
   22df8:	e13ffd15 	stw	r4,-12(fp)
   22dfc:	e17ffe15 	stw	r5,-8(fp)
   22e00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22e04:	e0bffd17 	ldw	r2,-12(fp)
   22e08:	10800017 	ldw	r2,0(r2)
   22e0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   22e10:	e0bffc17 	ldw	r2,-16(fp)
   22e14:	10c00a04 	addi	r3,r2,40
   22e18:	e0bffd17 	ldw	r2,-12(fp)
   22e1c:	10800217 	ldw	r2,8(r2)
   22e20:	100f883a 	mov	r7,r2
   22e24:	e1bfff17 	ldw	r6,-4(fp)
   22e28:	e17ffe17 	ldw	r5,-8(fp)
   22e2c:	1809883a 	mov	r4,r3
   22e30:	00235cc0 	call	235cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   22e34:	e037883a 	mov	sp,fp
   22e38:	dfc00117 	ldw	ra,4(sp)
   22e3c:	df000017 	ldw	fp,0(sp)
   22e40:	dec00204 	addi	sp,sp,8
   22e44:	f800283a 	ret

00022e48 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   22e48:	defffc04 	addi	sp,sp,-16
   22e4c:	dfc00315 	stw	ra,12(sp)
   22e50:	df000215 	stw	fp,8(sp)
   22e54:	df000204 	addi	fp,sp,8
   22e58:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22e5c:	e0bfff17 	ldw	r2,-4(fp)
   22e60:	10800017 	ldw	r2,0(r2)
   22e64:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   22e68:	e0bffe17 	ldw	r2,-8(fp)
   22e6c:	10c00a04 	addi	r3,r2,40
   22e70:	e0bfff17 	ldw	r2,-4(fp)
   22e74:	10800217 	ldw	r2,8(r2)
   22e78:	100b883a 	mov	r5,r2
   22e7c:	1809883a 	mov	r4,r3
   22e80:	00232580 	call	23258 <altera_avalon_jtag_uart_close>
}
   22e84:	e037883a 	mov	sp,fp
   22e88:	dfc00117 	ldw	ra,4(sp)
   22e8c:	df000017 	ldw	fp,0(sp)
   22e90:	dec00204 	addi	sp,sp,8
   22e94:	f800283a 	ret

00022e98 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   22e98:	defffa04 	addi	sp,sp,-24
   22e9c:	dfc00515 	stw	ra,20(sp)
   22ea0:	df000415 	stw	fp,16(sp)
   22ea4:	df000404 	addi	fp,sp,16
   22ea8:	e13ffd15 	stw	r4,-12(fp)
   22eac:	e17ffe15 	stw	r5,-8(fp)
   22eb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   22eb4:	e0bffd17 	ldw	r2,-12(fp)
   22eb8:	10800017 	ldw	r2,0(r2)
   22ebc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22ec0:	e0bffc17 	ldw	r2,-16(fp)
   22ec4:	10800a04 	addi	r2,r2,40
   22ec8:	e1bfff17 	ldw	r6,-4(fp)
   22ecc:	e17ffe17 	ldw	r5,-8(fp)
   22ed0:	1009883a 	mov	r4,r2
   22ed4:	00232c00 	call	232c0 <altera_avalon_jtag_uart_ioctl>
}
   22ed8:	e037883a 	mov	sp,fp
   22edc:	dfc00117 	ldw	ra,4(sp)
   22ee0:	df000017 	ldw	fp,0(sp)
   22ee4:	dec00204 	addi	sp,sp,8
   22ee8:	f800283a 	ret

00022eec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   22eec:	defffa04 	addi	sp,sp,-24
   22ef0:	dfc00515 	stw	ra,20(sp)
   22ef4:	df000415 	stw	fp,16(sp)
   22ef8:	df000404 	addi	fp,sp,16
   22efc:	e13ffd15 	stw	r4,-12(fp)
   22f00:	e17ffe15 	stw	r5,-8(fp)
   22f04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22f08:	e0bffd17 	ldw	r2,-12(fp)
   22f0c:	00c00044 	movi	r3,1
   22f10:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   22f14:	e0bffd17 	ldw	r2,-12(fp)
   22f18:	10800017 	ldw	r2,0(r2)
   22f1c:	10800104 	addi	r2,r2,4
   22f20:	1007883a 	mov	r3,r2
   22f24:	e0bffd17 	ldw	r2,-12(fp)
   22f28:	10800817 	ldw	r2,32(r2)
   22f2c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   22f30:	e0bffe17 	ldw	r2,-8(fp)
   22f34:	e0ffff17 	ldw	r3,-4(fp)
   22f38:	d8000015 	stw	zero,0(sp)
   22f3c:	e1fffd17 	ldw	r7,-12(fp)
   22f40:	018000b4 	movhi	r6,2
   22f44:	318beb04 	addi	r6,r6,12204
   22f48:	180b883a 	mov	r5,r3
   22f4c:	1009883a 	mov	r4,r2
   22f50:	00227800 	call	22780 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   22f54:	e0bffd17 	ldw	r2,-12(fp)
   22f58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   22f5c:	e0bffd17 	ldw	r2,-12(fp)
   22f60:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22f64:	d0e6ca17 	ldw	r3,-25816(gp)
   22f68:	e1fffd17 	ldw	r7,-12(fp)
   22f6c:	018000b4 	movhi	r6,2
   22f70:	318c6e04 	addi	r6,r6,12728
   22f74:	180b883a 	mov	r5,r3
   22f78:	1009883a 	mov	r4,r2
   22f7c:	00238e40 	call	238e4 <alt_alarm_start>
   22f80:	1000040e 	bge	r2,zero,22f94 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   22f84:	e0fffd17 	ldw	r3,-12(fp)
   22f88:	00a00034 	movhi	r2,32768
   22f8c:	10bfffc4 	addi	r2,r2,-1
   22f90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22f94:	0001883a 	nop
   22f98:	e037883a 	mov	sp,fp
   22f9c:	dfc00117 	ldw	ra,4(sp)
   22fa0:	df000017 	ldw	fp,0(sp)
   22fa4:	dec00204 	addi	sp,sp,8
   22fa8:	f800283a 	ret

00022fac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22fac:	defff804 	addi	sp,sp,-32
   22fb0:	df000715 	stw	fp,28(sp)
   22fb4:	df000704 	addi	fp,sp,28
   22fb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22fbc:	e0bfff17 	ldw	r2,-4(fp)
   22fc0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   22fc4:	e0bffb17 	ldw	r2,-20(fp)
   22fc8:	10800017 	ldw	r2,0(r2)
   22fcc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22fd0:	e0bffc17 	ldw	r2,-16(fp)
   22fd4:	10800104 	addi	r2,r2,4
   22fd8:	10800037 	ldwio	r2,0(r2)
   22fdc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   22fe0:	e0bffd17 	ldw	r2,-12(fp)
   22fe4:	1080c00c 	andi	r2,r2,768
   22fe8:	10006d26 	beq	r2,zero,231a0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   22fec:	e0bffd17 	ldw	r2,-12(fp)
   22ff0:	1080400c 	andi	r2,r2,256
   22ff4:	10003526 	beq	r2,zero,230cc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   22ff8:	00800074 	movhi	r2,1
   22ffc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23000:	e0bffb17 	ldw	r2,-20(fp)
   23004:	10800a17 	ldw	r2,40(r2)
   23008:	10800044 	addi	r2,r2,1
   2300c:	1081ffcc 	andi	r2,r2,2047
   23010:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23014:	e0bffb17 	ldw	r2,-20(fp)
   23018:	10c00b17 	ldw	r3,44(r2)
   2301c:	e0bffe17 	ldw	r2,-8(fp)
   23020:	18801526 	beq	r3,r2,23078 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23024:	e0bffc17 	ldw	r2,-16(fp)
   23028:	10800037 	ldwio	r2,0(r2)
   2302c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23030:	e0bff917 	ldw	r2,-28(fp)
   23034:	10a0000c 	andi	r2,r2,32768
   23038:	10001126 	beq	r2,zero,23080 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2303c:	e0bffb17 	ldw	r2,-20(fp)
   23040:	10800a17 	ldw	r2,40(r2)
   23044:	e0fff917 	ldw	r3,-28(fp)
   23048:	1809883a 	mov	r4,r3
   2304c:	e0fffb17 	ldw	r3,-20(fp)
   23050:	1885883a 	add	r2,r3,r2
   23054:	10800e04 	addi	r2,r2,56
   23058:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2305c:	e0bffb17 	ldw	r2,-20(fp)
   23060:	10800a17 	ldw	r2,40(r2)
   23064:	10800044 	addi	r2,r2,1
   23068:	10c1ffcc 	andi	r3,r2,2047
   2306c:	e0bffb17 	ldw	r2,-20(fp)
   23070:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23074:	003fe206 	br	23000 <__alt_data_end+0xfffea000>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   23078:	0001883a 	nop
   2307c:	00000106 	br	23084 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23080:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23084:	e0bff917 	ldw	r2,-28(fp)
   23088:	10bfffec 	andhi	r2,r2,65535
   2308c:	10000f26 	beq	r2,zero,230cc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23090:	e0bffb17 	ldw	r2,-20(fp)
   23094:	10c00817 	ldw	r3,32(r2)
   23098:	00bfff84 	movi	r2,-2
   2309c:	1886703a 	and	r3,r3,r2
   230a0:	e0bffb17 	ldw	r2,-20(fp)
   230a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   230a8:	e0bffc17 	ldw	r2,-16(fp)
   230ac:	10800104 	addi	r2,r2,4
   230b0:	1007883a 	mov	r3,r2
   230b4:	e0bffb17 	ldw	r2,-20(fp)
   230b8:	10800817 	ldw	r2,32(r2)
   230bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   230c0:	e0bffc17 	ldw	r2,-16(fp)
   230c4:	10800104 	addi	r2,r2,4
   230c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   230cc:	e0bffd17 	ldw	r2,-12(fp)
   230d0:	1080800c 	andi	r2,r2,512
   230d4:	103fbe26 	beq	r2,zero,22fd0 <__alt_data_end+0xfffe9fd0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   230d8:	e0bffd17 	ldw	r2,-12(fp)
   230dc:	1004d43a 	srli	r2,r2,16
   230e0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   230e4:	00001406 	br	23138 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   230e8:	e0bffc17 	ldw	r2,-16(fp)
   230ec:	e0fffb17 	ldw	r3,-20(fp)
   230f0:	18c00d17 	ldw	r3,52(r3)
   230f4:	e13ffb17 	ldw	r4,-20(fp)
   230f8:	20c7883a 	add	r3,r4,r3
   230fc:	18c20e04 	addi	r3,r3,2104
   23100:	18c00003 	ldbu	r3,0(r3)
   23104:	18c03fcc 	andi	r3,r3,255
   23108:	18c0201c 	xori	r3,r3,128
   2310c:	18ffe004 	addi	r3,r3,-128
   23110:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23114:	e0bffb17 	ldw	r2,-20(fp)
   23118:	10800d17 	ldw	r2,52(r2)
   2311c:	10800044 	addi	r2,r2,1
   23120:	10c1ffcc 	andi	r3,r2,2047
   23124:	e0bffb17 	ldw	r2,-20(fp)
   23128:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2312c:	e0bffa17 	ldw	r2,-24(fp)
   23130:	10bfffc4 	addi	r2,r2,-1
   23134:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23138:	e0bffa17 	ldw	r2,-24(fp)
   2313c:	10000526 	beq	r2,zero,23154 <altera_avalon_jtag_uart_irq+0x1a8>
   23140:	e0bffb17 	ldw	r2,-20(fp)
   23144:	10c00d17 	ldw	r3,52(r2)
   23148:	e0bffb17 	ldw	r2,-20(fp)
   2314c:	10800c17 	ldw	r2,48(r2)
   23150:	18bfe51e 	bne	r3,r2,230e8 <__alt_data_end+0xfffea0e8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23154:	e0bffa17 	ldw	r2,-24(fp)
   23158:	103f9d26 	beq	r2,zero,22fd0 <__alt_data_end+0xfffe9fd0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2315c:	e0bffb17 	ldw	r2,-20(fp)
   23160:	10c00817 	ldw	r3,32(r2)
   23164:	00bfff44 	movi	r2,-3
   23168:	1886703a 	and	r3,r3,r2
   2316c:	e0bffb17 	ldw	r2,-20(fp)
   23170:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23174:	e0bffb17 	ldw	r2,-20(fp)
   23178:	10800017 	ldw	r2,0(r2)
   2317c:	10800104 	addi	r2,r2,4
   23180:	1007883a 	mov	r3,r2
   23184:	e0bffb17 	ldw	r2,-20(fp)
   23188:	10800817 	ldw	r2,32(r2)
   2318c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23190:	e0bffc17 	ldw	r2,-16(fp)
   23194:	10800104 	addi	r2,r2,4
   23198:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2319c:	003f8c06 	br	22fd0 <__alt_data_end+0xfffe9fd0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   231a0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   231a4:	0001883a 	nop
   231a8:	e037883a 	mov	sp,fp
   231ac:	df000017 	ldw	fp,0(sp)
   231b0:	dec00104 	addi	sp,sp,4
   231b4:	f800283a 	ret

000231b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   231b8:	defff804 	addi	sp,sp,-32
   231bc:	df000715 	stw	fp,28(sp)
   231c0:	df000704 	addi	fp,sp,28
   231c4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   231c8:	e0bffb17 	ldw	r2,-20(fp)
   231cc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   231d0:	e0bff917 	ldw	r2,-28(fp)
   231d4:	10800017 	ldw	r2,0(r2)
   231d8:	10800104 	addi	r2,r2,4
   231dc:	10800037 	ldwio	r2,0(r2)
   231e0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   231e4:	e0bffa17 	ldw	r2,-24(fp)
   231e8:	1081000c 	andi	r2,r2,1024
   231ec:	10000b26 	beq	r2,zero,2321c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   231f0:	e0bff917 	ldw	r2,-28(fp)
   231f4:	10800017 	ldw	r2,0(r2)
   231f8:	10800104 	addi	r2,r2,4
   231fc:	1007883a 	mov	r3,r2
   23200:	e0bff917 	ldw	r2,-28(fp)
   23204:	10800817 	ldw	r2,32(r2)
   23208:	10810014 	ori	r2,r2,1024
   2320c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23210:	e0bff917 	ldw	r2,-28(fp)
   23214:	10000915 	stw	zero,36(r2)
   23218:	00000a06 	br	23244 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2321c:	e0bff917 	ldw	r2,-28(fp)
   23220:	10c00917 	ldw	r3,36(r2)
   23224:	00a00034 	movhi	r2,32768
   23228:	10bfff04 	addi	r2,r2,-4
   2322c:	10c00536 	bltu	r2,r3,23244 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23230:	e0bff917 	ldw	r2,-28(fp)
   23234:	10800917 	ldw	r2,36(r2)
   23238:	10c00044 	addi	r3,r2,1
   2323c:	e0bff917 	ldw	r2,-28(fp)
   23240:	10c00915 	stw	r3,36(r2)
   23244:	d0a6ca17 	ldw	r2,-25816(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23248:	e037883a 	mov	sp,fp
   2324c:	df000017 	ldw	fp,0(sp)
   23250:	dec00104 	addi	sp,sp,4
   23254:	f800283a 	ret

00023258 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23258:	defffd04 	addi	sp,sp,-12
   2325c:	df000215 	stw	fp,8(sp)
   23260:	df000204 	addi	fp,sp,8
   23264:	e13ffe15 	stw	r4,-8(fp)
   23268:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2326c:	00000506 	br	23284 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23270:	e0bfff17 	ldw	r2,-4(fp)
   23274:	1090000c 	andi	r2,r2,16384
   23278:	10000226 	beq	r2,zero,23284 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2327c:	00bffd44 	movi	r2,-11
   23280:	00000b06 	br	232b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23284:	e0bffe17 	ldw	r2,-8(fp)
   23288:	10c00d17 	ldw	r3,52(r2)
   2328c:	e0bffe17 	ldw	r2,-8(fp)
   23290:	10800c17 	ldw	r2,48(r2)
   23294:	18800526 	beq	r3,r2,232ac <altera_avalon_jtag_uart_close+0x54>
   23298:	e0bffe17 	ldw	r2,-8(fp)
   2329c:	10c00917 	ldw	r3,36(r2)
   232a0:	e0bffe17 	ldw	r2,-8(fp)
   232a4:	10800117 	ldw	r2,4(r2)
   232a8:	18bff136 	bltu	r3,r2,23270 <__alt_data_end+0xfffea270>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   232ac:	0005883a 	mov	r2,zero
}
   232b0:	e037883a 	mov	sp,fp
   232b4:	df000017 	ldw	fp,0(sp)
   232b8:	dec00104 	addi	sp,sp,4
   232bc:	f800283a 	ret

000232c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   232c0:	defffa04 	addi	sp,sp,-24
   232c4:	df000515 	stw	fp,20(sp)
   232c8:	df000504 	addi	fp,sp,20
   232cc:	e13ffd15 	stw	r4,-12(fp)
   232d0:	e17ffe15 	stw	r5,-8(fp)
   232d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   232d8:	00bff9c4 	movi	r2,-25
   232dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   232e0:	e0bffe17 	ldw	r2,-8(fp)
   232e4:	10da8060 	cmpeqi	r3,r2,27137
   232e8:	1800031e 	bne	r3,zero,232f8 <altera_avalon_jtag_uart_ioctl+0x38>
   232ec:	109a80a0 	cmpeqi	r2,r2,27138
   232f0:	1000181e 	bne	r2,zero,23354 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   232f4:	00002906 	br	2339c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   232f8:	e0bffd17 	ldw	r2,-12(fp)
   232fc:	10c00117 	ldw	r3,4(r2)
   23300:	00a00034 	movhi	r2,32768
   23304:	10bfffc4 	addi	r2,r2,-1
   23308:	18802126 	beq	r3,r2,23390 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2330c:	e0bfff17 	ldw	r2,-4(fp)
   23310:	10800017 	ldw	r2,0(r2)
   23314:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23318:	e0bffc17 	ldw	r2,-16(fp)
   2331c:	10800090 	cmplti	r2,r2,2
   23320:	1000061e 	bne	r2,zero,2333c <altera_avalon_jtag_uart_ioctl+0x7c>
   23324:	e0fffc17 	ldw	r3,-16(fp)
   23328:	00a00034 	movhi	r2,32768
   2332c:	10bfffc4 	addi	r2,r2,-1
   23330:	18800226 	beq	r3,r2,2333c <altera_avalon_jtag_uart_ioctl+0x7c>
   23334:	e0bffc17 	ldw	r2,-16(fp)
   23338:	00000206 	br	23344 <altera_avalon_jtag_uart_ioctl+0x84>
   2333c:	00a00034 	movhi	r2,32768
   23340:	10bfff84 	addi	r2,r2,-2
   23344:	e0fffd17 	ldw	r3,-12(fp)
   23348:	18800115 	stw	r2,4(r3)
      rc = 0;
   2334c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23350:	00000f06 	br	23390 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23354:	e0bffd17 	ldw	r2,-12(fp)
   23358:	10c00117 	ldw	r3,4(r2)
   2335c:	00a00034 	movhi	r2,32768
   23360:	10bfffc4 	addi	r2,r2,-1
   23364:	18800c26 	beq	r3,r2,23398 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23368:	e0bffd17 	ldw	r2,-12(fp)
   2336c:	10c00917 	ldw	r3,36(r2)
   23370:	e0bffd17 	ldw	r2,-12(fp)
   23374:	10800117 	ldw	r2,4(r2)
   23378:	1885803a 	cmpltu	r2,r3,r2
   2337c:	10c03fcc 	andi	r3,r2,255
   23380:	e0bfff17 	ldw	r2,-4(fp)
   23384:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23388:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2338c:	00000206 	br	23398 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   23390:	0001883a 	nop
   23394:	00000106 	br	2339c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   23398:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2339c:	e0bffb17 	ldw	r2,-20(fp)
}
   233a0:	e037883a 	mov	sp,fp
   233a4:	df000017 	ldw	fp,0(sp)
   233a8:	dec00104 	addi	sp,sp,4
   233ac:	f800283a 	ret

000233b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   233b0:	defff304 	addi	sp,sp,-52
   233b4:	dfc00c15 	stw	ra,48(sp)
   233b8:	df000b15 	stw	fp,44(sp)
   233bc:	df000b04 	addi	fp,sp,44
   233c0:	e13ffc15 	stw	r4,-16(fp)
   233c4:	e17ffd15 	stw	r5,-12(fp)
   233c8:	e1bffe15 	stw	r6,-8(fp)
   233cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   233d0:	e0bffd17 	ldw	r2,-12(fp)
   233d4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   233d8:	00004706 	br	234f8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   233dc:	e0bffc17 	ldw	r2,-16(fp)
   233e0:	10800a17 	ldw	r2,40(r2)
   233e4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   233e8:	e0bffc17 	ldw	r2,-16(fp)
   233ec:	10800b17 	ldw	r2,44(r2)
   233f0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   233f4:	e0fff717 	ldw	r3,-36(fp)
   233f8:	e0bff817 	ldw	r2,-32(fp)
   233fc:	18800536 	bltu	r3,r2,23414 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23400:	e0fff717 	ldw	r3,-36(fp)
   23404:	e0bff817 	ldw	r2,-32(fp)
   23408:	1885c83a 	sub	r2,r3,r2
   2340c:	e0bff615 	stw	r2,-40(fp)
   23410:	00000406 	br	23424 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23414:	00c20004 	movi	r3,2048
   23418:	e0bff817 	ldw	r2,-32(fp)
   2341c:	1885c83a 	sub	r2,r3,r2
   23420:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23424:	e0bff617 	ldw	r2,-40(fp)
   23428:	10001e26 	beq	r2,zero,234a4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2342c:	e0fffe17 	ldw	r3,-8(fp)
   23430:	e0bff617 	ldw	r2,-40(fp)
   23434:	1880022e 	bgeu	r3,r2,23440 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   23438:	e0bffe17 	ldw	r2,-8(fp)
   2343c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23440:	e0bffc17 	ldw	r2,-16(fp)
   23444:	10c00e04 	addi	r3,r2,56
   23448:	e0bff817 	ldw	r2,-32(fp)
   2344c:	1885883a 	add	r2,r3,r2
   23450:	e1bff617 	ldw	r6,-40(fp)
   23454:	100b883a 	mov	r5,r2
   23458:	e13ff517 	ldw	r4,-44(fp)
   2345c:	0024d800 	call	24d80 <memcpy>
      ptr   += n;
   23460:	e0fff517 	ldw	r3,-44(fp)
   23464:	e0bff617 	ldw	r2,-40(fp)
   23468:	1885883a 	add	r2,r3,r2
   2346c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   23470:	e0fffe17 	ldw	r3,-8(fp)
   23474:	e0bff617 	ldw	r2,-40(fp)
   23478:	1885c83a 	sub	r2,r3,r2
   2347c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23480:	e0fff817 	ldw	r3,-32(fp)
   23484:	e0bff617 	ldw	r2,-40(fp)
   23488:	1885883a 	add	r2,r3,r2
   2348c:	10c1ffcc 	andi	r3,r2,2047
   23490:	e0bffc17 	ldw	r2,-16(fp)
   23494:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   23498:	e0bffe17 	ldw	r2,-8(fp)
   2349c:	00bfcf16 	blt	zero,r2,233dc <__alt_data_end+0xfffea3dc>
   234a0:	00000106 	br	234a8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   234a4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   234a8:	e0fff517 	ldw	r3,-44(fp)
   234ac:	e0bffd17 	ldw	r2,-12(fp)
   234b0:	1880141e 	bne	r3,r2,23504 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   234b4:	e0bfff17 	ldw	r2,-4(fp)
   234b8:	1090000c 	andi	r2,r2,16384
   234bc:	1000131e 	bne	r2,zero,2350c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   234c0:	0001883a 	nop
   234c4:	e0bffc17 	ldw	r2,-16(fp)
   234c8:	10c00a17 	ldw	r3,40(r2)
   234cc:	e0bff717 	ldw	r2,-36(fp)
   234d0:	1880051e 	bne	r3,r2,234e8 <altera_avalon_jtag_uart_read+0x138>
   234d4:	e0bffc17 	ldw	r2,-16(fp)
   234d8:	10c00917 	ldw	r3,36(r2)
   234dc:	e0bffc17 	ldw	r2,-16(fp)
   234e0:	10800117 	ldw	r2,4(r2)
   234e4:	18bff736 	bltu	r3,r2,234c4 <__alt_data_end+0xfffea4c4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   234e8:	e0bffc17 	ldw	r2,-16(fp)
   234ec:	10c00a17 	ldw	r3,40(r2)
   234f0:	e0bff717 	ldw	r2,-36(fp)
   234f4:	18800726 	beq	r3,r2,23514 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   234f8:	e0bffe17 	ldw	r2,-8(fp)
   234fc:	00bfb716 	blt	zero,r2,233dc <__alt_data_end+0xfffea3dc>
   23500:	00000506 	br	23518 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   23504:	0001883a 	nop
   23508:	00000306 	br	23518 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2350c:	0001883a 	nop
   23510:	00000106 	br	23518 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   23514:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23518:	e0fff517 	ldw	r3,-44(fp)
   2351c:	e0bffd17 	ldw	r2,-12(fp)
   23520:	18801826 	beq	r3,r2,23584 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23524:	0005303a 	rdctl	r2,status
   23528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2352c:	e0fffb17 	ldw	r3,-20(fp)
   23530:	00bfff84 	movi	r2,-2
   23534:	1884703a 	and	r2,r3,r2
   23538:	1001703a 	wrctl	status,r2
  
  return context;
   2353c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23540:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23544:	e0bffc17 	ldw	r2,-16(fp)
   23548:	10800817 	ldw	r2,32(r2)
   2354c:	10c00054 	ori	r3,r2,1
   23550:	e0bffc17 	ldw	r2,-16(fp)
   23554:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23558:	e0bffc17 	ldw	r2,-16(fp)
   2355c:	10800017 	ldw	r2,0(r2)
   23560:	10800104 	addi	r2,r2,4
   23564:	1007883a 	mov	r3,r2
   23568:	e0bffc17 	ldw	r2,-16(fp)
   2356c:	10800817 	ldw	r2,32(r2)
   23570:	18800035 	stwio	r2,0(r3)
   23574:	e0bffa17 	ldw	r2,-24(fp)
   23578:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2357c:	e0bff917 	ldw	r2,-28(fp)
   23580:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23584:	e0fff517 	ldw	r3,-44(fp)
   23588:	e0bffd17 	ldw	r2,-12(fp)
   2358c:	18800426 	beq	r3,r2,235a0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   23590:	e0fff517 	ldw	r3,-44(fp)
   23594:	e0bffd17 	ldw	r2,-12(fp)
   23598:	1885c83a 	sub	r2,r3,r2
   2359c:	00000606 	br	235b8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   235a0:	e0bfff17 	ldw	r2,-4(fp)
   235a4:	1090000c 	andi	r2,r2,16384
   235a8:	10000226 	beq	r2,zero,235b4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   235ac:	00bffd44 	movi	r2,-11
   235b0:	00000106 	br	235b8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   235b4:	00bffec4 	movi	r2,-5
}
   235b8:	e037883a 	mov	sp,fp
   235bc:	dfc00117 	ldw	ra,4(sp)
   235c0:	df000017 	ldw	fp,0(sp)
   235c4:	dec00204 	addi	sp,sp,8
   235c8:	f800283a 	ret

000235cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   235cc:	defff304 	addi	sp,sp,-52
   235d0:	dfc00c15 	stw	ra,48(sp)
   235d4:	df000b15 	stw	fp,44(sp)
   235d8:	df000b04 	addi	fp,sp,44
   235dc:	e13ffc15 	stw	r4,-16(fp)
   235e0:	e17ffd15 	stw	r5,-12(fp)
   235e4:	e1bffe15 	stw	r6,-8(fp)
   235e8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   235ec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   235f0:	e0bffd17 	ldw	r2,-12(fp)
   235f4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   235f8:	00003706 	br	236d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   235fc:	e0bffc17 	ldw	r2,-16(fp)
   23600:	10800c17 	ldw	r2,48(r2)
   23604:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   23608:	e0bffc17 	ldw	r2,-16(fp)
   2360c:	10800d17 	ldw	r2,52(r2)
   23610:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   23614:	e0fff917 	ldw	r3,-28(fp)
   23618:	e0bff517 	ldw	r2,-44(fp)
   2361c:	1880062e 	bgeu	r3,r2,23638 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   23620:	e0fff517 	ldw	r3,-44(fp)
   23624:	e0bff917 	ldw	r2,-28(fp)
   23628:	1885c83a 	sub	r2,r3,r2
   2362c:	10bfffc4 	addi	r2,r2,-1
   23630:	e0bff615 	stw	r2,-40(fp)
   23634:	00000b06 	br	23664 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   23638:	e0bff517 	ldw	r2,-44(fp)
   2363c:	10000526 	beq	r2,zero,23654 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   23640:	00c20004 	movi	r3,2048
   23644:	e0bff917 	ldw	r2,-28(fp)
   23648:	1885c83a 	sub	r2,r3,r2
   2364c:	e0bff615 	stw	r2,-40(fp)
   23650:	00000406 	br	23664 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   23654:	00c1ffc4 	movi	r3,2047
   23658:	e0bff917 	ldw	r2,-28(fp)
   2365c:	1885c83a 	sub	r2,r3,r2
   23660:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23664:	e0bff617 	ldw	r2,-40(fp)
   23668:	10001e26 	beq	r2,zero,236e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2366c:	e0fffe17 	ldw	r3,-8(fp)
   23670:	e0bff617 	ldw	r2,-40(fp)
   23674:	1880022e 	bgeu	r3,r2,23680 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   23678:	e0bffe17 	ldw	r2,-8(fp)
   2367c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   23680:	e0bffc17 	ldw	r2,-16(fp)
   23684:	10c20e04 	addi	r3,r2,2104
   23688:	e0bff917 	ldw	r2,-28(fp)
   2368c:	1885883a 	add	r2,r3,r2
   23690:	e1bff617 	ldw	r6,-40(fp)
   23694:	e17ffd17 	ldw	r5,-12(fp)
   23698:	1009883a 	mov	r4,r2
   2369c:	0024d800 	call	24d80 <memcpy>
      ptr   += n;
   236a0:	e0fffd17 	ldw	r3,-12(fp)
   236a4:	e0bff617 	ldw	r2,-40(fp)
   236a8:	1885883a 	add	r2,r3,r2
   236ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   236b0:	e0fffe17 	ldw	r3,-8(fp)
   236b4:	e0bff617 	ldw	r2,-40(fp)
   236b8:	1885c83a 	sub	r2,r3,r2
   236bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   236c0:	e0fff917 	ldw	r3,-28(fp)
   236c4:	e0bff617 	ldw	r2,-40(fp)
   236c8:	1885883a 	add	r2,r3,r2
   236cc:	10c1ffcc 	andi	r3,r2,2047
   236d0:	e0bffc17 	ldw	r2,-16(fp)
   236d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   236d8:	e0bffe17 	ldw	r2,-8(fp)
   236dc:	00bfc716 	blt	zero,r2,235fc <__alt_data_end+0xfffea5fc>
   236e0:	00000106 	br	236e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   236e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   236e8:	0005303a 	rdctl	r2,status
   236ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   236f0:	e0fffb17 	ldw	r3,-20(fp)
   236f4:	00bfff84 	movi	r2,-2
   236f8:	1884703a 	and	r2,r3,r2
   236fc:	1001703a 	wrctl	status,r2
  
  return context;
   23700:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   23704:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23708:	e0bffc17 	ldw	r2,-16(fp)
   2370c:	10800817 	ldw	r2,32(r2)
   23710:	10c00094 	ori	r3,r2,2
   23714:	e0bffc17 	ldw	r2,-16(fp)
   23718:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2371c:	e0bffc17 	ldw	r2,-16(fp)
   23720:	10800017 	ldw	r2,0(r2)
   23724:	10800104 	addi	r2,r2,4
   23728:	1007883a 	mov	r3,r2
   2372c:	e0bffc17 	ldw	r2,-16(fp)
   23730:	10800817 	ldw	r2,32(r2)
   23734:	18800035 	stwio	r2,0(r3)
   23738:	e0bffa17 	ldw	r2,-24(fp)
   2373c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23740:	e0bff817 	ldw	r2,-32(fp)
   23744:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   23748:	e0bffe17 	ldw	r2,-8(fp)
   2374c:	0080100e 	bge	zero,r2,23790 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   23750:	e0bfff17 	ldw	r2,-4(fp)
   23754:	1090000c 	andi	r2,r2,16384
   23758:	1000101e 	bne	r2,zero,2379c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2375c:	0001883a 	nop
   23760:	e0bffc17 	ldw	r2,-16(fp)
   23764:	10c00d17 	ldw	r3,52(r2)
   23768:	e0bff517 	ldw	r2,-44(fp)
   2376c:	1880051e 	bne	r3,r2,23784 <altera_avalon_jtag_uart_write+0x1b8>
   23770:	e0bffc17 	ldw	r2,-16(fp)
   23774:	10c00917 	ldw	r3,36(r2)
   23778:	e0bffc17 	ldw	r2,-16(fp)
   2377c:	10800117 	ldw	r2,4(r2)
   23780:	18bff736 	bltu	r3,r2,23760 <__alt_data_end+0xfffea760>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   23784:	e0bffc17 	ldw	r2,-16(fp)
   23788:	10800917 	ldw	r2,36(r2)
   2378c:	1000051e 	bne	r2,zero,237a4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   23790:	e0bffe17 	ldw	r2,-8(fp)
   23794:	00bfd016 	blt	zero,r2,236d8 <__alt_data_end+0xfffea6d8>
   23798:	00000306 	br	237a8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2379c:	0001883a 	nop
   237a0:	00000106 	br	237a8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   237a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   237a8:	e0fffd17 	ldw	r3,-12(fp)
   237ac:	e0bff717 	ldw	r2,-36(fp)
   237b0:	18800426 	beq	r3,r2,237c4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   237b4:	e0fffd17 	ldw	r3,-12(fp)
   237b8:	e0bff717 	ldw	r2,-36(fp)
   237bc:	1885c83a 	sub	r2,r3,r2
   237c0:	00000606 	br	237dc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   237c4:	e0bfff17 	ldw	r2,-4(fp)
   237c8:	1090000c 	andi	r2,r2,16384
   237cc:	10000226 	beq	r2,zero,237d8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   237d0:	00bffd44 	movi	r2,-11
   237d4:	00000106 	br	237dc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   237d8:	00bffec4 	movi	r2,-5
}
   237dc:	e037883a 	mov	sp,fp
   237e0:	dfc00117 	ldw	ra,4(sp)
   237e4:	df000017 	ldw	fp,0(sp)
   237e8:	dec00204 	addi	sp,sp,8
   237ec:	f800283a 	ret

000237f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   237f0:	defffa04 	addi	sp,sp,-24
   237f4:	dfc00515 	stw	ra,20(sp)
   237f8:	df000415 	stw	fp,16(sp)
   237fc:	df000404 	addi	fp,sp,16
   23800:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   23804:	0007883a 	mov	r3,zero
   23808:	e0bfff17 	ldw	r2,-4(fp)
   2380c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   23810:	e0bfff17 	ldw	r2,-4(fp)
   23814:	10800104 	addi	r2,r2,4
   23818:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2381c:	0005303a 	rdctl	r2,status
   23820:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23824:	e0fffd17 	ldw	r3,-12(fp)
   23828:	00bfff84 	movi	r2,-2
   2382c:	1884703a 	and	r2,r3,r2
   23830:	1001703a 	wrctl	status,r2
  
  return context;
   23834:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   23838:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2383c:	00242d00 	call	242d0 <alt_tick>
   23840:	e0bffc17 	ldw	r2,-16(fp)
   23844:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23848:	e0bffe17 	ldw	r2,-8(fp)
   2384c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   23850:	0001883a 	nop
   23854:	e037883a 	mov	sp,fp
   23858:	dfc00117 	ldw	ra,4(sp)
   2385c:	df000017 	ldw	fp,0(sp)
   23860:	dec00204 	addi	sp,sp,8
   23864:	f800283a 	ret

00023868 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   23868:	defff804 	addi	sp,sp,-32
   2386c:	dfc00715 	stw	ra,28(sp)
   23870:	df000615 	stw	fp,24(sp)
   23874:	df000604 	addi	fp,sp,24
   23878:	e13ffc15 	stw	r4,-16(fp)
   2387c:	e17ffd15 	stw	r5,-12(fp)
   23880:	e1bffe15 	stw	r6,-8(fp)
   23884:	e1ffff15 	stw	r7,-4(fp)
   23888:	e0bfff17 	ldw	r2,-4(fp)
   2388c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   23890:	d0a6ca17 	ldw	r2,-25816(gp)
   23894:	1000021e 	bne	r2,zero,238a0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   23898:	e0bffb17 	ldw	r2,-20(fp)
   2389c:	d0a6ca15 	stw	r2,-25816(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   238a0:	e0bffc17 	ldw	r2,-16(fp)
   238a4:	10800104 	addi	r2,r2,4
   238a8:	00c001c4 	movi	r3,7
   238ac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   238b0:	d8000015 	stw	zero,0(sp)
   238b4:	e1fffc17 	ldw	r7,-16(fp)
   238b8:	018000b4 	movhi	r6,2
   238bc:	318dfc04 	addi	r6,r6,14320
   238c0:	e17ffe17 	ldw	r5,-8(fp)
   238c4:	e13ffd17 	ldw	r4,-12(fp)
   238c8:	00227800 	call	22780 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   238cc:	0001883a 	nop
   238d0:	e037883a 	mov	sp,fp
   238d4:	dfc00117 	ldw	ra,4(sp)
   238d8:	df000017 	ldw	fp,0(sp)
   238dc:	dec00204 	addi	sp,sp,8
   238e0:	f800283a 	ret

000238e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   238e4:	defff504 	addi	sp,sp,-44
   238e8:	df000a15 	stw	fp,40(sp)
   238ec:	df000a04 	addi	fp,sp,40
   238f0:	e13ffc15 	stw	r4,-16(fp)
   238f4:	e17ffd15 	stw	r5,-12(fp)
   238f8:	e1bffe15 	stw	r6,-8(fp)
   238fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23900:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23904:	d0a6ca17 	ldw	r2,-25816(gp)
  
  if (alt_ticks_per_second ())
   23908:	10003c26 	beq	r2,zero,239fc <alt_alarm_start+0x118>
  {
    if (alarm)
   2390c:	e0bffc17 	ldw	r2,-16(fp)
   23910:	10003826 	beq	r2,zero,239f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   23914:	e0bffc17 	ldw	r2,-16(fp)
   23918:	e0fffe17 	ldw	r3,-8(fp)
   2391c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23920:	e0bffc17 	ldw	r2,-16(fp)
   23924:	e0ffff17 	ldw	r3,-4(fp)
   23928:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2392c:	0005303a 	rdctl	r2,status
   23930:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23934:	e0fff917 	ldw	r3,-28(fp)
   23938:	00bfff84 	movi	r2,-2
   2393c:	1884703a 	and	r2,r3,r2
   23940:	1001703a 	wrctl	status,r2
  
  return context;
   23944:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   23948:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2394c:	d0a6cb17 	ldw	r2,-25812(gp)
      
      current_nticks = alt_nticks();
   23950:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   23954:	e0fffd17 	ldw	r3,-12(fp)
   23958:	e0bff617 	ldw	r2,-40(fp)
   2395c:	1885883a 	add	r2,r3,r2
   23960:	10c00044 	addi	r3,r2,1
   23964:	e0bffc17 	ldw	r2,-16(fp)
   23968:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2396c:	e0bffc17 	ldw	r2,-16(fp)
   23970:	10c00217 	ldw	r3,8(r2)
   23974:	e0bff617 	ldw	r2,-40(fp)
   23978:	1880042e 	bgeu	r3,r2,2398c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2397c:	e0bffc17 	ldw	r2,-16(fp)
   23980:	00c00044 	movi	r3,1
   23984:	10c00405 	stb	r3,16(r2)
   23988:	00000206 	br	23994 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2398c:	e0bffc17 	ldw	r2,-16(fp)
   23990:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23994:	e0bffc17 	ldw	r2,-16(fp)
   23998:	d0e00f04 	addi	r3,gp,-32708
   2399c:	e0fffa15 	stw	r3,-24(fp)
   239a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   239a4:	e0bffb17 	ldw	r2,-20(fp)
   239a8:	e0fffa17 	ldw	r3,-24(fp)
   239ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   239b0:	e0bffa17 	ldw	r2,-24(fp)
   239b4:	10c00017 	ldw	r3,0(r2)
   239b8:	e0bffb17 	ldw	r2,-20(fp)
   239bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   239c0:	e0bffa17 	ldw	r2,-24(fp)
   239c4:	10800017 	ldw	r2,0(r2)
   239c8:	e0fffb17 	ldw	r3,-20(fp)
   239cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   239d0:	e0bffa17 	ldw	r2,-24(fp)
   239d4:	e0fffb17 	ldw	r3,-20(fp)
   239d8:	10c00015 	stw	r3,0(r2)
   239dc:	e0bff817 	ldw	r2,-32(fp)
   239e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   239e4:	e0bff717 	ldw	r2,-36(fp)
   239e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   239ec:	0005883a 	mov	r2,zero
   239f0:	00000306 	br	23a00 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   239f4:	00bffa84 	movi	r2,-22
   239f8:	00000106 	br	23a00 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   239fc:	00bfde84 	movi	r2,-134
  }
}
   23a00:	e037883a 	mov	sp,fp
   23a04:	df000017 	ldw	fp,0(sp)
   23a08:	dec00104 	addi	sp,sp,4
   23a0c:	f800283a 	ret

00023a10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23a10:	defffe04 	addi	sp,sp,-8
   23a14:	dfc00115 	stw	ra,4(sp)
   23a18:	df000015 	stw	fp,0(sp)
   23a1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a20:	d0a00e17 	ldw	r2,-32712(gp)
   23a24:	10000326 	beq	r2,zero,23a34 <alt_get_errno+0x24>
   23a28:	d0a00e17 	ldw	r2,-32712(gp)
   23a2c:	103ee83a 	callr	r2
   23a30:	00000106 	br	23a38 <alt_get_errno+0x28>
   23a34:	d0a6c404 	addi	r2,gp,-25840
}
   23a38:	e037883a 	mov	sp,fp
   23a3c:	dfc00117 	ldw	ra,4(sp)
   23a40:	df000017 	ldw	fp,0(sp)
   23a44:	dec00204 	addi	sp,sp,8
   23a48:	f800283a 	ret

00023a4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23a4c:	defffb04 	addi	sp,sp,-20
   23a50:	dfc00415 	stw	ra,16(sp)
   23a54:	df000315 	stw	fp,12(sp)
   23a58:	df000304 	addi	fp,sp,12
   23a5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23a60:	e0bfff17 	ldw	r2,-4(fp)
   23a64:	10000816 	blt	r2,zero,23a88 <close+0x3c>
   23a68:	01400304 	movi	r5,12
   23a6c:	e13fff17 	ldw	r4,-4(fp)
   23a70:	00219140 	call	21914 <__mulsi3>
   23a74:	1007883a 	mov	r3,r2
   23a78:	008000f4 	movhi	r2,3
   23a7c:	10a22d04 	addi	r2,r2,-30540
   23a80:	1885883a 	add	r2,r3,r2
   23a84:	00000106 	br	23a8c <close+0x40>
   23a88:	0005883a 	mov	r2,zero
   23a8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23a90:	e0bffd17 	ldw	r2,-12(fp)
   23a94:	10001926 	beq	r2,zero,23afc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23a98:	e0bffd17 	ldw	r2,-12(fp)
   23a9c:	10800017 	ldw	r2,0(r2)
   23aa0:	10800417 	ldw	r2,16(r2)
   23aa4:	10000626 	beq	r2,zero,23ac0 <close+0x74>
   23aa8:	e0bffd17 	ldw	r2,-12(fp)
   23aac:	10800017 	ldw	r2,0(r2)
   23ab0:	10800417 	ldw	r2,16(r2)
   23ab4:	e13ffd17 	ldw	r4,-12(fp)
   23ab8:	103ee83a 	callr	r2
   23abc:	00000106 	br	23ac4 <close+0x78>
   23ac0:	0005883a 	mov	r2,zero
   23ac4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23ac8:	e13fff17 	ldw	r4,-4(fp)
   23acc:	00241b00 	call	241b0 <alt_release_fd>
    if (rval < 0)
   23ad0:	e0bffe17 	ldw	r2,-8(fp)
   23ad4:	1000070e 	bge	r2,zero,23af4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   23ad8:	0023a100 	call	23a10 <alt_get_errno>
   23adc:	1007883a 	mov	r3,r2
   23ae0:	e0bffe17 	ldw	r2,-8(fp)
   23ae4:	0085c83a 	sub	r2,zero,r2
   23ae8:	18800015 	stw	r2,0(r3)
      return -1;
   23aec:	00bfffc4 	movi	r2,-1
   23af0:	00000706 	br	23b10 <close+0xc4>
    }
    return 0;
   23af4:	0005883a 	mov	r2,zero
   23af8:	00000506 	br	23b10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23afc:	0023a100 	call	23a10 <alt_get_errno>
   23b00:	1007883a 	mov	r3,r2
   23b04:	00801444 	movi	r2,81
   23b08:	18800015 	stw	r2,0(r3)
    return -1;
   23b0c:	00bfffc4 	movi	r2,-1
  }
}
   23b10:	e037883a 	mov	sp,fp
   23b14:	dfc00117 	ldw	ra,4(sp)
   23b18:	df000017 	ldw	fp,0(sp)
   23b1c:	dec00204 	addi	sp,sp,8
   23b20:	f800283a 	ret

00023b24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23b24:	deffff04 	addi	sp,sp,-4
   23b28:	df000015 	stw	fp,0(sp)
   23b2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23b30:	0001883a 	nop
   23b34:	e037883a 	mov	sp,fp
   23b38:	df000017 	ldw	fp,0(sp)
   23b3c:	dec00104 	addi	sp,sp,4
   23b40:	f800283a 	ret

00023b44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23b44:	defffc04 	addi	sp,sp,-16
   23b48:	df000315 	stw	fp,12(sp)
   23b4c:	df000304 	addi	fp,sp,12
   23b50:	e13ffd15 	stw	r4,-12(fp)
   23b54:	e17ffe15 	stw	r5,-8(fp)
   23b58:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23b5c:	e0bfff17 	ldw	r2,-4(fp)
}
   23b60:	e037883a 	mov	sp,fp
   23b64:	df000017 	ldw	fp,0(sp)
   23b68:	dec00104 	addi	sp,sp,4
   23b6c:	f800283a 	ret

00023b70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23b70:	defffe04 	addi	sp,sp,-8
   23b74:	dfc00115 	stw	ra,4(sp)
   23b78:	df000015 	stw	fp,0(sp)
   23b7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23b80:	d0a00e17 	ldw	r2,-32712(gp)
   23b84:	10000326 	beq	r2,zero,23b94 <alt_get_errno+0x24>
   23b88:	d0a00e17 	ldw	r2,-32712(gp)
   23b8c:	103ee83a 	callr	r2
   23b90:	00000106 	br	23b98 <alt_get_errno+0x28>
   23b94:	d0a6c404 	addi	r2,gp,-25840
}
   23b98:	e037883a 	mov	sp,fp
   23b9c:	dfc00117 	ldw	ra,4(sp)
   23ba0:	df000017 	ldw	fp,0(sp)
   23ba4:	dec00204 	addi	sp,sp,8
   23ba8:	f800283a 	ret

00023bac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23bac:	defffa04 	addi	sp,sp,-24
   23bb0:	dfc00515 	stw	ra,20(sp)
   23bb4:	df000415 	stw	fp,16(sp)
   23bb8:	df000404 	addi	fp,sp,16
   23bbc:	e13ffe15 	stw	r4,-8(fp)
   23bc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23bc4:	e0bffe17 	ldw	r2,-8(fp)
   23bc8:	10000326 	beq	r2,zero,23bd8 <alt_dev_llist_insert+0x2c>
   23bcc:	e0bffe17 	ldw	r2,-8(fp)
   23bd0:	10800217 	ldw	r2,8(r2)
   23bd4:	1000061e 	bne	r2,zero,23bf0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23bd8:	0023b700 	call	23b70 <alt_get_errno>
   23bdc:	1007883a 	mov	r3,r2
   23be0:	00800584 	movi	r2,22
   23be4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23be8:	00bffa84 	movi	r2,-22
   23bec:	00001306 	br	23c3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23bf0:	e0bffe17 	ldw	r2,-8(fp)
   23bf4:	e0ffff17 	ldw	r3,-4(fp)
   23bf8:	e0fffc15 	stw	r3,-16(fp)
   23bfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23c00:	e0bffd17 	ldw	r2,-12(fp)
   23c04:	e0fffc17 	ldw	r3,-16(fp)
   23c08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23c0c:	e0bffc17 	ldw	r2,-16(fp)
   23c10:	10c00017 	ldw	r3,0(r2)
   23c14:	e0bffd17 	ldw	r2,-12(fp)
   23c18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23c1c:	e0bffc17 	ldw	r2,-16(fp)
   23c20:	10800017 	ldw	r2,0(r2)
   23c24:	e0fffd17 	ldw	r3,-12(fp)
   23c28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23c2c:	e0bffc17 	ldw	r2,-16(fp)
   23c30:	e0fffd17 	ldw	r3,-12(fp)
   23c34:	10c00015 	stw	r3,0(r2)

  return 0;  
   23c38:	0005883a 	mov	r2,zero
}
   23c3c:	e037883a 	mov	sp,fp
   23c40:	dfc00117 	ldw	ra,4(sp)
   23c44:	df000017 	ldw	fp,0(sp)
   23c48:	dec00204 	addi	sp,sp,8
   23c4c:	f800283a 	ret

00023c50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23c50:	defffd04 	addi	sp,sp,-12
   23c54:	dfc00215 	stw	ra,8(sp)
   23c58:	df000115 	stw	fp,4(sp)
   23c5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23c60:	008000b4 	movhi	r2,2
   23c64:	109bb504 	addi	r2,r2,28372
   23c68:	e0bfff15 	stw	r2,-4(fp)
   23c6c:	00000606 	br	23c88 <_do_ctors+0x38>
        (*ctor) (); 
   23c70:	e0bfff17 	ldw	r2,-4(fp)
   23c74:	10800017 	ldw	r2,0(r2)
   23c78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23c7c:	e0bfff17 	ldw	r2,-4(fp)
   23c80:	10bfff04 	addi	r2,r2,-4
   23c84:	e0bfff15 	stw	r2,-4(fp)
   23c88:	e0ffff17 	ldw	r3,-4(fp)
   23c8c:	008000b4 	movhi	r2,2
   23c90:	109bb604 	addi	r2,r2,28376
   23c94:	18bff62e 	bgeu	r3,r2,23c70 <__alt_data_end+0xfffeac70>
        (*ctor) (); 
}
   23c98:	0001883a 	nop
   23c9c:	e037883a 	mov	sp,fp
   23ca0:	dfc00117 	ldw	ra,4(sp)
   23ca4:	df000017 	ldw	fp,0(sp)
   23ca8:	dec00204 	addi	sp,sp,8
   23cac:	f800283a 	ret

00023cb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23cb0:	defffd04 	addi	sp,sp,-12
   23cb4:	dfc00215 	stw	ra,8(sp)
   23cb8:	df000115 	stw	fp,4(sp)
   23cbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23cc0:	008000b4 	movhi	r2,2
   23cc4:	109bb504 	addi	r2,r2,28372
   23cc8:	e0bfff15 	stw	r2,-4(fp)
   23ccc:	00000606 	br	23ce8 <_do_dtors+0x38>
        (*dtor) (); 
   23cd0:	e0bfff17 	ldw	r2,-4(fp)
   23cd4:	10800017 	ldw	r2,0(r2)
   23cd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23cdc:	e0bfff17 	ldw	r2,-4(fp)
   23ce0:	10bfff04 	addi	r2,r2,-4
   23ce4:	e0bfff15 	stw	r2,-4(fp)
   23ce8:	e0ffff17 	ldw	r3,-4(fp)
   23cec:	008000b4 	movhi	r2,2
   23cf0:	109bb604 	addi	r2,r2,28376
   23cf4:	18bff62e 	bgeu	r3,r2,23cd0 <__alt_data_end+0xfffeacd0>
        (*dtor) (); 
}
   23cf8:	0001883a 	nop
   23cfc:	e037883a 	mov	sp,fp
   23d00:	dfc00117 	ldw	ra,4(sp)
   23d04:	df000017 	ldw	fp,0(sp)
   23d08:	dec00204 	addi	sp,sp,8
   23d0c:	f800283a 	ret

00023d10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23d10:	deffff04 	addi	sp,sp,-4
   23d14:	df000015 	stw	fp,0(sp)
   23d18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23d1c:	0001883a 	nop
   23d20:	e037883a 	mov	sp,fp
   23d24:	df000017 	ldw	fp,0(sp)
   23d28:	dec00104 	addi	sp,sp,4
   23d2c:	f800283a 	ret

00023d30 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23d30:	defffe04 	addi	sp,sp,-8
   23d34:	df000115 	stw	fp,4(sp)
   23d38:	df000104 	addi	fp,sp,4
   23d3c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   23d40:	e0bfff17 	ldw	r2,-4(fp)
   23d44:	10bffe84 	addi	r2,r2,-6
   23d48:	10c00428 	cmpgeui	r3,r2,16
   23d4c:	18001a1e 	bne	r3,zero,23db8 <alt_exception_cause_generated_bad_addr+0x88>
   23d50:	100690ba 	slli	r3,r2,2
   23d54:	008000b4 	movhi	r2,2
   23d58:	108f5a04 	addi	r2,r2,15720
   23d5c:	1885883a 	add	r2,r3,r2
   23d60:	10800017 	ldw	r2,0(r2)
   23d64:	1000683a 	jmp	r2
   23d68:	00023da8 	cmpgeui	zero,zero,2294
   23d6c:	00023da8 	cmpgeui	zero,zero,2294
   23d70:	00023db8 	rdprs	zero,zero,2294
   23d74:	00023db8 	rdprs	zero,zero,2294
   23d78:	00023db8 	rdprs	zero,zero,2294
   23d7c:	00023da8 	cmpgeui	zero,zero,2294
   23d80:	00023db0 	cmpltui	zero,zero,2294
   23d84:	00023db8 	rdprs	zero,zero,2294
   23d88:	00023da8 	cmpgeui	zero,zero,2294
   23d8c:	00023da8 	cmpgeui	zero,zero,2294
   23d90:	00023db8 	rdprs	zero,zero,2294
   23d94:	00023da8 	cmpgeui	zero,zero,2294
   23d98:	00023db0 	cmpltui	zero,zero,2294
   23d9c:	00023db8 	rdprs	zero,zero,2294
   23da0:	00023db8 	rdprs	zero,zero,2294
   23da4:	00023da8 	cmpgeui	zero,zero,2294
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23da8:	00800044 	movi	r2,1
   23dac:	00000306 	br	23dbc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23db0:	0005883a 	mov	r2,zero
   23db4:	00000106 	br	23dbc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23db8:	0005883a 	mov	r2,zero
  }
}
   23dbc:	e037883a 	mov	sp,fp
   23dc0:	df000017 	ldw	fp,0(sp)
   23dc4:	dec00104 	addi	sp,sp,4
   23dc8:	f800283a 	ret

00023dcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23dcc:	defff804 	addi	sp,sp,-32
   23dd0:	dfc00715 	stw	ra,28(sp)
   23dd4:	df000615 	stw	fp,24(sp)
   23dd8:	dc000515 	stw	r16,20(sp)
   23ddc:	df000604 	addi	fp,sp,24
   23de0:	e13ffb15 	stw	r4,-20(fp)
   23de4:	e17ffc15 	stw	r5,-16(fp)
   23de8:	e1bffd15 	stw	r6,-12(fp)
   23dec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23df0:	e1bffe17 	ldw	r6,-8(fp)
   23df4:	e17ffd17 	ldw	r5,-12(fp)
   23df8:	e13ffc17 	ldw	r4,-16(fp)
   23dfc:	00240540 	call	24054 <open>
   23e00:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23e04:	e0bffa17 	ldw	r2,-24(fp)
   23e08:	10002216 	blt	r2,zero,23e94 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23e0c:	040000f4 	movhi	r16,3
   23e10:	84222d04 	addi	r16,r16,-30540
   23e14:	e0bffa17 	ldw	r2,-24(fp)
   23e18:	01400304 	movi	r5,12
   23e1c:	1009883a 	mov	r4,r2
   23e20:	00219140 	call	21914 <__mulsi3>
   23e24:	8085883a 	add	r2,r16,r2
   23e28:	10c00017 	ldw	r3,0(r2)
   23e2c:	e0bffb17 	ldw	r2,-20(fp)
   23e30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23e34:	040000f4 	movhi	r16,3
   23e38:	84222d04 	addi	r16,r16,-30540
   23e3c:	e0bffa17 	ldw	r2,-24(fp)
   23e40:	01400304 	movi	r5,12
   23e44:	1009883a 	mov	r4,r2
   23e48:	00219140 	call	21914 <__mulsi3>
   23e4c:	8085883a 	add	r2,r16,r2
   23e50:	10800104 	addi	r2,r2,4
   23e54:	10c00017 	ldw	r3,0(r2)
   23e58:	e0bffb17 	ldw	r2,-20(fp)
   23e5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23e60:	040000f4 	movhi	r16,3
   23e64:	84222d04 	addi	r16,r16,-30540
   23e68:	e0bffa17 	ldw	r2,-24(fp)
   23e6c:	01400304 	movi	r5,12
   23e70:	1009883a 	mov	r4,r2
   23e74:	00219140 	call	21914 <__mulsi3>
   23e78:	8085883a 	add	r2,r16,r2
   23e7c:	10800204 	addi	r2,r2,8
   23e80:	10c00017 	ldw	r3,0(r2)
   23e84:	e0bffb17 	ldw	r2,-20(fp)
   23e88:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23e8c:	e13ffa17 	ldw	r4,-24(fp)
   23e90:	00241b00 	call	241b0 <alt_release_fd>
  }
} 
   23e94:	0001883a 	nop
   23e98:	e6ffff04 	addi	sp,fp,-4
   23e9c:	dfc00217 	ldw	ra,8(sp)
   23ea0:	df000117 	ldw	fp,4(sp)
   23ea4:	dc000017 	ldw	r16,0(sp)
   23ea8:	dec00304 	addi	sp,sp,12
   23eac:	f800283a 	ret

00023eb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23eb0:	defffb04 	addi	sp,sp,-20
   23eb4:	dfc00415 	stw	ra,16(sp)
   23eb8:	df000315 	stw	fp,12(sp)
   23ebc:	df000304 	addi	fp,sp,12
   23ec0:	e13ffd15 	stw	r4,-12(fp)
   23ec4:	e17ffe15 	stw	r5,-8(fp)
   23ec8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23ecc:	01c07fc4 	movi	r7,511
   23ed0:	01800044 	movi	r6,1
   23ed4:	e17ffd17 	ldw	r5,-12(fp)
   23ed8:	010000f4 	movhi	r4,3
   23edc:	21223004 	addi	r4,r4,-30528
   23ee0:	0023dcc0 	call	23dcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23ee4:	01c07fc4 	movi	r7,511
   23ee8:	000d883a 	mov	r6,zero
   23eec:	e17ffe17 	ldw	r5,-8(fp)
   23ef0:	010000f4 	movhi	r4,3
   23ef4:	21222d04 	addi	r4,r4,-30540
   23ef8:	0023dcc0 	call	23dcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23efc:	01c07fc4 	movi	r7,511
   23f00:	01800044 	movi	r6,1
   23f04:	e17fff17 	ldw	r5,-4(fp)
   23f08:	010000f4 	movhi	r4,3
   23f0c:	21223304 	addi	r4,r4,-30516
   23f10:	0023dcc0 	call	23dcc <alt_open_fd>
}  
   23f14:	0001883a 	nop
   23f18:	e037883a 	mov	sp,fp
   23f1c:	dfc00117 	ldw	ra,4(sp)
   23f20:	df000017 	ldw	fp,0(sp)
   23f24:	dec00204 	addi	sp,sp,8
   23f28:	f800283a 	ret

00023f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23f2c:	defffe04 	addi	sp,sp,-8
   23f30:	dfc00115 	stw	ra,4(sp)
   23f34:	df000015 	stw	fp,0(sp)
   23f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23f3c:	d0a00e17 	ldw	r2,-32712(gp)
   23f40:	10000326 	beq	r2,zero,23f50 <alt_get_errno+0x24>
   23f44:	d0a00e17 	ldw	r2,-32712(gp)
   23f48:	103ee83a 	callr	r2
   23f4c:	00000106 	br	23f54 <alt_get_errno+0x28>
   23f50:	d0a6c404 	addi	r2,gp,-25840
}
   23f54:	e037883a 	mov	sp,fp
   23f58:	dfc00117 	ldw	ra,4(sp)
   23f5c:	df000017 	ldw	fp,0(sp)
   23f60:	dec00204 	addi	sp,sp,8
   23f64:	f800283a 	ret

00023f68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23f68:	defffb04 	addi	sp,sp,-20
   23f6c:	dfc00415 	stw	ra,16(sp)
   23f70:	df000315 	stw	fp,12(sp)
   23f74:	dc000215 	stw	r16,8(sp)
   23f78:	df000304 	addi	fp,sp,12
   23f7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23f80:	e0bffe17 	ldw	r2,-8(fp)
   23f84:	10800217 	ldw	r2,8(r2)
   23f88:	10d00034 	orhi	r3,r2,16384
   23f8c:	e0bffe17 	ldw	r2,-8(fp)
   23f90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23f94:	e03ffd15 	stw	zero,-12(fp)
   23f98:	00002306 	br	24028 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23f9c:	040000f4 	movhi	r16,3
   23fa0:	84222d04 	addi	r16,r16,-30540
   23fa4:	e0bffd17 	ldw	r2,-12(fp)
   23fa8:	01400304 	movi	r5,12
   23fac:	1009883a 	mov	r4,r2
   23fb0:	00219140 	call	21914 <__mulsi3>
   23fb4:	8085883a 	add	r2,r16,r2
   23fb8:	10c00017 	ldw	r3,0(r2)
   23fbc:	e0bffe17 	ldw	r2,-8(fp)
   23fc0:	10800017 	ldw	r2,0(r2)
   23fc4:	1880151e 	bne	r3,r2,2401c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23fc8:	040000f4 	movhi	r16,3
   23fcc:	84222d04 	addi	r16,r16,-30540
   23fd0:	e0bffd17 	ldw	r2,-12(fp)
   23fd4:	01400304 	movi	r5,12
   23fd8:	1009883a 	mov	r4,r2
   23fdc:	00219140 	call	21914 <__mulsi3>
   23fe0:	8085883a 	add	r2,r16,r2
   23fe4:	10800204 	addi	r2,r2,8
   23fe8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23fec:	10000b0e 	bge	r2,zero,2401c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   23ff0:	01400304 	movi	r5,12
   23ff4:	e13ffd17 	ldw	r4,-12(fp)
   23ff8:	00219140 	call	21914 <__mulsi3>
   23ffc:	1007883a 	mov	r3,r2
   24000:	008000f4 	movhi	r2,3
   24004:	10a22d04 	addi	r2,r2,-30540
   24008:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2400c:	e0bffe17 	ldw	r2,-8(fp)
   24010:	18800226 	beq	r3,r2,2401c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24014:	00bffcc4 	movi	r2,-13
   24018:	00000806 	br	2403c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2401c:	e0bffd17 	ldw	r2,-12(fp)
   24020:	10800044 	addi	r2,r2,1
   24024:	e0bffd15 	stw	r2,-12(fp)
   24028:	d0a00d17 	ldw	r2,-32716(gp)
   2402c:	1007883a 	mov	r3,r2
   24030:	e0bffd17 	ldw	r2,-12(fp)
   24034:	18bfd92e 	bgeu	r3,r2,23f9c <__alt_data_end+0xfffeaf9c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24038:	0005883a 	mov	r2,zero
}
   2403c:	e6ffff04 	addi	sp,fp,-4
   24040:	dfc00217 	ldw	ra,8(sp)
   24044:	df000117 	ldw	fp,4(sp)
   24048:	dc000017 	ldw	r16,0(sp)
   2404c:	dec00304 	addi	sp,sp,12
   24050:	f800283a 	ret

00024054 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24054:	defff604 	addi	sp,sp,-40
   24058:	dfc00915 	stw	ra,36(sp)
   2405c:	df000815 	stw	fp,32(sp)
   24060:	df000804 	addi	fp,sp,32
   24064:	e13ffd15 	stw	r4,-12(fp)
   24068:	e17ffe15 	stw	r5,-8(fp)
   2406c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24070:	00bfffc4 	movi	r2,-1
   24074:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24078:	00bffb44 	movi	r2,-19
   2407c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24080:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24084:	d1600b04 	addi	r5,gp,-32724
   24088:	e13ffd17 	ldw	r4,-12(fp)
   2408c:	00243fc0 	call	243fc <alt_find_dev>
   24090:	e0bff815 	stw	r2,-32(fp)
   24094:	e0bff817 	ldw	r2,-32(fp)
   24098:	1000051e 	bne	r2,zero,240b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2409c:	e13ffd17 	ldw	r4,-12(fp)
   240a0:	002448c0 	call	2448c <alt_find_file>
   240a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   240a8:	00800044 	movi	r2,1
   240ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   240b0:	e0bff817 	ldw	r2,-32(fp)
   240b4:	10002b26 	beq	r2,zero,24164 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   240b8:	e13ff817 	ldw	r4,-32(fp)
   240bc:	00245940 	call	24594 <alt_get_fd>
   240c0:	e0bff915 	stw	r2,-28(fp)
   240c4:	e0bff917 	ldw	r2,-28(fp)
   240c8:	1000030e 	bge	r2,zero,240d8 <open+0x84>
    {
      status = index;
   240cc:	e0bff917 	ldw	r2,-28(fp)
   240d0:	e0bffa15 	stw	r2,-24(fp)
   240d4:	00002506 	br	2416c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   240d8:	01400304 	movi	r5,12
   240dc:	e13ff917 	ldw	r4,-28(fp)
   240e0:	00219140 	call	21914 <__mulsi3>
   240e4:	1007883a 	mov	r3,r2
   240e8:	008000f4 	movhi	r2,3
   240ec:	10a22d04 	addi	r2,r2,-30540
   240f0:	1885883a 	add	r2,r3,r2
   240f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   240f8:	e0fffe17 	ldw	r3,-8(fp)
   240fc:	00900034 	movhi	r2,16384
   24100:	10bfffc4 	addi	r2,r2,-1
   24104:	1886703a 	and	r3,r3,r2
   24108:	e0bffc17 	ldw	r2,-16(fp)
   2410c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24110:	e0bffb17 	ldw	r2,-20(fp)
   24114:	1000051e 	bne	r2,zero,2412c <open+0xd8>
   24118:	e13ffc17 	ldw	r4,-16(fp)
   2411c:	0023f680 	call	23f68 <alt_file_locked>
   24120:	e0bffa15 	stw	r2,-24(fp)
   24124:	e0bffa17 	ldw	r2,-24(fp)
   24128:	10001016 	blt	r2,zero,2416c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2412c:	e0bff817 	ldw	r2,-32(fp)
   24130:	10800317 	ldw	r2,12(r2)
   24134:	10000826 	beq	r2,zero,24158 <open+0x104>
   24138:	e0bff817 	ldw	r2,-32(fp)
   2413c:	10800317 	ldw	r2,12(r2)
   24140:	e1ffff17 	ldw	r7,-4(fp)
   24144:	e1bffe17 	ldw	r6,-8(fp)
   24148:	e17ffd17 	ldw	r5,-12(fp)
   2414c:	e13ffc17 	ldw	r4,-16(fp)
   24150:	103ee83a 	callr	r2
   24154:	00000106 	br	2415c <open+0x108>
   24158:	0005883a 	mov	r2,zero
   2415c:	e0bffa15 	stw	r2,-24(fp)
   24160:	00000206 	br	2416c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24164:	00bffb44 	movi	r2,-19
   24168:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2416c:	e0bffa17 	ldw	r2,-24(fp)
   24170:	1000090e 	bge	r2,zero,24198 <open+0x144>
  {
    alt_release_fd (index);  
   24174:	e13ff917 	ldw	r4,-28(fp)
   24178:	00241b00 	call	241b0 <alt_release_fd>
    ALT_ERRNO = -status;
   2417c:	0023f2c0 	call	23f2c <alt_get_errno>
   24180:	1007883a 	mov	r3,r2
   24184:	e0bffa17 	ldw	r2,-24(fp)
   24188:	0085c83a 	sub	r2,zero,r2
   2418c:	18800015 	stw	r2,0(r3)
    return -1;
   24190:	00bfffc4 	movi	r2,-1
   24194:	00000106 	br	2419c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   24198:	e0bff917 	ldw	r2,-28(fp)
}
   2419c:	e037883a 	mov	sp,fp
   241a0:	dfc00117 	ldw	ra,4(sp)
   241a4:	df000017 	ldw	fp,0(sp)
   241a8:	dec00204 	addi	sp,sp,8
   241ac:	f800283a 	ret

000241b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   241b0:	defffc04 	addi	sp,sp,-16
   241b4:	dfc00315 	stw	ra,12(sp)
   241b8:	df000215 	stw	fp,8(sp)
   241bc:	dc000115 	stw	r16,4(sp)
   241c0:	df000204 	addi	fp,sp,8
   241c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   241c8:	e0bffe17 	ldw	r2,-8(fp)
   241cc:	108000d0 	cmplti	r2,r2,3
   241d0:	1000111e 	bne	r2,zero,24218 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   241d4:	040000f4 	movhi	r16,3
   241d8:	84222d04 	addi	r16,r16,-30540
   241dc:	e0bffe17 	ldw	r2,-8(fp)
   241e0:	01400304 	movi	r5,12
   241e4:	1009883a 	mov	r4,r2
   241e8:	00219140 	call	21914 <__mulsi3>
   241ec:	8085883a 	add	r2,r16,r2
   241f0:	10800204 	addi	r2,r2,8
   241f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   241f8:	040000f4 	movhi	r16,3
   241fc:	84222d04 	addi	r16,r16,-30540
   24200:	e0bffe17 	ldw	r2,-8(fp)
   24204:	01400304 	movi	r5,12
   24208:	1009883a 	mov	r4,r2
   2420c:	00219140 	call	21914 <__mulsi3>
   24210:	8085883a 	add	r2,r16,r2
   24214:	10000015 	stw	zero,0(r2)
  }
}
   24218:	0001883a 	nop
   2421c:	e6ffff04 	addi	sp,fp,-4
   24220:	dfc00217 	ldw	ra,8(sp)
   24224:	df000117 	ldw	fp,4(sp)
   24228:	dc000017 	ldw	r16,0(sp)
   2422c:	dec00304 	addi	sp,sp,12
   24230:	f800283a 	ret

00024234 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24234:	defffa04 	addi	sp,sp,-24
   24238:	df000515 	stw	fp,20(sp)
   2423c:	df000504 	addi	fp,sp,20
   24240:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24244:	0005303a 	rdctl	r2,status
   24248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2424c:	e0fffc17 	ldw	r3,-16(fp)
   24250:	00bfff84 	movi	r2,-2
   24254:	1884703a 	and	r2,r3,r2
   24258:	1001703a 	wrctl	status,r2
  
  return context;
   2425c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24260:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24264:	e0bfff17 	ldw	r2,-4(fp)
   24268:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2426c:	e0bffd17 	ldw	r2,-12(fp)
   24270:	10800017 	ldw	r2,0(r2)
   24274:	e0fffd17 	ldw	r3,-12(fp)
   24278:	18c00117 	ldw	r3,4(r3)
   2427c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24280:	e0bffd17 	ldw	r2,-12(fp)
   24284:	10800117 	ldw	r2,4(r2)
   24288:	e0fffd17 	ldw	r3,-12(fp)
   2428c:	18c00017 	ldw	r3,0(r3)
   24290:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24294:	e0bffd17 	ldw	r2,-12(fp)
   24298:	e0fffd17 	ldw	r3,-12(fp)
   2429c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   242a0:	e0bffd17 	ldw	r2,-12(fp)
   242a4:	e0fffd17 	ldw	r3,-12(fp)
   242a8:	10c00015 	stw	r3,0(r2)
   242ac:	e0bffb17 	ldw	r2,-20(fp)
   242b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242b4:	e0bffe17 	ldw	r2,-8(fp)
   242b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   242bc:	0001883a 	nop
   242c0:	e037883a 	mov	sp,fp
   242c4:	df000017 	ldw	fp,0(sp)
   242c8:	dec00104 	addi	sp,sp,4
   242cc:	f800283a 	ret

000242d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   242d0:	defffb04 	addi	sp,sp,-20
   242d4:	dfc00415 	stw	ra,16(sp)
   242d8:	df000315 	stw	fp,12(sp)
   242dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   242e0:	d0a00f17 	ldw	r2,-32708(gp)
   242e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   242e8:	d0a6cb17 	ldw	r2,-25812(gp)
   242ec:	10800044 	addi	r2,r2,1
   242f0:	d0a6cb15 	stw	r2,-25812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   242f4:	00002e06 	br	243b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   242f8:	e0bffd17 	ldw	r2,-12(fp)
   242fc:	10800017 	ldw	r2,0(r2)
   24300:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24304:	e0bffd17 	ldw	r2,-12(fp)
   24308:	10800403 	ldbu	r2,16(r2)
   2430c:	10803fcc 	andi	r2,r2,255
   24310:	10000426 	beq	r2,zero,24324 <alt_tick+0x54>
   24314:	d0a6cb17 	ldw	r2,-25812(gp)
   24318:	1000021e 	bne	r2,zero,24324 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2431c:	e0bffd17 	ldw	r2,-12(fp)
   24320:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24324:	e0bffd17 	ldw	r2,-12(fp)
   24328:	10800217 	ldw	r2,8(r2)
   2432c:	d0e6cb17 	ldw	r3,-25812(gp)
   24330:	18801d36 	bltu	r3,r2,243a8 <alt_tick+0xd8>
   24334:	e0bffd17 	ldw	r2,-12(fp)
   24338:	10800403 	ldbu	r2,16(r2)
   2433c:	10803fcc 	andi	r2,r2,255
   24340:	1000191e 	bne	r2,zero,243a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24344:	e0bffd17 	ldw	r2,-12(fp)
   24348:	10800317 	ldw	r2,12(r2)
   2434c:	e0fffd17 	ldw	r3,-12(fp)
   24350:	18c00517 	ldw	r3,20(r3)
   24354:	1809883a 	mov	r4,r3
   24358:	103ee83a 	callr	r2
   2435c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24360:	e0bfff17 	ldw	r2,-4(fp)
   24364:	1000031e 	bne	r2,zero,24374 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24368:	e13ffd17 	ldw	r4,-12(fp)
   2436c:	00242340 	call	24234 <alt_alarm_stop>
   24370:	00000d06 	br	243a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24374:	e0bffd17 	ldw	r2,-12(fp)
   24378:	10c00217 	ldw	r3,8(r2)
   2437c:	e0bfff17 	ldw	r2,-4(fp)
   24380:	1887883a 	add	r3,r3,r2
   24384:	e0bffd17 	ldw	r2,-12(fp)
   24388:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2438c:	e0bffd17 	ldw	r2,-12(fp)
   24390:	10c00217 	ldw	r3,8(r2)
   24394:	d0a6cb17 	ldw	r2,-25812(gp)
   24398:	1880032e 	bgeu	r3,r2,243a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2439c:	e0bffd17 	ldw	r2,-12(fp)
   243a0:	00c00044 	movi	r3,1
   243a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   243a8:	e0bffe17 	ldw	r2,-8(fp)
   243ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   243b0:	e0fffd17 	ldw	r3,-12(fp)
   243b4:	d0a00f04 	addi	r2,gp,-32708
   243b8:	18bfcf1e 	bne	r3,r2,242f8 <__alt_data_end+0xfffeb2f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   243bc:	0001883a 	nop
}
   243c0:	0001883a 	nop
   243c4:	e037883a 	mov	sp,fp
   243c8:	dfc00117 	ldw	ra,4(sp)
   243cc:	df000017 	ldw	fp,0(sp)
   243d0:	dec00204 	addi	sp,sp,8
   243d4:	f800283a 	ret

000243d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   243d8:	deffff04 	addi	sp,sp,-4
   243dc:	df000015 	stw	fp,0(sp)
   243e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   243e4:	000170fa 	wrctl	ienable,zero
}
   243e8:	0001883a 	nop
   243ec:	e037883a 	mov	sp,fp
   243f0:	df000017 	ldw	fp,0(sp)
   243f4:	dec00104 	addi	sp,sp,4
   243f8:	f800283a 	ret

000243fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   243fc:	defffa04 	addi	sp,sp,-24
   24400:	dfc00515 	stw	ra,20(sp)
   24404:	df000415 	stw	fp,16(sp)
   24408:	df000404 	addi	fp,sp,16
   2440c:	e13ffe15 	stw	r4,-8(fp)
   24410:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24414:	e0bfff17 	ldw	r2,-4(fp)
   24418:	10800017 	ldw	r2,0(r2)
   2441c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24420:	e13ffe17 	ldw	r4,-8(fp)
   24424:	00255880 	call	25588 <strlen>
   24428:	10800044 	addi	r2,r2,1
   2442c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24430:	00000d06 	br	24468 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24434:	e0bffc17 	ldw	r2,-16(fp)
   24438:	10800217 	ldw	r2,8(r2)
   2443c:	e0fffd17 	ldw	r3,-12(fp)
   24440:	180d883a 	mov	r6,r3
   24444:	e17ffe17 	ldw	r5,-8(fp)
   24448:	1009883a 	mov	r4,r2
   2444c:	0024d040 	call	24d04 <memcmp>
   24450:	1000021e 	bne	r2,zero,2445c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24454:	e0bffc17 	ldw	r2,-16(fp)
   24458:	00000706 	br	24478 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2445c:	e0bffc17 	ldw	r2,-16(fp)
   24460:	10800017 	ldw	r2,0(r2)
   24464:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24468:	e0fffc17 	ldw	r3,-16(fp)
   2446c:	e0bfff17 	ldw	r2,-4(fp)
   24470:	18bff01e 	bne	r3,r2,24434 <__alt_data_end+0xfffeb434>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24474:	0005883a 	mov	r2,zero
}
   24478:	e037883a 	mov	sp,fp
   2447c:	dfc00117 	ldw	ra,4(sp)
   24480:	df000017 	ldw	fp,0(sp)
   24484:	dec00204 	addi	sp,sp,8
   24488:	f800283a 	ret

0002448c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2448c:	defffb04 	addi	sp,sp,-20
   24490:	dfc00415 	stw	ra,16(sp)
   24494:	df000315 	stw	fp,12(sp)
   24498:	df000304 	addi	fp,sp,12
   2449c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   244a0:	d0a00917 	ldw	r2,-32732(gp)
   244a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   244a8:	00003106 	br	24570 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   244ac:	e0bffd17 	ldw	r2,-12(fp)
   244b0:	10800217 	ldw	r2,8(r2)
   244b4:	1009883a 	mov	r4,r2
   244b8:	00255880 	call	25588 <strlen>
   244bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   244c0:	e0bffd17 	ldw	r2,-12(fp)
   244c4:	10c00217 	ldw	r3,8(r2)
   244c8:	e0bffe17 	ldw	r2,-8(fp)
   244cc:	10bfffc4 	addi	r2,r2,-1
   244d0:	1885883a 	add	r2,r3,r2
   244d4:	10800003 	ldbu	r2,0(r2)
   244d8:	10803fcc 	andi	r2,r2,255
   244dc:	1080201c 	xori	r2,r2,128
   244e0:	10bfe004 	addi	r2,r2,-128
   244e4:	10800bd8 	cmpnei	r2,r2,47
   244e8:	1000031e 	bne	r2,zero,244f8 <alt_find_file+0x6c>
    {
      len -= 1;
   244ec:	e0bffe17 	ldw	r2,-8(fp)
   244f0:	10bfffc4 	addi	r2,r2,-1
   244f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   244f8:	e0bffe17 	ldw	r2,-8(fp)
   244fc:	e0ffff17 	ldw	r3,-4(fp)
   24500:	1885883a 	add	r2,r3,r2
   24504:	10800003 	ldbu	r2,0(r2)
   24508:	10803fcc 	andi	r2,r2,255
   2450c:	1080201c 	xori	r2,r2,128
   24510:	10bfe004 	addi	r2,r2,-128
   24514:	10800be0 	cmpeqi	r2,r2,47
   24518:	1000081e 	bne	r2,zero,2453c <alt_find_file+0xb0>
   2451c:	e0bffe17 	ldw	r2,-8(fp)
   24520:	e0ffff17 	ldw	r3,-4(fp)
   24524:	1885883a 	add	r2,r3,r2
   24528:	10800003 	ldbu	r2,0(r2)
   2452c:	10803fcc 	andi	r2,r2,255
   24530:	1080201c 	xori	r2,r2,128
   24534:	10bfe004 	addi	r2,r2,-128
   24538:	10000a1e 	bne	r2,zero,24564 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2453c:	e0bffd17 	ldw	r2,-12(fp)
   24540:	10800217 	ldw	r2,8(r2)
   24544:	e0fffe17 	ldw	r3,-8(fp)
   24548:	180d883a 	mov	r6,r3
   2454c:	e17fff17 	ldw	r5,-4(fp)
   24550:	1009883a 	mov	r4,r2
   24554:	0024d040 	call	24d04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24558:	1000021e 	bne	r2,zero,24564 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2455c:	e0bffd17 	ldw	r2,-12(fp)
   24560:	00000706 	br	24580 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24564:	e0bffd17 	ldw	r2,-12(fp)
   24568:	10800017 	ldw	r2,0(r2)
   2456c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24570:	e0fffd17 	ldw	r3,-12(fp)
   24574:	d0a00904 	addi	r2,gp,-32732
   24578:	18bfcc1e 	bne	r3,r2,244ac <__alt_data_end+0xfffeb4ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2457c:	0005883a 	mov	r2,zero
}
   24580:	e037883a 	mov	sp,fp
   24584:	dfc00117 	ldw	ra,4(sp)
   24588:	df000017 	ldw	fp,0(sp)
   2458c:	dec00204 	addi	sp,sp,8
   24590:	f800283a 	ret

00024594 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24594:	defffa04 	addi	sp,sp,-24
   24598:	dfc00515 	stw	ra,20(sp)
   2459c:	df000415 	stw	fp,16(sp)
   245a0:	dc000315 	stw	r16,12(sp)
   245a4:	df000404 	addi	fp,sp,16
   245a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   245ac:	00bffa04 	movi	r2,-24
   245b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   245b4:	e03ffc15 	stw	zero,-16(fp)
   245b8:	00001d06 	br	24630 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   245bc:	040000f4 	movhi	r16,3
   245c0:	84222d04 	addi	r16,r16,-30540
   245c4:	e0bffc17 	ldw	r2,-16(fp)
   245c8:	01400304 	movi	r5,12
   245cc:	1009883a 	mov	r4,r2
   245d0:	00219140 	call	21914 <__mulsi3>
   245d4:	8085883a 	add	r2,r16,r2
   245d8:	10800017 	ldw	r2,0(r2)
   245dc:	1000111e 	bne	r2,zero,24624 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   245e0:	040000f4 	movhi	r16,3
   245e4:	84222d04 	addi	r16,r16,-30540
   245e8:	e0bffc17 	ldw	r2,-16(fp)
   245ec:	01400304 	movi	r5,12
   245f0:	1009883a 	mov	r4,r2
   245f4:	00219140 	call	21914 <__mulsi3>
   245f8:	8085883a 	add	r2,r16,r2
   245fc:	e0fffe17 	ldw	r3,-8(fp)
   24600:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24604:	d0e00d17 	ldw	r3,-32716(gp)
   24608:	e0bffc17 	ldw	r2,-16(fp)
   2460c:	1880020e 	bge	r3,r2,24618 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   24610:	e0bffc17 	ldw	r2,-16(fp)
   24614:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   24618:	e0bffc17 	ldw	r2,-16(fp)
   2461c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24620:	00000606 	br	2463c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24624:	e0bffc17 	ldw	r2,-16(fp)
   24628:	10800044 	addi	r2,r2,1
   2462c:	e0bffc15 	stw	r2,-16(fp)
   24630:	e0bffc17 	ldw	r2,-16(fp)
   24634:	10800810 	cmplti	r2,r2,32
   24638:	103fe01e 	bne	r2,zero,245bc <__alt_data_end+0xfffeb5bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2463c:	e0bffd17 	ldw	r2,-12(fp)
}
   24640:	e6ffff04 	addi	sp,fp,-4
   24644:	dfc00217 	ldw	ra,8(sp)
   24648:	df000117 	ldw	fp,4(sp)
   2464c:	dc000017 	ldw	r16,0(sp)
   24650:	dec00304 	addi	sp,sp,12
   24654:	f800283a 	ret

00024658 <atexit>:
   24658:	200b883a 	mov	r5,r4
   2465c:	000f883a 	mov	r7,zero
   24660:	000d883a 	mov	r6,zero
   24664:	0009883a 	mov	r4,zero
   24668:	00257741 	jmpi	25774 <__register_exitproc>

0002466c <exit>:
   2466c:	defffe04 	addi	sp,sp,-8
   24670:	000b883a 	mov	r5,zero
   24674:	dc000015 	stw	r16,0(sp)
   24678:	dfc00115 	stw	ra,4(sp)
   2467c:	2021883a 	mov	r16,r4
   24680:	002588c0 	call	2588c <__call_exitprocs>
   24684:	008000f4 	movhi	r2,3
   24688:	10a29204 	addi	r2,r2,-30136
   2468c:	11000017 	ldw	r4,0(r2)
   24690:	20800f17 	ldw	r2,60(r4)
   24694:	10000126 	beq	r2,zero,2469c <exit+0x30>
   24698:	103ee83a 	callr	r2
   2469c:	8009883a 	mov	r4,r16
   246a0:	00269340 	call	26934 <_exit>

000246a4 <_fputs_r>:
   246a4:	defff804 	addi	sp,sp,-32
   246a8:	dc400615 	stw	r17,24(sp)
   246ac:	2023883a 	mov	r17,r4
   246b0:	2809883a 	mov	r4,r5
   246b4:	dc000515 	stw	r16,20(sp)
   246b8:	dfc00715 	stw	ra,28(sp)
   246bc:	3021883a 	mov	r16,r6
   246c0:	d9400315 	stw	r5,12(sp)
   246c4:	00255880 	call	25588 <strlen>
   246c8:	d8800215 	stw	r2,8(sp)
   246cc:	d8800415 	stw	r2,16(sp)
   246d0:	d8800304 	addi	r2,sp,12
   246d4:	d8800015 	stw	r2,0(sp)
   246d8:	00800044 	movi	r2,1
   246dc:	d8800115 	stw	r2,4(sp)
   246e0:	88000226 	beq	r17,zero,246ec <_fputs_r+0x48>
   246e4:	88800e17 	ldw	r2,56(r17)
   246e8:	10001226 	beq	r2,zero,24734 <_fputs_r+0x90>
   246ec:	8080030b 	ldhu	r2,12(r16)
   246f0:	10c8000c 	andi	r3,r2,8192
   246f4:	1800061e 	bne	r3,zero,24710 <_fputs_r+0x6c>
   246f8:	81001917 	ldw	r4,100(r16)
   246fc:	00f7ffc4 	movi	r3,-8193
   24700:	10880014 	ori	r2,r2,8192
   24704:	20c6703a 	and	r3,r4,r3
   24708:	8080030d 	sth	r2,12(r16)
   2470c:	80c01915 	stw	r3,100(r16)
   24710:	d80d883a 	mov	r6,sp
   24714:	800b883a 	mov	r5,r16
   24718:	8809883a 	mov	r4,r17
   2471c:	00247580 	call	24758 <__sfvwrite_r>
   24720:	dfc00717 	ldw	ra,28(sp)
   24724:	dc400617 	ldw	r17,24(sp)
   24728:	dc000517 	ldw	r16,20(sp)
   2472c:	dec00804 	addi	sp,sp,32
   24730:	f800283a 	ret
   24734:	8809883a 	mov	r4,r17
   24738:	00260140 	call	26014 <__sinit>
   2473c:	003feb06 	br	246ec <__alt_data_end+0xfffeb6ec>

00024740 <fputs>:
   24740:	008000f4 	movhi	r2,3
   24744:	10a29304 	addi	r2,r2,-30132
   24748:	280d883a 	mov	r6,r5
   2474c:	200b883a 	mov	r5,r4
   24750:	11000017 	ldw	r4,0(r2)
   24754:	00246a41 	jmpi	246a4 <_fputs_r>

00024758 <__sfvwrite_r>:
   24758:	30800217 	ldw	r2,8(r6)
   2475c:	10006726 	beq	r2,zero,248fc <__sfvwrite_r+0x1a4>
   24760:	28c0030b 	ldhu	r3,12(r5)
   24764:	defff404 	addi	sp,sp,-48
   24768:	dd400715 	stw	r21,28(sp)
   2476c:	dd000615 	stw	r20,24(sp)
   24770:	dc000215 	stw	r16,8(sp)
   24774:	dfc00b15 	stw	ra,44(sp)
   24778:	df000a15 	stw	fp,40(sp)
   2477c:	ddc00915 	stw	r23,36(sp)
   24780:	dd800815 	stw	r22,32(sp)
   24784:	dcc00515 	stw	r19,20(sp)
   24788:	dc800415 	stw	r18,16(sp)
   2478c:	dc400315 	stw	r17,12(sp)
   24790:	1880020c 	andi	r2,r3,8
   24794:	2821883a 	mov	r16,r5
   24798:	202b883a 	mov	r21,r4
   2479c:	3029883a 	mov	r20,r6
   247a0:	10002726 	beq	r2,zero,24840 <__sfvwrite_r+0xe8>
   247a4:	28800417 	ldw	r2,16(r5)
   247a8:	10002526 	beq	r2,zero,24840 <__sfvwrite_r+0xe8>
   247ac:	1880008c 	andi	r2,r3,2
   247b0:	a4400017 	ldw	r17,0(r20)
   247b4:	10002a26 	beq	r2,zero,24860 <__sfvwrite_r+0x108>
   247b8:	05a00034 	movhi	r22,32768
   247bc:	0027883a 	mov	r19,zero
   247c0:	0025883a 	mov	r18,zero
   247c4:	b5bf0004 	addi	r22,r22,-1024
   247c8:	980d883a 	mov	r6,r19
   247cc:	a809883a 	mov	r4,r21
   247d0:	90004626 	beq	r18,zero,248ec <__sfvwrite_r+0x194>
   247d4:	900f883a 	mov	r7,r18
   247d8:	b480022e 	bgeu	r22,r18,247e4 <__sfvwrite_r+0x8c>
   247dc:	01e00034 	movhi	r7,32768
   247e0:	39ff0004 	addi	r7,r7,-1024
   247e4:	80800917 	ldw	r2,36(r16)
   247e8:	81400717 	ldw	r5,28(r16)
   247ec:	103ee83a 	callr	r2
   247f0:	00805a0e 	bge	zero,r2,2495c <__sfvwrite_r+0x204>
   247f4:	a0c00217 	ldw	r3,8(r20)
   247f8:	98a7883a 	add	r19,r19,r2
   247fc:	90a5c83a 	sub	r18,r18,r2
   24800:	1885c83a 	sub	r2,r3,r2
   24804:	a0800215 	stw	r2,8(r20)
   24808:	103fef1e 	bne	r2,zero,247c8 <__alt_data_end+0xfffeb7c8>
   2480c:	0005883a 	mov	r2,zero
   24810:	dfc00b17 	ldw	ra,44(sp)
   24814:	df000a17 	ldw	fp,40(sp)
   24818:	ddc00917 	ldw	r23,36(sp)
   2481c:	dd800817 	ldw	r22,32(sp)
   24820:	dd400717 	ldw	r21,28(sp)
   24824:	dd000617 	ldw	r20,24(sp)
   24828:	dcc00517 	ldw	r19,20(sp)
   2482c:	dc800417 	ldw	r18,16(sp)
   24830:	dc400317 	ldw	r17,12(sp)
   24834:	dc000217 	ldw	r16,8(sp)
   24838:	dec00c04 	addi	sp,sp,48
   2483c:	f800283a 	ret
   24840:	800b883a 	mov	r5,r16
   24844:	a809883a 	mov	r4,r21
   24848:	00256200 	call	25620 <__swsetup_r>
   2484c:	1000ee1e 	bne	r2,zero,24c08 <__sfvwrite_r+0x4b0>
   24850:	80c0030b 	ldhu	r3,12(r16)
   24854:	a4400017 	ldw	r17,0(r20)
   24858:	1880008c 	andi	r2,r3,2
   2485c:	103fd61e 	bne	r2,zero,247b8 <__alt_data_end+0xfffeb7b8>
   24860:	1880004c 	andi	r2,r3,1
   24864:	1000421e 	bne	r2,zero,24970 <__sfvwrite_r+0x218>
   24868:	0039883a 	mov	fp,zero
   2486c:	0025883a 	mov	r18,zero
   24870:	90001a26 	beq	r18,zero,248dc <__sfvwrite_r+0x184>
   24874:	1880800c 	andi	r2,r3,512
   24878:	84c00217 	ldw	r19,8(r16)
   2487c:	10002126 	beq	r2,zero,24904 <__sfvwrite_r+0x1ac>
   24880:	982f883a 	mov	r23,r19
   24884:	94c09636 	bltu	r18,r19,24ae0 <__sfvwrite_r+0x388>
   24888:	1881200c 	andi	r2,r3,1152
   2488c:	1000a11e 	bne	r2,zero,24b14 <__sfvwrite_r+0x3bc>
   24890:	81000017 	ldw	r4,0(r16)
   24894:	b80d883a 	mov	r6,r23
   24898:	e00b883a 	mov	r5,fp
   2489c:	0024ec80 	call	24ec8 <memmove>
   248a0:	80c00217 	ldw	r3,8(r16)
   248a4:	81000017 	ldw	r4,0(r16)
   248a8:	9005883a 	mov	r2,r18
   248ac:	1ce7c83a 	sub	r19,r3,r19
   248b0:	25cf883a 	add	r7,r4,r23
   248b4:	84c00215 	stw	r19,8(r16)
   248b8:	81c00015 	stw	r7,0(r16)
   248bc:	a0c00217 	ldw	r3,8(r20)
   248c0:	e0b9883a 	add	fp,fp,r2
   248c4:	90a5c83a 	sub	r18,r18,r2
   248c8:	18a7c83a 	sub	r19,r3,r2
   248cc:	a4c00215 	stw	r19,8(r20)
   248d0:	983fce26 	beq	r19,zero,2480c <__alt_data_end+0xfffeb80c>
   248d4:	80c0030b 	ldhu	r3,12(r16)
   248d8:	903fe61e 	bne	r18,zero,24874 <__alt_data_end+0xfffeb874>
   248dc:	8f000017 	ldw	fp,0(r17)
   248e0:	8c800117 	ldw	r18,4(r17)
   248e4:	8c400204 	addi	r17,r17,8
   248e8:	003fe106 	br	24870 <__alt_data_end+0xfffeb870>
   248ec:	8cc00017 	ldw	r19,0(r17)
   248f0:	8c800117 	ldw	r18,4(r17)
   248f4:	8c400204 	addi	r17,r17,8
   248f8:	003fb306 	br	247c8 <__alt_data_end+0xfffeb7c8>
   248fc:	0005883a 	mov	r2,zero
   24900:	f800283a 	ret
   24904:	81000017 	ldw	r4,0(r16)
   24908:	80800417 	ldw	r2,16(r16)
   2490c:	11005a36 	bltu	r2,r4,24a78 <__sfvwrite_r+0x320>
   24910:	85c00517 	ldw	r23,20(r16)
   24914:	95c05836 	bltu	r18,r23,24a78 <__sfvwrite_r+0x320>
   24918:	00a00034 	movhi	r2,32768
   2491c:	10bfffc4 	addi	r2,r2,-1
   24920:	9009883a 	mov	r4,r18
   24924:	1480012e 	bgeu	r2,r18,2492c <__sfvwrite_r+0x1d4>
   24928:	1009883a 	mov	r4,r2
   2492c:	b80b883a 	mov	r5,r23
   24930:	00217600 	call	21760 <__divsi3>
   24934:	b80b883a 	mov	r5,r23
   24938:	1009883a 	mov	r4,r2
   2493c:	00219140 	call	21914 <__mulsi3>
   24940:	81400717 	ldw	r5,28(r16)
   24944:	80c00917 	ldw	r3,36(r16)
   24948:	100f883a 	mov	r7,r2
   2494c:	e00d883a 	mov	r6,fp
   24950:	a809883a 	mov	r4,r21
   24954:	183ee83a 	callr	r3
   24958:	00bfd816 	blt	zero,r2,248bc <__alt_data_end+0xfffeb8bc>
   2495c:	8080030b 	ldhu	r2,12(r16)
   24960:	10801014 	ori	r2,r2,64
   24964:	8080030d 	sth	r2,12(r16)
   24968:	00bfffc4 	movi	r2,-1
   2496c:	003fa806 	br	24810 <__alt_data_end+0xfffeb810>
   24970:	0027883a 	mov	r19,zero
   24974:	0011883a 	mov	r8,zero
   24978:	0039883a 	mov	fp,zero
   2497c:	0025883a 	mov	r18,zero
   24980:	90001f26 	beq	r18,zero,24a00 <__sfvwrite_r+0x2a8>
   24984:	40005a26 	beq	r8,zero,24af0 <__sfvwrite_r+0x398>
   24988:	982d883a 	mov	r22,r19
   2498c:	94c0012e 	bgeu	r18,r19,24994 <__sfvwrite_r+0x23c>
   24990:	902d883a 	mov	r22,r18
   24994:	81000017 	ldw	r4,0(r16)
   24998:	80800417 	ldw	r2,16(r16)
   2499c:	b02f883a 	mov	r23,r22
   249a0:	81c00517 	ldw	r7,20(r16)
   249a4:	1100032e 	bgeu	r2,r4,249b4 <__sfvwrite_r+0x25c>
   249a8:	80c00217 	ldw	r3,8(r16)
   249ac:	38c7883a 	add	r3,r7,r3
   249b0:	1d801816 	blt	r3,r22,24a14 <__sfvwrite_r+0x2bc>
   249b4:	b1c03e16 	blt	r22,r7,24ab0 <__sfvwrite_r+0x358>
   249b8:	80800917 	ldw	r2,36(r16)
   249bc:	81400717 	ldw	r5,28(r16)
   249c0:	e00d883a 	mov	r6,fp
   249c4:	da000115 	stw	r8,4(sp)
   249c8:	a809883a 	mov	r4,r21
   249cc:	103ee83a 	callr	r2
   249d0:	102f883a 	mov	r23,r2
   249d4:	da000117 	ldw	r8,4(sp)
   249d8:	00bfe00e 	bge	zero,r2,2495c <__alt_data_end+0xfffeb95c>
   249dc:	9de7c83a 	sub	r19,r19,r23
   249e0:	98001f26 	beq	r19,zero,24a60 <__sfvwrite_r+0x308>
   249e4:	a0800217 	ldw	r2,8(r20)
   249e8:	e5f9883a 	add	fp,fp,r23
   249ec:	95e5c83a 	sub	r18,r18,r23
   249f0:	15efc83a 	sub	r23,r2,r23
   249f4:	a5c00215 	stw	r23,8(r20)
   249f8:	b83f8426 	beq	r23,zero,2480c <__alt_data_end+0xfffeb80c>
   249fc:	903fe11e 	bne	r18,zero,24984 <__alt_data_end+0xfffeb984>
   24a00:	8f000017 	ldw	fp,0(r17)
   24a04:	8c800117 	ldw	r18,4(r17)
   24a08:	0011883a 	mov	r8,zero
   24a0c:	8c400204 	addi	r17,r17,8
   24a10:	003fdb06 	br	24980 <__alt_data_end+0xfffeb980>
   24a14:	180d883a 	mov	r6,r3
   24a18:	e00b883a 	mov	r5,fp
   24a1c:	da000115 	stw	r8,4(sp)
   24a20:	d8c00015 	stw	r3,0(sp)
   24a24:	0024ec80 	call	24ec8 <memmove>
   24a28:	d8c00017 	ldw	r3,0(sp)
   24a2c:	80800017 	ldw	r2,0(r16)
   24a30:	800b883a 	mov	r5,r16
   24a34:	a809883a 	mov	r4,r21
   24a38:	10c5883a 	add	r2,r2,r3
   24a3c:	80800015 	stw	r2,0(r16)
   24a40:	d8c00015 	stw	r3,0(sp)
   24a44:	0025c280 	call	25c28 <_fflush_r>
   24a48:	d8c00017 	ldw	r3,0(sp)
   24a4c:	da000117 	ldw	r8,4(sp)
   24a50:	103fc21e 	bne	r2,zero,2495c <__alt_data_end+0xfffeb95c>
   24a54:	182f883a 	mov	r23,r3
   24a58:	9de7c83a 	sub	r19,r19,r23
   24a5c:	983fe11e 	bne	r19,zero,249e4 <__alt_data_end+0xfffeb9e4>
   24a60:	800b883a 	mov	r5,r16
   24a64:	a809883a 	mov	r4,r21
   24a68:	0025c280 	call	25c28 <_fflush_r>
   24a6c:	103fbb1e 	bne	r2,zero,2495c <__alt_data_end+0xfffeb95c>
   24a70:	0011883a 	mov	r8,zero
   24a74:	003fdb06 	br	249e4 <__alt_data_end+0xfffeb9e4>
   24a78:	94c0012e 	bgeu	r18,r19,24a80 <__sfvwrite_r+0x328>
   24a7c:	9027883a 	mov	r19,r18
   24a80:	980d883a 	mov	r6,r19
   24a84:	e00b883a 	mov	r5,fp
   24a88:	0024ec80 	call	24ec8 <memmove>
   24a8c:	80800217 	ldw	r2,8(r16)
   24a90:	80c00017 	ldw	r3,0(r16)
   24a94:	14c5c83a 	sub	r2,r2,r19
   24a98:	1cc7883a 	add	r3,r3,r19
   24a9c:	80800215 	stw	r2,8(r16)
   24aa0:	80c00015 	stw	r3,0(r16)
   24aa4:	10004326 	beq	r2,zero,24bb4 <__sfvwrite_r+0x45c>
   24aa8:	9805883a 	mov	r2,r19
   24aac:	003f8306 	br	248bc <__alt_data_end+0xfffeb8bc>
   24ab0:	b00d883a 	mov	r6,r22
   24ab4:	e00b883a 	mov	r5,fp
   24ab8:	da000115 	stw	r8,4(sp)
   24abc:	0024ec80 	call	24ec8 <memmove>
   24ac0:	80800217 	ldw	r2,8(r16)
   24ac4:	80c00017 	ldw	r3,0(r16)
   24ac8:	da000117 	ldw	r8,4(sp)
   24acc:	1585c83a 	sub	r2,r2,r22
   24ad0:	1dad883a 	add	r22,r3,r22
   24ad4:	80800215 	stw	r2,8(r16)
   24ad8:	85800015 	stw	r22,0(r16)
   24adc:	003fbf06 	br	249dc <__alt_data_end+0xfffeb9dc>
   24ae0:	81000017 	ldw	r4,0(r16)
   24ae4:	9027883a 	mov	r19,r18
   24ae8:	902f883a 	mov	r23,r18
   24aec:	003f6906 	br	24894 <__alt_data_end+0xfffeb894>
   24af0:	900d883a 	mov	r6,r18
   24af4:	01400284 	movi	r5,10
   24af8:	e009883a 	mov	r4,fp
   24afc:	0024c200 	call	24c20 <memchr>
   24b00:	10003e26 	beq	r2,zero,24bfc <__sfvwrite_r+0x4a4>
   24b04:	10800044 	addi	r2,r2,1
   24b08:	1727c83a 	sub	r19,r2,fp
   24b0c:	02000044 	movi	r8,1
   24b10:	003f9d06 	br	24988 <__alt_data_end+0xfffeb988>
   24b14:	80800517 	ldw	r2,20(r16)
   24b18:	81400417 	ldw	r5,16(r16)
   24b1c:	81c00017 	ldw	r7,0(r16)
   24b20:	10a7883a 	add	r19,r2,r2
   24b24:	9885883a 	add	r2,r19,r2
   24b28:	1026d7fa 	srli	r19,r2,31
   24b2c:	396dc83a 	sub	r22,r7,r5
   24b30:	b1000044 	addi	r4,r22,1
   24b34:	9885883a 	add	r2,r19,r2
   24b38:	1027d07a 	srai	r19,r2,1
   24b3c:	2485883a 	add	r2,r4,r18
   24b40:	980d883a 	mov	r6,r19
   24b44:	9880022e 	bgeu	r19,r2,24b50 <__sfvwrite_r+0x3f8>
   24b48:	1027883a 	mov	r19,r2
   24b4c:	100d883a 	mov	r6,r2
   24b50:	18c1000c 	andi	r3,r3,1024
   24b54:	18001c26 	beq	r3,zero,24bc8 <__sfvwrite_r+0x470>
   24b58:	300b883a 	mov	r5,r6
   24b5c:	a809883a 	mov	r4,r21
   24b60:	00219640 	call	21964 <_malloc_r>
   24b64:	102f883a 	mov	r23,r2
   24b68:	10002926 	beq	r2,zero,24c10 <__sfvwrite_r+0x4b8>
   24b6c:	81400417 	ldw	r5,16(r16)
   24b70:	b00d883a 	mov	r6,r22
   24b74:	1009883a 	mov	r4,r2
   24b78:	0024d800 	call	24d80 <memcpy>
   24b7c:	8080030b 	ldhu	r2,12(r16)
   24b80:	00fedfc4 	movi	r3,-1153
   24b84:	10c4703a 	and	r2,r2,r3
   24b88:	10802014 	ori	r2,r2,128
   24b8c:	8080030d 	sth	r2,12(r16)
   24b90:	bd89883a 	add	r4,r23,r22
   24b94:	9d8fc83a 	sub	r7,r19,r22
   24b98:	85c00415 	stw	r23,16(r16)
   24b9c:	84c00515 	stw	r19,20(r16)
   24ba0:	81000015 	stw	r4,0(r16)
   24ba4:	9027883a 	mov	r19,r18
   24ba8:	81c00215 	stw	r7,8(r16)
   24bac:	902f883a 	mov	r23,r18
   24bb0:	003f3806 	br	24894 <__alt_data_end+0xfffeb894>
   24bb4:	800b883a 	mov	r5,r16
   24bb8:	a809883a 	mov	r4,r21
   24bbc:	0025c280 	call	25c28 <_fflush_r>
   24bc0:	103fb926 	beq	r2,zero,24aa8 <__alt_data_end+0xfffebaa8>
   24bc4:	003f6506 	br	2495c <__alt_data_end+0xfffeb95c>
   24bc8:	a809883a 	mov	r4,r21
   24bcc:	00250240 	call	25024 <_realloc_r>
   24bd0:	102f883a 	mov	r23,r2
   24bd4:	103fee1e 	bne	r2,zero,24b90 <__alt_data_end+0xfffebb90>
   24bd8:	81400417 	ldw	r5,16(r16)
   24bdc:	a809883a 	mov	r4,r21
   24be0:	00223640 	call	22364 <_free_r>
   24be4:	8080030b 	ldhu	r2,12(r16)
   24be8:	00ffdfc4 	movi	r3,-129
   24bec:	1884703a 	and	r2,r3,r2
   24bf0:	00c00304 	movi	r3,12
   24bf4:	a8c00015 	stw	r3,0(r21)
   24bf8:	003f5906 	br	24960 <__alt_data_end+0xfffeb960>
   24bfc:	94c00044 	addi	r19,r18,1
   24c00:	02000044 	movi	r8,1
   24c04:	003f6006 	br	24988 <__alt_data_end+0xfffeb988>
   24c08:	00bfffc4 	movi	r2,-1
   24c0c:	003f0006 	br	24810 <__alt_data_end+0xfffeb810>
   24c10:	00800304 	movi	r2,12
   24c14:	a8800015 	stw	r2,0(r21)
   24c18:	8080030b 	ldhu	r2,12(r16)
   24c1c:	003f5006 	br	24960 <__alt_data_end+0xfffeb960>

00024c20 <memchr>:
   24c20:	208000cc 	andi	r2,r4,3
   24c24:	280f883a 	mov	r7,r5
   24c28:	10003426 	beq	r2,zero,24cfc <memchr+0xdc>
   24c2c:	30bfffc4 	addi	r2,r6,-1
   24c30:	30001a26 	beq	r6,zero,24c9c <memchr+0x7c>
   24c34:	20c00003 	ldbu	r3,0(r4)
   24c38:	29803fcc 	andi	r6,r5,255
   24c3c:	30c0051e 	bne	r6,r3,24c54 <memchr+0x34>
   24c40:	00001806 	br	24ca4 <memchr+0x84>
   24c44:	10001526 	beq	r2,zero,24c9c <memchr+0x7c>
   24c48:	20c00003 	ldbu	r3,0(r4)
   24c4c:	10bfffc4 	addi	r2,r2,-1
   24c50:	30c01426 	beq	r6,r3,24ca4 <memchr+0x84>
   24c54:	21000044 	addi	r4,r4,1
   24c58:	20c000cc 	andi	r3,r4,3
   24c5c:	183ff91e 	bne	r3,zero,24c44 <__alt_data_end+0xfffebc44>
   24c60:	020000c4 	movi	r8,3
   24c64:	40801136 	bltu	r8,r2,24cac <memchr+0x8c>
   24c68:	10000c26 	beq	r2,zero,24c9c <memchr+0x7c>
   24c6c:	20c00003 	ldbu	r3,0(r4)
   24c70:	29403fcc 	andi	r5,r5,255
   24c74:	28c00b26 	beq	r5,r3,24ca4 <memchr+0x84>
   24c78:	20c00044 	addi	r3,r4,1
   24c7c:	39803fcc 	andi	r6,r7,255
   24c80:	2089883a 	add	r4,r4,r2
   24c84:	00000306 	br	24c94 <memchr+0x74>
   24c88:	18c00044 	addi	r3,r3,1
   24c8c:	197fffc3 	ldbu	r5,-1(r3)
   24c90:	31400526 	beq	r6,r5,24ca8 <memchr+0x88>
   24c94:	1805883a 	mov	r2,r3
   24c98:	20fffb1e 	bne	r4,r3,24c88 <__alt_data_end+0xfffebc88>
   24c9c:	0005883a 	mov	r2,zero
   24ca0:	f800283a 	ret
   24ca4:	2005883a 	mov	r2,r4
   24ca8:	f800283a 	ret
   24cac:	28c03fcc 	andi	r3,r5,255
   24cb0:	1812923a 	slli	r9,r3,8
   24cb4:	02ffbff4 	movhi	r11,65279
   24cb8:	02a02074 	movhi	r10,32897
   24cbc:	48d2b03a 	or	r9,r9,r3
   24cc0:	4806943a 	slli	r3,r9,16
   24cc4:	5affbfc4 	addi	r11,r11,-257
   24cc8:	52a02004 	addi	r10,r10,-32640
   24ccc:	48d2b03a 	or	r9,r9,r3
   24cd0:	20c00017 	ldw	r3,0(r4)
   24cd4:	48c6f03a 	xor	r3,r9,r3
   24cd8:	1acd883a 	add	r6,r3,r11
   24cdc:	00c6303a 	nor	r3,zero,r3
   24ce0:	30c6703a 	and	r3,r6,r3
   24ce4:	1a86703a 	and	r3,r3,r10
   24ce8:	183fe01e 	bne	r3,zero,24c6c <__alt_data_end+0xfffebc6c>
   24cec:	10bfff04 	addi	r2,r2,-4
   24cf0:	21000104 	addi	r4,r4,4
   24cf4:	40bff636 	bltu	r8,r2,24cd0 <__alt_data_end+0xfffebcd0>
   24cf8:	003fdb06 	br	24c68 <__alt_data_end+0xfffebc68>
   24cfc:	3005883a 	mov	r2,r6
   24d00:	003fd706 	br	24c60 <__alt_data_end+0xfffebc60>

00024d04 <memcmp>:
   24d04:	01c000c4 	movi	r7,3
   24d08:	3980192e 	bgeu	r7,r6,24d70 <memcmp+0x6c>
   24d0c:	2144b03a 	or	r2,r4,r5
   24d10:	11c4703a 	and	r2,r2,r7
   24d14:	10000f26 	beq	r2,zero,24d54 <memcmp+0x50>
   24d18:	20800003 	ldbu	r2,0(r4)
   24d1c:	28c00003 	ldbu	r3,0(r5)
   24d20:	10c0151e 	bne	r2,r3,24d78 <memcmp+0x74>
   24d24:	31bfff84 	addi	r6,r6,-2
   24d28:	01ffffc4 	movi	r7,-1
   24d2c:	00000406 	br	24d40 <memcmp+0x3c>
   24d30:	20800003 	ldbu	r2,0(r4)
   24d34:	28c00003 	ldbu	r3,0(r5)
   24d38:	31bfffc4 	addi	r6,r6,-1
   24d3c:	10c00e1e 	bne	r2,r3,24d78 <memcmp+0x74>
   24d40:	21000044 	addi	r4,r4,1
   24d44:	29400044 	addi	r5,r5,1
   24d48:	31fff91e 	bne	r6,r7,24d30 <__alt_data_end+0xfffebd30>
   24d4c:	0005883a 	mov	r2,zero
   24d50:	f800283a 	ret
   24d54:	20c00017 	ldw	r3,0(r4)
   24d58:	28800017 	ldw	r2,0(r5)
   24d5c:	18bfee1e 	bne	r3,r2,24d18 <__alt_data_end+0xfffebd18>
   24d60:	31bfff04 	addi	r6,r6,-4
   24d64:	21000104 	addi	r4,r4,4
   24d68:	29400104 	addi	r5,r5,4
   24d6c:	39bff936 	bltu	r7,r6,24d54 <__alt_data_end+0xfffebd54>
   24d70:	303fe91e 	bne	r6,zero,24d18 <__alt_data_end+0xfffebd18>
   24d74:	003ff506 	br	24d4c <__alt_data_end+0xfffebd4c>
   24d78:	10c5c83a 	sub	r2,r2,r3
   24d7c:	f800283a 	ret

00024d80 <memcpy>:
   24d80:	defffd04 	addi	sp,sp,-12
   24d84:	dfc00215 	stw	ra,8(sp)
   24d88:	dc400115 	stw	r17,4(sp)
   24d8c:	dc000015 	stw	r16,0(sp)
   24d90:	00c003c4 	movi	r3,15
   24d94:	2005883a 	mov	r2,r4
   24d98:	1980452e 	bgeu	r3,r6,24eb0 <memcpy+0x130>
   24d9c:	2906b03a 	or	r3,r5,r4
   24da0:	18c000cc 	andi	r3,r3,3
   24da4:	1800441e 	bne	r3,zero,24eb8 <memcpy+0x138>
   24da8:	347ffc04 	addi	r17,r6,-16
   24dac:	8822d13a 	srli	r17,r17,4
   24db0:	28c00104 	addi	r3,r5,4
   24db4:	23400104 	addi	r13,r4,4
   24db8:	8820913a 	slli	r16,r17,4
   24dbc:	2b000204 	addi	r12,r5,8
   24dc0:	22c00204 	addi	r11,r4,8
   24dc4:	84000504 	addi	r16,r16,20
   24dc8:	2a800304 	addi	r10,r5,12
   24dcc:	22400304 	addi	r9,r4,12
   24dd0:	2c21883a 	add	r16,r5,r16
   24dd4:	2811883a 	mov	r8,r5
   24dd8:	200f883a 	mov	r7,r4
   24ddc:	41000017 	ldw	r4,0(r8)
   24de0:	1fc00017 	ldw	ra,0(r3)
   24de4:	63c00017 	ldw	r15,0(r12)
   24de8:	39000015 	stw	r4,0(r7)
   24dec:	53800017 	ldw	r14,0(r10)
   24df0:	6fc00015 	stw	ra,0(r13)
   24df4:	5bc00015 	stw	r15,0(r11)
   24df8:	4b800015 	stw	r14,0(r9)
   24dfc:	18c00404 	addi	r3,r3,16
   24e00:	39c00404 	addi	r7,r7,16
   24e04:	42000404 	addi	r8,r8,16
   24e08:	6b400404 	addi	r13,r13,16
   24e0c:	63000404 	addi	r12,r12,16
   24e10:	5ac00404 	addi	r11,r11,16
   24e14:	52800404 	addi	r10,r10,16
   24e18:	4a400404 	addi	r9,r9,16
   24e1c:	1c3fef1e 	bne	r3,r16,24ddc <__alt_data_end+0xfffebddc>
   24e20:	89c00044 	addi	r7,r17,1
   24e24:	380e913a 	slli	r7,r7,4
   24e28:	310003cc 	andi	r4,r6,15
   24e2c:	02c000c4 	movi	r11,3
   24e30:	11c7883a 	add	r3,r2,r7
   24e34:	29cb883a 	add	r5,r5,r7
   24e38:	5900212e 	bgeu	r11,r4,24ec0 <memcpy+0x140>
   24e3c:	1813883a 	mov	r9,r3
   24e40:	2811883a 	mov	r8,r5
   24e44:	200f883a 	mov	r7,r4
   24e48:	42800017 	ldw	r10,0(r8)
   24e4c:	4a400104 	addi	r9,r9,4
   24e50:	39ffff04 	addi	r7,r7,-4
   24e54:	4abfff15 	stw	r10,-4(r9)
   24e58:	42000104 	addi	r8,r8,4
   24e5c:	59fffa36 	bltu	r11,r7,24e48 <__alt_data_end+0xfffebe48>
   24e60:	213fff04 	addi	r4,r4,-4
   24e64:	2008d0ba 	srli	r4,r4,2
   24e68:	318000cc 	andi	r6,r6,3
   24e6c:	21000044 	addi	r4,r4,1
   24e70:	2109883a 	add	r4,r4,r4
   24e74:	2109883a 	add	r4,r4,r4
   24e78:	1907883a 	add	r3,r3,r4
   24e7c:	290b883a 	add	r5,r5,r4
   24e80:	30000626 	beq	r6,zero,24e9c <memcpy+0x11c>
   24e84:	198d883a 	add	r6,r3,r6
   24e88:	29c00003 	ldbu	r7,0(r5)
   24e8c:	18c00044 	addi	r3,r3,1
   24e90:	29400044 	addi	r5,r5,1
   24e94:	19ffffc5 	stb	r7,-1(r3)
   24e98:	19bffb1e 	bne	r3,r6,24e88 <__alt_data_end+0xfffebe88>
   24e9c:	dfc00217 	ldw	ra,8(sp)
   24ea0:	dc400117 	ldw	r17,4(sp)
   24ea4:	dc000017 	ldw	r16,0(sp)
   24ea8:	dec00304 	addi	sp,sp,12
   24eac:	f800283a 	ret
   24eb0:	2007883a 	mov	r3,r4
   24eb4:	003ff206 	br	24e80 <__alt_data_end+0xfffebe80>
   24eb8:	2007883a 	mov	r3,r4
   24ebc:	003ff106 	br	24e84 <__alt_data_end+0xfffebe84>
   24ec0:	200d883a 	mov	r6,r4
   24ec4:	003fee06 	br	24e80 <__alt_data_end+0xfffebe80>

00024ec8 <memmove>:
   24ec8:	2005883a 	mov	r2,r4
   24ecc:	29000b2e 	bgeu	r5,r4,24efc <memmove+0x34>
   24ed0:	298f883a 	add	r7,r5,r6
   24ed4:	21c0092e 	bgeu	r4,r7,24efc <memmove+0x34>
   24ed8:	2187883a 	add	r3,r4,r6
   24edc:	198bc83a 	sub	r5,r3,r6
   24ee0:	30004826 	beq	r6,zero,25004 <memmove+0x13c>
   24ee4:	39ffffc4 	addi	r7,r7,-1
   24ee8:	39000003 	ldbu	r4,0(r7)
   24eec:	18ffffc4 	addi	r3,r3,-1
   24ef0:	19000005 	stb	r4,0(r3)
   24ef4:	28fffb1e 	bne	r5,r3,24ee4 <__alt_data_end+0xfffebee4>
   24ef8:	f800283a 	ret
   24efc:	00c003c4 	movi	r3,15
   24f00:	1980412e 	bgeu	r3,r6,25008 <memmove+0x140>
   24f04:	2886b03a 	or	r3,r5,r2
   24f08:	18c000cc 	andi	r3,r3,3
   24f0c:	1800401e 	bne	r3,zero,25010 <memmove+0x148>
   24f10:	33fffc04 	addi	r15,r6,-16
   24f14:	781ed13a 	srli	r15,r15,4
   24f18:	28c00104 	addi	r3,r5,4
   24f1c:	13400104 	addi	r13,r2,4
   24f20:	781c913a 	slli	r14,r15,4
   24f24:	2b000204 	addi	r12,r5,8
   24f28:	12c00204 	addi	r11,r2,8
   24f2c:	73800504 	addi	r14,r14,20
   24f30:	2a800304 	addi	r10,r5,12
   24f34:	12400304 	addi	r9,r2,12
   24f38:	2b9d883a 	add	r14,r5,r14
   24f3c:	2811883a 	mov	r8,r5
   24f40:	100f883a 	mov	r7,r2
   24f44:	41000017 	ldw	r4,0(r8)
   24f48:	39c00404 	addi	r7,r7,16
   24f4c:	18c00404 	addi	r3,r3,16
   24f50:	393ffc15 	stw	r4,-16(r7)
   24f54:	193ffc17 	ldw	r4,-16(r3)
   24f58:	6b400404 	addi	r13,r13,16
   24f5c:	5ac00404 	addi	r11,r11,16
   24f60:	693ffc15 	stw	r4,-16(r13)
   24f64:	61000017 	ldw	r4,0(r12)
   24f68:	4a400404 	addi	r9,r9,16
   24f6c:	42000404 	addi	r8,r8,16
   24f70:	593ffc15 	stw	r4,-16(r11)
   24f74:	51000017 	ldw	r4,0(r10)
   24f78:	63000404 	addi	r12,r12,16
   24f7c:	52800404 	addi	r10,r10,16
   24f80:	493ffc15 	stw	r4,-16(r9)
   24f84:	1bbfef1e 	bne	r3,r14,24f44 <__alt_data_end+0xfffebf44>
   24f88:	79000044 	addi	r4,r15,1
   24f8c:	2008913a 	slli	r4,r4,4
   24f90:	328003cc 	andi	r10,r6,15
   24f94:	02c000c4 	movi	r11,3
   24f98:	1107883a 	add	r3,r2,r4
   24f9c:	290b883a 	add	r5,r5,r4
   24fa0:	5a801e2e 	bgeu	r11,r10,2501c <memmove+0x154>
   24fa4:	1813883a 	mov	r9,r3
   24fa8:	2811883a 	mov	r8,r5
   24fac:	500f883a 	mov	r7,r10
   24fb0:	41000017 	ldw	r4,0(r8)
   24fb4:	4a400104 	addi	r9,r9,4
   24fb8:	39ffff04 	addi	r7,r7,-4
   24fbc:	493fff15 	stw	r4,-4(r9)
   24fc0:	42000104 	addi	r8,r8,4
   24fc4:	59fffa36 	bltu	r11,r7,24fb0 <__alt_data_end+0xfffebfb0>
   24fc8:	513fff04 	addi	r4,r10,-4
   24fcc:	2008d0ba 	srli	r4,r4,2
   24fd0:	318000cc 	andi	r6,r6,3
   24fd4:	21000044 	addi	r4,r4,1
   24fd8:	2109883a 	add	r4,r4,r4
   24fdc:	2109883a 	add	r4,r4,r4
   24fe0:	1907883a 	add	r3,r3,r4
   24fe4:	290b883a 	add	r5,r5,r4
   24fe8:	30000b26 	beq	r6,zero,25018 <memmove+0x150>
   24fec:	198d883a 	add	r6,r3,r6
   24ff0:	29c00003 	ldbu	r7,0(r5)
   24ff4:	18c00044 	addi	r3,r3,1
   24ff8:	29400044 	addi	r5,r5,1
   24ffc:	19ffffc5 	stb	r7,-1(r3)
   25000:	19bffb1e 	bne	r3,r6,24ff0 <__alt_data_end+0xfffebff0>
   25004:	f800283a 	ret
   25008:	1007883a 	mov	r3,r2
   2500c:	003ff606 	br	24fe8 <__alt_data_end+0xfffebfe8>
   25010:	1007883a 	mov	r3,r2
   25014:	003ff506 	br	24fec <__alt_data_end+0xfffebfec>
   25018:	f800283a 	ret
   2501c:	500d883a 	mov	r6,r10
   25020:	003ff106 	br	24fe8 <__alt_data_end+0xfffebfe8>

00025024 <_realloc_r>:
   25024:	defff604 	addi	sp,sp,-40
   25028:	dc800215 	stw	r18,8(sp)
   2502c:	dfc00915 	stw	ra,36(sp)
   25030:	df000815 	stw	fp,32(sp)
   25034:	ddc00715 	stw	r23,28(sp)
   25038:	dd800615 	stw	r22,24(sp)
   2503c:	dd400515 	stw	r21,20(sp)
   25040:	dd000415 	stw	r20,16(sp)
   25044:	dcc00315 	stw	r19,12(sp)
   25048:	dc400115 	stw	r17,4(sp)
   2504c:	dc000015 	stw	r16,0(sp)
   25050:	3025883a 	mov	r18,r6
   25054:	2800b726 	beq	r5,zero,25334 <_realloc_r+0x310>
   25058:	282b883a 	mov	r21,r5
   2505c:	2029883a 	mov	r20,r4
   25060:	0022b880 	call	22b88 <__malloc_lock>
   25064:	a8bfff17 	ldw	r2,-4(r21)
   25068:	043fff04 	movi	r16,-4
   2506c:	90c002c4 	addi	r3,r18,11
   25070:	01000584 	movi	r4,22
   25074:	acfffe04 	addi	r19,r21,-8
   25078:	1420703a 	and	r16,r2,r16
   2507c:	20c0332e 	bgeu	r4,r3,2514c <_realloc_r+0x128>
   25080:	047ffe04 	movi	r17,-8
   25084:	1c62703a 	and	r17,r3,r17
   25088:	8807883a 	mov	r3,r17
   2508c:	88005816 	blt	r17,zero,251f0 <_realloc_r+0x1cc>
   25090:	8c805736 	bltu	r17,r18,251f0 <_realloc_r+0x1cc>
   25094:	80c0300e 	bge	r16,r3,25158 <_realloc_r+0x134>
   25098:	070000b4 	movhi	fp,2
   2509c:	e71c0004 	addi	fp,fp,28672
   250a0:	e1c00217 	ldw	r7,8(fp)
   250a4:	9c09883a 	add	r4,r19,r16
   250a8:	22000117 	ldw	r8,4(r4)
   250ac:	21c06326 	beq	r4,r7,2523c <_realloc_r+0x218>
   250b0:	017fff84 	movi	r5,-2
   250b4:	414a703a 	and	r5,r8,r5
   250b8:	214b883a 	add	r5,r4,r5
   250bc:	29800117 	ldw	r6,4(r5)
   250c0:	3180004c 	andi	r6,r6,1
   250c4:	30003f26 	beq	r6,zero,251c4 <_realloc_r+0x1a0>
   250c8:	1080004c 	andi	r2,r2,1
   250cc:	10008326 	beq	r2,zero,252dc <_realloc_r+0x2b8>
   250d0:	900b883a 	mov	r5,r18
   250d4:	a009883a 	mov	r4,r20
   250d8:	00219640 	call	21964 <_malloc_r>
   250dc:	1025883a 	mov	r18,r2
   250e0:	10011e26 	beq	r2,zero,2555c <_realloc_r+0x538>
   250e4:	a93fff17 	ldw	r4,-4(r21)
   250e8:	10fffe04 	addi	r3,r2,-8
   250ec:	00bfff84 	movi	r2,-2
   250f0:	2084703a 	and	r2,r4,r2
   250f4:	9885883a 	add	r2,r19,r2
   250f8:	1880ee26 	beq	r3,r2,254b4 <_realloc_r+0x490>
   250fc:	81bfff04 	addi	r6,r16,-4
   25100:	00800904 	movi	r2,36
   25104:	1180b836 	bltu	r2,r6,253e8 <_realloc_r+0x3c4>
   25108:	00c004c4 	movi	r3,19
   2510c:	19809636 	bltu	r3,r6,25368 <_realloc_r+0x344>
   25110:	9005883a 	mov	r2,r18
   25114:	a807883a 	mov	r3,r21
   25118:	19000017 	ldw	r4,0(r3)
   2511c:	11000015 	stw	r4,0(r2)
   25120:	19000117 	ldw	r4,4(r3)
   25124:	11000115 	stw	r4,4(r2)
   25128:	18c00217 	ldw	r3,8(r3)
   2512c:	10c00215 	stw	r3,8(r2)
   25130:	a80b883a 	mov	r5,r21
   25134:	a009883a 	mov	r4,r20
   25138:	00223640 	call	22364 <_free_r>
   2513c:	a009883a 	mov	r4,r20
   25140:	0022bac0 	call	22bac <__malloc_unlock>
   25144:	9005883a 	mov	r2,r18
   25148:	00001206 	br	25194 <_realloc_r+0x170>
   2514c:	00c00404 	movi	r3,16
   25150:	1823883a 	mov	r17,r3
   25154:	003fce06 	br	25090 <__alt_data_end+0xfffec090>
   25158:	a825883a 	mov	r18,r21
   2515c:	8445c83a 	sub	r2,r16,r17
   25160:	00c003c4 	movi	r3,15
   25164:	18802636 	bltu	r3,r2,25200 <_realloc_r+0x1dc>
   25168:	99800117 	ldw	r6,4(r19)
   2516c:	9c07883a 	add	r3,r19,r16
   25170:	3180004c 	andi	r6,r6,1
   25174:	3420b03a 	or	r16,r6,r16
   25178:	9c000115 	stw	r16,4(r19)
   2517c:	18800117 	ldw	r2,4(r3)
   25180:	10800054 	ori	r2,r2,1
   25184:	18800115 	stw	r2,4(r3)
   25188:	a009883a 	mov	r4,r20
   2518c:	0022bac0 	call	22bac <__malloc_unlock>
   25190:	9005883a 	mov	r2,r18
   25194:	dfc00917 	ldw	ra,36(sp)
   25198:	df000817 	ldw	fp,32(sp)
   2519c:	ddc00717 	ldw	r23,28(sp)
   251a0:	dd800617 	ldw	r22,24(sp)
   251a4:	dd400517 	ldw	r21,20(sp)
   251a8:	dd000417 	ldw	r20,16(sp)
   251ac:	dcc00317 	ldw	r19,12(sp)
   251b0:	dc800217 	ldw	r18,8(sp)
   251b4:	dc400117 	ldw	r17,4(sp)
   251b8:	dc000017 	ldw	r16,0(sp)
   251bc:	dec00a04 	addi	sp,sp,40
   251c0:	f800283a 	ret
   251c4:	017fff04 	movi	r5,-4
   251c8:	414a703a 	and	r5,r8,r5
   251cc:	814d883a 	add	r6,r16,r5
   251d0:	30c01f16 	blt	r6,r3,25250 <_realloc_r+0x22c>
   251d4:	20800317 	ldw	r2,12(r4)
   251d8:	20c00217 	ldw	r3,8(r4)
   251dc:	a825883a 	mov	r18,r21
   251e0:	3021883a 	mov	r16,r6
   251e4:	18800315 	stw	r2,12(r3)
   251e8:	10c00215 	stw	r3,8(r2)
   251ec:	003fdb06 	br	2515c <__alt_data_end+0xfffec15c>
   251f0:	00800304 	movi	r2,12
   251f4:	a0800015 	stw	r2,0(r20)
   251f8:	0005883a 	mov	r2,zero
   251fc:	003fe506 	br	25194 <__alt_data_end+0xfffec194>
   25200:	98c00117 	ldw	r3,4(r19)
   25204:	9c4b883a 	add	r5,r19,r17
   25208:	11000054 	ori	r4,r2,1
   2520c:	18c0004c 	andi	r3,r3,1
   25210:	1c62b03a 	or	r17,r3,r17
   25214:	9c400115 	stw	r17,4(r19)
   25218:	29000115 	stw	r4,4(r5)
   2521c:	2885883a 	add	r2,r5,r2
   25220:	10c00117 	ldw	r3,4(r2)
   25224:	29400204 	addi	r5,r5,8
   25228:	a009883a 	mov	r4,r20
   2522c:	18c00054 	ori	r3,r3,1
   25230:	10c00115 	stw	r3,4(r2)
   25234:	00223640 	call	22364 <_free_r>
   25238:	003fd306 	br	25188 <__alt_data_end+0xfffec188>
   2523c:	017fff04 	movi	r5,-4
   25240:	414a703a 	and	r5,r8,r5
   25244:	89800404 	addi	r6,r17,16
   25248:	8151883a 	add	r8,r16,r5
   2524c:	4180590e 	bge	r8,r6,253b4 <_realloc_r+0x390>
   25250:	1080004c 	andi	r2,r2,1
   25254:	103f9e1e 	bne	r2,zero,250d0 <__alt_data_end+0xfffec0d0>
   25258:	adbffe17 	ldw	r22,-8(r21)
   2525c:	00bfff04 	movi	r2,-4
   25260:	9dadc83a 	sub	r22,r19,r22
   25264:	b1800117 	ldw	r6,4(r22)
   25268:	3084703a 	and	r2,r6,r2
   2526c:	20002026 	beq	r4,zero,252f0 <_realloc_r+0x2cc>
   25270:	80af883a 	add	r23,r16,r2
   25274:	b96f883a 	add	r23,r23,r5
   25278:	21c05f26 	beq	r4,r7,253f8 <_realloc_r+0x3d4>
   2527c:	b8c01c16 	blt	r23,r3,252f0 <_realloc_r+0x2cc>
   25280:	20800317 	ldw	r2,12(r4)
   25284:	20c00217 	ldw	r3,8(r4)
   25288:	81bfff04 	addi	r6,r16,-4
   2528c:	01000904 	movi	r4,36
   25290:	18800315 	stw	r2,12(r3)
   25294:	10c00215 	stw	r3,8(r2)
   25298:	b0c00217 	ldw	r3,8(r22)
   2529c:	b0800317 	ldw	r2,12(r22)
   252a0:	b4800204 	addi	r18,r22,8
   252a4:	18800315 	stw	r2,12(r3)
   252a8:	10c00215 	stw	r3,8(r2)
   252ac:	21801b36 	bltu	r4,r6,2531c <_realloc_r+0x2f8>
   252b0:	008004c4 	movi	r2,19
   252b4:	1180352e 	bgeu	r2,r6,2538c <_realloc_r+0x368>
   252b8:	a8800017 	ldw	r2,0(r21)
   252bc:	b0800215 	stw	r2,8(r22)
   252c0:	a8800117 	ldw	r2,4(r21)
   252c4:	b0800315 	stw	r2,12(r22)
   252c8:	008006c4 	movi	r2,27
   252cc:	11807f36 	bltu	r2,r6,254cc <_realloc_r+0x4a8>
   252d0:	b0800404 	addi	r2,r22,16
   252d4:	ad400204 	addi	r21,r21,8
   252d8:	00002d06 	br	25390 <_realloc_r+0x36c>
   252dc:	adbffe17 	ldw	r22,-8(r21)
   252e0:	00bfff04 	movi	r2,-4
   252e4:	9dadc83a 	sub	r22,r19,r22
   252e8:	b1000117 	ldw	r4,4(r22)
   252ec:	2084703a 	and	r2,r4,r2
   252f0:	b03f7726 	beq	r22,zero,250d0 <__alt_data_end+0xfffec0d0>
   252f4:	80af883a 	add	r23,r16,r2
   252f8:	b8ff7516 	blt	r23,r3,250d0 <__alt_data_end+0xfffec0d0>
   252fc:	b0800317 	ldw	r2,12(r22)
   25300:	b0c00217 	ldw	r3,8(r22)
   25304:	81bfff04 	addi	r6,r16,-4
   25308:	01000904 	movi	r4,36
   2530c:	18800315 	stw	r2,12(r3)
   25310:	10c00215 	stw	r3,8(r2)
   25314:	b4800204 	addi	r18,r22,8
   25318:	21bfe52e 	bgeu	r4,r6,252b0 <__alt_data_end+0xfffec2b0>
   2531c:	a80b883a 	mov	r5,r21
   25320:	9009883a 	mov	r4,r18
   25324:	0024ec80 	call	24ec8 <memmove>
   25328:	b821883a 	mov	r16,r23
   2532c:	b027883a 	mov	r19,r22
   25330:	003f8a06 	br	2515c <__alt_data_end+0xfffec15c>
   25334:	300b883a 	mov	r5,r6
   25338:	dfc00917 	ldw	ra,36(sp)
   2533c:	df000817 	ldw	fp,32(sp)
   25340:	ddc00717 	ldw	r23,28(sp)
   25344:	dd800617 	ldw	r22,24(sp)
   25348:	dd400517 	ldw	r21,20(sp)
   2534c:	dd000417 	ldw	r20,16(sp)
   25350:	dcc00317 	ldw	r19,12(sp)
   25354:	dc800217 	ldw	r18,8(sp)
   25358:	dc400117 	ldw	r17,4(sp)
   2535c:	dc000017 	ldw	r16,0(sp)
   25360:	dec00a04 	addi	sp,sp,40
   25364:	00219641 	jmpi	21964 <_malloc_r>
   25368:	a8c00017 	ldw	r3,0(r21)
   2536c:	90c00015 	stw	r3,0(r18)
   25370:	a8c00117 	ldw	r3,4(r21)
   25374:	90c00115 	stw	r3,4(r18)
   25378:	00c006c4 	movi	r3,27
   2537c:	19804536 	bltu	r3,r6,25494 <_realloc_r+0x470>
   25380:	90800204 	addi	r2,r18,8
   25384:	a8c00204 	addi	r3,r21,8
   25388:	003f6306 	br	25118 <__alt_data_end+0xfffec118>
   2538c:	9005883a 	mov	r2,r18
   25390:	a8c00017 	ldw	r3,0(r21)
   25394:	b821883a 	mov	r16,r23
   25398:	b027883a 	mov	r19,r22
   2539c:	10c00015 	stw	r3,0(r2)
   253a0:	a8c00117 	ldw	r3,4(r21)
   253a4:	10c00115 	stw	r3,4(r2)
   253a8:	a8c00217 	ldw	r3,8(r21)
   253ac:	10c00215 	stw	r3,8(r2)
   253b0:	003f6a06 	br	2515c <__alt_data_end+0xfffec15c>
   253b4:	9c67883a 	add	r19,r19,r17
   253b8:	4445c83a 	sub	r2,r8,r17
   253bc:	e4c00215 	stw	r19,8(fp)
   253c0:	10800054 	ori	r2,r2,1
   253c4:	98800115 	stw	r2,4(r19)
   253c8:	a8bfff17 	ldw	r2,-4(r21)
   253cc:	a009883a 	mov	r4,r20
   253d0:	1080004c 	andi	r2,r2,1
   253d4:	1462b03a 	or	r17,r2,r17
   253d8:	ac7fff15 	stw	r17,-4(r21)
   253dc:	0022bac0 	call	22bac <__malloc_unlock>
   253e0:	a805883a 	mov	r2,r21
   253e4:	003f6b06 	br	25194 <__alt_data_end+0xfffec194>
   253e8:	a80b883a 	mov	r5,r21
   253ec:	9009883a 	mov	r4,r18
   253f0:	0024ec80 	call	24ec8 <memmove>
   253f4:	003f4e06 	br	25130 <__alt_data_end+0xfffec130>
   253f8:	89000404 	addi	r4,r17,16
   253fc:	b93fbc16 	blt	r23,r4,252f0 <__alt_data_end+0xfffec2f0>
   25400:	b0800317 	ldw	r2,12(r22)
   25404:	b0c00217 	ldw	r3,8(r22)
   25408:	81bfff04 	addi	r6,r16,-4
   2540c:	01000904 	movi	r4,36
   25410:	18800315 	stw	r2,12(r3)
   25414:	10c00215 	stw	r3,8(r2)
   25418:	b4800204 	addi	r18,r22,8
   2541c:	21804336 	bltu	r4,r6,2552c <_realloc_r+0x508>
   25420:	008004c4 	movi	r2,19
   25424:	11803f2e 	bgeu	r2,r6,25524 <_realloc_r+0x500>
   25428:	a8800017 	ldw	r2,0(r21)
   2542c:	b0800215 	stw	r2,8(r22)
   25430:	a8800117 	ldw	r2,4(r21)
   25434:	b0800315 	stw	r2,12(r22)
   25438:	008006c4 	movi	r2,27
   2543c:	11803f36 	bltu	r2,r6,2553c <_realloc_r+0x518>
   25440:	b0800404 	addi	r2,r22,16
   25444:	ad400204 	addi	r21,r21,8
   25448:	a8c00017 	ldw	r3,0(r21)
   2544c:	10c00015 	stw	r3,0(r2)
   25450:	a8c00117 	ldw	r3,4(r21)
   25454:	10c00115 	stw	r3,4(r2)
   25458:	a8c00217 	ldw	r3,8(r21)
   2545c:	10c00215 	stw	r3,8(r2)
   25460:	b447883a 	add	r3,r22,r17
   25464:	bc45c83a 	sub	r2,r23,r17
   25468:	e0c00215 	stw	r3,8(fp)
   2546c:	10800054 	ori	r2,r2,1
   25470:	18800115 	stw	r2,4(r3)
   25474:	b0800117 	ldw	r2,4(r22)
   25478:	a009883a 	mov	r4,r20
   2547c:	1080004c 	andi	r2,r2,1
   25480:	1462b03a 	or	r17,r2,r17
   25484:	b4400115 	stw	r17,4(r22)
   25488:	0022bac0 	call	22bac <__malloc_unlock>
   2548c:	9005883a 	mov	r2,r18
   25490:	003f4006 	br	25194 <__alt_data_end+0xfffec194>
   25494:	a8c00217 	ldw	r3,8(r21)
   25498:	90c00215 	stw	r3,8(r18)
   2549c:	a8c00317 	ldw	r3,12(r21)
   254a0:	90c00315 	stw	r3,12(r18)
   254a4:	30801126 	beq	r6,r2,254ec <_realloc_r+0x4c8>
   254a8:	90800404 	addi	r2,r18,16
   254ac:	a8c00404 	addi	r3,r21,16
   254b0:	003f1906 	br	25118 <__alt_data_end+0xfffec118>
   254b4:	90ffff17 	ldw	r3,-4(r18)
   254b8:	00bfff04 	movi	r2,-4
   254bc:	a825883a 	mov	r18,r21
   254c0:	1884703a 	and	r2,r3,r2
   254c4:	80a1883a 	add	r16,r16,r2
   254c8:	003f2406 	br	2515c <__alt_data_end+0xfffec15c>
   254cc:	a8800217 	ldw	r2,8(r21)
   254d0:	b0800415 	stw	r2,16(r22)
   254d4:	a8800317 	ldw	r2,12(r21)
   254d8:	b0800515 	stw	r2,20(r22)
   254dc:	31000a26 	beq	r6,r4,25508 <_realloc_r+0x4e4>
   254e0:	b0800604 	addi	r2,r22,24
   254e4:	ad400404 	addi	r21,r21,16
   254e8:	003fa906 	br	25390 <__alt_data_end+0xfffec390>
   254ec:	a9000417 	ldw	r4,16(r21)
   254f0:	90800604 	addi	r2,r18,24
   254f4:	a8c00604 	addi	r3,r21,24
   254f8:	91000415 	stw	r4,16(r18)
   254fc:	a9000517 	ldw	r4,20(r21)
   25500:	91000515 	stw	r4,20(r18)
   25504:	003f0406 	br	25118 <__alt_data_end+0xfffec118>
   25508:	a8c00417 	ldw	r3,16(r21)
   2550c:	ad400604 	addi	r21,r21,24
   25510:	b0800804 	addi	r2,r22,32
   25514:	b0c00615 	stw	r3,24(r22)
   25518:	a8ffff17 	ldw	r3,-4(r21)
   2551c:	b0c00715 	stw	r3,28(r22)
   25520:	003f9b06 	br	25390 <__alt_data_end+0xfffec390>
   25524:	9005883a 	mov	r2,r18
   25528:	003fc706 	br	25448 <__alt_data_end+0xfffec448>
   2552c:	a80b883a 	mov	r5,r21
   25530:	9009883a 	mov	r4,r18
   25534:	0024ec80 	call	24ec8 <memmove>
   25538:	003fc906 	br	25460 <__alt_data_end+0xfffec460>
   2553c:	a8800217 	ldw	r2,8(r21)
   25540:	b0800415 	stw	r2,16(r22)
   25544:	a8800317 	ldw	r2,12(r21)
   25548:	b0800515 	stw	r2,20(r22)
   2554c:	31000726 	beq	r6,r4,2556c <_realloc_r+0x548>
   25550:	b0800604 	addi	r2,r22,24
   25554:	ad400404 	addi	r21,r21,16
   25558:	003fbb06 	br	25448 <__alt_data_end+0xfffec448>
   2555c:	a009883a 	mov	r4,r20
   25560:	0022bac0 	call	22bac <__malloc_unlock>
   25564:	0005883a 	mov	r2,zero
   25568:	003f0a06 	br	25194 <__alt_data_end+0xfffec194>
   2556c:	a8c00417 	ldw	r3,16(r21)
   25570:	ad400604 	addi	r21,r21,24
   25574:	b0800804 	addi	r2,r22,32
   25578:	b0c00615 	stw	r3,24(r22)
   2557c:	a8ffff17 	ldw	r3,-4(r21)
   25580:	b0c00715 	stw	r3,28(r22)
   25584:	003fb006 	br	25448 <__alt_data_end+0xfffec448>

00025588 <strlen>:
   25588:	208000cc 	andi	r2,r4,3
   2558c:	10002026 	beq	r2,zero,25610 <strlen+0x88>
   25590:	20800007 	ldb	r2,0(r4)
   25594:	10002026 	beq	r2,zero,25618 <strlen+0x90>
   25598:	2005883a 	mov	r2,r4
   2559c:	00000206 	br	255a8 <strlen+0x20>
   255a0:	10c00007 	ldb	r3,0(r2)
   255a4:	18001826 	beq	r3,zero,25608 <strlen+0x80>
   255a8:	10800044 	addi	r2,r2,1
   255ac:	10c000cc 	andi	r3,r2,3
   255b0:	183ffb1e 	bne	r3,zero,255a0 <__alt_data_end+0xfffec5a0>
   255b4:	10c00017 	ldw	r3,0(r2)
   255b8:	01ffbff4 	movhi	r7,65279
   255bc:	39ffbfc4 	addi	r7,r7,-257
   255c0:	00ca303a 	nor	r5,zero,r3
   255c4:	01a02074 	movhi	r6,32897
   255c8:	19c7883a 	add	r3,r3,r7
   255cc:	31a02004 	addi	r6,r6,-32640
   255d0:	1946703a 	and	r3,r3,r5
   255d4:	1986703a 	and	r3,r3,r6
   255d8:	1800091e 	bne	r3,zero,25600 <strlen+0x78>
   255dc:	10800104 	addi	r2,r2,4
   255e0:	10c00017 	ldw	r3,0(r2)
   255e4:	19cb883a 	add	r5,r3,r7
   255e8:	00c6303a 	nor	r3,zero,r3
   255ec:	28c6703a 	and	r3,r5,r3
   255f0:	1986703a 	and	r3,r3,r6
   255f4:	183ff926 	beq	r3,zero,255dc <__alt_data_end+0xfffec5dc>
   255f8:	00000106 	br	25600 <strlen+0x78>
   255fc:	10800044 	addi	r2,r2,1
   25600:	10c00007 	ldb	r3,0(r2)
   25604:	183ffd1e 	bne	r3,zero,255fc <__alt_data_end+0xfffec5fc>
   25608:	1105c83a 	sub	r2,r2,r4
   2560c:	f800283a 	ret
   25610:	2005883a 	mov	r2,r4
   25614:	003fe706 	br	255b4 <__alt_data_end+0xfffec5b4>
   25618:	0005883a 	mov	r2,zero
   2561c:	f800283a 	ret

00025620 <__swsetup_r>:
   25620:	008000f4 	movhi	r2,3
   25624:	defffd04 	addi	sp,sp,-12
   25628:	10a29304 	addi	r2,r2,-30132
   2562c:	dc400115 	stw	r17,4(sp)
   25630:	2023883a 	mov	r17,r4
   25634:	11000017 	ldw	r4,0(r2)
   25638:	dc000015 	stw	r16,0(sp)
   2563c:	dfc00215 	stw	ra,8(sp)
   25640:	2821883a 	mov	r16,r5
   25644:	20000226 	beq	r4,zero,25650 <__swsetup_r+0x30>
   25648:	20800e17 	ldw	r2,56(r4)
   2564c:	10003126 	beq	r2,zero,25714 <__swsetup_r+0xf4>
   25650:	8080030b 	ldhu	r2,12(r16)
   25654:	10c0020c 	andi	r3,r2,8
   25658:	1009883a 	mov	r4,r2
   2565c:	18000f26 	beq	r3,zero,2569c <__swsetup_r+0x7c>
   25660:	80c00417 	ldw	r3,16(r16)
   25664:	18001526 	beq	r3,zero,256bc <__swsetup_r+0x9c>
   25668:	1100004c 	andi	r4,r2,1
   2566c:	20001c1e 	bne	r4,zero,256e0 <__swsetup_r+0xc0>
   25670:	1080008c 	andi	r2,r2,2
   25674:	1000291e 	bne	r2,zero,2571c <__swsetup_r+0xfc>
   25678:	80800517 	ldw	r2,20(r16)
   2567c:	80800215 	stw	r2,8(r16)
   25680:	18001c26 	beq	r3,zero,256f4 <__swsetup_r+0xd4>
   25684:	0005883a 	mov	r2,zero
   25688:	dfc00217 	ldw	ra,8(sp)
   2568c:	dc400117 	ldw	r17,4(sp)
   25690:	dc000017 	ldw	r16,0(sp)
   25694:	dec00304 	addi	sp,sp,12
   25698:	f800283a 	ret
   2569c:	2080040c 	andi	r2,r4,16
   256a0:	10002e26 	beq	r2,zero,2575c <__swsetup_r+0x13c>
   256a4:	2080010c 	andi	r2,r4,4
   256a8:	10001e1e 	bne	r2,zero,25724 <__swsetup_r+0x104>
   256ac:	80c00417 	ldw	r3,16(r16)
   256b0:	20800214 	ori	r2,r4,8
   256b4:	8080030d 	sth	r2,12(r16)
   256b8:	183feb1e 	bne	r3,zero,25668 <__alt_data_end+0xfffec668>
   256bc:	1100a00c 	andi	r4,r2,640
   256c0:	01408004 	movi	r5,512
   256c4:	217fe826 	beq	r4,r5,25668 <__alt_data_end+0xfffec668>
   256c8:	800b883a 	mov	r5,r16
   256cc:	8809883a 	mov	r4,r17
   256d0:	00261ec0 	call	261ec <__smakebuf_r>
   256d4:	8080030b 	ldhu	r2,12(r16)
   256d8:	80c00417 	ldw	r3,16(r16)
   256dc:	003fe206 	br	25668 <__alt_data_end+0xfffec668>
   256e0:	80800517 	ldw	r2,20(r16)
   256e4:	80000215 	stw	zero,8(r16)
   256e8:	0085c83a 	sub	r2,zero,r2
   256ec:	80800615 	stw	r2,24(r16)
   256f0:	183fe41e 	bne	r3,zero,25684 <__alt_data_end+0xfffec684>
   256f4:	80c0030b 	ldhu	r3,12(r16)
   256f8:	0005883a 	mov	r2,zero
   256fc:	1900200c 	andi	r4,r3,128
   25700:	203fe126 	beq	r4,zero,25688 <__alt_data_end+0xfffec688>
   25704:	18c01014 	ori	r3,r3,64
   25708:	80c0030d 	sth	r3,12(r16)
   2570c:	00bfffc4 	movi	r2,-1
   25710:	003fdd06 	br	25688 <__alt_data_end+0xfffec688>
   25714:	00260140 	call	26014 <__sinit>
   25718:	003fcd06 	br	25650 <__alt_data_end+0xfffec650>
   2571c:	0005883a 	mov	r2,zero
   25720:	003fd606 	br	2567c <__alt_data_end+0xfffec67c>
   25724:	81400c17 	ldw	r5,48(r16)
   25728:	28000626 	beq	r5,zero,25744 <__swsetup_r+0x124>
   2572c:	80801004 	addi	r2,r16,64
   25730:	28800326 	beq	r5,r2,25740 <__swsetup_r+0x120>
   25734:	8809883a 	mov	r4,r17
   25738:	00223640 	call	22364 <_free_r>
   2573c:	8100030b 	ldhu	r4,12(r16)
   25740:	80000c15 	stw	zero,48(r16)
   25744:	80c00417 	ldw	r3,16(r16)
   25748:	00bff6c4 	movi	r2,-37
   2574c:	1108703a 	and	r4,r2,r4
   25750:	80000115 	stw	zero,4(r16)
   25754:	80c00015 	stw	r3,0(r16)
   25758:	003fd506 	br	256b0 <__alt_data_end+0xfffec6b0>
   2575c:	00800244 	movi	r2,9
   25760:	88800015 	stw	r2,0(r17)
   25764:	20801014 	ori	r2,r4,64
   25768:	8080030d 	sth	r2,12(r16)
   2576c:	00bfffc4 	movi	r2,-1
   25770:	003fc506 	br	25688 <__alt_data_end+0xfffec688>

00025774 <__register_exitproc>:
   25774:	defffa04 	addi	sp,sp,-24
   25778:	dc000315 	stw	r16,12(sp)
   2577c:	040000f4 	movhi	r16,3
   25780:	84229204 	addi	r16,r16,-30136
   25784:	80c00017 	ldw	r3,0(r16)
   25788:	dc400415 	stw	r17,16(sp)
   2578c:	dfc00515 	stw	ra,20(sp)
   25790:	18805217 	ldw	r2,328(r3)
   25794:	2023883a 	mov	r17,r4
   25798:	10003726 	beq	r2,zero,25878 <__register_exitproc+0x104>
   2579c:	10c00117 	ldw	r3,4(r2)
   257a0:	010007c4 	movi	r4,31
   257a4:	20c00e16 	blt	r4,r3,257e0 <__register_exitproc+0x6c>
   257a8:	1a000044 	addi	r8,r3,1
   257ac:	8800221e 	bne	r17,zero,25838 <__register_exitproc+0xc4>
   257b0:	18c00084 	addi	r3,r3,2
   257b4:	18c7883a 	add	r3,r3,r3
   257b8:	18c7883a 	add	r3,r3,r3
   257bc:	12000115 	stw	r8,4(r2)
   257c0:	10c7883a 	add	r3,r2,r3
   257c4:	19400015 	stw	r5,0(r3)
   257c8:	0005883a 	mov	r2,zero
   257cc:	dfc00517 	ldw	ra,20(sp)
   257d0:	dc400417 	ldw	r17,16(sp)
   257d4:	dc000317 	ldw	r16,12(sp)
   257d8:	dec00604 	addi	sp,sp,24
   257dc:	f800283a 	ret
   257e0:	008000b4 	movhi	r2,2
   257e4:	10864f04 	addi	r2,r2,6460
   257e8:	10002626 	beq	r2,zero,25884 <__register_exitproc+0x110>
   257ec:	01006404 	movi	r4,400
   257f0:	d9400015 	stw	r5,0(sp)
   257f4:	d9800115 	stw	r6,4(sp)
   257f8:	d9c00215 	stw	r7,8(sp)
   257fc:	002193c0 	call	2193c <malloc>
   25800:	d9400017 	ldw	r5,0(sp)
   25804:	d9800117 	ldw	r6,4(sp)
   25808:	d9c00217 	ldw	r7,8(sp)
   2580c:	10001d26 	beq	r2,zero,25884 <__register_exitproc+0x110>
   25810:	81000017 	ldw	r4,0(r16)
   25814:	10000115 	stw	zero,4(r2)
   25818:	02000044 	movi	r8,1
   2581c:	22405217 	ldw	r9,328(r4)
   25820:	0007883a 	mov	r3,zero
   25824:	12400015 	stw	r9,0(r2)
   25828:	20805215 	stw	r2,328(r4)
   2582c:	10006215 	stw	zero,392(r2)
   25830:	10006315 	stw	zero,396(r2)
   25834:	883fde26 	beq	r17,zero,257b0 <__alt_data_end+0xfffec7b0>
   25838:	18c9883a 	add	r4,r3,r3
   2583c:	2109883a 	add	r4,r4,r4
   25840:	1109883a 	add	r4,r2,r4
   25844:	21802215 	stw	r6,136(r4)
   25848:	01800044 	movi	r6,1
   2584c:	12406217 	ldw	r9,392(r2)
   25850:	30cc983a 	sll	r6,r6,r3
   25854:	4992b03a 	or	r9,r9,r6
   25858:	12406215 	stw	r9,392(r2)
   2585c:	21c04215 	stw	r7,264(r4)
   25860:	01000084 	movi	r4,2
   25864:	893fd21e 	bne	r17,r4,257b0 <__alt_data_end+0xfffec7b0>
   25868:	11006317 	ldw	r4,396(r2)
   2586c:	218cb03a 	or	r6,r4,r6
   25870:	11806315 	stw	r6,396(r2)
   25874:	003fce06 	br	257b0 <__alt_data_end+0xfffec7b0>
   25878:	18805304 	addi	r2,r3,332
   2587c:	18805215 	stw	r2,328(r3)
   25880:	003fc606 	br	2579c <__alt_data_end+0xfffec79c>
   25884:	00bfffc4 	movi	r2,-1
   25888:	003fd006 	br	257cc <__alt_data_end+0xfffec7cc>

0002588c <__call_exitprocs>:
   2588c:	defff504 	addi	sp,sp,-44
   25890:	df000915 	stw	fp,36(sp)
   25894:	dd400615 	stw	r21,24(sp)
   25898:	dc800315 	stw	r18,12(sp)
   2589c:	dfc00a15 	stw	ra,40(sp)
   258a0:	ddc00815 	stw	r23,32(sp)
   258a4:	dd800715 	stw	r22,28(sp)
   258a8:	dd000515 	stw	r20,20(sp)
   258ac:	dcc00415 	stw	r19,16(sp)
   258b0:	dc400215 	stw	r17,8(sp)
   258b4:	dc000115 	stw	r16,4(sp)
   258b8:	d9000015 	stw	r4,0(sp)
   258bc:	2839883a 	mov	fp,r5
   258c0:	04800044 	movi	r18,1
   258c4:	057fffc4 	movi	r21,-1
   258c8:	008000f4 	movhi	r2,3
   258cc:	10a29204 	addi	r2,r2,-30136
   258d0:	12000017 	ldw	r8,0(r2)
   258d4:	45005217 	ldw	r20,328(r8)
   258d8:	44c05204 	addi	r19,r8,328
   258dc:	a0001c26 	beq	r20,zero,25950 <__call_exitprocs+0xc4>
   258e0:	a0800117 	ldw	r2,4(r20)
   258e4:	15ffffc4 	addi	r23,r2,-1
   258e8:	b8000d16 	blt	r23,zero,25920 <__call_exitprocs+0x94>
   258ec:	14000044 	addi	r16,r2,1
   258f0:	8421883a 	add	r16,r16,r16
   258f4:	8421883a 	add	r16,r16,r16
   258f8:	84402004 	addi	r17,r16,128
   258fc:	a463883a 	add	r17,r20,r17
   25900:	a421883a 	add	r16,r20,r16
   25904:	e0001e26 	beq	fp,zero,25980 <__call_exitprocs+0xf4>
   25908:	80804017 	ldw	r2,256(r16)
   2590c:	e0801c26 	beq	fp,r2,25980 <__call_exitprocs+0xf4>
   25910:	bdffffc4 	addi	r23,r23,-1
   25914:	843fff04 	addi	r16,r16,-4
   25918:	8c7fff04 	addi	r17,r17,-4
   2591c:	bd7ff91e 	bne	r23,r21,25904 <__alt_data_end+0xfffec904>
   25920:	008000b4 	movhi	r2,2
   25924:	10865404 	addi	r2,r2,6480
   25928:	10000926 	beq	r2,zero,25950 <__call_exitprocs+0xc4>
   2592c:	a0800117 	ldw	r2,4(r20)
   25930:	1000301e 	bne	r2,zero,259f4 <__call_exitprocs+0x168>
   25934:	a0800017 	ldw	r2,0(r20)
   25938:	10003226 	beq	r2,zero,25a04 <__call_exitprocs+0x178>
   2593c:	a009883a 	mov	r4,r20
   25940:	98800015 	stw	r2,0(r19)
   25944:	00219500 	call	21950 <free>
   25948:	9d000017 	ldw	r20,0(r19)
   2594c:	a03fe41e 	bne	r20,zero,258e0 <__alt_data_end+0xfffec8e0>
   25950:	dfc00a17 	ldw	ra,40(sp)
   25954:	df000917 	ldw	fp,36(sp)
   25958:	ddc00817 	ldw	r23,32(sp)
   2595c:	dd800717 	ldw	r22,28(sp)
   25960:	dd400617 	ldw	r21,24(sp)
   25964:	dd000517 	ldw	r20,20(sp)
   25968:	dcc00417 	ldw	r19,16(sp)
   2596c:	dc800317 	ldw	r18,12(sp)
   25970:	dc400217 	ldw	r17,8(sp)
   25974:	dc000117 	ldw	r16,4(sp)
   25978:	dec00b04 	addi	sp,sp,44
   2597c:	f800283a 	ret
   25980:	a0800117 	ldw	r2,4(r20)
   25984:	80c00017 	ldw	r3,0(r16)
   25988:	10bfffc4 	addi	r2,r2,-1
   2598c:	15c01426 	beq	r2,r23,259e0 <__call_exitprocs+0x154>
   25990:	80000015 	stw	zero,0(r16)
   25994:	183fde26 	beq	r3,zero,25910 <__alt_data_end+0xfffec910>
   25998:	95c8983a 	sll	r4,r18,r23
   2599c:	a0806217 	ldw	r2,392(r20)
   259a0:	a5800117 	ldw	r22,4(r20)
   259a4:	2084703a 	and	r2,r4,r2
   259a8:	10000b26 	beq	r2,zero,259d8 <__call_exitprocs+0x14c>
   259ac:	a0806317 	ldw	r2,396(r20)
   259b0:	2088703a 	and	r4,r4,r2
   259b4:	20000c1e 	bne	r4,zero,259e8 <__call_exitprocs+0x15c>
   259b8:	89400017 	ldw	r5,0(r17)
   259bc:	d9000017 	ldw	r4,0(sp)
   259c0:	183ee83a 	callr	r3
   259c4:	a0800117 	ldw	r2,4(r20)
   259c8:	15bfbf1e 	bne	r2,r22,258c8 <__alt_data_end+0xfffec8c8>
   259cc:	98800017 	ldw	r2,0(r19)
   259d0:	153fcf26 	beq	r2,r20,25910 <__alt_data_end+0xfffec910>
   259d4:	003fbc06 	br	258c8 <__alt_data_end+0xfffec8c8>
   259d8:	183ee83a 	callr	r3
   259dc:	003ff906 	br	259c4 <__alt_data_end+0xfffec9c4>
   259e0:	a5c00115 	stw	r23,4(r20)
   259e4:	003feb06 	br	25994 <__alt_data_end+0xfffec994>
   259e8:	89000017 	ldw	r4,0(r17)
   259ec:	183ee83a 	callr	r3
   259f0:	003ff406 	br	259c4 <__alt_data_end+0xfffec9c4>
   259f4:	a0800017 	ldw	r2,0(r20)
   259f8:	a027883a 	mov	r19,r20
   259fc:	1029883a 	mov	r20,r2
   25a00:	003fb606 	br	258dc <__alt_data_end+0xfffec8dc>
   25a04:	0005883a 	mov	r2,zero
   25a08:	003ffb06 	br	259f8 <__alt_data_end+0xfffec9f8>

00025a0c <__sflush_r>:
   25a0c:	2880030b 	ldhu	r2,12(r5)
   25a10:	defffb04 	addi	sp,sp,-20
   25a14:	dcc00315 	stw	r19,12(sp)
   25a18:	dc400115 	stw	r17,4(sp)
   25a1c:	dfc00415 	stw	ra,16(sp)
   25a20:	dc800215 	stw	r18,8(sp)
   25a24:	dc000015 	stw	r16,0(sp)
   25a28:	10c0020c 	andi	r3,r2,8
   25a2c:	2823883a 	mov	r17,r5
   25a30:	2027883a 	mov	r19,r4
   25a34:	1800311e 	bne	r3,zero,25afc <__sflush_r+0xf0>
   25a38:	28c00117 	ldw	r3,4(r5)
   25a3c:	10820014 	ori	r2,r2,2048
   25a40:	2880030d 	sth	r2,12(r5)
   25a44:	00c04b0e 	bge	zero,r3,25b74 <__sflush_r+0x168>
   25a48:	8a000a17 	ldw	r8,40(r17)
   25a4c:	40002326 	beq	r8,zero,25adc <__sflush_r+0xd0>
   25a50:	9c000017 	ldw	r16,0(r19)
   25a54:	10c4000c 	andi	r3,r2,4096
   25a58:	98000015 	stw	zero,0(r19)
   25a5c:	18004826 	beq	r3,zero,25b80 <__sflush_r+0x174>
   25a60:	89801417 	ldw	r6,80(r17)
   25a64:	10c0010c 	andi	r3,r2,4
   25a68:	18000626 	beq	r3,zero,25a84 <__sflush_r+0x78>
   25a6c:	88c00117 	ldw	r3,4(r17)
   25a70:	88800c17 	ldw	r2,48(r17)
   25a74:	30cdc83a 	sub	r6,r6,r3
   25a78:	10000226 	beq	r2,zero,25a84 <__sflush_r+0x78>
   25a7c:	88800f17 	ldw	r2,60(r17)
   25a80:	308dc83a 	sub	r6,r6,r2
   25a84:	89400717 	ldw	r5,28(r17)
   25a88:	000f883a 	mov	r7,zero
   25a8c:	9809883a 	mov	r4,r19
   25a90:	403ee83a 	callr	r8
   25a94:	00ffffc4 	movi	r3,-1
   25a98:	10c04426 	beq	r2,r3,25bac <__sflush_r+0x1a0>
   25a9c:	88c0030b 	ldhu	r3,12(r17)
   25aa0:	89000417 	ldw	r4,16(r17)
   25aa4:	88000115 	stw	zero,4(r17)
   25aa8:	197dffcc 	andi	r5,r3,63487
   25aac:	8940030d 	sth	r5,12(r17)
   25ab0:	89000015 	stw	r4,0(r17)
   25ab4:	18c4000c 	andi	r3,r3,4096
   25ab8:	18002c1e 	bne	r3,zero,25b6c <__sflush_r+0x160>
   25abc:	89400c17 	ldw	r5,48(r17)
   25ac0:	9c000015 	stw	r16,0(r19)
   25ac4:	28000526 	beq	r5,zero,25adc <__sflush_r+0xd0>
   25ac8:	88801004 	addi	r2,r17,64
   25acc:	28800226 	beq	r5,r2,25ad8 <__sflush_r+0xcc>
   25ad0:	9809883a 	mov	r4,r19
   25ad4:	00223640 	call	22364 <_free_r>
   25ad8:	88000c15 	stw	zero,48(r17)
   25adc:	0005883a 	mov	r2,zero
   25ae0:	dfc00417 	ldw	ra,16(sp)
   25ae4:	dcc00317 	ldw	r19,12(sp)
   25ae8:	dc800217 	ldw	r18,8(sp)
   25aec:	dc400117 	ldw	r17,4(sp)
   25af0:	dc000017 	ldw	r16,0(sp)
   25af4:	dec00504 	addi	sp,sp,20
   25af8:	f800283a 	ret
   25afc:	2c800417 	ldw	r18,16(r5)
   25b00:	903ff626 	beq	r18,zero,25adc <__alt_data_end+0xfffecadc>
   25b04:	2c000017 	ldw	r16,0(r5)
   25b08:	108000cc 	andi	r2,r2,3
   25b0c:	2c800015 	stw	r18,0(r5)
   25b10:	84a1c83a 	sub	r16,r16,r18
   25b14:	1000131e 	bne	r2,zero,25b64 <__sflush_r+0x158>
   25b18:	28800517 	ldw	r2,20(r5)
   25b1c:	88800215 	stw	r2,8(r17)
   25b20:	04000316 	blt	zero,r16,25b30 <__sflush_r+0x124>
   25b24:	003fed06 	br	25adc <__alt_data_end+0xfffecadc>
   25b28:	90a5883a 	add	r18,r18,r2
   25b2c:	043feb0e 	bge	zero,r16,25adc <__alt_data_end+0xfffecadc>
   25b30:	88800917 	ldw	r2,36(r17)
   25b34:	89400717 	ldw	r5,28(r17)
   25b38:	800f883a 	mov	r7,r16
   25b3c:	900d883a 	mov	r6,r18
   25b40:	9809883a 	mov	r4,r19
   25b44:	103ee83a 	callr	r2
   25b48:	80a1c83a 	sub	r16,r16,r2
   25b4c:	00bff616 	blt	zero,r2,25b28 <__alt_data_end+0xfffecb28>
   25b50:	88c0030b 	ldhu	r3,12(r17)
   25b54:	00bfffc4 	movi	r2,-1
   25b58:	18c01014 	ori	r3,r3,64
   25b5c:	88c0030d 	sth	r3,12(r17)
   25b60:	003fdf06 	br	25ae0 <__alt_data_end+0xfffecae0>
   25b64:	0005883a 	mov	r2,zero
   25b68:	003fec06 	br	25b1c <__alt_data_end+0xfffecb1c>
   25b6c:	88801415 	stw	r2,80(r17)
   25b70:	003fd206 	br	25abc <__alt_data_end+0xfffecabc>
   25b74:	28c00f17 	ldw	r3,60(r5)
   25b78:	00ffb316 	blt	zero,r3,25a48 <__alt_data_end+0xfffeca48>
   25b7c:	003fd706 	br	25adc <__alt_data_end+0xfffecadc>
   25b80:	89400717 	ldw	r5,28(r17)
   25b84:	000d883a 	mov	r6,zero
   25b88:	01c00044 	movi	r7,1
   25b8c:	9809883a 	mov	r4,r19
   25b90:	403ee83a 	callr	r8
   25b94:	100d883a 	mov	r6,r2
   25b98:	00bfffc4 	movi	r2,-1
   25b9c:	30801426 	beq	r6,r2,25bf0 <__sflush_r+0x1e4>
   25ba0:	8880030b 	ldhu	r2,12(r17)
   25ba4:	8a000a17 	ldw	r8,40(r17)
   25ba8:	003fae06 	br	25a64 <__alt_data_end+0xfffeca64>
   25bac:	98c00017 	ldw	r3,0(r19)
   25bb0:	183fba26 	beq	r3,zero,25a9c <__alt_data_end+0xfffeca9c>
   25bb4:	01000744 	movi	r4,29
   25bb8:	19000626 	beq	r3,r4,25bd4 <__sflush_r+0x1c8>
   25bbc:	01000584 	movi	r4,22
   25bc0:	19000426 	beq	r3,r4,25bd4 <__sflush_r+0x1c8>
   25bc4:	88c0030b 	ldhu	r3,12(r17)
   25bc8:	18c01014 	ori	r3,r3,64
   25bcc:	88c0030d 	sth	r3,12(r17)
   25bd0:	003fc306 	br	25ae0 <__alt_data_end+0xfffecae0>
   25bd4:	8880030b 	ldhu	r2,12(r17)
   25bd8:	88c00417 	ldw	r3,16(r17)
   25bdc:	88000115 	stw	zero,4(r17)
   25be0:	10bdffcc 	andi	r2,r2,63487
   25be4:	8880030d 	sth	r2,12(r17)
   25be8:	88c00015 	stw	r3,0(r17)
   25bec:	003fb306 	br	25abc <__alt_data_end+0xfffecabc>
   25bf0:	98800017 	ldw	r2,0(r19)
   25bf4:	103fea26 	beq	r2,zero,25ba0 <__alt_data_end+0xfffecba0>
   25bf8:	00c00744 	movi	r3,29
   25bfc:	10c00226 	beq	r2,r3,25c08 <__sflush_r+0x1fc>
   25c00:	00c00584 	movi	r3,22
   25c04:	10c0031e 	bne	r2,r3,25c14 <__sflush_r+0x208>
   25c08:	9c000015 	stw	r16,0(r19)
   25c0c:	0005883a 	mov	r2,zero
   25c10:	003fb306 	br	25ae0 <__alt_data_end+0xfffecae0>
   25c14:	88c0030b 	ldhu	r3,12(r17)
   25c18:	3005883a 	mov	r2,r6
   25c1c:	18c01014 	ori	r3,r3,64
   25c20:	88c0030d 	sth	r3,12(r17)
   25c24:	003fae06 	br	25ae0 <__alt_data_end+0xfffecae0>

00025c28 <_fflush_r>:
   25c28:	defffd04 	addi	sp,sp,-12
   25c2c:	dc000115 	stw	r16,4(sp)
   25c30:	dfc00215 	stw	ra,8(sp)
   25c34:	2021883a 	mov	r16,r4
   25c38:	20000226 	beq	r4,zero,25c44 <_fflush_r+0x1c>
   25c3c:	20800e17 	ldw	r2,56(r4)
   25c40:	10000c26 	beq	r2,zero,25c74 <_fflush_r+0x4c>
   25c44:	2880030f 	ldh	r2,12(r5)
   25c48:	1000051e 	bne	r2,zero,25c60 <_fflush_r+0x38>
   25c4c:	0005883a 	mov	r2,zero
   25c50:	dfc00217 	ldw	ra,8(sp)
   25c54:	dc000117 	ldw	r16,4(sp)
   25c58:	dec00304 	addi	sp,sp,12
   25c5c:	f800283a 	ret
   25c60:	8009883a 	mov	r4,r16
   25c64:	dfc00217 	ldw	ra,8(sp)
   25c68:	dc000117 	ldw	r16,4(sp)
   25c6c:	dec00304 	addi	sp,sp,12
   25c70:	0025a0c1 	jmpi	25a0c <__sflush_r>
   25c74:	d9400015 	stw	r5,0(sp)
   25c78:	00260140 	call	26014 <__sinit>
   25c7c:	d9400017 	ldw	r5,0(sp)
   25c80:	003ff006 	br	25c44 <__alt_data_end+0xfffecc44>

00025c84 <fflush>:
   25c84:	20000526 	beq	r4,zero,25c9c <fflush+0x18>
   25c88:	008000f4 	movhi	r2,3
   25c8c:	10a29304 	addi	r2,r2,-30132
   25c90:	200b883a 	mov	r5,r4
   25c94:	11000017 	ldw	r4,0(r2)
   25c98:	0025c281 	jmpi	25c28 <_fflush_r>
   25c9c:	008000f4 	movhi	r2,3
   25ca0:	10a29204 	addi	r2,r2,-30136
   25ca4:	11000017 	ldw	r4,0(r2)
   25ca8:	014000b4 	movhi	r5,2
   25cac:	29570a04 	addi	r5,r5,23592
   25cb0:	00261281 	jmpi	26128 <_fwalk_reent>

00025cb4 <__fp_unlock>:
   25cb4:	0005883a 	mov	r2,zero
   25cb8:	f800283a 	ret

00025cbc <_cleanup_r>:
   25cbc:	014000b4 	movhi	r5,2
   25cc0:	2959b004 	addi	r5,r5,26304
   25cc4:	00261281 	jmpi	26128 <_fwalk_reent>

00025cc8 <__sinit.part.1>:
   25cc8:	defff704 	addi	sp,sp,-36
   25ccc:	00c000b4 	movhi	r3,2
   25cd0:	dfc00815 	stw	ra,32(sp)
   25cd4:	ddc00715 	stw	r23,28(sp)
   25cd8:	dd800615 	stw	r22,24(sp)
   25cdc:	dd400515 	stw	r21,20(sp)
   25ce0:	dd000415 	stw	r20,16(sp)
   25ce4:	dcc00315 	stw	r19,12(sp)
   25ce8:	dc800215 	stw	r18,8(sp)
   25cec:	dc400115 	stw	r17,4(sp)
   25cf0:	dc000015 	stw	r16,0(sp)
   25cf4:	18d72f04 	addi	r3,r3,23740
   25cf8:	24000117 	ldw	r16,4(r4)
   25cfc:	20c00f15 	stw	r3,60(r4)
   25d00:	2080bb04 	addi	r2,r4,748
   25d04:	00c000c4 	movi	r3,3
   25d08:	20c0b915 	stw	r3,740(r4)
   25d0c:	2080ba15 	stw	r2,744(r4)
   25d10:	2000b815 	stw	zero,736(r4)
   25d14:	05c00204 	movi	r23,8
   25d18:	00800104 	movi	r2,4
   25d1c:	2025883a 	mov	r18,r4
   25d20:	b80d883a 	mov	r6,r23
   25d24:	81001704 	addi	r4,r16,92
   25d28:	000b883a 	mov	r5,zero
   25d2c:	80000015 	stw	zero,0(r16)
   25d30:	80000115 	stw	zero,4(r16)
   25d34:	80000215 	stw	zero,8(r16)
   25d38:	8080030d 	sth	r2,12(r16)
   25d3c:	80001915 	stw	zero,100(r16)
   25d40:	8000038d 	sth	zero,14(r16)
   25d44:	80000415 	stw	zero,16(r16)
   25d48:	80000515 	stw	zero,20(r16)
   25d4c:	80000615 	stw	zero,24(r16)
   25d50:	00263a80 	call	263a8 <memset>
   25d54:	058000b4 	movhi	r22,2
   25d58:	94400217 	ldw	r17,8(r18)
   25d5c:	054000b4 	movhi	r21,2
   25d60:	050000b4 	movhi	r20,2
   25d64:	04c000b4 	movhi	r19,2
   25d68:	b5993404 	addi	r22,r22,25808
   25d6c:	ad594b04 	addi	r21,r21,25900
   25d70:	a5196a04 	addi	r20,r20,26024
   25d74:	9cd98104 	addi	r19,r19,26116
   25d78:	85800815 	stw	r22,32(r16)
   25d7c:	85400915 	stw	r21,36(r16)
   25d80:	85000a15 	stw	r20,40(r16)
   25d84:	84c00b15 	stw	r19,44(r16)
   25d88:	84000715 	stw	r16,28(r16)
   25d8c:	00800284 	movi	r2,10
   25d90:	8880030d 	sth	r2,12(r17)
   25d94:	00800044 	movi	r2,1
   25d98:	b80d883a 	mov	r6,r23
   25d9c:	89001704 	addi	r4,r17,92
   25da0:	000b883a 	mov	r5,zero
   25da4:	88000015 	stw	zero,0(r17)
   25da8:	88000115 	stw	zero,4(r17)
   25dac:	88000215 	stw	zero,8(r17)
   25db0:	88001915 	stw	zero,100(r17)
   25db4:	8880038d 	sth	r2,14(r17)
   25db8:	88000415 	stw	zero,16(r17)
   25dbc:	88000515 	stw	zero,20(r17)
   25dc0:	88000615 	stw	zero,24(r17)
   25dc4:	00263a80 	call	263a8 <memset>
   25dc8:	94000317 	ldw	r16,12(r18)
   25dcc:	00800484 	movi	r2,18
   25dd0:	8c400715 	stw	r17,28(r17)
   25dd4:	8d800815 	stw	r22,32(r17)
   25dd8:	8d400915 	stw	r21,36(r17)
   25ddc:	8d000a15 	stw	r20,40(r17)
   25de0:	8cc00b15 	stw	r19,44(r17)
   25de4:	8080030d 	sth	r2,12(r16)
   25de8:	00800084 	movi	r2,2
   25dec:	80000015 	stw	zero,0(r16)
   25df0:	80000115 	stw	zero,4(r16)
   25df4:	80000215 	stw	zero,8(r16)
   25df8:	80001915 	stw	zero,100(r16)
   25dfc:	8080038d 	sth	r2,14(r16)
   25e00:	80000415 	stw	zero,16(r16)
   25e04:	80000515 	stw	zero,20(r16)
   25e08:	80000615 	stw	zero,24(r16)
   25e0c:	b80d883a 	mov	r6,r23
   25e10:	000b883a 	mov	r5,zero
   25e14:	81001704 	addi	r4,r16,92
   25e18:	00263a80 	call	263a8 <memset>
   25e1c:	00800044 	movi	r2,1
   25e20:	84000715 	stw	r16,28(r16)
   25e24:	85800815 	stw	r22,32(r16)
   25e28:	85400915 	stw	r21,36(r16)
   25e2c:	85000a15 	stw	r20,40(r16)
   25e30:	84c00b15 	stw	r19,44(r16)
   25e34:	90800e15 	stw	r2,56(r18)
   25e38:	dfc00817 	ldw	ra,32(sp)
   25e3c:	ddc00717 	ldw	r23,28(sp)
   25e40:	dd800617 	ldw	r22,24(sp)
   25e44:	dd400517 	ldw	r21,20(sp)
   25e48:	dd000417 	ldw	r20,16(sp)
   25e4c:	dcc00317 	ldw	r19,12(sp)
   25e50:	dc800217 	ldw	r18,8(sp)
   25e54:	dc400117 	ldw	r17,4(sp)
   25e58:	dc000017 	ldw	r16,0(sp)
   25e5c:	dec00904 	addi	sp,sp,36
   25e60:	f800283a 	ret

00025e64 <__fp_lock>:
   25e64:	0005883a 	mov	r2,zero
   25e68:	f800283a 	ret

00025e6c <__sfmoreglue>:
   25e6c:	defffc04 	addi	sp,sp,-16
   25e70:	dc800215 	stw	r18,8(sp)
   25e74:	2825883a 	mov	r18,r5
   25e78:	dc000015 	stw	r16,0(sp)
   25e7c:	01401a04 	movi	r5,104
   25e80:	2021883a 	mov	r16,r4
   25e84:	913fffc4 	addi	r4,r18,-1
   25e88:	dfc00315 	stw	ra,12(sp)
   25e8c:	dc400115 	stw	r17,4(sp)
   25e90:	00219140 	call	21914 <__mulsi3>
   25e94:	8009883a 	mov	r4,r16
   25e98:	11401d04 	addi	r5,r2,116
   25e9c:	1023883a 	mov	r17,r2
   25ea0:	00219640 	call	21964 <_malloc_r>
   25ea4:	1021883a 	mov	r16,r2
   25ea8:	10000726 	beq	r2,zero,25ec8 <__sfmoreglue+0x5c>
   25eac:	11000304 	addi	r4,r2,12
   25eb0:	10000015 	stw	zero,0(r2)
   25eb4:	14800115 	stw	r18,4(r2)
   25eb8:	11000215 	stw	r4,8(r2)
   25ebc:	89801a04 	addi	r6,r17,104
   25ec0:	000b883a 	mov	r5,zero
   25ec4:	00263a80 	call	263a8 <memset>
   25ec8:	8005883a 	mov	r2,r16
   25ecc:	dfc00317 	ldw	ra,12(sp)
   25ed0:	dc800217 	ldw	r18,8(sp)
   25ed4:	dc400117 	ldw	r17,4(sp)
   25ed8:	dc000017 	ldw	r16,0(sp)
   25edc:	dec00404 	addi	sp,sp,16
   25ee0:	f800283a 	ret

00025ee4 <__sfp>:
   25ee4:	defffb04 	addi	sp,sp,-20
   25ee8:	dc000015 	stw	r16,0(sp)
   25eec:	040000f4 	movhi	r16,3
   25ef0:	84229204 	addi	r16,r16,-30136
   25ef4:	dcc00315 	stw	r19,12(sp)
   25ef8:	2027883a 	mov	r19,r4
   25efc:	81000017 	ldw	r4,0(r16)
   25f00:	dfc00415 	stw	ra,16(sp)
   25f04:	dc800215 	stw	r18,8(sp)
   25f08:	20800e17 	ldw	r2,56(r4)
   25f0c:	dc400115 	stw	r17,4(sp)
   25f10:	1000021e 	bne	r2,zero,25f1c <__sfp+0x38>
   25f14:	0025cc80 	call	25cc8 <__sinit.part.1>
   25f18:	81000017 	ldw	r4,0(r16)
   25f1c:	2480b804 	addi	r18,r4,736
   25f20:	047fffc4 	movi	r17,-1
   25f24:	91000117 	ldw	r4,4(r18)
   25f28:	94000217 	ldw	r16,8(r18)
   25f2c:	213fffc4 	addi	r4,r4,-1
   25f30:	20000a16 	blt	r4,zero,25f5c <__sfp+0x78>
   25f34:	8080030f 	ldh	r2,12(r16)
   25f38:	10000c26 	beq	r2,zero,25f6c <__sfp+0x88>
   25f3c:	80c01d04 	addi	r3,r16,116
   25f40:	00000206 	br	25f4c <__sfp+0x68>
   25f44:	18bfe60f 	ldh	r2,-104(r3)
   25f48:	10000826 	beq	r2,zero,25f6c <__sfp+0x88>
   25f4c:	213fffc4 	addi	r4,r4,-1
   25f50:	1c3ffd04 	addi	r16,r3,-12
   25f54:	18c01a04 	addi	r3,r3,104
   25f58:	247ffa1e 	bne	r4,r17,25f44 <__alt_data_end+0xfffecf44>
   25f5c:	90800017 	ldw	r2,0(r18)
   25f60:	10001d26 	beq	r2,zero,25fd8 <__sfp+0xf4>
   25f64:	1025883a 	mov	r18,r2
   25f68:	003fee06 	br	25f24 <__alt_data_end+0xfffecf24>
   25f6c:	00bfffc4 	movi	r2,-1
   25f70:	8080038d 	sth	r2,14(r16)
   25f74:	00800044 	movi	r2,1
   25f78:	8080030d 	sth	r2,12(r16)
   25f7c:	80001915 	stw	zero,100(r16)
   25f80:	80000015 	stw	zero,0(r16)
   25f84:	80000215 	stw	zero,8(r16)
   25f88:	80000115 	stw	zero,4(r16)
   25f8c:	80000415 	stw	zero,16(r16)
   25f90:	80000515 	stw	zero,20(r16)
   25f94:	80000615 	stw	zero,24(r16)
   25f98:	01800204 	movi	r6,8
   25f9c:	000b883a 	mov	r5,zero
   25fa0:	81001704 	addi	r4,r16,92
   25fa4:	00263a80 	call	263a8 <memset>
   25fa8:	8005883a 	mov	r2,r16
   25fac:	80000c15 	stw	zero,48(r16)
   25fb0:	80000d15 	stw	zero,52(r16)
   25fb4:	80001115 	stw	zero,68(r16)
   25fb8:	80001215 	stw	zero,72(r16)
   25fbc:	dfc00417 	ldw	ra,16(sp)
   25fc0:	dcc00317 	ldw	r19,12(sp)
   25fc4:	dc800217 	ldw	r18,8(sp)
   25fc8:	dc400117 	ldw	r17,4(sp)
   25fcc:	dc000017 	ldw	r16,0(sp)
   25fd0:	dec00504 	addi	sp,sp,20
   25fd4:	f800283a 	ret
   25fd8:	01400104 	movi	r5,4
   25fdc:	9809883a 	mov	r4,r19
   25fe0:	0025e6c0 	call	25e6c <__sfmoreglue>
   25fe4:	90800015 	stw	r2,0(r18)
   25fe8:	103fde1e 	bne	r2,zero,25f64 <__alt_data_end+0xfffecf64>
   25fec:	00800304 	movi	r2,12
   25ff0:	98800015 	stw	r2,0(r19)
   25ff4:	0005883a 	mov	r2,zero
   25ff8:	003ff006 	br	25fbc <__alt_data_end+0xfffecfbc>

00025ffc <_cleanup>:
   25ffc:	008000f4 	movhi	r2,3
   26000:	10a29204 	addi	r2,r2,-30136
   26004:	11000017 	ldw	r4,0(r2)
   26008:	014000b4 	movhi	r5,2
   2600c:	2959b004 	addi	r5,r5,26304
   26010:	00261281 	jmpi	26128 <_fwalk_reent>

00026014 <__sinit>:
   26014:	20800e17 	ldw	r2,56(r4)
   26018:	10000126 	beq	r2,zero,26020 <__sinit+0xc>
   2601c:	f800283a 	ret
   26020:	0025cc81 	jmpi	25cc8 <__sinit.part.1>

00026024 <__sfp_lock_acquire>:
   26024:	f800283a 	ret

00026028 <__sfp_lock_release>:
   26028:	f800283a 	ret

0002602c <__sinit_lock_acquire>:
   2602c:	f800283a 	ret

00026030 <__sinit_lock_release>:
   26030:	f800283a 	ret

00026034 <__fp_lock_all>:
   26034:	008000f4 	movhi	r2,3
   26038:	10a29304 	addi	r2,r2,-30132
   2603c:	11000017 	ldw	r4,0(r2)
   26040:	014000b4 	movhi	r5,2
   26044:	29579904 	addi	r5,r5,24164
   26048:	00260641 	jmpi	26064 <_fwalk>

0002604c <__fp_unlock_all>:
   2604c:	008000f4 	movhi	r2,3
   26050:	10a29304 	addi	r2,r2,-30132
   26054:	11000017 	ldw	r4,0(r2)
   26058:	014000b4 	movhi	r5,2
   2605c:	29572d04 	addi	r5,r5,23732
   26060:	00260641 	jmpi	26064 <_fwalk>

00026064 <_fwalk>:
   26064:	defff704 	addi	sp,sp,-36
   26068:	dd000415 	stw	r20,16(sp)
   2606c:	dfc00815 	stw	ra,32(sp)
   26070:	ddc00715 	stw	r23,28(sp)
   26074:	dd800615 	stw	r22,24(sp)
   26078:	dd400515 	stw	r21,20(sp)
   2607c:	dcc00315 	stw	r19,12(sp)
   26080:	dc800215 	stw	r18,8(sp)
   26084:	dc400115 	stw	r17,4(sp)
   26088:	dc000015 	stw	r16,0(sp)
   2608c:	2500b804 	addi	r20,r4,736
   26090:	a0002326 	beq	r20,zero,26120 <_fwalk+0xbc>
   26094:	282b883a 	mov	r21,r5
   26098:	002f883a 	mov	r23,zero
   2609c:	05800044 	movi	r22,1
   260a0:	04ffffc4 	movi	r19,-1
   260a4:	a4400117 	ldw	r17,4(r20)
   260a8:	a4800217 	ldw	r18,8(r20)
   260ac:	8c7fffc4 	addi	r17,r17,-1
   260b0:	88000d16 	blt	r17,zero,260e8 <_fwalk+0x84>
   260b4:	94000304 	addi	r16,r18,12
   260b8:	94800384 	addi	r18,r18,14
   260bc:	8080000b 	ldhu	r2,0(r16)
   260c0:	8c7fffc4 	addi	r17,r17,-1
   260c4:	813ffd04 	addi	r4,r16,-12
   260c8:	b080042e 	bgeu	r22,r2,260dc <_fwalk+0x78>
   260cc:	9080000f 	ldh	r2,0(r18)
   260d0:	14c00226 	beq	r2,r19,260dc <_fwalk+0x78>
   260d4:	a83ee83a 	callr	r21
   260d8:	b8aeb03a 	or	r23,r23,r2
   260dc:	84001a04 	addi	r16,r16,104
   260e0:	94801a04 	addi	r18,r18,104
   260e4:	8cfff51e 	bne	r17,r19,260bc <__alt_data_end+0xfffed0bc>
   260e8:	a5000017 	ldw	r20,0(r20)
   260ec:	a03fed1e 	bne	r20,zero,260a4 <__alt_data_end+0xfffed0a4>
   260f0:	b805883a 	mov	r2,r23
   260f4:	dfc00817 	ldw	ra,32(sp)
   260f8:	ddc00717 	ldw	r23,28(sp)
   260fc:	dd800617 	ldw	r22,24(sp)
   26100:	dd400517 	ldw	r21,20(sp)
   26104:	dd000417 	ldw	r20,16(sp)
   26108:	dcc00317 	ldw	r19,12(sp)
   2610c:	dc800217 	ldw	r18,8(sp)
   26110:	dc400117 	ldw	r17,4(sp)
   26114:	dc000017 	ldw	r16,0(sp)
   26118:	dec00904 	addi	sp,sp,36
   2611c:	f800283a 	ret
   26120:	002f883a 	mov	r23,zero
   26124:	003ff206 	br	260f0 <__alt_data_end+0xfffed0f0>

00026128 <_fwalk_reent>:
   26128:	defff704 	addi	sp,sp,-36
   2612c:	dd000415 	stw	r20,16(sp)
   26130:	dfc00815 	stw	ra,32(sp)
   26134:	ddc00715 	stw	r23,28(sp)
   26138:	dd800615 	stw	r22,24(sp)
   2613c:	dd400515 	stw	r21,20(sp)
   26140:	dcc00315 	stw	r19,12(sp)
   26144:	dc800215 	stw	r18,8(sp)
   26148:	dc400115 	stw	r17,4(sp)
   2614c:	dc000015 	stw	r16,0(sp)
   26150:	2500b804 	addi	r20,r4,736
   26154:	a0002326 	beq	r20,zero,261e4 <_fwalk_reent+0xbc>
   26158:	282b883a 	mov	r21,r5
   2615c:	2027883a 	mov	r19,r4
   26160:	002f883a 	mov	r23,zero
   26164:	05800044 	movi	r22,1
   26168:	04bfffc4 	movi	r18,-1
   2616c:	a4400117 	ldw	r17,4(r20)
   26170:	a4000217 	ldw	r16,8(r20)
   26174:	8c7fffc4 	addi	r17,r17,-1
   26178:	88000c16 	blt	r17,zero,261ac <_fwalk_reent+0x84>
   2617c:	84000304 	addi	r16,r16,12
   26180:	8080000b 	ldhu	r2,0(r16)
   26184:	8c7fffc4 	addi	r17,r17,-1
   26188:	817ffd04 	addi	r5,r16,-12
   2618c:	b080052e 	bgeu	r22,r2,261a4 <_fwalk_reent+0x7c>
   26190:	8080008f 	ldh	r2,2(r16)
   26194:	9809883a 	mov	r4,r19
   26198:	14800226 	beq	r2,r18,261a4 <_fwalk_reent+0x7c>
   2619c:	a83ee83a 	callr	r21
   261a0:	b8aeb03a 	or	r23,r23,r2
   261a4:	84001a04 	addi	r16,r16,104
   261a8:	8cbff51e 	bne	r17,r18,26180 <__alt_data_end+0xfffed180>
   261ac:	a5000017 	ldw	r20,0(r20)
   261b0:	a03fee1e 	bne	r20,zero,2616c <__alt_data_end+0xfffed16c>
   261b4:	b805883a 	mov	r2,r23
   261b8:	dfc00817 	ldw	ra,32(sp)
   261bc:	ddc00717 	ldw	r23,28(sp)
   261c0:	dd800617 	ldw	r22,24(sp)
   261c4:	dd400517 	ldw	r21,20(sp)
   261c8:	dd000417 	ldw	r20,16(sp)
   261cc:	dcc00317 	ldw	r19,12(sp)
   261d0:	dc800217 	ldw	r18,8(sp)
   261d4:	dc400117 	ldw	r17,4(sp)
   261d8:	dc000017 	ldw	r16,0(sp)
   261dc:	dec00904 	addi	sp,sp,36
   261e0:	f800283a 	ret
   261e4:	002f883a 	mov	r23,zero
   261e8:	003ff206 	br	261b4 <__alt_data_end+0xfffed1b4>

000261ec <__smakebuf_r>:
   261ec:	2880030b 	ldhu	r2,12(r5)
   261f0:	10c0008c 	andi	r3,r2,2
   261f4:	1800411e 	bne	r3,zero,262fc <__smakebuf_r+0x110>
   261f8:	deffec04 	addi	sp,sp,-80
   261fc:	dc000f15 	stw	r16,60(sp)
   26200:	2821883a 	mov	r16,r5
   26204:	2940038f 	ldh	r5,14(r5)
   26208:	dc401015 	stw	r17,64(sp)
   2620c:	dfc01315 	stw	ra,76(sp)
   26210:	dcc01215 	stw	r19,72(sp)
   26214:	dc801115 	stw	r18,68(sp)
   26218:	2023883a 	mov	r17,r4
   2621c:	28001c16 	blt	r5,zero,26290 <__smakebuf_r+0xa4>
   26220:	d80d883a 	mov	r6,sp
   26224:	00267c40 	call	267c4 <_fstat_r>
   26228:	10001816 	blt	r2,zero,2628c <__smakebuf_r+0xa0>
   2622c:	d8800117 	ldw	r2,4(sp)
   26230:	00e00014 	movui	r3,32768
   26234:	10bc000c 	andi	r2,r2,61440
   26238:	14c80020 	cmpeqi	r19,r2,8192
   2623c:	10c03726 	beq	r2,r3,2631c <__smakebuf_r+0x130>
   26240:	80c0030b 	ldhu	r3,12(r16)
   26244:	18c20014 	ori	r3,r3,2048
   26248:	80c0030d 	sth	r3,12(r16)
   2624c:	00c80004 	movi	r3,8192
   26250:	10c0521e 	bne	r2,r3,2639c <__smakebuf_r+0x1b0>
   26254:	8140038f 	ldh	r5,14(r16)
   26258:	8809883a 	mov	r4,r17
   2625c:	00268200 	call	26820 <_isatty_r>
   26260:	10004c26 	beq	r2,zero,26394 <__smakebuf_r+0x1a8>
   26264:	8080030b 	ldhu	r2,12(r16)
   26268:	80c010c4 	addi	r3,r16,67
   2626c:	80c00015 	stw	r3,0(r16)
   26270:	10800054 	ori	r2,r2,1
   26274:	8080030d 	sth	r2,12(r16)
   26278:	00800044 	movi	r2,1
   2627c:	80c00415 	stw	r3,16(r16)
   26280:	80800515 	stw	r2,20(r16)
   26284:	04810004 	movi	r18,1024
   26288:	00000706 	br	262a8 <__smakebuf_r+0xbc>
   2628c:	8080030b 	ldhu	r2,12(r16)
   26290:	10c0200c 	andi	r3,r2,128
   26294:	18001f1e 	bne	r3,zero,26314 <__smakebuf_r+0x128>
   26298:	04810004 	movi	r18,1024
   2629c:	10820014 	ori	r2,r2,2048
   262a0:	8080030d 	sth	r2,12(r16)
   262a4:	0027883a 	mov	r19,zero
   262a8:	900b883a 	mov	r5,r18
   262ac:	8809883a 	mov	r4,r17
   262b0:	00219640 	call	21964 <_malloc_r>
   262b4:	10002c26 	beq	r2,zero,26368 <__smakebuf_r+0x17c>
   262b8:	80c0030b 	ldhu	r3,12(r16)
   262bc:	010000b4 	movhi	r4,2
   262c0:	21172f04 	addi	r4,r4,23740
   262c4:	89000f15 	stw	r4,60(r17)
   262c8:	18c02014 	ori	r3,r3,128
   262cc:	80c0030d 	sth	r3,12(r16)
   262d0:	80800015 	stw	r2,0(r16)
   262d4:	80800415 	stw	r2,16(r16)
   262d8:	84800515 	stw	r18,20(r16)
   262dc:	98001a1e 	bne	r19,zero,26348 <__smakebuf_r+0x15c>
   262e0:	dfc01317 	ldw	ra,76(sp)
   262e4:	dcc01217 	ldw	r19,72(sp)
   262e8:	dc801117 	ldw	r18,68(sp)
   262ec:	dc401017 	ldw	r17,64(sp)
   262f0:	dc000f17 	ldw	r16,60(sp)
   262f4:	dec01404 	addi	sp,sp,80
   262f8:	f800283a 	ret
   262fc:	288010c4 	addi	r2,r5,67
   26300:	28800015 	stw	r2,0(r5)
   26304:	28800415 	stw	r2,16(r5)
   26308:	00800044 	movi	r2,1
   2630c:	28800515 	stw	r2,20(r5)
   26310:	f800283a 	ret
   26314:	04801004 	movi	r18,64
   26318:	003fe006 	br	2629c <__alt_data_end+0xfffed29c>
   2631c:	81000a17 	ldw	r4,40(r16)
   26320:	00c000b4 	movhi	r3,2
   26324:	18d96a04 	addi	r3,r3,26024
   26328:	20ffc51e 	bne	r4,r3,26240 <__alt_data_end+0xfffed240>
   2632c:	8080030b 	ldhu	r2,12(r16)
   26330:	04810004 	movi	r18,1024
   26334:	84801315 	stw	r18,76(r16)
   26338:	1484b03a 	or	r2,r2,r18
   2633c:	8080030d 	sth	r2,12(r16)
   26340:	0027883a 	mov	r19,zero
   26344:	003fd806 	br	262a8 <__alt_data_end+0xfffed2a8>
   26348:	8140038f 	ldh	r5,14(r16)
   2634c:	8809883a 	mov	r4,r17
   26350:	00268200 	call	26820 <_isatty_r>
   26354:	103fe226 	beq	r2,zero,262e0 <__alt_data_end+0xfffed2e0>
   26358:	8080030b 	ldhu	r2,12(r16)
   2635c:	10800054 	ori	r2,r2,1
   26360:	8080030d 	sth	r2,12(r16)
   26364:	003fde06 	br	262e0 <__alt_data_end+0xfffed2e0>
   26368:	8080030b 	ldhu	r2,12(r16)
   2636c:	10c0800c 	andi	r3,r2,512
   26370:	183fdb1e 	bne	r3,zero,262e0 <__alt_data_end+0xfffed2e0>
   26374:	10800094 	ori	r2,r2,2
   26378:	80c010c4 	addi	r3,r16,67
   2637c:	8080030d 	sth	r2,12(r16)
   26380:	00800044 	movi	r2,1
   26384:	80c00015 	stw	r3,0(r16)
   26388:	80c00415 	stw	r3,16(r16)
   2638c:	80800515 	stw	r2,20(r16)
   26390:	003fd306 	br	262e0 <__alt_data_end+0xfffed2e0>
   26394:	04810004 	movi	r18,1024
   26398:	003fc306 	br	262a8 <__alt_data_end+0xfffed2a8>
   2639c:	0027883a 	mov	r19,zero
   263a0:	04810004 	movi	r18,1024
   263a4:	003fc006 	br	262a8 <__alt_data_end+0xfffed2a8>

000263a8 <memset>:
   263a8:	20c000cc 	andi	r3,r4,3
   263ac:	2005883a 	mov	r2,r4
   263b0:	18004426 	beq	r3,zero,264c4 <memset+0x11c>
   263b4:	31ffffc4 	addi	r7,r6,-1
   263b8:	30004026 	beq	r6,zero,264bc <memset+0x114>
   263bc:	2813883a 	mov	r9,r5
   263c0:	200d883a 	mov	r6,r4
   263c4:	2007883a 	mov	r3,r4
   263c8:	00000406 	br	263dc <memset+0x34>
   263cc:	3a3fffc4 	addi	r8,r7,-1
   263d0:	31800044 	addi	r6,r6,1
   263d4:	38003926 	beq	r7,zero,264bc <memset+0x114>
   263d8:	400f883a 	mov	r7,r8
   263dc:	18c00044 	addi	r3,r3,1
   263e0:	32400005 	stb	r9,0(r6)
   263e4:	1a0000cc 	andi	r8,r3,3
   263e8:	403ff81e 	bne	r8,zero,263cc <__alt_data_end+0xfffed3cc>
   263ec:	010000c4 	movi	r4,3
   263f0:	21c02d2e 	bgeu	r4,r7,264a8 <memset+0x100>
   263f4:	29003fcc 	andi	r4,r5,255
   263f8:	200c923a 	slli	r6,r4,8
   263fc:	3108b03a 	or	r4,r6,r4
   26400:	200c943a 	slli	r6,r4,16
   26404:	218cb03a 	or	r6,r4,r6
   26408:	010003c4 	movi	r4,15
   2640c:	21c0182e 	bgeu	r4,r7,26470 <memset+0xc8>
   26410:	3b3ffc04 	addi	r12,r7,-16
   26414:	6018d13a 	srli	r12,r12,4
   26418:	1a000104 	addi	r8,r3,4
   2641c:	1ac00204 	addi	r11,r3,8
   26420:	6008913a 	slli	r4,r12,4
   26424:	1a800304 	addi	r10,r3,12
   26428:	1813883a 	mov	r9,r3
   2642c:	21000504 	addi	r4,r4,20
   26430:	1909883a 	add	r4,r3,r4
   26434:	49800015 	stw	r6,0(r9)
   26438:	41800015 	stw	r6,0(r8)
   2643c:	59800015 	stw	r6,0(r11)
   26440:	51800015 	stw	r6,0(r10)
   26444:	42000404 	addi	r8,r8,16
   26448:	4a400404 	addi	r9,r9,16
   2644c:	5ac00404 	addi	r11,r11,16
   26450:	52800404 	addi	r10,r10,16
   26454:	413ff71e 	bne	r8,r4,26434 <__alt_data_end+0xfffed434>
   26458:	63000044 	addi	r12,r12,1
   2645c:	6018913a 	slli	r12,r12,4
   26460:	39c003cc 	andi	r7,r7,15
   26464:	010000c4 	movi	r4,3
   26468:	1b07883a 	add	r3,r3,r12
   2646c:	21c00e2e 	bgeu	r4,r7,264a8 <memset+0x100>
   26470:	1813883a 	mov	r9,r3
   26474:	3811883a 	mov	r8,r7
   26478:	010000c4 	movi	r4,3
   2647c:	49800015 	stw	r6,0(r9)
   26480:	423fff04 	addi	r8,r8,-4
   26484:	4a400104 	addi	r9,r9,4
   26488:	223ffc36 	bltu	r4,r8,2647c <__alt_data_end+0xfffed47c>
   2648c:	393fff04 	addi	r4,r7,-4
   26490:	2008d0ba 	srli	r4,r4,2
   26494:	39c000cc 	andi	r7,r7,3
   26498:	21000044 	addi	r4,r4,1
   2649c:	2109883a 	add	r4,r4,r4
   264a0:	2109883a 	add	r4,r4,r4
   264a4:	1907883a 	add	r3,r3,r4
   264a8:	38000526 	beq	r7,zero,264c0 <memset+0x118>
   264ac:	19cf883a 	add	r7,r3,r7
   264b0:	19400005 	stb	r5,0(r3)
   264b4:	18c00044 	addi	r3,r3,1
   264b8:	38fffd1e 	bne	r7,r3,264b0 <__alt_data_end+0xfffed4b0>
   264bc:	f800283a 	ret
   264c0:	f800283a 	ret
   264c4:	2007883a 	mov	r3,r4
   264c8:	300f883a 	mov	r7,r6
   264cc:	003fc706 	br	263ec <__alt_data_end+0xfffed3ec>

000264d0 <__sread>:
   264d0:	defffe04 	addi	sp,sp,-8
   264d4:	dc000015 	stw	r16,0(sp)
   264d8:	2821883a 	mov	r16,r5
   264dc:	2940038f 	ldh	r5,14(r5)
   264e0:	dfc00115 	stw	ra,4(sp)
   264e4:	00268d40 	call	268d4 <_read_r>
   264e8:	10000716 	blt	r2,zero,26508 <__sread+0x38>
   264ec:	80c01417 	ldw	r3,80(r16)
   264f0:	1887883a 	add	r3,r3,r2
   264f4:	80c01415 	stw	r3,80(r16)
   264f8:	dfc00117 	ldw	ra,4(sp)
   264fc:	dc000017 	ldw	r16,0(sp)
   26500:	dec00204 	addi	sp,sp,8
   26504:	f800283a 	ret
   26508:	80c0030b 	ldhu	r3,12(r16)
   2650c:	18fbffcc 	andi	r3,r3,61439
   26510:	80c0030d 	sth	r3,12(r16)
   26514:	dfc00117 	ldw	ra,4(sp)
   26518:	dc000017 	ldw	r16,0(sp)
   2651c:	dec00204 	addi	sp,sp,8
   26520:	f800283a 	ret

00026524 <__seofread>:
   26524:	0005883a 	mov	r2,zero
   26528:	f800283a 	ret

0002652c <__swrite>:
   2652c:	2880030b 	ldhu	r2,12(r5)
   26530:	defffb04 	addi	sp,sp,-20
   26534:	dcc00315 	stw	r19,12(sp)
   26538:	dc800215 	stw	r18,8(sp)
   2653c:	dc400115 	stw	r17,4(sp)
   26540:	dc000015 	stw	r16,0(sp)
   26544:	dfc00415 	stw	ra,16(sp)
   26548:	10c0400c 	andi	r3,r2,256
   2654c:	2821883a 	mov	r16,r5
   26550:	2023883a 	mov	r17,r4
   26554:	3025883a 	mov	r18,r6
   26558:	3827883a 	mov	r19,r7
   2655c:	18000526 	beq	r3,zero,26574 <__swrite+0x48>
   26560:	2940038f 	ldh	r5,14(r5)
   26564:	01c00084 	movi	r7,2
   26568:	000d883a 	mov	r6,zero
   2656c:	00268740 	call	26874 <_lseek_r>
   26570:	8080030b 	ldhu	r2,12(r16)
   26574:	8140038f 	ldh	r5,14(r16)
   26578:	10bbffcc 	andi	r2,r2,61439
   2657c:	980f883a 	mov	r7,r19
   26580:	900d883a 	mov	r6,r18
   26584:	8809883a 	mov	r4,r17
   26588:	8080030d 	sth	r2,12(r16)
   2658c:	dfc00417 	ldw	ra,16(sp)
   26590:	dcc00317 	ldw	r19,12(sp)
   26594:	dc800217 	ldw	r18,8(sp)
   26598:	dc400117 	ldw	r17,4(sp)
   2659c:	dc000017 	ldw	r16,0(sp)
   265a0:	dec00504 	addi	sp,sp,20
   265a4:	002660c1 	jmpi	2660c <_write_r>

000265a8 <__sseek>:
   265a8:	defffe04 	addi	sp,sp,-8
   265ac:	dc000015 	stw	r16,0(sp)
   265b0:	2821883a 	mov	r16,r5
   265b4:	2940038f 	ldh	r5,14(r5)
   265b8:	dfc00115 	stw	ra,4(sp)
   265bc:	00268740 	call	26874 <_lseek_r>
   265c0:	00ffffc4 	movi	r3,-1
   265c4:	10c00826 	beq	r2,r3,265e8 <__sseek+0x40>
   265c8:	80c0030b 	ldhu	r3,12(r16)
   265cc:	80801415 	stw	r2,80(r16)
   265d0:	18c40014 	ori	r3,r3,4096
   265d4:	80c0030d 	sth	r3,12(r16)
   265d8:	dfc00117 	ldw	ra,4(sp)
   265dc:	dc000017 	ldw	r16,0(sp)
   265e0:	dec00204 	addi	sp,sp,8
   265e4:	f800283a 	ret
   265e8:	80c0030b 	ldhu	r3,12(r16)
   265ec:	18fbffcc 	andi	r3,r3,61439
   265f0:	80c0030d 	sth	r3,12(r16)
   265f4:	dfc00117 	ldw	ra,4(sp)
   265f8:	dc000017 	ldw	r16,0(sp)
   265fc:	dec00204 	addi	sp,sp,8
   26600:	f800283a 	ret

00026604 <__sclose>:
   26604:	2940038f 	ldh	r5,14(r5)
   26608:	002666c1 	jmpi	2666c <_close_r>

0002660c <_write_r>:
   2660c:	defffd04 	addi	sp,sp,-12
   26610:	2805883a 	mov	r2,r5
   26614:	dc000015 	stw	r16,0(sp)
   26618:	040000f4 	movhi	r16,3
   2661c:	dc400115 	stw	r17,4(sp)
   26620:	300b883a 	mov	r5,r6
   26624:	84295104 	addi	r16,r16,-23228
   26628:	2023883a 	mov	r17,r4
   2662c:	380d883a 	mov	r6,r7
   26630:	1009883a 	mov	r4,r2
   26634:	dfc00215 	stw	ra,8(sp)
   26638:	80000015 	stw	zero,0(r16)
   2663c:	0026dd80 	call	26dd8 <write>
   26640:	00ffffc4 	movi	r3,-1
   26644:	10c00526 	beq	r2,r3,2665c <_write_r+0x50>
   26648:	dfc00217 	ldw	ra,8(sp)
   2664c:	dc400117 	ldw	r17,4(sp)
   26650:	dc000017 	ldw	r16,0(sp)
   26654:	dec00304 	addi	sp,sp,12
   26658:	f800283a 	ret
   2665c:	80c00017 	ldw	r3,0(r16)
   26660:	183ff926 	beq	r3,zero,26648 <__alt_data_end+0xfffed648>
   26664:	88c00015 	stw	r3,0(r17)
   26668:	003ff706 	br	26648 <__alt_data_end+0xfffed648>

0002666c <_close_r>:
   2666c:	defffd04 	addi	sp,sp,-12
   26670:	dc000015 	stw	r16,0(sp)
   26674:	040000f4 	movhi	r16,3
   26678:	dc400115 	stw	r17,4(sp)
   2667c:	84295104 	addi	r16,r16,-23228
   26680:	2023883a 	mov	r17,r4
   26684:	2809883a 	mov	r4,r5
   26688:	dfc00215 	stw	ra,8(sp)
   2668c:	80000015 	stw	zero,0(r16)
   26690:	0023a4c0 	call	23a4c <close>
   26694:	00ffffc4 	movi	r3,-1
   26698:	10c00526 	beq	r2,r3,266b0 <_close_r+0x44>
   2669c:	dfc00217 	ldw	ra,8(sp)
   266a0:	dc400117 	ldw	r17,4(sp)
   266a4:	dc000017 	ldw	r16,0(sp)
   266a8:	dec00304 	addi	sp,sp,12
   266ac:	f800283a 	ret
   266b0:	80c00017 	ldw	r3,0(r16)
   266b4:	183ff926 	beq	r3,zero,2669c <__alt_data_end+0xfffed69c>
   266b8:	88c00015 	stw	r3,0(r17)
   266bc:	003ff706 	br	2669c <__alt_data_end+0xfffed69c>

000266c0 <_fclose_r>:
   266c0:	28003926 	beq	r5,zero,267a8 <_fclose_r+0xe8>
   266c4:	defffc04 	addi	sp,sp,-16
   266c8:	dc400115 	stw	r17,4(sp)
   266cc:	dc000015 	stw	r16,0(sp)
   266d0:	dfc00315 	stw	ra,12(sp)
   266d4:	dc800215 	stw	r18,8(sp)
   266d8:	2023883a 	mov	r17,r4
   266dc:	2821883a 	mov	r16,r5
   266e0:	20000226 	beq	r4,zero,266ec <_fclose_r+0x2c>
   266e4:	20800e17 	ldw	r2,56(r4)
   266e8:	10002726 	beq	r2,zero,26788 <_fclose_r+0xc8>
   266ec:	8080030f 	ldh	r2,12(r16)
   266f0:	1000071e 	bne	r2,zero,26710 <_fclose_r+0x50>
   266f4:	0005883a 	mov	r2,zero
   266f8:	dfc00317 	ldw	ra,12(sp)
   266fc:	dc800217 	ldw	r18,8(sp)
   26700:	dc400117 	ldw	r17,4(sp)
   26704:	dc000017 	ldw	r16,0(sp)
   26708:	dec00404 	addi	sp,sp,16
   2670c:	f800283a 	ret
   26710:	800b883a 	mov	r5,r16
   26714:	8809883a 	mov	r4,r17
   26718:	0025a0c0 	call	25a0c <__sflush_r>
   2671c:	1025883a 	mov	r18,r2
   26720:	80800b17 	ldw	r2,44(r16)
   26724:	10000426 	beq	r2,zero,26738 <_fclose_r+0x78>
   26728:	81400717 	ldw	r5,28(r16)
   2672c:	8809883a 	mov	r4,r17
   26730:	103ee83a 	callr	r2
   26734:	10001616 	blt	r2,zero,26790 <_fclose_r+0xd0>
   26738:	8080030b 	ldhu	r2,12(r16)
   2673c:	1080200c 	andi	r2,r2,128
   26740:	1000151e 	bne	r2,zero,26798 <_fclose_r+0xd8>
   26744:	81400c17 	ldw	r5,48(r16)
   26748:	28000526 	beq	r5,zero,26760 <_fclose_r+0xa0>
   2674c:	80801004 	addi	r2,r16,64
   26750:	28800226 	beq	r5,r2,2675c <_fclose_r+0x9c>
   26754:	8809883a 	mov	r4,r17
   26758:	00223640 	call	22364 <_free_r>
   2675c:	80000c15 	stw	zero,48(r16)
   26760:	81401117 	ldw	r5,68(r16)
   26764:	28000326 	beq	r5,zero,26774 <_fclose_r+0xb4>
   26768:	8809883a 	mov	r4,r17
   2676c:	00223640 	call	22364 <_free_r>
   26770:	80001115 	stw	zero,68(r16)
   26774:	00260240 	call	26024 <__sfp_lock_acquire>
   26778:	8000030d 	sth	zero,12(r16)
   2677c:	00260280 	call	26028 <__sfp_lock_release>
   26780:	9005883a 	mov	r2,r18
   26784:	003fdc06 	br	266f8 <__alt_data_end+0xfffed6f8>
   26788:	00260140 	call	26014 <__sinit>
   2678c:	003fd706 	br	266ec <__alt_data_end+0xfffed6ec>
   26790:	04bfffc4 	movi	r18,-1
   26794:	003fe806 	br	26738 <__alt_data_end+0xfffed738>
   26798:	81400417 	ldw	r5,16(r16)
   2679c:	8809883a 	mov	r4,r17
   267a0:	00223640 	call	22364 <_free_r>
   267a4:	003fe706 	br	26744 <__alt_data_end+0xfffed744>
   267a8:	0005883a 	mov	r2,zero
   267ac:	f800283a 	ret

000267b0 <fclose>:
   267b0:	008000f4 	movhi	r2,3
   267b4:	10a29304 	addi	r2,r2,-30132
   267b8:	200b883a 	mov	r5,r4
   267bc:	11000017 	ldw	r4,0(r2)
   267c0:	00266c01 	jmpi	266c0 <_fclose_r>

000267c4 <_fstat_r>:
   267c4:	defffd04 	addi	sp,sp,-12
   267c8:	2805883a 	mov	r2,r5
   267cc:	dc000015 	stw	r16,0(sp)
   267d0:	040000f4 	movhi	r16,3
   267d4:	dc400115 	stw	r17,4(sp)
   267d8:	84295104 	addi	r16,r16,-23228
   267dc:	2023883a 	mov	r17,r4
   267e0:	300b883a 	mov	r5,r6
   267e4:	1009883a 	mov	r4,r2
   267e8:	dfc00215 	stw	ra,8(sp)
   267ec:	80000015 	stw	zero,0(r16)
   267f0:	00269a40 	call	269a4 <fstat>
   267f4:	00ffffc4 	movi	r3,-1
   267f8:	10c00526 	beq	r2,r3,26810 <_fstat_r+0x4c>
   267fc:	dfc00217 	ldw	ra,8(sp)
   26800:	dc400117 	ldw	r17,4(sp)
   26804:	dc000017 	ldw	r16,0(sp)
   26808:	dec00304 	addi	sp,sp,12
   2680c:	f800283a 	ret
   26810:	80c00017 	ldw	r3,0(r16)
   26814:	183ff926 	beq	r3,zero,267fc <__alt_data_end+0xfffed7fc>
   26818:	88c00015 	stw	r3,0(r17)
   2681c:	003ff706 	br	267fc <__alt_data_end+0xfffed7fc>

00026820 <_isatty_r>:
   26820:	defffd04 	addi	sp,sp,-12
   26824:	dc000015 	stw	r16,0(sp)
   26828:	040000f4 	movhi	r16,3
   2682c:	dc400115 	stw	r17,4(sp)
   26830:	84295104 	addi	r16,r16,-23228
   26834:	2023883a 	mov	r17,r4
   26838:	2809883a 	mov	r4,r5
   2683c:	dfc00215 	stw	ra,8(sp)
   26840:	80000015 	stw	zero,0(r16)
   26844:	0026a980 	call	26a98 <isatty>
   26848:	00ffffc4 	movi	r3,-1
   2684c:	10c00526 	beq	r2,r3,26864 <_isatty_r+0x44>
   26850:	dfc00217 	ldw	ra,8(sp)
   26854:	dc400117 	ldw	r17,4(sp)
   26858:	dc000017 	ldw	r16,0(sp)
   2685c:	dec00304 	addi	sp,sp,12
   26860:	f800283a 	ret
   26864:	80c00017 	ldw	r3,0(r16)
   26868:	183ff926 	beq	r3,zero,26850 <__alt_data_end+0xfffed850>
   2686c:	88c00015 	stw	r3,0(r17)
   26870:	003ff706 	br	26850 <__alt_data_end+0xfffed850>

00026874 <_lseek_r>:
   26874:	defffd04 	addi	sp,sp,-12
   26878:	2805883a 	mov	r2,r5
   2687c:	dc000015 	stw	r16,0(sp)
   26880:	040000f4 	movhi	r16,3
   26884:	dc400115 	stw	r17,4(sp)
   26888:	300b883a 	mov	r5,r6
   2688c:	84295104 	addi	r16,r16,-23228
   26890:	2023883a 	mov	r17,r4
   26894:	380d883a 	mov	r6,r7
   26898:	1009883a 	mov	r4,r2
   2689c:	dfc00215 	stw	ra,8(sp)
   268a0:	80000015 	stw	zero,0(r16)
   268a4:	0026b800 	call	26b80 <lseek>
   268a8:	00ffffc4 	movi	r3,-1
   268ac:	10c00526 	beq	r2,r3,268c4 <_lseek_r+0x50>
   268b0:	dfc00217 	ldw	ra,8(sp)
   268b4:	dc400117 	ldw	r17,4(sp)
   268b8:	dc000017 	ldw	r16,0(sp)
   268bc:	dec00304 	addi	sp,sp,12
   268c0:	f800283a 	ret
   268c4:	80c00017 	ldw	r3,0(r16)
   268c8:	183ff926 	beq	r3,zero,268b0 <__alt_data_end+0xfffed8b0>
   268cc:	88c00015 	stw	r3,0(r17)
   268d0:	003ff706 	br	268b0 <__alt_data_end+0xfffed8b0>

000268d4 <_read_r>:
   268d4:	defffd04 	addi	sp,sp,-12
   268d8:	2805883a 	mov	r2,r5
   268dc:	dc000015 	stw	r16,0(sp)
   268e0:	040000f4 	movhi	r16,3
   268e4:	dc400115 	stw	r17,4(sp)
   268e8:	300b883a 	mov	r5,r6
   268ec:	84295104 	addi	r16,r16,-23228
   268f0:	2023883a 	mov	r17,r4
   268f4:	380d883a 	mov	r6,r7
   268f8:	1009883a 	mov	r4,r2
   268fc:	dfc00215 	stw	ra,8(sp)
   26900:	80000015 	stw	zero,0(r16)
   26904:	0026c980 	call	26c98 <read>
   26908:	00ffffc4 	movi	r3,-1
   2690c:	10c00526 	beq	r2,r3,26924 <_read_r+0x50>
   26910:	dfc00217 	ldw	ra,8(sp)
   26914:	dc400117 	ldw	r17,4(sp)
   26918:	dc000017 	ldw	r16,0(sp)
   2691c:	dec00304 	addi	sp,sp,12
   26920:	f800283a 	ret
   26924:	80c00017 	ldw	r3,0(r16)
   26928:	183ff926 	beq	r3,zero,26910 <__alt_data_end+0xfffed910>
   2692c:	88c00015 	stw	r3,0(r17)
   26930:	003ff706 	br	26910 <__alt_data_end+0xfffed910>

00026934 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26934:	defffd04 	addi	sp,sp,-12
   26938:	df000215 	stw	fp,8(sp)
   2693c:	df000204 	addi	fp,sp,8
   26940:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26944:	0001883a 	nop
   26948:	e0bfff17 	ldw	r2,-4(fp)
   2694c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26950:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26954:	10000226 	beq	r2,zero,26960 <_exit+0x2c>
    ALT_SIM_FAIL();
   26958:	002af070 	cmpltui	zero,zero,43969
   2695c:	00000106 	br	26964 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26960:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26964:	003fff06 	br	26964 <__alt_data_end+0xfffed964>

00026968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26968:	defffe04 	addi	sp,sp,-8
   2696c:	dfc00115 	stw	ra,4(sp)
   26970:	df000015 	stw	fp,0(sp)
   26974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26978:	d0a00e17 	ldw	r2,-32712(gp)
   2697c:	10000326 	beq	r2,zero,2698c <alt_get_errno+0x24>
   26980:	d0a00e17 	ldw	r2,-32712(gp)
   26984:	103ee83a 	callr	r2
   26988:	00000106 	br	26990 <alt_get_errno+0x28>
   2698c:	d0a6c404 	addi	r2,gp,-25840
}
   26990:	e037883a 	mov	sp,fp
   26994:	dfc00117 	ldw	ra,4(sp)
   26998:	df000017 	ldw	fp,0(sp)
   2699c:	dec00204 	addi	sp,sp,8
   269a0:	f800283a 	ret

000269a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   269a4:	defffb04 	addi	sp,sp,-20
   269a8:	dfc00415 	stw	ra,16(sp)
   269ac:	df000315 	stw	fp,12(sp)
   269b0:	df000304 	addi	fp,sp,12
   269b4:	e13ffe15 	stw	r4,-8(fp)
   269b8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   269bc:	e0bffe17 	ldw	r2,-8(fp)
   269c0:	10000816 	blt	r2,zero,269e4 <fstat+0x40>
   269c4:	01400304 	movi	r5,12
   269c8:	e13ffe17 	ldw	r4,-8(fp)
   269cc:	00219140 	call	21914 <__mulsi3>
   269d0:	1007883a 	mov	r3,r2
   269d4:	008000f4 	movhi	r2,3
   269d8:	10a22d04 	addi	r2,r2,-30540
   269dc:	1885883a 	add	r2,r3,r2
   269e0:	00000106 	br	269e8 <fstat+0x44>
   269e4:	0005883a 	mov	r2,zero
   269e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   269ec:	e0bffd17 	ldw	r2,-12(fp)
   269f0:	10001026 	beq	r2,zero,26a34 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   269f4:	e0bffd17 	ldw	r2,-12(fp)
   269f8:	10800017 	ldw	r2,0(r2)
   269fc:	10800817 	ldw	r2,32(r2)
   26a00:	10000726 	beq	r2,zero,26a20 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   26a04:	e0bffd17 	ldw	r2,-12(fp)
   26a08:	10800017 	ldw	r2,0(r2)
   26a0c:	10800817 	ldw	r2,32(r2)
   26a10:	e17fff17 	ldw	r5,-4(fp)
   26a14:	e13ffd17 	ldw	r4,-12(fp)
   26a18:	103ee83a 	callr	r2
   26a1c:	00000a06 	br	26a48 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   26a20:	e0bfff17 	ldw	r2,-4(fp)
   26a24:	00c80004 	movi	r3,8192
   26a28:	10c00115 	stw	r3,4(r2)
      return 0;
   26a2c:	0005883a 	mov	r2,zero
   26a30:	00000506 	br	26a48 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   26a34:	00269680 	call	26968 <alt_get_errno>
   26a38:	1007883a 	mov	r3,r2
   26a3c:	00801444 	movi	r2,81
   26a40:	18800015 	stw	r2,0(r3)
    return -1;
   26a44:	00bfffc4 	movi	r2,-1
  }
}
   26a48:	e037883a 	mov	sp,fp
   26a4c:	dfc00117 	ldw	ra,4(sp)
   26a50:	df000017 	ldw	fp,0(sp)
   26a54:	dec00204 	addi	sp,sp,8
   26a58:	f800283a 	ret

00026a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26a5c:	defffe04 	addi	sp,sp,-8
   26a60:	dfc00115 	stw	ra,4(sp)
   26a64:	df000015 	stw	fp,0(sp)
   26a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26a6c:	d0a00e17 	ldw	r2,-32712(gp)
   26a70:	10000326 	beq	r2,zero,26a80 <alt_get_errno+0x24>
   26a74:	d0a00e17 	ldw	r2,-32712(gp)
   26a78:	103ee83a 	callr	r2
   26a7c:	00000106 	br	26a84 <alt_get_errno+0x28>
   26a80:	d0a6c404 	addi	r2,gp,-25840
}
   26a84:	e037883a 	mov	sp,fp
   26a88:	dfc00117 	ldw	ra,4(sp)
   26a8c:	df000017 	ldw	fp,0(sp)
   26a90:	dec00204 	addi	sp,sp,8
   26a94:	f800283a 	ret

00026a98 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   26a98:	deffed04 	addi	sp,sp,-76
   26a9c:	dfc01215 	stw	ra,72(sp)
   26aa0:	df001115 	stw	fp,68(sp)
   26aa4:	df001104 	addi	fp,sp,68
   26aa8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26aac:	e0bfff17 	ldw	r2,-4(fp)
   26ab0:	10000816 	blt	r2,zero,26ad4 <isatty+0x3c>
   26ab4:	01400304 	movi	r5,12
   26ab8:	e13fff17 	ldw	r4,-4(fp)
   26abc:	00219140 	call	21914 <__mulsi3>
   26ac0:	1007883a 	mov	r3,r2
   26ac4:	008000f4 	movhi	r2,3
   26ac8:	10a22d04 	addi	r2,r2,-30540
   26acc:	1885883a 	add	r2,r3,r2
   26ad0:	00000106 	br	26ad8 <isatty+0x40>
   26ad4:	0005883a 	mov	r2,zero
   26ad8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   26adc:	e0bfef17 	ldw	r2,-68(fp)
   26ae0:	10000e26 	beq	r2,zero,26b1c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   26ae4:	e0bfef17 	ldw	r2,-68(fp)
   26ae8:	10800017 	ldw	r2,0(r2)
   26aec:	10800817 	ldw	r2,32(r2)
   26af0:	1000021e 	bne	r2,zero,26afc <isatty+0x64>
    {
      return 1;
   26af4:	00800044 	movi	r2,1
   26af8:	00000d06 	br	26b30 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   26afc:	e0bff004 	addi	r2,fp,-64
   26b00:	100b883a 	mov	r5,r2
   26b04:	e13fff17 	ldw	r4,-4(fp)
   26b08:	00269a40 	call	269a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   26b0c:	e0bff117 	ldw	r2,-60(fp)
   26b10:	10880020 	cmpeqi	r2,r2,8192
   26b14:	10803fcc 	andi	r2,r2,255
   26b18:	00000506 	br	26b30 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   26b1c:	0026a5c0 	call	26a5c <alt_get_errno>
   26b20:	1007883a 	mov	r3,r2
   26b24:	00801444 	movi	r2,81
   26b28:	18800015 	stw	r2,0(r3)
    return 0;
   26b2c:	0005883a 	mov	r2,zero
  }
}
   26b30:	e037883a 	mov	sp,fp
   26b34:	dfc00117 	ldw	ra,4(sp)
   26b38:	df000017 	ldw	fp,0(sp)
   26b3c:	dec00204 	addi	sp,sp,8
   26b40:	f800283a 	ret

00026b44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26b44:	defffe04 	addi	sp,sp,-8
   26b48:	dfc00115 	stw	ra,4(sp)
   26b4c:	df000015 	stw	fp,0(sp)
   26b50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26b54:	d0a00e17 	ldw	r2,-32712(gp)
   26b58:	10000326 	beq	r2,zero,26b68 <alt_get_errno+0x24>
   26b5c:	d0a00e17 	ldw	r2,-32712(gp)
   26b60:	103ee83a 	callr	r2
   26b64:	00000106 	br	26b6c <alt_get_errno+0x28>
   26b68:	d0a6c404 	addi	r2,gp,-25840
}
   26b6c:	e037883a 	mov	sp,fp
   26b70:	dfc00117 	ldw	ra,4(sp)
   26b74:	df000017 	ldw	fp,0(sp)
   26b78:	dec00204 	addi	sp,sp,8
   26b7c:	f800283a 	ret

00026b80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   26b80:	defff904 	addi	sp,sp,-28
   26b84:	dfc00615 	stw	ra,24(sp)
   26b88:	df000515 	stw	fp,20(sp)
   26b8c:	df000504 	addi	fp,sp,20
   26b90:	e13ffd15 	stw	r4,-12(fp)
   26b94:	e17ffe15 	stw	r5,-8(fp)
   26b98:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   26b9c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26ba0:	e0bffd17 	ldw	r2,-12(fp)
   26ba4:	10000816 	blt	r2,zero,26bc8 <lseek+0x48>
   26ba8:	01400304 	movi	r5,12
   26bac:	e13ffd17 	ldw	r4,-12(fp)
   26bb0:	00219140 	call	21914 <__mulsi3>
   26bb4:	1007883a 	mov	r3,r2
   26bb8:	008000f4 	movhi	r2,3
   26bbc:	10a22d04 	addi	r2,r2,-30540
   26bc0:	1885883a 	add	r2,r3,r2
   26bc4:	00000106 	br	26bcc <lseek+0x4c>
   26bc8:	0005883a 	mov	r2,zero
   26bcc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   26bd0:	e0bffc17 	ldw	r2,-16(fp)
   26bd4:	10001026 	beq	r2,zero,26c18 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   26bd8:	e0bffc17 	ldw	r2,-16(fp)
   26bdc:	10800017 	ldw	r2,0(r2)
   26be0:	10800717 	ldw	r2,28(r2)
   26be4:	10000926 	beq	r2,zero,26c0c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   26be8:	e0bffc17 	ldw	r2,-16(fp)
   26bec:	10800017 	ldw	r2,0(r2)
   26bf0:	10800717 	ldw	r2,28(r2)
   26bf4:	e1bfff17 	ldw	r6,-4(fp)
   26bf8:	e17ffe17 	ldw	r5,-8(fp)
   26bfc:	e13ffc17 	ldw	r4,-16(fp)
   26c00:	103ee83a 	callr	r2
   26c04:	e0bffb15 	stw	r2,-20(fp)
   26c08:	00000506 	br	26c20 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   26c0c:	00bfde84 	movi	r2,-134
   26c10:	e0bffb15 	stw	r2,-20(fp)
   26c14:	00000206 	br	26c20 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   26c18:	00bfebc4 	movi	r2,-81
   26c1c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   26c20:	e0bffb17 	ldw	r2,-20(fp)
   26c24:	1000070e 	bge	r2,zero,26c44 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   26c28:	0026b440 	call	26b44 <alt_get_errno>
   26c2c:	1007883a 	mov	r3,r2
   26c30:	e0bffb17 	ldw	r2,-20(fp)
   26c34:	0085c83a 	sub	r2,zero,r2
   26c38:	18800015 	stw	r2,0(r3)
    rc = -1;
   26c3c:	00bfffc4 	movi	r2,-1
   26c40:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   26c44:	e0bffb17 	ldw	r2,-20(fp)
}
   26c48:	e037883a 	mov	sp,fp
   26c4c:	dfc00117 	ldw	ra,4(sp)
   26c50:	df000017 	ldw	fp,0(sp)
   26c54:	dec00204 	addi	sp,sp,8
   26c58:	f800283a 	ret

00026c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26c5c:	defffe04 	addi	sp,sp,-8
   26c60:	dfc00115 	stw	ra,4(sp)
   26c64:	df000015 	stw	fp,0(sp)
   26c68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26c6c:	d0a00e17 	ldw	r2,-32712(gp)
   26c70:	10000326 	beq	r2,zero,26c80 <alt_get_errno+0x24>
   26c74:	d0a00e17 	ldw	r2,-32712(gp)
   26c78:	103ee83a 	callr	r2
   26c7c:	00000106 	br	26c84 <alt_get_errno+0x28>
   26c80:	d0a6c404 	addi	r2,gp,-25840
}
   26c84:	e037883a 	mov	sp,fp
   26c88:	dfc00117 	ldw	ra,4(sp)
   26c8c:	df000017 	ldw	fp,0(sp)
   26c90:	dec00204 	addi	sp,sp,8
   26c94:	f800283a 	ret

00026c98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   26c98:	defff904 	addi	sp,sp,-28
   26c9c:	dfc00615 	stw	ra,24(sp)
   26ca0:	df000515 	stw	fp,20(sp)
   26ca4:	df000504 	addi	fp,sp,20
   26ca8:	e13ffd15 	stw	r4,-12(fp)
   26cac:	e17ffe15 	stw	r5,-8(fp)
   26cb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26cb4:	e0bffd17 	ldw	r2,-12(fp)
   26cb8:	10000816 	blt	r2,zero,26cdc <read+0x44>
   26cbc:	01400304 	movi	r5,12
   26cc0:	e13ffd17 	ldw	r4,-12(fp)
   26cc4:	00219140 	call	21914 <__mulsi3>
   26cc8:	1007883a 	mov	r3,r2
   26ccc:	008000f4 	movhi	r2,3
   26cd0:	10a22d04 	addi	r2,r2,-30540
   26cd4:	1885883a 	add	r2,r3,r2
   26cd8:	00000106 	br	26ce0 <read+0x48>
   26cdc:	0005883a 	mov	r2,zero
   26ce0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26ce4:	e0bffb17 	ldw	r2,-20(fp)
   26ce8:	10002226 	beq	r2,zero,26d74 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   26cec:	e0bffb17 	ldw	r2,-20(fp)
   26cf0:	10800217 	ldw	r2,8(r2)
   26cf4:	108000cc 	andi	r2,r2,3
   26cf8:	10800060 	cmpeqi	r2,r2,1
   26cfc:	1000181e 	bne	r2,zero,26d60 <read+0xc8>
        (fd->dev->read))
   26d00:	e0bffb17 	ldw	r2,-20(fp)
   26d04:	10800017 	ldw	r2,0(r2)
   26d08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   26d0c:	10001426 	beq	r2,zero,26d60 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   26d10:	e0bffb17 	ldw	r2,-20(fp)
   26d14:	10800017 	ldw	r2,0(r2)
   26d18:	10800517 	ldw	r2,20(r2)
   26d1c:	e0ffff17 	ldw	r3,-4(fp)
   26d20:	180d883a 	mov	r6,r3
   26d24:	e17ffe17 	ldw	r5,-8(fp)
   26d28:	e13ffb17 	ldw	r4,-20(fp)
   26d2c:	103ee83a 	callr	r2
   26d30:	e0bffc15 	stw	r2,-16(fp)
   26d34:	e0bffc17 	ldw	r2,-16(fp)
   26d38:	1000070e 	bge	r2,zero,26d58 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   26d3c:	0026c5c0 	call	26c5c <alt_get_errno>
   26d40:	1007883a 	mov	r3,r2
   26d44:	e0bffc17 	ldw	r2,-16(fp)
   26d48:	0085c83a 	sub	r2,zero,r2
   26d4c:	18800015 	stw	r2,0(r3)
          return -1;
   26d50:	00bfffc4 	movi	r2,-1
   26d54:	00000c06 	br	26d88 <read+0xf0>
        }
        return rval;
   26d58:	e0bffc17 	ldw	r2,-16(fp)
   26d5c:	00000a06 	br	26d88 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   26d60:	0026c5c0 	call	26c5c <alt_get_errno>
   26d64:	1007883a 	mov	r3,r2
   26d68:	00800344 	movi	r2,13
   26d6c:	18800015 	stw	r2,0(r3)
   26d70:	00000406 	br	26d84 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   26d74:	0026c5c0 	call	26c5c <alt_get_errno>
   26d78:	1007883a 	mov	r3,r2
   26d7c:	00801444 	movi	r2,81
   26d80:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26d84:	00bfffc4 	movi	r2,-1
}
   26d88:	e037883a 	mov	sp,fp
   26d8c:	dfc00117 	ldw	ra,4(sp)
   26d90:	df000017 	ldw	fp,0(sp)
   26d94:	dec00204 	addi	sp,sp,8
   26d98:	f800283a 	ret

00026d9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26d9c:	defffe04 	addi	sp,sp,-8
   26da0:	dfc00115 	stw	ra,4(sp)
   26da4:	df000015 	stw	fp,0(sp)
   26da8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26dac:	d0a00e17 	ldw	r2,-32712(gp)
   26db0:	10000326 	beq	r2,zero,26dc0 <alt_get_errno+0x24>
   26db4:	d0a00e17 	ldw	r2,-32712(gp)
   26db8:	103ee83a 	callr	r2
   26dbc:	00000106 	br	26dc4 <alt_get_errno+0x28>
   26dc0:	d0a6c404 	addi	r2,gp,-25840
}
   26dc4:	e037883a 	mov	sp,fp
   26dc8:	dfc00117 	ldw	ra,4(sp)
   26dcc:	df000017 	ldw	fp,0(sp)
   26dd0:	dec00204 	addi	sp,sp,8
   26dd4:	f800283a 	ret

00026dd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   26dd8:	defff904 	addi	sp,sp,-28
   26ddc:	dfc00615 	stw	ra,24(sp)
   26de0:	df000515 	stw	fp,20(sp)
   26de4:	df000504 	addi	fp,sp,20
   26de8:	e13ffd15 	stw	r4,-12(fp)
   26dec:	e17ffe15 	stw	r5,-8(fp)
   26df0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26df4:	e0bffd17 	ldw	r2,-12(fp)
   26df8:	10000816 	blt	r2,zero,26e1c <write+0x44>
   26dfc:	01400304 	movi	r5,12
   26e00:	e13ffd17 	ldw	r4,-12(fp)
   26e04:	00219140 	call	21914 <__mulsi3>
   26e08:	1007883a 	mov	r3,r2
   26e0c:	008000f4 	movhi	r2,3
   26e10:	10a22d04 	addi	r2,r2,-30540
   26e14:	1885883a 	add	r2,r3,r2
   26e18:	00000106 	br	26e20 <write+0x48>
   26e1c:	0005883a 	mov	r2,zero
   26e20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26e24:	e0bffb17 	ldw	r2,-20(fp)
   26e28:	10002126 	beq	r2,zero,26eb0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   26e2c:	e0bffb17 	ldw	r2,-20(fp)
   26e30:	10800217 	ldw	r2,8(r2)
   26e34:	108000cc 	andi	r2,r2,3
   26e38:	10001826 	beq	r2,zero,26e9c <write+0xc4>
   26e3c:	e0bffb17 	ldw	r2,-20(fp)
   26e40:	10800017 	ldw	r2,0(r2)
   26e44:	10800617 	ldw	r2,24(r2)
   26e48:	10001426 	beq	r2,zero,26e9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   26e4c:	e0bffb17 	ldw	r2,-20(fp)
   26e50:	10800017 	ldw	r2,0(r2)
   26e54:	10800617 	ldw	r2,24(r2)
   26e58:	e0ffff17 	ldw	r3,-4(fp)
   26e5c:	180d883a 	mov	r6,r3
   26e60:	e17ffe17 	ldw	r5,-8(fp)
   26e64:	e13ffb17 	ldw	r4,-20(fp)
   26e68:	103ee83a 	callr	r2
   26e6c:	e0bffc15 	stw	r2,-16(fp)
   26e70:	e0bffc17 	ldw	r2,-16(fp)
   26e74:	1000070e 	bge	r2,zero,26e94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   26e78:	0026d9c0 	call	26d9c <alt_get_errno>
   26e7c:	1007883a 	mov	r3,r2
   26e80:	e0bffc17 	ldw	r2,-16(fp)
   26e84:	0085c83a 	sub	r2,zero,r2
   26e88:	18800015 	stw	r2,0(r3)
        return -1;
   26e8c:	00bfffc4 	movi	r2,-1
   26e90:	00000c06 	br	26ec4 <write+0xec>
      }
      return rval;
   26e94:	e0bffc17 	ldw	r2,-16(fp)
   26e98:	00000a06 	br	26ec4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   26e9c:	0026d9c0 	call	26d9c <alt_get_errno>
   26ea0:	1007883a 	mov	r3,r2
   26ea4:	00800344 	movi	r2,13
   26ea8:	18800015 	stw	r2,0(r3)
   26eac:	00000406 	br	26ec0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   26eb0:	0026d9c0 	call	26d9c <alt_get_errno>
   26eb4:	1007883a 	mov	r3,r2
   26eb8:	00801444 	movi	r2,81
   26ebc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26ec0:	00bfffc4 	movi	r2,-1
}
   26ec4:	e037883a 	mov	sp,fp
   26ec8:	dfc00117 	ldw	ra,4(sp)
   26ecc:	df000017 	ldw	fp,0(sp)
   26ed0:	dec00204 	addi	sp,sp,8
   26ed4:	f800283a 	ret
