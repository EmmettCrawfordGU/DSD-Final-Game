
game-sw.elf:     file format elf32-littlenios2
game-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00007cf4 memsz 0x00007cf4 flags r-x
    LOAD off    0x00008d14 vaddr 0x00027d14 paddr 0x000297cc align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags rw-
    LOAD off    0x0000b284 vaddr 0x0002b284 paddr 0x0002b284 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000794c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000198  00027b7c  00027b7c  00008b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab8  00027d14  000297cc  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  0002b284  0002b284  0000b284  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0002b3ec  0002b3ec  0000a7cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000a7cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b78  00000000  00000000  0000a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a68d  00000000  00000000  0000b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006fec  00000000  00000000  000259f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007aae  00000000  00000000  0002c9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c38  00000000  00000000  00034490  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e4b  00000000  00000000  000360c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005e40  00000000  00000000  00038f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003ed54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000860  00000000  00000000  0003ed68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000420de  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000420e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000420e4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000420e5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000420e6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000420ef  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000420f8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00042101  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  00042105  2**0
                  CONTENTS, READONLY
 26 .jdi          00004230  00000000  00000000  00042131  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000560d3  00000000  00000000  00046361  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00027b7c l    d  .rodata	00000000 .rodata
00027d14 l    d  .rwdata	00000000 .rwdata
0002b284 l    d  .bss	00000000 .bss
0002b3ec l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game-sw_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
0002978c l     O .rwdata	00000004 count.2501
00027d34 l     O .rwdata	00000020 prev_matrix.2568
00000000 l    df *ABS*	00000000 hw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0002815c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00023248 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000297a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023688 l     F .text	00000034 alt_dev_reg
00028580 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023978 l     F .text	0000020c altera_avalon_jtag_uart_irq
00023b84 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000241bc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000243dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00024510 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002453c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024798 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000248f8 l     F .text	0000003c alt_get_errno
00024934 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00026394 l     F .text	00000008 __fp_unlock
000263a8 l     F .text	0000019c __sinit.part.1
00026544 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002760c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00027700 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000277e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00027900 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00027a40 l     F .text	0000003c alt_get_errno
0002b2c0 g     O .bss	00000004 alt_instruction_exception_handler
00020b24 g     F .text	0000036c death
00026f00 g     F .text	00000054 _isatty_r
00023334 g     F .text	0000007c alt_main
00021770 g     F .text	000000e0 lcdSetAddr
0002b2ec g     O .bss	00000100 alt_irq
00026f54 g     F .text	00000060 _lseek_r
000297cc g       *ABS*	00000000 __flash_rwdata_start
00022c4c g     F .text	0000005c _gettimeofday_r
0002b3ec g       *ABS*	00000000 __alt_heap_start
00021434 g     F .text	0000003c handleGameTimer
00026c88 g     F .text	0000005c __sseek
000266f4 g     F .text	00000010 __sinit
00021a00 g     F .text	00000060 startTimer
0002654c g     F .text	00000078 __sfmoreglue
000233d4 g     F .text	00000024 __malloc_unlock
000255a8 g     F .text	0000015c memmove
000266dc g     F .text	00000018 _cleanup
000233f8 g     F .text	0000003c alt_putstr
000214ac g     F .text	00000028 readSwitch
00024c00 g     F .text	00000024 altera_nios2_gen2_irq_init
000214d4 g     F .text	00000028 readKey
00020000 g     F .entry	0000000c __reset
000213a0 g     F .text	00000048 clearSema
000219a0 g     F .text	00000060 initTimers
00020020 g       *ABS*	00000000 __flash_exceptions_start
00026ea4 g     F .text	0000005c _fstat_r
0002b294 g     O .bss	00000004 errno
00026c04 g     F .text	00000008 __seofread
000209c0 g     F .text	000000f8 updatePlayer
000214fc g     F .text	0000003c setLEDs
0002117c g     F .text	00000224 updateLCD
0002b2b0 g     O .bss	00000004 alt_argv
00031788 g       *ABS*	00000000 _gp
00020ab8 g     F .text	0000006c delayMs
00029608 g     O .rwdata	00000180 alt_fd_list
00024c24 g     F .text	00000090 alt_find_dev
000225b0 g     F .text	00000148 memcpy
0002639c g     F .text	0000000c _cleanup_r
00021850 g     F .text	000000c4 lcdWrite
0002487c g     F .text	0000007c alt_io_redirect
00027b7c g       *ABS*	00000000 __DTOR_END__
00021538 g     F .text	00000194 setSevenSeg
000246fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023d7c g     F .text	0000021c altera_avalon_jtag_uart_read
00021d7c g     F .text	00000014 malloc
00021c98 g     F .text	00000064 .hidden __udivsi3
0002773c g     F .text	000000ac isatty
00027d14 g     O .rwdata	00000020 game_matrix
0002b298 g     O .bss	00000008 alt_timezone
0002b290 g     O .bss	00000004 __malloc_top_pad
00024f80 g     F .text	000004c8 __sfvwrite_r
00022774 g     F .text	00000054 _sbrk_r
00026fb4 g     F .text	00000060 _read_r
000297c4 g     O .rwdata	00000004 alt_max_fd
00026da0 g     F .text	000000f0 _fclose_r
00026364 g     F .text	00000030 fflush
0002b28c g     O .bss	00000004 __malloc_max_sbrked_mem
00021b6c g     F .text	00000034 millisToClock
00027014 g     F .text	000005c4 .hidden __umoddi3
00027824 g     F .text	000000dc lseek
0002979c g     O .rwdata	00000004 _global_impure_ptr
00025704 g     F .text	00000564 _realloc_r
00021470 g     F .text	0000003c handleLCDTimer
0002b3ec g       *ABS*	00000000 __bss_end
00023158 g     F .text	000000f0 alt_iic_isr_register
00023580 g     F .text	00000108 alt_tick
00026714 g     F .text	00000018 __fp_lock_all
0002310c g     F .text	0000004c alt_ic_irq_enabled
000234e4 g     F .text	0000009c alt_alarm_stop
0002b2a8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000295e0 g     O .rwdata	00000028 alt_dev_null
000244f0 g     F .text	00000020 alt_dcache_flush_all
000297cc g       *ABS*	00000000 __ram_rwdata_end
000297bc g     O .rwdata	00000008 alt_dev_list
0002b284 g     O .bss	00000004 score
00027a7c g     F .text	00000100 write
00020f78 g     F .text	00000118 deathAnimation
00027d14 g       *ABS*	00000000 __ram_rodata_end
00027648 g     F .text	000000b8 fstat
00020e90 g     F .text	000000e8 gameOver
00021cfc g     F .text	00000058 .hidden __umodsi3
0002b3ec g       *ABS*	00000000 end
000238b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00027b7c g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00024234 g     F .text	0000007c alt_avalon_timer_sc_init
00023f98 g     F .text	00000224 altera_avalon_jtag_uart_write
00026704 g     F .text	00000004 __sfp_lock_acquire
00025448 g     F .text	000000e4 memchr
0002293c g     F .text	00000310 _free_r
000216cc g     F .text	000000a4 lcdInit
00025f6c g     F .text	00000180 __call_exitprocs
00029794 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002b2b8 g     O .bss	00000004 _alt_tick_rate
00022710 g     F .text	00000064 rand
0002b2bc g     O .bss	00000004 _alt_nticks
0002793c g     F .text	00000104 read
000236f4 g     F .text	00000060 alt_sys_init
00025e54 g     F .text	00000118 __register_exitproc
00029791 g     O .rwdata	00000001 gameSema
00023c24 g     F .text	00000068 altera_avalon_jtag_uart_close
00021d54 g     F .text	00000028 .hidden __mulsi3
00027d14 g       *ABS*	00000000 __ram_rwdata_start
00027b7c g       *ABS*	00000000 __ram_rodata_start
0002b2c4 g     O .bss	00000028 __malloc_current_mallinfo
00023754 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024dbc g     F .text	000000c4 alt_get_fd
00026d4c g     F .text	00000054 _close_r
0002552c g     F .text	0000007c memcmp
00023814 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002b3ec g       *ABS*	00000000 __alt_stack_base
00023864 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00025d00 g     F .text	00000154 __swsetup_r
000265c4 g     F .text	00000118 __sfp
00027d54 g     O .rwdata	00000408 __malloc_av_
00026710 g     F .text	00000004 __sinit_lock_release
00026bb0 g     F .text	00000054 __sread
00024cb4 g     F .text	00000108 alt_find_file
00024578 g     F .text	000000a4 alt_dev_llist_insert
000233b0 g     F .text	00000024 __malloc_lock
00023434 g     F .text	000000b0 sbrk
00026308 g     F .text	0000005c _fflush_r
00022db4 g     F .text	000001f4 gettimeofday
0002b284 g       *ABS*	00000000 __bss_start
00026a88 g     F .text	00000128 memset
0002026c g     F .text	000001e8 main
0002b2b4 g     O .bss	00000004 alt_envp
0002b288 g     O .bss	00000004 __malloc_max_total_mem
000237b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000226f8 g     F .text	00000018 srand
00026ce4 g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
00026e90 g     F .text	00000014 fclose
00021da4 g     F .text	0000080c _malloc_r
000227c8 g     F .text	00000050 time
000205ec g     F .text	00000184 createAsteroid
000297c8 g     O .rwdata	00000004 alt_errno
00026744 g     F .text	000000c4 _fwalk
000207e8 g     F .text	00000158 update_matrix
00021ba0 g     F .text	00000084 .hidden __divsi3
00022818 g     F .text	00000124 _malloc_trim_r
00027b7c g       *ABS*	00000000 __CTOR_END__
00027b7c g       *ABS*	00000000 __flash_rodata_start
00027b7c g       *ABS*	00000000 __DTOR_LIST__
000213e8 g     F .text	0000004c getSema
00029788 g     O .rwdata	00000001 lives
00021a60 g     F .text	00000060 stopTimer
000236bc g     F .text	00000038 alt_irq_init
00024b7c g     F .text	00000084 alt_release_fd
00027c12 g     O .rodata	00000100 .hidden __clz_tab
00024e80 g     F .text	00000014 atexit
00026cec g     F .text	00000060 _write_r
000297a0 g     O .rwdata	00000004 _impure_ptr
0002b2ac g     O .bss	00000004 alt_argc
000260ec g     F .text	0000021c __sflush_r
0002467c g     F .text	00000060 _do_dtors
00021090 g     F .text	000000ec deathAnimationBottom
00020940 g     F .text	00000080 draw_player
00020020 g       .exceptions	00000000 alt_irq_entry
0002672c g     F .text	00000018 __fp_unlock_all
000297b4 g     O .rwdata	00000008 alt_fs_list
0002b2a0 g     O .bss	00000008 alt_resettime
00020020 g       *ABS*	00000000 __ram_exceptions_start
00022fa8 g     F .text	00000050 alt_ic_isr_register
000297cc g       *ABS*	00000000 _edata
00027bbc g     O .rodata	00000028 HexArray
0002b3ec g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00023c8c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00024ecc g     F .text	0000009c _fputs_r
00023080 g     F .text	0000008c alt_ic_irq_disable
00026c0c g     F .text	0000007c __swrite
00029798 g     O .rwdata	00000004 __malloc_trim_threshold
000205b4 g     F .text	00000038 randomNumInit
00024e94 g     F .text	00000038 exit
00021ac0 g     F .text	000000ac setTimer
00026808 g     F .text	000000c4 _fwalk_reent
00021c24 g     F .text	00000074 .hidden __modsi3
00027ba0 g     O .rodata	0000001c commands
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00026708 g     F .text	00000004 __sfp_lock_release
00021914 g     F .text	0000008c lcdClear
00020454 g     F .text	00000160 start
00020770 g     F .text	00000078 free_array
00020000 g       *ABS*	00000000 __alt_mem_onchip_ram
000275d8 g     F .text	00000034 _exit
000242b0 g     F .text	0000012c alt_alarm_start
00022ca8 g     F .text	0000010c .hidden __muldi3
000268cc g     F .text	000001bc __smakebuf_r
00025c68 g     F .text	00000098 strlen
00024a20 g     F .text	0000015c open
000246dc g     F .text	00000020 alt_icache_flush_all
00024f68 g     F .text	00000018 fputs
000297a4 g     O .rwdata	00000004 alt_priority_mask
00029790 g     O .rwdata	00000001 lcdSema
00022ff8 g     F .text	00000088 alt_ic_irq_enable
000297ac g     O .rwdata	00000008 alt_alarm_list
0002461c g     F .text	00000060 _do_ctors
00024418 g     F .text	000000d8 close
000232b0 g     F .text	00000084 alt_load
00021d90 g     F .text	00000014 free
0002670c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10acbb04 	addi	r2,r2,-19732
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10acbb04 	addi	r2,r2,-19732
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe712c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6ce17 	ldw	r2,-25800(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6ce17 	ldw	r2,-25800(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d685e214 	ori	gp,gp,6024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10aca114 	ori	r2,r2,45700

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18ecfb14 	ori	r3,r3,46060

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00232b00 	call	232b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00233340 	call	23334 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7268>

0002026c <main>:
void free_array(uint8_t** array);
void draw_player(uint8_t data);
void deathAnimation(uint8_t row);


int main(){
   2026c:	defff904 	addi	sp,sp,-28
   20270:	dfc00615 	stw	ra,24(sp)
   20274:	df000515 	stw	fp,20(sp)
   20278:	df000504 	addi	fp,sp,20
	uint8_t switch_data;
	uint8_t hit;
	initTimers();
   2027c:	00219a00 	call	219a0 <initTimers>
	lcdInit();
   20280:	00216cc0 	call	216cc <lcdInit>

	alt_putstr("Ciao from Nios II!\n");
   20284:	010000b4 	movhi	r4,2
   20288:	211edf04 	addi	r4,r4,31612
   2028c:	00233f80 	call	233f8 <alt_putstr>

	// Set the LEDs
	uint8_t led_pattern = 0x00;
   20290:	e03ffb05 	stb	zero,-20(fp)
	for(int i = 0; i < lives; i++){led_pattern |= 0x01 << i;}
   20294:	e03ffc15 	stw	zero,-16(fp)
   20298:	00000a06 	br	202c4 <main+0x58>
   2029c:	00c00044 	movi	r3,1
   202a0:	e0bffc17 	ldw	r2,-16(fp)
   202a4:	1884983a 	sll	r2,r3,r2
   202a8:	1007883a 	mov	r3,r2
   202ac:	e0bffb03 	ldbu	r2,-20(fp)
   202b0:	1884b03a 	or	r2,r3,r2
   202b4:	e0bffb05 	stb	r2,-20(fp)
   202b8:	e0bffc17 	ldw	r2,-16(fp)
   202bc:	10800044 	addi	r2,r2,1
   202c0:	e0bffc15 	stw	r2,-16(fp)
   202c4:	d0a00003 	ldbu	r2,-32768(gp)
   202c8:	10803fcc 	andi	r2,r2,255
   202cc:	e0fffc17 	ldw	r3,-16(fp)
   202d0:	18bff216 	blt	r3,r2,2029c <__alt_data_end+0xfffe729c>
	setLEDs(led_pattern);
   202d4:	e0bffb03 	ldbu	r2,-20(fp)
   202d8:	1009883a 	mov	r4,r2
   202dc:	00214fc0 	call	214fc <setLEDs>

	setTimer(GAME_TIMER, 100000);
   202e0:	014000b4 	movhi	r5,2
   202e4:	2961a804 	addi	r5,r5,-31072
   202e8:	01000044 	movi	r4,1
   202ec:	0021ac00 	call	21ac0 <setTimer>
	startTimer(GAME_TIMER);
   202f0:	01000044 	movi	r4,1
   202f4:	0021a000 	call	21a00 <startTimer>

	start();
   202f8:	00204540 	call	20454 <start>
	lcdClear();
   202fc:	00219140 	call	21914 <lcdClear>
	switch_data = readSwitch();
   20300:	00214ac0 	call	214ac <readSwitch>
   20304:	e0bfff05 	stb	r2,-4(fp)
	draw_player(switch_data);
   20308:	e0bfff03 	ldbu	r2,-4(fp)
   2030c:	1009883a 	mov	r4,r2
   20310:	00209400 	call	20940 <draw_player>
	randomNumInit();
   20314:	00205b40 	call	205b4 <randomNumInit>


	while(1) {
		clearSema(GAME_TIMER);
   20318:	01000044 	movi	r4,1
   2031c:	00213a00 	call	213a0 <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   20320:	0001883a 	nop
   20324:	01000044 	movi	r4,1
   20328:	00213e80 	call	213e8 <getSema>
   2032c:	10803fcc 	andi	r2,r2,255
   20330:	103ffc26 	beq	r2,zero,20324 <__alt_data_end+0xfffe7324>

		// Set the score
		if(score >= 9999){score = 9999;}
   20334:	d0a6bf17 	ldw	r2,-25860(gp)
   20338:	1089c3f0 	cmpltui	r2,r2,9999
   2033c:	1000031e 	bne	r2,zero,2034c <main+0xe0>
   20340:	0089c3c4 	movi	r2,9999
   20344:	d0a6bf15 	stw	r2,-25860(gp)
   20348:	00000306 	br	20358 <main+0xec>
		else{score++;}
   2034c:	d0a6bf17 	ldw	r2,-25860(gp)
   20350:	10800044 	addi	r2,r2,1
   20354:	d0a6bf15 	stw	r2,-25860(gp)
		setSevenSeg(score);
   20358:	d0a6bf17 	ldw	r2,-25860(gp)
   2035c:	1009883a 	mov	r4,r2
   20360:	00215380 	call	21538 <setSevenSeg>

		switch_data = readSwitch();
   20364:	00214ac0 	call	214ac <readSwitch>
   20368:	e0bfff05 	stb	r2,-4(fp)
		if(game_matrix[0][PLAYER_COLUMN] == PLAYER){game_matrix[0][PLAYER_COLUMN] = BLANK;}
   2036c:	008000b4 	movhi	r2,2
   20370:	109f4504 	addi	r2,r2,32020
   20374:	10800043 	ldbu	r2,1(r2)
   20378:	10803fcc 	andi	r2,r2,255
   2037c:	10803d98 	cmpnei	r2,r2,246
   20380:	1000041e 	bne	r2,zero,20394 <main+0x128>
   20384:	008000b4 	movhi	r2,2
   20388:	109f4504 	addi	r2,r2,32020
   2038c:	00c00804 	movi	r3,32
   20390:	10c00045 	stb	r3,1(r2)
		if(game_matrix[1][PLAYER_COLUMN] == PLAYER){game_matrix[1][PLAYER_COLUMN] = BLANK;}
   20394:	008000b4 	movhi	r2,2
   20398:	109f4504 	addi	r2,r2,32020
   2039c:	10800443 	ldbu	r2,17(r2)
   203a0:	10803fcc 	andi	r2,r2,255
   203a4:	10803d98 	cmpnei	r2,r2,246
   203a8:	1000041e 	bne	r2,zero,203bc <main+0x150>
   203ac:	008000b4 	movhi	r2,2
   203b0:	109f4504 	addi	r2,r2,32020
   203b4:	00c00804 	movi	r3,32
   203b8:	10c00445 	stb	r3,17(r2)

		// Move matrix
		update_matrix();
   203bc:	00207e80 	call	207e8 <update_matrix>

		// Update the player, and check if the player has been hit
		hit = updatePlayer(switch_data);
   203c0:	e0bfff03 	ldbu	r2,-4(fp)
   203c4:	1009883a 	mov	r4,r2
   203c8:	00209c00 	call	209c0 <updatePlayer>
   203cc:	e0bfff45 	stb	r2,-3(fp)

		updateLCD();
   203d0:	002117c0 	call	2117c <updateLCD>

		// If the player has been hit
		if(hit != 0x00){
   203d4:	e0bfff43 	ldbu	r2,-3(fp)
   203d8:	103fcf26 	beq	r2,zero,20318 <__alt_data_end+0xfffe7318>
			if(hit == 0x02){ // If hit by a black hole, game over
   203dc:	e0bfff43 	ldbu	r2,-3(fp)
   203e0:	10800098 	cmpnei	r2,r2,2
   203e4:	1000021e 	bne	r2,zero,203f0 <main+0x184>
				lives = 0;
   203e8:	d0200005 	stb	zero,-32768(gp)
   203ec:	00000306 	br	203fc <main+0x190>
			} else { // If hit by an asteroid, lose a life
				lives--;
   203f0:	d0a00003 	ldbu	r2,-32768(gp)
   203f4:	10bfffc4 	addi	r2,r2,-1
   203f8:	d0a00005 	stb	r2,-32768(gp)
			}
			// Set the LEDs
			uint8_t led_pattern = 0x00;
   203fc:	e03ffd05 	stb	zero,-12(fp)
			for(int i = 0; i < lives; i++){led_pattern |= 0x01 << i;}
   20400:	e03ffe15 	stw	zero,-8(fp)
   20404:	00000a06 	br	20430 <main+0x1c4>
   20408:	00c00044 	movi	r3,1
   2040c:	e0bffe17 	ldw	r2,-8(fp)
   20410:	1884983a 	sll	r2,r3,r2
   20414:	1007883a 	mov	r3,r2
   20418:	e0bffd03 	ldbu	r2,-12(fp)
   2041c:	1884b03a 	or	r2,r3,r2
   20420:	e0bffd05 	stb	r2,-12(fp)
   20424:	e0bffe17 	ldw	r2,-8(fp)
   20428:	10800044 	addi	r2,r2,1
   2042c:	e0bffe15 	stw	r2,-8(fp)
   20430:	d0a00003 	ldbu	r2,-32768(gp)
   20434:	10803fcc 	andi	r2,r2,255
   20438:	e0fffe17 	ldw	r3,-8(fp)
   2043c:	18bff216 	blt	r3,r2,20408 <__alt_data_end+0xfffe7408>
			setLEDs(led_pattern);
   20440:	e0bffd03 	ldbu	r2,-12(fp)
   20444:	1009883a 	mov	r4,r2
   20448:	00214fc0 	call	214fc <setLEDs>

			death();
   2044c:	0020b240 	call	20b24 <death>
		}
	}
   20450:	003fb106 	br	20318 <__alt_data_end+0xfffe7318>

00020454 <start>:

	return 0;
}


void start(void){
   20454:	defff404 	addi	sp,sp,-48
   20458:	dfc00b15 	stw	ra,44(sp)
   2045c:	df000a15 	stw	fp,40(sp)
   20460:	df000a04 	addi	fp,sp,40
	uint8_t key_data;
	// game name: "ASTRODODGE"
	uint8_t message1[] = {0x2A, 0x2A, 0x2A, 0x41, 0x53, 0x54, 0x52, 0x4F, 0x44, 0x4F, 0x44, 0x47, 0x45, 0x2A, 0x2A, 0x2A};
   20464:	008000b4 	movhi	r2,2
   20468:	109ee404 	addi	r2,r2,31632
   2046c:	e0fff904 	addi	r3,fp,-28
   20470:	1009883a 	mov	r4,r2
   20474:	00800404 	movi	r2,16
   20478:	100d883a 	mov	r6,r2
   2047c:	200b883a 	mov	r5,r4
   20480:	1809883a 	mov	r4,r3
   20484:	00225b00 	call	225b0 <memcpy>
	// "Press KEY2!"
	uint8_t message2[] = {0x50, 0x72, 0x65, 0x73, 0x73, 0xFE, 0x4B, 0x45, 0x59, 0x32, 0x21, 0x21};
   20488:	00801404 	movi	r2,80
   2048c:	e0bffd05 	stb	r2,-12(fp)
   20490:	00801c84 	movi	r2,114
   20494:	e0bffd45 	stb	r2,-11(fp)
   20498:	00801944 	movi	r2,101
   2049c:	e0bffd85 	stb	r2,-10(fp)
   204a0:	00801cc4 	movi	r2,115
   204a4:	e0bffdc5 	stb	r2,-9(fp)
   204a8:	00801cc4 	movi	r2,115
   204ac:	e0bffe05 	stb	r2,-8(fp)
   204b0:	00bfff84 	movi	r2,-2
   204b4:	e0bffe45 	stb	r2,-7(fp)
   204b8:	008012c4 	movi	r2,75
   204bc:	e0bffe85 	stb	r2,-6(fp)
   204c0:	00801144 	movi	r2,69
   204c4:	e0bffec5 	stb	r2,-5(fp)
   204c8:	00801644 	movi	r2,89
   204cc:	e0bfff05 	stb	r2,-4(fp)
   204d0:	00800c84 	movi	r2,50
   204d4:	e0bfff45 	stb	r2,-3(fp)
   204d8:	00800844 	movi	r2,33
   204dc:	e0bfff85 	stb	r2,-2(fp)
   204e0:	00800844 	movi	r2,33
   204e4:	e0bfffc5 	stb	r2,-1(fp)

	key_data = readKey();
   204e8:	00214d40 	call	214d4 <readKey>
   204ec:	e0bff605 	stb	r2,-40(fp)

	// clears and displays
	lcdClear();
   204f0:	00219140 	call	21914 <lcdClear>
	lcdSetAddr(0, 0);
   204f4:	000b883a 	mov	r5,zero
   204f8:	0009883a 	mov	r4,zero
   204fc:	00217700 	call	21770 <lcdSetAddr>
	// Hello
	for (int i = 0; i < 16; i++){
   20500:	e03ff715 	stw	zero,-36(fp)
   20504:	00000a06 	br	20530 <start+0xdc>
		lcdWrite(message1[i]);
   20508:	e0fff904 	addi	r3,fp,-28
   2050c:	e0bff717 	ldw	r2,-36(fp)
   20510:	1885883a 	add	r2,r3,r2
   20514:	10800003 	ldbu	r2,0(r2)
   20518:	10803fcc 	andi	r2,r2,255
   2051c:	1009883a 	mov	r4,r2
   20520:	00218500 	call	21850 <lcdWrite>

	// clears and displays
	lcdClear();
	lcdSetAddr(0, 0);
	// Hello
	for (int i = 0; i < 16; i++){
   20524:	e0bff717 	ldw	r2,-36(fp)
   20528:	10800044 	addi	r2,r2,1
   2052c:	e0bff715 	stw	r2,-36(fp)
   20530:	e0bff717 	ldw	r2,-36(fp)
   20534:	10800410 	cmplti	r2,r2,16
   20538:	103ff31e 	bne	r2,zero,20508 <__alt_data_end+0xfffe7508>
		lcdWrite(message1[i]);
	}

	// set to the next line
	lcdSetAddr(1, 2);
   2053c:	01400084 	movi	r5,2
   20540:	01000044 	movi	r4,1
   20544:	00217700 	call	21770 <lcdSetAddr>
	// "Press KEY2!"
	for (int i = 0; i < 11; i++){
   20548:	e03ff815 	stw	zero,-32(fp)
   2054c:	00000a06 	br	20578 <start+0x124>
		lcdWrite(message2[i]);
   20550:	e0fffd04 	addi	r3,fp,-12
   20554:	e0bff817 	ldw	r2,-32(fp)
   20558:	1885883a 	add	r2,r3,r2
   2055c:	10800003 	ldbu	r2,0(r2)
   20560:	10803fcc 	andi	r2,r2,255
   20564:	1009883a 	mov	r4,r2
   20568:	00218500 	call	21850 <lcdWrite>
	}

	// set to the next line
	lcdSetAddr(1, 2);
	// "Press KEY2!"
	for (int i = 0; i < 11; i++){
   2056c:	e0bff817 	ldw	r2,-32(fp)
   20570:	10800044 	addi	r2,r2,1
   20574:	e0bff815 	stw	r2,-32(fp)
   20578:	e0bff817 	ldw	r2,-32(fp)
   2057c:	108002d0 	cmplti	r2,r2,11
   20580:	103ff31e 	bne	r2,zero,20550 <__alt_data_end+0xfffe7550>
		lcdWrite(message2[i]);
	}

	while(key_data == 1) {
   20584:	00000206 	br	20590 <start+0x13c>
		key_data = readKey();
   20588:	00214d40 	call	214d4 <readKey>
   2058c:	e0bff605 	stb	r2,-40(fp)
	// "Press KEY2!"
	for (int i = 0; i < 11; i++){
		lcdWrite(message2[i]);
	}

	while(key_data == 1) {
   20590:	e0bff603 	ldbu	r2,-40(fp)
   20594:	10800060 	cmpeqi	r2,r2,1
   20598:	103ffb1e 	bne	r2,zero,20588 <__alt_data_end+0xfffe7588>
		key_data = readKey();
	}
}
   2059c:	0001883a 	nop
   205a0:	e037883a 	mov	sp,fp
   205a4:	dfc00117 	ldw	ra,4(sp)
   205a8:	df000017 	ldw	fp,0(sp)
   205ac:	dec00204 	addi	sp,sp,8
   205b0:	f800283a 	ret

000205b4 <randomNumInit>:


// Sets the seed for the random number generation
void randomNumInit(void){
   205b4:	defffe04 	addi	sp,sp,-8
   205b8:	dfc00115 	stw	ra,4(sp)
   205bc:	df000015 	stw	fp,0(sp)
   205c0:	d839883a 	mov	fp,sp
	// seed the random number generator with the current time
	srand(time(NULL));
   205c4:	0009883a 	mov	r4,zero
   205c8:	00227c80 	call	227c8 <time>
   205cc:	1009883a 	mov	r4,r2
   205d0:	00226f80 	call	226f8 <srand>
}
   205d4:	0001883a 	nop
   205d8:	e037883a 	mov	sp,fp
   205dc:	dfc00117 	ldw	ra,4(sp)
   205e0:	df000017 	ldw	fp,0(sp)
   205e4:	dec00204 	addi	sp,sp,8
   205e8:	f800283a 	ret

000205ec <createAsteroid>:

// creates a 2x1 array with an asteroid randomly in one of the rows
uint8_t **createAsteroid(void){
   205ec:	defff804 	addi	sp,sp,-32
   205f0:	dfc00715 	stw	ra,28(sp)
   205f4:	df000615 	stw	fp,24(sp)
   205f8:	dc000515 	stw	r16,20(sp)
   205fc:	df000604 	addi	fp,sp,24
	uint8_t **newAsteroid = (uint8_t**)malloc(2 * sizeof(uint8_t*));
   20600:	01000204 	movi	r4,8
   20604:	0021d7c0 	call	21d7c <malloc>
   20608:	e0bffc15 	stw	r2,-16(fp)
	uint8_t asteroids[4] = {ASTEROID_0, ASTEROID_1, ASTEROID_2, BLACK_HOLE};
   2060c:	00800a84 	movi	r2,42
   20610:	e0bffd45 	stb	r2,-11(fp)
   20614:	00bffbc4 	movi	r2,-17
   20618:	e0bffd85 	stb	r2,-10(fp)
   2061c:	00bffc84 	movi	r2,-14
   20620:	e0bffdc5 	stb	r2,-9(fp)
   20624:	00bfffc4 	movi	r2,-1
   20628:	e0bffe05 	stb	r2,-8(fp)
	// randomly generate out of the 4 different asteroid
	uint8_t randomAsteroid;
	uint8_t randomRow;

	// generate a number 0 to 3
	randomAsteroid = rand() % 4;
   2062c:	00227100 	call	22710 <rand>
   20630:	1007883a 	mov	r3,r2
   20634:	00a00034 	movhi	r2,32768
   20638:	108000c4 	addi	r2,r2,3
   2063c:	1884703a 	and	r2,r3,r2
   20640:	1000040e 	bge	r2,zero,20654 <createAsteroid+0x68>
   20644:	10bfffc4 	addi	r2,r2,-1
   20648:	00ffff04 	movi	r3,-4
   2064c:	10c4b03a 	or	r2,r2,r3
   20650:	10800044 	addi	r2,r2,1
   20654:	e0bffa05 	stb	r2,-24(fp)
	// if it is a black hole, randomly generate a number out of 4 again
	if (randomAsteroid == 3)
   20658:	e0bffa03 	ldbu	r2,-24(fp)
   2065c:	108000d8 	cmpnei	r2,r2,3
   20660:	10000b1e 	bne	r2,zero,20690 <createAsteroid+0xa4>
		randomAsteroid = rand() % 4;
   20664:	00227100 	call	22710 <rand>
   20668:	1007883a 	mov	r3,r2
   2066c:	00a00034 	movhi	r2,32768
   20670:	108000c4 	addi	r2,r2,3
   20674:	1884703a 	and	r2,r3,r2
   20678:	1000040e 	bge	r2,zero,2068c <createAsteroid+0xa0>
   2067c:	10bfffc4 	addi	r2,r2,-1
   20680:	00ffff04 	movi	r3,-4
   20684:	10c4b03a 	or	r2,r2,r3
   20688:	10800044 	addi	r2,r2,1
   2068c:	e0bffa05 	stb	r2,-24(fp)

	// randomly select a row
	randomRow = rand() % 2;
   20690:	00227100 	call	22710 <rand>
   20694:	1007883a 	mov	r3,r2
   20698:	00a00034 	movhi	r2,32768
   2069c:	10800044 	addi	r2,r2,1
   206a0:	1884703a 	and	r2,r3,r2
   206a4:	1000040e 	bge	r2,zero,206b8 <createAsteroid+0xcc>
   206a8:	10bfffc4 	addi	r2,r2,-1
   206ac:	00ffff84 	movi	r3,-2
   206b0:	10c4b03a 	or	r2,r2,r3
   206b4:	10800044 	addi	r2,r2,1
   206b8:	e0bffd05 	stb	r2,-12(fp)

	// clear the newAsteroid array
    for(int i = 0; i < 2; ++i) {
   206bc:	e03ffb15 	stw	zero,-20(fp)
   206c0:	00001506 	br	20718 <createAsteroid+0x12c>
    	newAsteroid[i] = (uint8_t*)malloc(sizeof(uint8_t));
   206c4:	e0bffb17 	ldw	r2,-20(fp)
   206c8:	1085883a 	add	r2,r2,r2
   206cc:	1085883a 	add	r2,r2,r2
   206d0:	1007883a 	mov	r3,r2
   206d4:	e0bffc17 	ldw	r2,-16(fp)
   206d8:	10e1883a 	add	r16,r2,r3
   206dc:	01000044 	movi	r4,1
   206e0:	0021d7c0 	call	21d7c <malloc>
   206e4:	80800015 	stw	r2,0(r16)
    	newAsteroid[i][0] = BLANK;	// blank spaces
   206e8:	e0bffb17 	ldw	r2,-20(fp)
   206ec:	1085883a 	add	r2,r2,r2
   206f0:	1085883a 	add	r2,r2,r2
   206f4:	1007883a 	mov	r3,r2
   206f8:	e0bffc17 	ldw	r2,-16(fp)
   206fc:	10c5883a 	add	r2,r2,r3
   20700:	10800017 	ldw	r2,0(r2)
   20704:	00c00804 	movi	r3,32
   20708:	10c00005 	stb	r3,0(r2)

	// randomly select a row
	randomRow = rand() % 2;

	// clear the newAsteroid array
    for(int i = 0; i < 2; ++i) {
   2070c:	e0bffb17 	ldw	r2,-20(fp)
   20710:	10800044 	addi	r2,r2,1
   20714:	e0bffb15 	stw	r2,-20(fp)
   20718:	e0bffb17 	ldw	r2,-20(fp)
   2071c:	10800090 	cmplti	r2,r2,2
   20720:	103fe81e 	bne	r2,zero,206c4 <__alt_data_end+0xfffe76c4>
    	newAsteroid[i] = (uint8_t*)malloc(sizeof(uint8_t));
    	newAsteroid[i][0] = BLANK;	// blank spaces
    }

	newAsteroid[randomRow][0] = asteroids[randomAsteroid];
   20724:	e0bffd03 	ldbu	r2,-12(fp)
   20728:	1085883a 	add	r2,r2,r2
   2072c:	1085883a 	add	r2,r2,r2
   20730:	1007883a 	mov	r3,r2
   20734:	e0bffc17 	ldw	r2,-16(fp)
   20738:	10c5883a 	add	r2,r2,r3
   2073c:	10800017 	ldw	r2,0(r2)
   20740:	e0fffa03 	ldbu	r3,-24(fp)
   20744:	e13ffd44 	addi	r4,fp,-11
   20748:	20c7883a 	add	r3,r4,r3
   2074c:	18c00003 	ldbu	r3,0(r3)
   20750:	10c00005 	stb	r3,0(r2)

	// fill in the 2x1 array with a single asteroid
	return newAsteroid;
   20754:	e0bffc17 	ldw	r2,-16(fp)
}
   20758:	e6ffff04 	addi	sp,fp,-4
   2075c:	dfc00217 	ldw	ra,8(sp)
   20760:	df000117 	ldw	fp,4(sp)
   20764:	dc000017 	ldw	r16,0(sp)
   20768:	dec00304 	addi	sp,sp,12
   2076c:	f800283a 	ret

00020770 <free_array>:


// call after the 2x1 array is done being used
void free_array(uint8_t** array){
   20770:	defffc04 	addi	sp,sp,-16
   20774:	dfc00315 	stw	ra,12(sp)
   20778:	df000215 	stw	fp,8(sp)
   2077c:	df000204 	addi	fp,sp,8
   20780:	e13fff15 	stw	r4,-4(fp)
    // Don't forget to free the allocated memory
    for (int i = 0; i < 2; ++i) {
   20784:	e03ffe15 	stw	zero,-8(fp)
   20788:	00000c06 	br	207bc <free_array+0x4c>
        free(array[i]);
   2078c:	e0bffe17 	ldw	r2,-8(fp)
   20790:	1085883a 	add	r2,r2,r2
   20794:	1085883a 	add	r2,r2,r2
   20798:	1007883a 	mov	r3,r2
   2079c:	e0bfff17 	ldw	r2,-4(fp)
   207a0:	10c5883a 	add	r2,r2,r3
   207a4:	10800017 	ldw	r2,0(r2)
   207a8:	1009883a 	mov	r4,r2
   207ac:	0021d900 	call	21d90 <free>


// call after the 2x1 array is done being used
void free_array(uint8_t** array){
    // Don't forget to free the allocated memory
    for (int i = 0; i < 2; ++i) {
   207b0:	e0bffe17 	ldw	r2,-8(fp)
   207b4:	10800044 	addi	r2,r2,1
   207b8:	e0bffe15 	stw	r2,-8(fp)
   207bc:	e0bffe17 	ldw	r2,-8(fp)
   207c0:	10800090 	cmplti	r2,r2,2
   207c4:	103ff11e 	bne	r2,zero,2078c <__alt_data_end+0xfffe778c>
        free(array[i]);
    }
    free(array);
   207c8:	e13fff17 	ldw	r4,-4(fp)
   207cc:	0021d900 	call	21d90 <free>
}
   207d0:	0001883a 	nop
   207d4:	e037883a 	mov	sp,fp
   207d8:	dfc00117 	ldw	ra,4(sp)
   207dc:	df000017 	ldw	fp,0(sp)
   207e0:	dec00204 	addi	sp,sp,8
   207e4:	f800283a 	ret

000207e8 <update_matrix>:


void update_matrix(void){
   207e8:	defffb04 	addi	sp,sp,-20
   207ec:	dfc00415 	stw	ra,16(sp)
   207f0:	df000315 	stw	fp,12(sp)
   207f4:	df000304 	addi	fp,sp,12
	//test matrix values
	//game_matrix = {
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	//};
	for (int i = 0; i < LCD_ROWS; i++) {
   207f8:	e03ffd15 	stw	zero,-12(fp)
   207fc:	00001c06 	br	20870 <update_matrix+0x88>
		for (int j = 0; j < LCD_COLS - 1; j++) {
   20800:	e03ffe15 	stw	zero,-8(fp)
   20804:	00001406 	br	20858 <update_matrix+0x70>
			game_matrix[i][j] = game_matrix[i][j + 1]; // shift left
   20808:	e0bffe17 	ldw	r2,-8(fp)
   2080c:	10c00044 	addi	r3,r2,1
   20810:	008000b4 	movhi	r2,2
   20814:	109f4504 	addi	r2,r2,32020
   20818:	e13ffd17 	ldw	r4,-12(fp)
   2081c:	2008913a 	slli	r4,r4,4
   20820:	1105883a 	add	r2,r2,r4
   20824:	10c5883a 	add	r2,r2,r3
   20828:	10c00003 	ldbu	r3,0(r2)
   2082c:	008000b4 	movhi	r2,2
   20830:	109f4504 	addi	r2,r2,32020
   20834:	e13ffd17 	ldw	r4,-12(fp)
   20838:	2008913a 	slli	r4,r4,4
   2083c:	1109883a 	add	r4,r2,r4
   20840:	e0bffe17 	ldw	r2,-8(fp)
   20844:	2085883a 	add	r2,r4,r2
   20848:	10c00005 	stb	r3,0(r2)
	//game_matrix = {
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	//};
	for (int i = 0; i < LCD_ROWS; i++) {
		for (int j = 0; j < LCD_COLS - 1; j++) {
   2084c:	e0bffe17 	ldw	r2,-8(fp)
   20850:	10800044 	addi	r2,r2,1
   20854:	e0bffe15 	stw	r2,-8(fp)
   20858:	e0bffe17 	ldw	r2,-8(fp)
   2085c:	108003d0 	cmplti	r2,r2,15
   20860:	103fe91e 	bne	r2,zero,20808 <__alt_data_end+0xfffe7808>
	//test matrix values
	//game_matrix = {
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//		{0x00,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	//};
	for (int i = 0; i < LCD_ROWS; i++) {
   20864:	e0bffd17 	ldw	r2,-12(fp)
   20868:	10800044 	addi	r2,r2,1
   2086c:	e0bffd15 	stw	r2,-12(fp)
   20870:	e0bffd17 	ldw	r2,-12(fp)
   20874:	10800090 	cmplti	r2,r2,2
   20878:	103fe11e 	bne	r2,zero,20800 <__alt_data_end+0xfffe7800>
		for (int j = 0; j < LCD_COLS - 1; j++) {
			game_matrix[i][j] = game_matrix[i][j + 1]; // shift left
		}
	}

	if(count <= 0){
   2087c:	d0a00117 	ldw	r2,-32764(gp)
   20880:	00801e16 	blt	zero,r2,208fc <update_matrix+0x114>
		count = (rand() % 4) + 2;
   20884:	00227100 	call	22710 <rand>
   20888:	1007883a 	mov	r3,r2
   2088c:	00a00034 	movhi	r2,32768
   20890:	108000c4 	addi	r2,r2,3
   20894:	1884703a 	and	r2,r3,r2
   20898:	1000040e 	bge	r2,zero,208ac <update_matrix+0xc4>
   2089c:	10bfffc4 	addi	r2,r2,-1
   208a0:	00ffff04 	movi	r3,-4
   208a4:	10c4b03a 	or	r2,r2,r3
   208a8:	10800044 	addi	r2,r2,1
   208ac:	10800084 	addi	r2,r2,2
   208b0:	d0a00115 	stw	r2,-32764(gp)
		new_col = createAsteroid(); // GET THIS FROM CAM
   208b4:	00205ec0 	call	205ec <createAsteroid>
   208b8:	e0bfff15 	stw	r2,-4(fp)
		game_matrix[0][LCD_COLS - 1] = new_col[0][0]; // update top right bit
   208bc:	e0bfff17 	ldw	r2,-4(fp)
   208c0:	10800017 	ldw	r2,0(r2)
   208c4:	10c00003 	ldbu	r3,0(r2)
   208c8:	008000b4 	movhi	r2,2
   208cc:	109f4504 	addi	r2,r2,32020
   208d0:	10c003c5 	stb	r3,15(r2)
		game_matrix[1][LCD_COLS - 1] = new_col[1][0]; // update bottom right bit
   208d4:	e0bfff17 	ldw	r2,-4(fp)
   208d8:	10800104 	addi	r2,r2,4
   208dc:	10800017 	ldw	r2,0(r2)
   208e0:	10c00003 	ldbu	r3,0(r2)
   208e4:	008000b4 	movhi	r2,2
   208e8:	109f4504 	addi	r2,r2,32020
   208ec:	10c007c5 	stb	r3,31(r2)
		free_array(new_col);
   208f0:	e13fff17 	ldw	r4,-4(fp)
   208f4:	00207700 	call	20770 <free_array>
		game_matrix[0][LCD_COLS - 1] = BLANK; // update top right bit
		game_matrix[1][LCD_COLS - 1] = BLANK; // update bottom right bit
		count--;
	}

}
   208f8:	00000b06 	br	20928 <update_matrix+0x140>
		new_col = createAsteroid(); // GET THIS FROM CAM
		game_matrix[0][LCD_COLS - 1] = new_col[0][0]; // update top right bit
		game_matrix[1][LCD_COLS - 1] = new_col[1][0]; // update bottom right bit
		free_array(new_col);
	} else {
		game_matrix[0][LCD_COLS - 1] = BLANK; // update top right bit
   208fc:	008000b4 	movhi	r2,2
   20900:	109f4504 	addi	r2,r2,32020
   20904:	00c00804 	movi	r3,32
   20908:	10c003c5 	stb	r3,15(r2)
		game_matrix[1][LCD_COLS - 1] = BLANK; // update bottom right bit
   2090c:	008000b4 	movhi	r2,2
   20910:	109f4504 	addi	r2,r2,32020
   20914:	00c00804 	movi	r3,32
   20918:	10c007c5 	stb	r3,31(r2)
		count--;
   2091c:	d0a00117 	ldw	r2,-32764(gp)
   20920:	10bfffc4 	addi	r2,r2,-1
   20924:	d0a00115 	stw	r2,-32764(gp)
	}

}
   20928:	0001883a 	nop
   2092c:	e037883a 	mov	sp,fp
   20930:	dfc00117 	ldw	ra,4(sp)
   20934:	df000017 	ldw	fp,0(sp)
   20938:	dec00204 	addi	sp,sp,8
   2093c:	f800283a 	ret

00020940 <draw_player>:


void draw_player(uint8_t data){
   20940:	defffd04 	addi	sp,sp,-12
   20944:	dfc00215 	stw	ra,8(sp)
   20948:	df000115 	stw	fp,4(sp)
   2094c:	df000104 	addi	fp,sp,4
   20950:	2005883a 	mov	r2,r4
   20954:	e0bfff05 	stb	r2,-4(fp)
	lcdSetAddr((~data) & 0x01, PLAYER_COLUMN);
   20958:	e0bfff03 	ldbu	r2,-4(fp)
   2095c:	1080004c 	andi	r2,r2,1
   20960:	1005003a 	cmpeq	r2,r2,zero
   20964:	10803fcc 	andi	r2,r2,255
   20968:	01400044 	movi	r5,1
   2096c:	1009883a 	mov	r4,r2
   20970:	00217700 	call	21770 <lcdSetAddr>

	if(data == 0x00){
   20974:	e0bfff03 	ldbu	r2,-4(fp)
   20978:	1000061e 	bne	r2,zero,20994 <draw_player+0x54>
		lcdSetAddr(1, PLAYER_COLUMN);
   2097c:	01400044 	movi	r5,1
   20980:	01000044 	movi	r4,1
   20984:	00217700 	call	21770 <lcdSetAddr>
		lcdWrite(PLAYER);
   20988:	01003d84 	movi	r4,246
   2098c:	00218500 	call	21850 <lcdWrite>
	} else {
		lcdSetAddr(0, PLAYER_COLUMN);
		lcdWrite(PLAYER);
	}
}
   20990:	00000506 	br	209a8 <draw_player+0x68>

	if(data == 0x00){
		lcdSetAddr(1, PLAYER_COLUMN);
		lcdWrite(PLAYER);
	} else {
		lcdSetAddr(0, PLAYER_COLUMN);
   20994:	01400044 	movi	r5,1
   20998:	0009883a 	mov	r4,zero
   2099c:	00217700 	call	21770 <lcdSetAddr>
		lcdWrite(PLAYER);
   209a0:	01003d84 	movi	r4,246
   209a4:	00218500 	call	21850 <lcdWrite>
	}
}
   209a8:	0001883a 	nop
   209ac:	e037883a 	mov	sp,fp
   209b0:	dfc00117 	ldw	ra,4(sp)
   209b4:	df000017 	ldw	fp,0(sp)
   209b8:	dec00204 	addi	sp,sp,8
   209bc:	f800283a 	ret

000209c0 <updatePlayer>:

uint8_t updatePlayer(uint8_t data){
   209c0:	defffd04 	addi	sp,sp,-12
   209c4:	df000215 	stw	fp,8(sp)
   209c8:	df000204 	addi	fp,sp,8
   209cc:	2005883a 	mov	r2,r4
   209d0:	e0bfff05 	stb	r2,-4(fp)
	// Switch is backwards from the LCD (LCD 1 = lower row, switch 1 = upwards direction)
	uint8_t row = (~data) & 0x01;
   209d4:	e0bfff03 	ldbu	r2,-4(fp)
   209d8:	1080004c 	andi	r2,r2,1
   209dc:	1005003a 	cmpeq	r2,r2,zero
   209e0:	e0bffe05 	stb	r2,-8(fp)

	// If the player moved
	if(game_matrix[row][PLAYER_COLUMN] != BLANK){
   209e4:	e0fffe03 	ldbu	r3,-8(fp)
   209e8:	008000b4 	movhi	r2,2
   209ec:	109f4504 	addi	r2,r2,32020
   209f0:	1806913a 	slli	r3,r3,4
   209f4:	10c5883a 	add	r2,r2,r3
   209f8:	10800044 	addi	r2,r2,1
   209fc:	10800003 	ldbu	r2,0(r2)
   20a00:	10803fcc 	andi	r2,r2,255
   20a04:	10800820 	cmpeqi	r2,r2,32
   20a08:	10001e1e 	bne	r2,zero,20a84 <updatePlayer+0xc4>
		if(game_matrix[row][PLAYER_COLUMN] == BLACK_HOLE){
   20a0c:	e0fffe03 	ldbu	r3,-8(fp)
   20a10:	008000b4 	movhi	r2,2
   20a14:	109f4504 	addi	r2,r2,32020
   20a18:	1806913a 	slli	r3,r3,4
   20a1c:	10c5883a 	add	r2,r2,r3
   20a20:	10800044 	addi	r2,r2,1
   20a24:	10800003 	ldbu	r2,0(r2)
   20a28:	10803fcc 	andi	r2,r2,255
   20a2c:	10803fd8 	cmpnei	r2,r2,255
   20a30:	10000a1e 	bne	r2,zero,20a5c <updatePlayer+0x9c>
			game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20a34:	e0fffe03 	ldbu	r3,-8(fp)
   20a38:	008000b4 	movhi	r2,2
   20a3c:	109f4504 	addi	r2,r2,32020
   20a40:	1806913a 	slli	r3,r3,4
   20a44:	10c5883a 	add	r2,r2,r3
   20a48:	10800044 	addi	r2,r2,1
   20a4c:	00fffd84 	movi	r3,-10
   20a50:	10c00005 	stb	r3,0(r2)
			return 0x02;
   20a54:	00800084 	movi	r2,2
   20a58:	00001306 	br	20aa8 <updatePlayer+0xe8>
		} else {
			game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20a5c:	e0fffe03 	ldbu	r3,-8(fp)
   20a60:	008000b4 	movhi	r2,2
   20a64:	109f4504 	addi	r2,r2,32020
   20a68:	1806913a 	slli	r3,r3,4
   20a6c:	10c5883a 	add	r2,r2,r3
   20a70:	10800044 	addi	r2,r2,1
   20a74:	00fffd84 	movi	r3,-10
   20a78:	10c00005 	stb	r3,0(r2)
			return 0x01;
   20a7c:	00800044 	movi	r2,1
   20a80:	00000906 	br	20aa8 <updatePlayer+0xe8>
		}
	} else {
		game_matrix[row][PLAYER_COLUMN] = PLAYER;
   20a84:	e0fffe03 	ldbu	r3,-8(fp)
   20a88:	008000b4 	movhi	r2,2
   20a8c:	109f4504 	addi	r2,r2,32020
   20a90:	1806913a 	slli	r3,r3,4
   20a94:	10c5883a 	add	r2,r2,r3
   20a98:	10800044 	addi	r2,r2,1
   20a9c:	00fffd84 	movi	r3,-10
   20aa0:	10c00005 	stb	r3,0(r2)
		return 0x00;
   20aa4:	0005883a 	mov	r2,zero
	}


}
   20aa8:	e037883a 	mov	sp,fp
   20aac:	df000017 	ldw	fp,0(sp)
   20ab0:	dec00104 	addi	sp,sp,4
   20ab4:	f800283a 	ret

00020ab8 <delayMs>:


//delays in increments of 100 ms
void delayMs(uint32_t milliseconds) {
   20ab8:	defffc04 	addi	sp,sp,-16
   20abc:	dfc00315 	stw	ra,12(sp)
   20ac0:	df000215 	stw	fp,8(sp)
   20ac4:	df000204 	addi	fp,sp,8
   20ac8:	e13fff15 	stw	r4,-4(fp)
	for(uint32_t i = 100 ; i<=milliseconds; i+=100)
   20acc:	00801904 	movi	r2,100
   20ad0:	e0bffe15 	stw	r2,-8(fp)
   20ad4:	00000a06 	br	20b00 <delayMs+0x48>
	{
		clearSema(GAME_TIMER);
   20ad8:	01000044 	movi	r4,1
   20adc:	00213a00 	call	213a0 <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   20ae0:	0001883a 	nop
   20ae4:	01000044 	movi	r4,1
   20ae8:	00213e80 	call	213e8 <getSema>
   20aec:	10803fcc 	andi	r2,r2,255
   20af0:	103ffc26 	beq	r2,zero,20ae4 <__alt_data_end+0xfffe7ae4>
}


//delays in increments of 100 ms
void delayMs(uint32_t milliseconds) {
	for(uint32_t i = 100 ; i<=milliseconds; i+=100)
   20af4:	e0bffe17 	ldw	r2,-8(fp)
   20af8:	10801904 	addi	r2,r2,100
   20afc:	e0bffe15 	stw	r2,-8(fp)
   20b00:	e0bffe17 	ldw	r2,-8(fp)
   20b04:	e0ffff17 	ldw	r3,-4(fp)
   20b08:	18bff32e 	bgeu	r3,r2,20ad8 <__alt_data_end+0xfffe7ad8>
	{
		clearSema(GAME_TIMER);
		while(getSema(GAME_TIMER) == 0){};
	}
}
   20b0c:	0001883a 	nop
   20b10:	e037883a 	mov	sp,fp
   20b14:	dfc00117 	ldw	ra,4(sp)
   20b18:	df000017 	ldw	fp,0(sp)
   20b1c:	dec00204 	addi	sp,sp,8
   20b20:	f800283a 	ret

00020b24 <death>:


void death(void){
   20b24:	defff904 	addi	sp,sp,-28
   20b28:	dfc00615 	stw	ra,24(sp)
   20b2c:	df000515 	stw	fp,20(sp)
   20b30:	df000504 	addi	fp,sp,20
	//check where player dies
	//row 0, column 1
	if (game_matrix[0][1] == 0xF6)
   20b34:	008000b4 	movhi	r2,2
   20b38:	109f4504 	addi	r2,r2,32020
   20b3c:	10800043 	ldbu	r2,1(r2)
   20b40:	10803fcc 	andi	r2,r2,255
   20b44:	10803d98 	cmpnei	r2,r2,246
   20b48:	1000661e 	bne	r2,zero,20ce4 <death+0x1c0>
	{
		deathAnimation(0);
   20b4c:	0009883a 	mov	r4,zero
   20b50:	0020f780 	call	20f78 <deathAnimation>
		if(lives == 0)
   20b54:	d0a00003 	ldbu	r2,-32768(gp)
   20b58:	10803fcc 	andi	r2,r2,255
   20b5c:	1000021e 	bne	r2,zero,20b68 <death+0x44>
		{
			gameOver();
   20b60:	0020e900 	call	20e90 <gameOver>
			draw_player(switch_data);
		}
	}


}
   20b64:	0000c406 	br	20e78 <death+0x354>
		{
			gameOver();
		}
		else
		{
			lcdClear();
   20b68:	00219140 	call	21914 <lcdClear>
			lcdSetAddr(0,4);
   20b6c:	01400104 	movi	r5,4
   20b70:	0009883a 	mov	r4,zero
   20b74:	00217700 	call	21770 <lcdSetAddr>
			lcdWrite('L');
   20b78:	01001304 	movi	r4,76
   20b7c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('I');
   20b80:	01001244 	movi	r4,73
   20b84:	00218500 	call	21850 <lcdWrite>
			lcdWrite('V');
   20b88:	01001584 	movi	r4,86
   20b8c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('E');
   20b90:	01001144 	movi	r4,69
   20b94:	00218500 	call	21850 <lcdWrite>
			lcdWrite('S');
   20b98:	010014c4 	movi	r4,83
   20b9c:	00218500 	call	21850 <lcdWrite>
			lcdWrite(':');
   20ba0:	01000e84 	movi	r4,58
   20ba4:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20ba8:	01000804 	movi	r4,32
   20bac:	00218500 	call	21850 <lcdWrite>
			lcdWrite(lives+48);
   20bb0:	d0a00003 	ldbu	r2,-32768(gp)
   20bb4:	10800c04 	addi	r2,r2,48
   20bb8:	10803fcc 	andi	r2,r2,255
   20bbc:	1009883a 	mov	r4,r2
   20bc0:	00218500 	call	21850 <lcdWrite>

			lcdSetAddr(1,0);
   20bc4:	000b883a 	mov	r5,zero
   20bc8:	01000044 	movi	r4,1
   20bcc:	00217700 	call	21770 <lcdSetAddr>
			lcdWrite('P');
   20bd0:	01001404 	movi	r4,80
   20bd4:	00218500 	call	21850 <lcdWrite>
			lcdWrite('R');
   20bd8:	01001484 	movi	r4,82
   20bdc:	00218500 	call	21850 <lcdWrite>
			lcdWrite('E');
   20be0:	01001144 	movi	r4,69
   20be4:	00218500 	call	21850 <lcdWrite>
			lcdWrite('S');
   20be8:	010014c4 	movi	r4,83
   20bec:	00218500 	call	21850 <lcdWrite>
			lcdWrite('S');
   20bf0:	010014c4 	movi	r4,83
   20bf4:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20bf8:	01000804 	movi	r4,32
   20bfc:	00218500 	call	21850 <lcdWrite>
			lcdWrite('K');
   20c00:	010012c4 	movi	r4,75
   20c04:	00218500 	call	21850 <lcdWrite>
			lcdWrite('E');
   20c08:	01001144 	movi	r4,69
   20c0c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('Y');
   20c10:	01001644 	movi	r4,89
   20c14:	00218500 	call	21850 <lcdWrite>
			lcdWrite('2');
   20c18:	01000c84 	movi	r4,50
   20c1c:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20c20:	01000804 	movi	r4,32
   20c24:	00218500 	call	21850 <lcdWrite>
			lcdWrite('2');
   20c28:	01000c84 	movi	r4,50
   20c2c:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20c30:	01000804 	movi	r4,32
   20c34:	00218500 	call	21850 <lcdWrite>
			lcdWrite('C');
   20c38:	010010c4 	movi	r4,67
   20c3c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('O');
   20c40:	010013c4 	movi	r4,79
   20c44:	00218500 	call	21850 <lcdWrite>
			lcdWrite('N');
   20c48:	01001384 	movi	r4,78
   20c4c:	00218500 	call	21850 <lcdWrite>
			//press key 2 is unpressed
			while(readKey() == 1);
   20c50:	0001883a 	nop
   20c54:	00214d40 	call	214d4 <readKey>
   20c58:	10803fcc 	andi	r2,r2,255
   20c5c:	10800060 	cmpeqi	r2,r2,1
   20c60:	103ffc1e 	bne	r2,zero,20c54 <__alt_data_end+0xfffe7c54>
			lcdClear();
   20c64:	00219140 	call	21914 <lcdClear>
			for(int i = 0; i < LCD_ROWS; i++){
   20c68:	e03ffb15 	stw	zero,-20(fp)
   20c6c:	00001406 	br	20cc0 <death+0x19c>
				for(int j = 0; j < LCD_COLS; j++){
   20c70:	e03ffc15 	stw	zero,-16(fp)
   20c74:	00000c06 	br	20ca8 <death+0x184>
					game_matrix[i][j] = BLANK;
   20c78:	008000b4 	movhi	r2,2
   20c7c:	109f4504 	addi	r2,r2,32020
   20c80:	e0fffb17 	ldw	r3,-20(fp)
   20c84:	1806913a 	slli	r3,r3,4
   20c88:	10c7883a 	add	r3,r2,r3
   20c8c:	e0bffc17 	ldw	r2,-16(fp)
   20c90:	1885883a 	add	r2,r3,r2
   20c94:	00c00804 	movi	r3,32
   20c98:	10c00005 	stb	r3,0(r2)
			lcdWrite('N');
			//press key 2 is unpressed
			while(readKey() == 1);
			lcdClear();
			for(int i = 0; i < LCD_ROWS; i++){
				for(int j = 0; j < LCD_COLS; j++){
   20c9c:	e0bffc17 	ldw	r2,-16(fp)
   20ca0:	10800044 	addi	r2,r2,1
   20ca4:	e0bffc15 	stw	r2,-16(fp)
   20ca8:	e0bffc17 	ldw	r2,-16(fp)
   20cac:	10800410 	cmplti	r2,r2,16
   20cb0:	103ff11e 	bne	r2,zero,20c78 <__alt_data_end+0xfffe7c78>
			lcdWrite('O');
			lcdWrite('N');
			//press key 2 is unpressed
			while(readKey() == 1);
			lcdClear();
			for(int i = 0; i < LCD_ROWS; i++){
   20cb4:	e0bffb17 	ldw	r2,-20(fp)
   20cb8:	10800044 	addi	r2,r2,1
   20cbc:	e0bffb15 	stw	r2,-20(fp)
   20cc0:	e0bffb17 	ldw	r2,-20(fp)
   20cc4:	10800090 	cmplti	r2,r2,2
   20cc8:	103fe91e 	bne	r2,zero,20c70 <__alt_data_end+0xfffe7c70>
				for(int j = 0; j < LCD_COLS; j++){
					game_matrix[i][j] = BLANK;
				}
			}
			uint8_t switch_data = readSwitch();
   20ccc:	00214ac0 	call	214ac <readSwitch>
   20cd0:	e0bfff05 	stb	r2,-4(fp)
			draw_player(switch_data);
   20cd4:	e0bfff03 	ldbu	r2,-4(fp)
   20cd8:	1009883a 	mov	r4,r2
   20cdc:	00209400 	call	20940 <draw_player>
			draw_player(switch_data);
		}
	}


}
   20ce0:	00006506 	br	20e78 <death+0x354>
		}
	}

	else
	{
		deathAnimation(1);
   20ce4:	01000044 	movi	r4,1
   20ce8:	0020f780 	call	20f78 <deathAnimation>
		if(lives == 0)
   20cec:	d0a00003 	ldbu	r2,-32768(gp)
   20cf0:	10803fcc 	andi	r2,r2,255
   20cf4:	1000021e 	bne	r2,zero,20d00 <death+0x1dc>
		{
			gameOver();
   20cf8:	0020e900 	call	20e90 <gameOver>
			draw_player(switch_data);
		}
	}


}
   20cfc:	00005e06 	br	20e78 <death+0x354>
		{
			gameOver();
		}
		else
		{
			lcdClear();
   20d00:	00219140 	call	21914 <lcdClear>
			lcdSetAddr(0,4);
   20d04:	01400104 	movi	r5,4
   20d08:	0009883a 	mov	r4,zero
   20d0c:	00217700 	call	21770 <lcdSetAddr>
			lcdWrite('L');
   20d10:	01001304 	movi	r4,76
   20d14:	00218500 	call	21850 <lcdWrite>
			lcdWrite('I');
   20d18:	01001244 	movi	r4,73
   20d1c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('V');
   20d20:	01001584 	movi	r4,86
   20d24:	00218500 	call	21850 <lcdWrite>
			lcdWrite('E');
   20d28:	01001144 	movi	r4,69
   20d2c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('S');
   20d30:	010014c4 	movi	r4,83
   20d34:	00218500 	call	21850 <lcdWrite>
			lcdWrite(':');
   20d38:	01000e84 	movi	r4,58
   20d3c:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20d40:	01000804 	movi	r4,32
   20d44:	00218500 	call	21850 <lcdWrite>
			//displays lives
			lcdWrite(lives+48);
   20d48:	d0a00003 	ldbu	r2,-32768(gp)
   20d4c:	10800c04 	addi	r2,r2,48
   20d50:	10803fcc 	andi	r2,r2,255
   20d54:	1009883a 	mov	r4,r2
   20d58:	00218500 	call	21850 <lcdWrite>

			lcdSetAddr(1,0);
   20d5c:	000b883a 	mov	r5,zero
   20d60:	01000044 	movi	r4,1
   20d64:	00217700 	call	21770 <lcdSetAddr>
			lcdWrite('P');
   20d68:	01001404 	movi	r4,80
   20d6c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('R');
   20d70:	01001484 	movi	r4,82
   20d74:	00218500 	call	21850 <lcdWrite>
			lcdWrite('E');
   20d78:	01001144 	movi	r4,69
   20d7c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('S');
   20d80:	010014c4 	movi	r4,83
   20d84:	00218500 	call	21850 <lcdWrite>
			lcdWrite('S');
   20d88:	010014c4 	movi	r4,83
   20d8c:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20d90:	01000804 	movi	r4,32
   20d94:	00218500 	call	21850 <lcdWrite>
			lcdWrite('K');
   20d98:	010012c4 	movi	r4,75
   20d9c:	00218500 	call	21850 <lcdWrite>
			lcdWrite('E');
   20da0:	01001144 	movi	r4,69
   20da4:	00218500 	call	21850 <lcdWrite>
			lcdWrite('Y');
   20da8:	01001644 	movi	r4,89
   20dac:	00218500 	call	21850 <lcdWrite>
			lcdWrite('2');
   20db0:	01000c84 	movi	r4,50
   20db4:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20db8:	01000804 	movi	r4,32
   20dbc:	00218500 	call	21850 <lcdWrite>
			lcdWrite('2');
   20dc0:	01000c84 	movi	r4,50
   20dc4:	00218500 	call	21850 <lcdWrite>
			lcdWrite(' ');
   20dc8:	01000804 	movi	r4,32
   20dcc:	00218500 	call	21850 <lcdWrite>
			lcdWrite('C');
   20dd0:	010010c4 	movi	r4,67
   20dd4:	00218500 	call	21850 <lcdWrite>
			lcdWrite('O');
   20dd8:	010013c4 	movi	r4,79
   20ddc:	00218500 	call	21850 <lcdWrite>
			lcdWrite('N');
   20de0:	01001384 	movi	r4,78
   20de4:	00218500 	call	21850 <lcdWrite>
			//press key 2 is unpressed
			while(readKey() == 1);
   20de8:	0001883a 	nop
   20dec:	00214d40 	call	214d4 <readKey>
   20df0:	10803fcc 	andi	r2,r2,255
   20df4:	10800060 	cmpeqi	r2,r2,1
   20df8:	103ffc1e 	bne	r2,zero,20dec <__alt_data_end+0xfffe7dec>
			lcdClear();
   20dfc:	00219140 	call	21914 <lcdClear>
			for(int i = 0; i < LCD_ROWS; i++){
   20e00:	e03ffd15 	stw	zero,-12(fp)
   20e04:	00001406 	br	20e58 <death+0x334>
				for(int j = 0; j < LCD_COLS; j++){
   20e08:	e03ffe15 	stw	zero,-8(fp)
   20e0c:	00000c06 	br	20e40 <death+0x31c>
					game_matrix[i][j] = BLANK;
   20e10:	008000b4 	movhi	r2,2
   20e14:	109f4504 	addi	r2,r2,32020
   20e18:	e0fffd17 	ldw	r3,-12(fp)
   20e1c:	1806913a 	slli	r3,r3,4
   20e20:	10c7883a 	add	r3,r2,r3
   20e24:	e0bffe17 	ldw	r2,-8(fp)
   20e28:	1885883a 	add	r2,r3,r2
   20e2c:	00c00804 	movi	r3,32
   20e30:	10c00005 	stb	r3,0(r2)
			lcdWrite('N');
			//press key 2 is unpressed
			while(readKey() == 1);
			lcdClear();
			for(int i = 0; i < LCD_ROWS; i++){
				for(int j = 0; j < LCD_COLS; j++){
   20e34:	e0bffe17 	ldw	r2,-8(fp)
   20e38:	10800044 	addi	r2,r2,1
   20e3c:	e0bffe15 	stw	r2,-8(fp)
   20e40:	e0bffe17 	ldw	r2,-8(fp)
   20e44:	10800410 	cmplti	r2,r2,16
   20e48:	103ff11e 	bne	r2,zero,20e10 <__alt_data_end+0xfffe7e10>
			lcdWrite('O');
			lcdWrite('N');
			//press key 2 is unpressed
			while(readKey() == 1);
			lcdClear();
			for(int i = 0; i < LCD_ROWS; i++){
   20e4c:	e0bffd17 	ldw	r2,-12(fp)
   20e50:	10800044 	addi	r2,r2,1
   20e54:	e0bffd15 	stw	r2,-12(fp)
   20e58:	e0bffd17 	ldw	r2,-12(fp)
   20e5c:	10800090 	cmplti	r2,r2,2
   20e60:	103fe91e 	bne	r2,zero,20e08 <__alt_data_end+0xfffe7e08>
				for(int j = 0; j < LCD_COLS; j++){
					game_matrix[i][j] = BLANK;
				}
			}
			uint8_t switch_data = readSwitch();
   20e64:	00214ac0 	call	214ac <readSwitch>
   20e68:	e0bfff45 	stb	r2,-3(fp)
			draw_player(switch_data);
   20e6c:	e0bfff43 	ldbu	r2,-3(fp)
   20e70:	1009883a 	mov	r4,r2
   20e74:	00209400 	call	20940 <draw_player>
		}
	}


}
   20e78:	0001883a 	nop
   20e7c:	e037883a 	mov	sp,fp
   20e80:	dfc00117 	ldw	ra,4(sp)
   20e84:	df000017 	ldw	fp,0(sp)
   20e88:	dec00204 	addi	sp,sp,8
   20e8c:	f800283a 	ret

00020e90 <gameOver>:

void gameOver(void){
   20e90:	defffe04 	addi	sp,sp,-8
   20e94:	dfc00115 	stw	ra,4(sp)
   20e98:	df000015 	stw	fp,0(sp)
   20e9c:	d839883a 	mov	fp,sp
	lcdClear();
   20ea0:	00219140 	call	21914 <lcdClear>
	//g
	lcdSetAddr(0,4);
   20ea4:	01400104 	movi	r5,4
   20ea8:	0009883a 	mov	r4,zero
   20eac:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite('G');
   20eb0:	010011c4 	movi	r4,71
   20eb4:	00218500 	call	21850 <lcdWrite>
	lcdWrite('A');
   20eb8:	01001044 	movi	r4,65
   20ebc:	00218500 	call	21850 <lcdWrite>
	lcdWrite('M');
   20ec0:	01001344 	movi	r4,77
   20ec4:	00218500 	call	21850 <lcdWrite>
	lcdWrite('E');
   20ec8:	01001144 	movi	r4,69
   20ecc:	00218500 	call	21850 <lcdWrite>
	lcdWrite('O');
   20ed0:	010013c4 	movi	r4,79
   20ed4:	00218500 	call	21850 <lcdWrite>
	lcdWrite('V');
   20ed8:	01001584 	movi	r4,86
   20edc:	00218500 	call	21850 <lcdWrite>
	lcdWrite('E');
   20ee0:	01001144 	movi	r4,69
   20ee4:	00218500 	call	21850 <lcdWrite>
	lcdWrite('R');
   20ee8:	01001484 	movi	r4,82
   20eec:	00218500 	call	21850 <lcdWrite>

	//key2 to restart
	//k
	lcdSetAddr(1,1);
   20ef0:	01400044 	movi	r5,1
   20ef4:	01000044 	movi	r4,1
   20ef8:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite('K');
   20efc:	010012c4 	movi	r4,75
   20f00:	00218500 	call	21850 <lcdWrite>
	lcdWrite('E');
   20f04:	01001144 	movi	r4,69
   20f08:	00218500 	call	21850 <lcdWrite>
	lcdWrite('Y');
   20f0c:	01001644 	movi	r4,89
   20f10:	00218500 	call	21850 <lcdWrite>
	lcdWrite('0');
   20f14:	01000c04 	movi	r4,48
   20f18:	00218500 	call	21850 <lcdWrite>
	lcdWrite(' ');
   20f1c:	01000804 	movi	r4,32
   20f20:	00218500 	call	21850 <lcdWrite>
	lcdWrite('T');
   20f24:	01001504 	movi	r4,84
   20f28:	00218500 	call	21850 <lcdWrite>
	lcdWrite('O');
   20f2c:	010013c4 	movi	r4,79
   20f30:	00218500 	call	21850 <lcdWrite>
	lcdWrite(' ');
   20f34:	01000804 	movi	r4,32
   20f38:	00218500 	call	21850 <lcdWrite>
	lcdWrite('R');
   20f3c:	01001484 	movi	r4,82
   20f40:	00218500 	call	21850 <lcdWrite>
	lcdWrite('E');
   20f44:	01001144 	movi	r4,69
   20f48:	00218500 	call	21850 <lcdWrite>
	lcdWrite('S');
   20f4c:	010014c4 	movi	r4,83
   20f50:	00218500 	call	21850 <lcdWrite>
	lcdWrite('T');
   20f54:	01001504 	movi	r4,84
   20f58:	00218500 	call	21850 <lcdWrite>
	lcdWrite('A');
   20f5c:	01001044 	movi	r4,65
   20f60:	00218500 	call	21850 <lcdWrite>
	lcdWrite('R');
   20f64:	01001484 	movi	r4,82
   20f68:	00218500 	call	21850 <lcdWrite>
	lcdWrite('T');
   20f6c:	01001504 	movi	r4,84
   20f70:	00218500 	call	21850 <lcdWrite>
	while(1);
   20f74:	003fff06 	br	20f74 <__alt_data_end+0xfffe7f74>

00020f78 <deathAnimation>:
}


void deathAnimation(uint8_t row){
   20f78:	defffc04 	addi	sp,sp,-16
   20f7c:	dfc00315 	stw	ra,12(sp)
   20f80:	df000215 	stw	fp,8(sp)
   20f84:	df000204 	addi	fp,sp,8
   20f88:	2005883a 	mov	r2,r4
   20f8c:	e0bfff05 	stb	r2,-4(fp)

	uint32_t delay = 100;
   20f90:	00801904 	movi	r2,100
   20f94:	e0bffe15 	stw	r2,-8(fp)
	//small
	lcdSetAddr(row,1);
   20f98:	e0bfff03 	ldbu	r2,-4(fp)
   20f9c:	01400044 	movi	r5,1
   20fa0:	1009883a 	mov	r4,r2
   20fa4:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0xA1);
   20fa8:	01002844 	movi	r4,161
   20fac:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   20fb0:	e13ffe17 	ldw	r4,-8(fp)
   20fb4:	0020ab80 	call	20ab8 <delayMs>
	//medium
	lcdSetAddr(row,1);
   20fb8:	e0bfff03 	ldbu	r2,-4(fp)
   20fbc:	01400044 	movi	r5,1
   20fc0:	1009883a 	mov	r4,r2
   20fc4:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x6F);
   20fc8:	01001bc4 	movi	r4,111
   20fcc:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   20fd0:	e13ffe17 	ldw	r4,-8(fp)
   20fd4:	0020ab80 	call	20ab8 <delayMs>
	//large
	lcdSetAddr(row,1);
   20fd8:	e0bfff03 	ldbu	r2,-4(fp)
   20fdc:	01400044 	movi	r5,1
   20fe0:	1009883a 	mov	r4,r2
   20fe4:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x4F);
   20fe8:	010013c4 	movi	r4,79
   20fec:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   20ff0:	e13ffe17 	ldw	r4,-8(fp)
   20ff4:	0020ab80 	call	20ab8 <delayMs>
	//XL
	lcdSetAddr(row,1);
   20ff8:	e0bfff03 	ldbu	r2,-4(fp)
   20ffc:	01400044 	movi	r5,1
   21000:	1009883a 	mov	r4,r2
   21004:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite('X');
   21008:	01001604 	movi	r4,88
   2100c:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   21010:	e13ffe17 	ldw	r4,-8(fp)
   21014:	0020ab80 	call	20ab8 <delayMs>
	//large
	lcdSetAddr(row,1);
   21018:	e0bfff03 	ldbu	r2,-4(fp)
   2101c:	01400044 	movi	r5,1
   21020:	1009883a 	mov	r4,r2
   21024:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x4F);
   21028:	010013c4 	movi	r4,79
   2102c:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   21030:	e13ffe17 	ldw	r4,-8(fp)
   21034:	0020ab80 	call	20ab8 <delayMs>
	//medium
	lcdSetAddr(row,1);
   21038:	e0bfff03 	ldbu	r2,-4(fp)
   2103c:	01400044 	movi	r5,1
   21040:	1009883a 	mov	r4,r2
   21044:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x6F);
   21048:	01001bc4 	movi	r4,111
   2104c:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   21050:	e13ffe17 	ldw	r4,-8(fp)
   21054:	0020ab80 	call	20ab8 <delayMs>
	//small
	lcdSetAddr(row,1);
   21058:	e0bfff03 	ldbu	r2,-4(fp)
   2105c:	01400044 	movi	r5,1
   21060:	1009883a 	mov	r4,r2
   21064:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0xA1);
   21068:	01002844 	movi	r4,161
   2106c:	00218500 	call	21850 <lcdWrite>
	delayMs(delay);
   21070:	e13ffe17 	ldw	r4,-8(fp)
   21074:	0020ab80 	call	20ab8 <delayMs>
	//large
	/*lcdSetAddr(0,1);
	lcdWrite(0x4F);
	delayMs(1000);
	*/
}
   21078:	0001883a 	nop
   2107c:	e037883a 	mov	sp,fp
   21080:	dfc00117 	ldw	ra,4(sp)
   21084:	df000017 	ldw	fp,0(sp)
   21088:	dec00204 	addi	sp,sp,8
   2108c:	f800283a 	ret

00021090 <deathAnimationBottom>:

void deathAnimationBottom(void){
   21090:	defffe04 	addi	sp,sp,-8
   21094:	dfc00115 	stw	ra,4(sp)
   21098:	df000015 	stw	fp,0(sp)
   2109c:	d839883a 	mov	fp,sp
	//small
	lcdSetAddr(1,1);
   210a0:	01400044 	movi	r5,1
   210a4:	01000044 	movi	r4,1
   210a8:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0xA1);
   210ac:	01002844 	movi	r4,161
   210b0:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   210b4:	0100fa04 	movi	r4,1000
   210b8:	0020ab80 	call	20ab8 <delayMs>
	//medium
	lcdSetAddr(1,1);
   210bc:	01400044 	movi	r5,1
   210c0:	01000044 	movi	r4,1
   210c4:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x6F);
   210c8:	01001bc4 	movi	r4,111
   210cc:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   210d0:	0100fa04 	movi	r4,1000
   210d4:	0020ab80 	call	20ab8 <delayMs>
	//large
	lcdSetAddr(1,1);
   210d8:	01400044 	movi	r5,1
   210dc:	01000044 	movi	r4,1
   210e0:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x4F);
   210e4:	010013c4 	movi	r4,79
   210e8:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   210ec:	0100fa04 	movi	r4,1000
   210f0:	0020ab80 	call	20ab8 <delayMs>
	//medium
	lcdSetAddr(1,1);
   210f4:	01400044 	movi	r5,1
   210f8:	01000044 	movi	r4,1
   210fc:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x6F);
   21100:	01001bc4 	movi	r4,111
   21104:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   21108:	0100fa04 	movi	r4,1000
   2110c:	0020ab80 	call	20ab8 <delayMs>
	//small
	lcdSetAddr(1,1);
   21110:	01400044 	movi	r5,1
   21114:	01000044 	movi	r4,1
   21118:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0xA1);
   2111c:	01002844 	movi	r4,161
   21120:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   21124:	0100fa04 	movi	r4,1000
   21128:	0020ab80 	call	20ab8 <delayMs>
	//medium
	lcdSetAddr(1,1);
   2112c:	01400044 	movi	r5,1
   21130:	01000044 	movi	r4,1
   21134:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x6F);
   21138:	01001bc4 	movi	r4,111
   2113c:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   21140:	0100fa04 	movi	r4,1000
   21144:	0020ab80 	call	20ab8 <delayMs>
	//large
	lcdSetAddr(1,1);
   21148:	01400044 	movi	r5,1
   2114c:	01000044 	movi	r4,1
   21150:	00217700 	call	21770 <lcdSetAddr>
	lcdWrite(0x4F);
   21154:	010013c4 	movi	r4,79
   21158:	00218500 	call	21850 <lcdWrite>
	delayMs(1000);
   2115c:	0100fa04 	movi	r4,1000
   21160:	0020ab80 	call	20ab8 <delayMs>
}
   21164:	0001883a 	nop
   21168:	e037883a 	mov	sp,fp
   2116c:	dfc00117 	ldw	ra,4(sp)
   21170:	df000017 	ldw	fp,0(sp)
   21174:	dec00204 	addi	sp,sp,8
   21178:	f800283a 	ret

0002117c <updateLCD>:


void updateLCD(void){
   2117c:	defff904 	addi	sp,sp,-28
   21180:	dfc00615 	stw	ra,24(sp)
   21184:	df000515 	stw	fp,20(sp)
   21188:	df000504 	addi	fp,sp,20
	static uint8_t prev_matrix[LCD_ROWS][LCD_COLS] = {
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK},
			{BLANK, BLANK,  BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK}
	};

	uint8_t newPlayerRow  = (game_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
   2118c:	008000b4 	movhi	r2,2
   21190:	109f4504 	addi	r2,r2,32020
   21194:	10800043 	ldbu	r2,1(r2)
   21198:	10803fcc 	andi	r2,r2,255
   2119c:	10803d98 	cmpnei	r2,r2,246
   211a0:	e0bfff05 	stb	r2,-4(fp)
	uint8_t prevPlayerRow = (prev_matrix[0][PLAYER_COLUMN] == PLAYER) ? (0) : (1);
   211a4:	008000b4 	movhi	r2,2
   211a8:	109f4d04 	addi	r2,r2,32052
   211ac:	10800043 	ldbu	r2,1(r2)
   211b0:	10803fcc 	andi	r2,r2,255
   211b4:	10803d98 	cmpnei	r2,r2,246
   211b8:	e0bfff45 	stb	r2,-3(fp)

	// Update the player first (this will look smoother)
	if(newPlayerRow != prevPlayerRow){
   211bc:	e0ffff03 	ldbu	r3,-4(fp)
   211c0:	e0bfff43 	ldbu	r2,-3(fp)
   211c4:	18800c26 	beq	r3,r2,211f8 <updateLCD+0x7c>
		// Write the new player to the LCD
		lcdSetAddr(newPlayerRow, PLAYER_COLUMN);
   211c8:	e0bfff03 	ldbu	r2,-4(fp)
   211cc:	01400044 	movi	r5,1
   211d0:	1009883a 	mov	r4,r2
   211d4:	00217700 	call	21770 <lcdSetAddr>
		lcdWrite(PLAYER);
   211d8:	01003d84 	movi	r4,246
   211dc:	00218500 	call	21850 <lcdWrite>

		// Clear previous player's image
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
   211e0:	e0bfff43 	ldbu	r2,-3(fp)
   211e4:	01400044 	movi	r5,1
   211e8:	1009883a 	mov	r4,r2
   211ec:	00217700 	call	21770 <lcdSetAddr>
		lcdWrite(BLANK);
   211f0:	01000804 	movi	r4,32
   211f4:	00218500 	call	21850 <lcdWrite>
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
   211f8:	e03ffb15 	stw	zero,-20(fp)
   211fc:	00003f06 	br	212fc <updateLCD+0x180>
		for(int j = 0; j < LCD_COLS; j++){
   21200:	e03ffc15 	stw	zero,-16(fp)
   21204:	00003706 	br	212e4 <updateLCD+0x168>
			uint8_t prev = prev_matrix[i][j];
   21208:	008000b4 	movhi	r2,2
   2120c:	109f4d04 	addi	r2,r2,32052
   21210:	e0fffb17 	ldw	r3,-20(fp)
   21214:	1806913a 	slli	r3,r3,4
   21218:	10c7883a 	add	r3,r2,r3
   2121c:	e0bffc17 	ldw	r2,-16(fp)
   21220:	1885883a 	add	r2,r3,r2
   21224:	10800003 	ldbu	r2,0(r2)
   21228:	e0bfff85 	stb	r2,-2(fp)
			uint8_t new = game_matrix[i][j];
   2122c:	008000b4 	movhi	r2,2
   21230:	109f4504 	addi	r2,r2,32020
   21234:	e0fffb17 	ldw	r3,-20(fp)
   21238:	1806913a 	slli	r3,r3,4
   2123c:	10c7883a 	add	r3,r2,r3
   21240:	e0bffc17 	ldw	r2,-16(fp)
   21244:	1885883a 	add	r2,r3,r2
   21248:	10800003 	ldbu	r2,0(r2)
   2124c:	e0bfffc5 	stb	r2,-1(fp)

			// Player is already updated
			if(new == PLAYER){
   21250:	e0bfffc3 	ldbu	r2,-1(fp)
   21254:	10803d98 	cmpnei	r2,r2,246
   21258:	10001e26 	beq	r2,zero,212d4 <updateLCD+0x158>
				continue;
			}

			// If there is an asteroid
			if(new != BLANK){
   2125c:	e0bfffc3 	ldbu	r2,-1(fp)
   21260:	10800820 	cmpeqi	r2,r2,32
   21264:	10000b1e 	bne	r2,zero,21294 <updateLCD+0x118>
				// Draw asteroid
				lcdSetAddr(i, j);
   21268:	e0bffb17 	ldw	r2,-20(fp)
   2126c:	10c03fcc 	andi	r3,r2,255
   21270:	e0bffc17 	ldw	r2,-16(fp)
   21274:	10803fcc 	andi	r2,r2,255
   21278:	100b883a 	mov	r5,r2
   2127c:	1809883a 	mov	r4,r3
   21280:	00217700 	call	21770 <lcdSetAddr>
				lcdWrite(new);
   21284:	e0bfffc3 	ldbu	r2,-1(fp)
   21288:	1009883a 	mov	r4,r2
   2128c:	00218500 	call	21850 <lcdWrite>
   21290:	00001106 	br	212d8 <updateLCD+0x15c>
			} else {
				// Check for old asteroids
				if(prev != BLANK && prev != PLAYER){
   21294:	e0bfff83 	ldbu	r2,-2(fp)
   21298:	10800820 	cmpeqi	r2,r2,32
   2129c:	10000e1e 	bne	r2,zero,212d8 <updateLCD+0x15c>
   212a0:	e0bfff83 	ldbu	r2,-2(fp)
   212a4:	10803da0 	cmpeqi	r2,r2,246
   212a8:	10000b1e 	bne	r2,zero,212d8 <updateLCD+0x15c>
					lcdSetAddr(i, j);
   212ac:	e0bffb17 	ldw	r2,-20(fp)
   212b0:	10c03fcc 	andi	r3,r2,255
   212b4:	e0bffc17 	ldw	r2,-16(fp)
   212b8:	10803fcc 	andi	r2,r2,255
   212bc:	100b883a 	mov	r5,r2
   212c0:	1809883a 	mov	r4,r3
   212c4:	00217700 	call	21770 <lcdSetAddr>
					lcdWrite(BLANK);
   212c8:	01000804 	movi	r4,32
   212cc:	00218500 	call	21850 <lcdWrite>
   212d0:	00000106 	br	212d8 <updateLCD+0x15c>
			uint8_t prev = prev_matrix[i][j];
			uint8_t new = game_matrix[i][j];

			// Player is already updated
			if(new == PLAYER){
				continue;
   212d4:	0001883a 	nop
		lcdWrite(BLANK);
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
   212d8:	e0bffc17 	ldw	r2,-16(fp)
   212dc:	10800044 	addi	r2,r2,1
   212e0:	e0bffc15 	stw	r2,-16(fp)
   212e4:	e0bffc17 	ldw	r2,-16(fp)
   212e8:	10800410 	cmplti	r2,r2,16
   212ec:	103fc61e 	bne	r2,zero,21208 <__alt_data_end+0xfffe8208>
		lcdSetAddr(prevPlayerRow, PLAYER_COLUMN);
		lcdWrite(BLANK);
	}

	// drawing asteroids
	for(int i = 0; i < LCD_ROWS; i++){
   212f0:	e0bffb17 	ldw	r2,-20(fp)
   212f4:	10800044 	addi	r2,r2,1
   212f8:	e0bffb15 	stw	r2,-20(fp)
   212fc:	e0bffb17 	ldw	r2,-20(fp)
   21300:	10800090 	cmplti	r2,r2,2
   21304:	103fbe1e 	bne	r2,zero,21200 <__alt_data_end+0xfffe8200>
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
   21308:	e03ffd15 	stw	zero,-12(fp)
   2130c:	00001b06 	br	2137c <updateLCD+0x200>
		for(int j = 0; j < LCD_COLS; j++){
   21310:	e03ffe15 	stw	zero,-8(fp)
   21314:	00001306 	br	21364 <updateLCD+0x1e8>
			prev_matrix[i][j] = game_matrix[i][j];
   21318:	008000b4 	movhi	r2,2
   2131c:	109f4504 	addi	r2,r2,32020
   21320:	e0fffd17 	ldw	r3,-12(fp)
   21324:	1806913a 	slli	r3,r3,4
   21328:	10c7883a 	add	r3,r2,r3
   2132c:	e0bffe17 	ldw	r2,-8(fp)
   21330:	1885883a 	add	r2,r3,r2
   21334:	10c00003 	ldbu	r3,0(r2)
   21338:	008000b4 	movhi	r2,2
   2133c:	109f4d04 	addi	r2,r2,32052
   21340:	e13ffd17 	ldw	r4,-12(fp)
   21344:	2008913a 	slli	r4,r4,4
   21348:	1109883a 	add	r4,r2,r4
   2134c:	e0bffe17 	ldw	r2,-8(fp)
   21350:	2085883a 	add	r2,r4,r2
   21354:	10c00005 	stb	r3,0(r2)
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
		for(int j = 0; j < LCD_COLS; j++){
   21358:	e0bffe17 	ldw	r2,-8(fp)
   2135c:	10800044 	addi	r2,r2,1
   21360:	e0bffe15 	stw	r2,-8(fp)
   21364:	e0bffe17 	ldw	r2,-8(fp)
   21368:	10800410 	cmplti	r2,r2,16
   2136c:	103fea1e 	bne	r2,zero,21318 <__alt_data_end+0xfffe8318>
			}
		}
	}

	// Copy frame into the previous matrix for next iteration
	for(int i = 0; i < LCD_ROWS; i++){
   21370:	e0bffd17 	ldw	r2,-12(fp)
   21374:	10800044 	addi	r2,r2,1
   21378:	e0bffd15 	stw	r2,-12(fp)
   2137c:	e0bffd17 	ldw	r2,-12(fp)
   21380:	10800090 	cmplti	r2,r2,2
   21384:	103fe21e 	bne	r2,zero,21310 <__alt_data_end+0xfffe8310>
		for(int j = 0; j < LCD_COLS; j++){
			prev_matrix[i][j] = game_matrix[i][j];
		}
	}
}
   21388:	0001883a 	nop
   2138c:	e037883a 	mov	sp,fp
   21390:	dfc00117 	ldw	ra,4(sp)
   21394:	df000017 	ldw	fp,0(sp)
   21398:	dec00204 	addi	sp,sp,8
   2139c:	f800283a 	ret

000213a0 <clearSema>:

uint8_t lcdSema = 1;
uint8_t gameSema = 1;


void clearSema(uint8_t timerNum){
   213a0:	defffe04 	addi	sp,sp,-8
   213a4:	df000115 	stw	fp,4(sp)
   213a8:	df000104 	addi	fp,sp,4
   213ac:	2005883a 	mov	r2,r4
   213b0:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   213b4:	e0bfff03 	ldbu	r2,-4(fp)
   213b8:	1000021e 	bne	r2,zero,213c4 <clearSema+0x24>
		lcdSema = 0;
   213bc:	d0200205 	stb	zero,-32760(gp)
	else if(timerNum == GAME_TIMER)
		gameSema = 0;
}
   213c0:	00000406 	br	213d4 <clearSema+0x34>


void clearSema(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		lcdSema = 0;
	else if(timerNum == GAME_TIMER)
   213c4:	e0bfff03 	ldbu	r2,-4(fp)
   213c8:	10800058 	cmpnei	r2,r2,1
   213cc:	1000011e 	bne	r2,zero,213d4 <clearSema+0x34>
		gameSema = 0;
   213d0:	d0200245 	stb	zero,-32759(gp)
}
   213d4:	0001883a 	nop
   213d8:	e037883a 	mov	sp,fp
   213dc:	df000017 	ldw	fp,0(sp)
   213e0:	dec00104 	addi	sp,sp,4
   213e4:	f800283a 	ret

000213e8 <getSema>:


uint8_t getSema(uint8_t timerNum){
   213e8:	defffe04 	addi	sp,sp,-8
   213ec:	df000115 	stw	fp,4(sp)
   213f0:	df000104 	addi	fp,sp,4
   213f4:	2005883a 	mov	r2,r4
   213f8:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   213fc:	e0bfff03 	ldbu	r2,-4(fp)
   21400:	1000021e 	bne	r2,zero,2140c <getSema+0x24>
		return lcdSema;
   21404:	d0a00203 	ldbu	r2,-32760(gp)
   21408:	00000606 	br	21424 <getSema+0x3c>
	else if(timerNum == GAME_TIMER)
   2140c:	e0bfff03 	ldbu	r2,-4(fp)
   21410:	10800058 	cmpnei	r2,r2,1
   21414:	1000021e 	bne	r2,zero,21420 <getSema+0x38>
		return gameSema;
   21418:	d0a00243 	ldbu	r2,-32759(gp)
   2141c:	00000106 	br	21424 <getSema+0x3c>
	else
		return 0;
   21420:	0005883a 	mov	r2,zero
}
   21424:	e037883a 	mov	sp,fp
   21428:	df000017 	ldw	fp,0(sp)
   2142c:	dec00104 	addi	sp,sp,4
   21430:	f800283a 	ret

00021434 <handleGameTimer>:


void handleGameTimer(void* isr_context){
   21434:	defffe04 	addi	sp,sp,-8
   21438:	df000115 	stw	fp,4(sp)
   2143c:	df000104 	addi	fp,sp,4
   21440:	e13fff15 	stw	r4,-4(fp)
	//alt_putstr("Hello from Timer_Game\n");
	gameSema = 1;
   21444:	00800044 	movi	r2,1
   21448:	d0a00245 	stb	r2,-32759(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_GAME_BASE, 0);
   2144c:	0007883a 	mov	r3,zero
   21450:	00800134 	movhi	r2,4
   21454:	10840804 	addi	r2,r2,4128
   21458:	10c00035 	stwio	r3,0(r2)
}
   2145c:	0001883a 	nop
   21460:	e037883a 	mov	sp,fp
   21464:	df000017 	ldw	fp,0(sp)
   21468:	dec00104 	addi	sp,sp,4
   2146c:	f800283a 	ret

00021470 <handleLCDTimer>:


void handleLCDTimer(void* context){
   21470:	defffe04 	addi	sp,sp,-8
   21474:	df000115 	stw	fp,4(sp)
   21478:	df000104 	addi	fp,sp,4
   2147c:	e13fff15 	stw	r4,-4(fp)
	lcdSema = 1;
   21480:	00800044 	movi	r2,1
   21484:	d0a00205 	stb	r2,-32760(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_LCD_BASE, 0);
   21488:	0007883a 	mov	r3,zero
   2148c:	00800134 	movhi	r2,4
   21490:	10840004 	addi	r2,r2,4096
   21494:	10c00035 	stwio	r3,0(r2)
}
   21498:	0001883a 	nop
   2149c:	e037883a 	mov	sp,fp
   214a0:	df000017 	ldw	fp,0(sp)
   214a4:	dec00104 	addi	sp,sp,4
   214a8:	f800283a 	ret

000214ac <readSwitch>:


uint8_t readSwitch(void){
   214ac:	deffff04 	addi	sp,sp,-4
   214b0:	df000015 	stw	fp,0(sp)
   214b4:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   214b8:	00800134 	movhi	r2,4
   214bc:	10842004 	addi	r2,r2,4224
   214c0:	10800037 	ldwio	r2,0(r2)
}
   214c4:	e037883a 	mov	sp,fp
   214c8:	df000017 	ldw	fp,0(sp)
   214cc:	dec00104 	addi	sp,sp,4
   214d0:	f800283a 	ret

000214d4 <readKey>:

uint8_t readKey(void){
   214d4:	deffff04 	addi	sp,sp,-4
   214d8:	df000015 	stw	fp,0(sp)
   214dc:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
   214e0:	00800134 	movhi	r2,4
   214e4:	10841804 	addi	r2,r2,4192
   214e8:	10800037 	ldwio	r2,0(r2)
}
   214ec:	e037883a 	mov	sp,fp
   214f0:	df000017 	ldw	fp,0(sp)
   214f4:	dec00104 	addi	sp,sp,4
   214f8:	f800283a 	ret

000214fc <setLEDs>:


void setLEDs(uint8_t led_pattern){
   214fc:	defffe04 	addi	sp,sp,-8
   21500:	df000115 	stw	fp,4(sp)
   21504:	df000104 	addi	fp,sp,4
   21508:	2005883a 	mov	r2,r4
   2150c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (led_pattern&0x0F));
   21510:	e0bfff03 	ldbu	r2,-4(fp)
   21514:	10c003cc 	andi	r3,r2,15
   21518:	00800134 	movhi	r2,4
   2151c:	10841c04 	addi	r2,r2,4208
   21520:	10c00035 	stwio	r3,0(r2)
}
   21524:	0001883a 	nop
   21528:	e037883a 	mov	sp,fp
   2152c:	df000017 	ldw	fp,0(sp)
   21530:	dec00104 	addi	sp,sp,4
   21534:	f800283a 	ret

00021538 <setSevenSeg>:


void setSevenSeg(uint32_t num){
   21538:	defff804 	addi	sp,sp,-32
   2153c:	dfc00715 	stw	ra,28(sp)
   21540:	df000615 	stw	fp,24(sp)
   21544:	df000604 	addi	fp,sp,24
   21548:	e13fff15 	stw	r4,-4(fp)
	int ones, tens, hundreds, thousands;

	ones = num % 10;
   2154c:	e0bfff17 	ldw	r2,-4(fp)
   21550:	01400284 	movi	r5,10
   21554:	1009883a 	mov	r4,r2
   21558:	0021cfc0 	call	21cfc <__umodsi3>
   2155c:	e0bffb15 	stw	r2,-20(fp)
	tens = (num/10) % 10;
   21560:	e0bfff17 	ldw	r2,-4(fp)
   21564:	01400284 	movi	r5,10
   21568:	1009883a 	mov	r4,r2
   2156c:	0021c980 	call	21c98 <__udivsi3>
   21570:	01400284 	movi	r5,10
   21574:	1009883a 	mov	r4,r2
   21578:	0021cfc0 	call	21cfc <__umodsi3>
   2157c:	e0bffc15 	stw	r2,-16(fp)
	hundreds = (num/100) % 10;
   21580:	e0bfff17 	ldw	r2,-4(fp)
   21584:	01401904 	movi	r5,100
   21588:	1009883a 	mov	r4,r2
   2158c:	0021c980 	call	21c98 <__udivsi3>
   21590:	01400284 	movi	r5,10
   21594:	1009883a 	mov	r4,r2
   21598:	0021cfc0 	call	21cfc <__umodsi3>
   2159c:	e0bffd15 	stw	r2,-12(fp)
	thousands = (num/1000) % 10;
   215a0:	e0bfff17 	ldw	r2,-4(fp)
   215a4:	0140fa04 	movi	r5,1000
   215a8:	1009883a 	mov	r4,r2
   215ac:	0021c980 	call	21c98 <__udivsi3>
   215b0:	01400284 	movi	r5,10
   215b4:	1009883a 	mov	r4,r2
   215b8:	0021cfc0 	call	21cfc <__umodsi3>
   215bc:	e0bffe15 	stw	r2,-8(fp)

	uint32_t hex_data = 0xFFFFFFFF;
   215c0:	00bfffc4 	movi	r2,-1
   215c4:	e0bffa15 	stw	r2,-24(fp)
	if(num > 999)
   215c8:	e0bfff17 	ldw	r2,-4(fp)
   215cc:	1080fa30 	cmpltui	r2,r2,1000
   215d0:	10000a1e 	bne	r2,zero,215fc <setSevenSeg+0xc4>
		hex_data &= HexArray[thousands];
   215d4:	008000b4 	movhi	r2,2
   215d8:	109eef04 	addi	r2,r2,31676
   215dc:	e0fffe17 	ldw	r3,-8(fp)
   215e0:	18c7883a 	add	r3,r3,r3
   215e4:	18c7883a 	add	r3,r3,r3
   215e8:	10c5883a 	add	r2,r2,r3
   215ec:	10800017 	ldw	r2,0(r2)
   215f0:	e0fffa17 	ldw	r3,-24(fp)
   215f4:	1884703a 	and	r2,r3,r2
   215f8:	e0bffa15 	stw	r2,-24(fp)
	if(num > 99)
   215fc:	e0bfff17 	ldw	r2,-4(fp)
   21600:	10801930 	cmpltui	r2,r2,100
   21604:	10000c1e 	bne	r2,zero,21638 <setSevenSeg+0x100>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[hundreds]);
   21608:	e0bffa17 	ldw	r2,-24(fp)
   2160c:	100491fa 	slli	r2,r2,7
   21610:	11001fd4 	ori	r4,r2,127
   21614:	008000b4 	movhi	r2,2
   21618:	109eef04 	addi	r2,r2,31676
   2161c:	e0fffd17 	ldw	r3,-12(fp)
   21620:	18c7883a 	add	r3,r3,r3
   21624:	18c7883a 	add	r3,r3,r3
   21628:	10c5883a 	add	r2,r2,r3
   2162c:	10800017 	ldw	r2,0(r2)
   21630:	2084703a 	and	r2,r4,r2
   21634:	e0bffa15 	stw	r2,-24(fp)
	if(num > 9)
   21638:	e0bfff17 	ldw	r2,-4(fp)
   2163c:	108002b0 	cmpltui	r2,r2,10
   21640:	10000c1e 	bne	r2,zero,21674 <setSevenSeg+0x13c>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[tens]);
   21644:	e0bffa17 	ldw	r2,-24(fp)
   21648:	100491fa 	slli	r2,r2,7
   2164c:	11001fd4 	ori	r4,r2,127
   21650:	008000b4 	movhi	r2,2
   21654:	109eef04 	addi	r2,r2,31676
   21658:	e0fffc17 	ldw	r3,-16(fp)
   2165c:	18c7883a 	add	r3,r3,r3
   21660:	18c7883a 	add	r3,r3,r3
   21664:	10c5883a 	add	r2,r2,r3
   21668:	10800017 	ldw	r2,0(r2)
   2166c:	2084703a 	and	r2,r4,r2
   21670:	e0bffa15 	stw	r2,-24(fp)

	hex_data = (((hex_data << 7) | 0x7F) & HexArray[ones]);
   21674:	e0bffa17 	ldw	r2,-24(fp)
   21678:	100491fa 	slli	r2,r2,7
   2167c:	11001fd4 	ori	r4,r2,127
   21680:	008000b4 	movhi	r2,2
   21684:	109eef04 	addi	r2,r2,31676
   21688:	e0fffb17 	ldw	r3,-20(fp)
   2168c:	18c7883a 	add	r3,r3,r3
   21690:	18c7883a 	add	r3,r3,r3
   21694:	10c5883a 	add	r2,r2,r3
   21698:	10800017 	ldw	r2,0(r2)
   2169c:	2084703a 	and	r2,r4,r2
   216a0:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, hex_data);
   216a4:	e0fffa17 	ldw	r3,-24(fp)
   216a8:	00800134 	movhi	r2,4
   216ac:	10841404 	addi	r2,r2,4176
   216b0:	10c00035 	stwio	r3,0(r2)
}
   216b4:	0001883a 	nop
   216b8:	e037883a 	mov	sp,fp
   216bc:	dfc00117 	ldw	ra,4(sp)
   216c0:	df000017 	ldw	fp,0(sp)
   216c4:	dec00204 	addi	sp,sp,8
   216c8:	f800283a 	ret

000216cc <lcdInit>:


// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
   216cc:	defffd04 	addi	sp,sp,-12
   216d0:	dfc00215 	stw	ra,8(sp)
   216d4:	df000115 	stw	fp,4(sp)
   216d8:	df000104 	addi	fp,sp,4
	setTimer(LCD_TIMER,5000);
   216dc:	0144e204 	movi	r5,5000
   216e0:	0009883a 	mov	r4,zero
   216e4:	0021ac00 	call	21ac0 <setTimer>
	startTimer(LCD_TIMER);
   216e8:	0009883a 	mov	r4,zero
   216ec:	0021a000 	call	21a00 <startTimer>

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   216f0:	e03fff15 	stw	zero,-4(fp)
   216f4:	00001306 	br	21744 <lcdInit+0x78>
		while(lcdSema == 0){};
   216f8:	0001883a 	nop
   216fc:	d0a00203 	ldbu	r2,-32760(gp)
   21700:	10803fcc 	andi	r2,r2,255
   21704:	103ffd26 	beq	r2,zero,216fc <__alt_data_end+0xfffe86fc>
		lcdSema = 0;
   21708:	d0200205 	stb	zero,-32760(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
   2170c:	008000b4 	movhi	r2,2
   21710:	109ee804 	addi	r2,r2,31648
   21714:	e0ffff17 	ldw	r3,-4(fp)
   21718:	18c7883a 	add	r3,r3,r3
   2171c:	10c5883a 	add	r2,r2,r3
   21720:	1080000b 	ldhu	r2,0(r2)
   21724:	10bfffcc 	andi	r2,r2,65535
   21728:	10c3ffcc 	andi	r3,r2,4095
   2172c:	00800134 	movhi	r2,4
   21730:	10841004 	addi	r2,r2,4160
   21734:	10c00035 	stwio	r3,0(r2)
// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
	setTimer(LCD_TIMER,5000);
	startTimer(LCD_TIMER);

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   21738:	e0bfff17 	ldw	r2,-4(fp)
   2173c:	10800044 	addi	r2,r2,1
   21740:	e0bfff15 	stw	r2,-4(fp)
   21744:	e0bfff17 	ldw	r2,-4(fp)
   21748:	10800390 	cmplti	r2,r2,14
   2174c:	103fea1e 	bne	r2,zero,216f8 <__alt_data_end+0xfffe86f8>
		while(lcdSema == 0){};
		lcdSema = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
	}

	stopTimer(LCD_TIMER);
   21750:	0009883a 	mov	r4,zero
   21754:	0021a600 	call	21a60 <stopTimer>
}
   21758:	0001883a 	nop
   2175c:	e037883a 	mov	sp,fp
   21760:	dfc00117 	ldw	ra,4(sp)
   21764:	df000017 	ldw	fp,0(sp)
   21768:	dec00204 	addi	sp,sp,8
   2176c:	f800283a 	ret

00021770 <lcdSetAddr>:


void lcdSetAddr(uint8_t row, uint8_t col){
   21770:	defffb04 	addi	sp,sp,-20
   21774:	dfc00415 	stw	ra,16(sp)
   21778:	df000315 	stw	fp,12(sp)
   2177c:	df000304 	addi	fp,sp,12
   21780:	2007883a 	mov	r3,r4
   21784:	2805883a 	mov	r2,r5
   21788:	e0fffe05 	stb	r3,-8(fp)
   2178c:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   21790:	e03ffd0d 	sth	zero,-12(fp)
	lcdData = row * 0x40 + col;
   21794:	e0bffe03 	ldbu	r2,-8(fp)
   21798:	100491ba 	slli	r2,r2,6
   2179c:	1007883a 	mov	r3,r2
   217a0:	e0bfff03 	ldbu	r2,-4(fp)
   217a4:	1885883a 	add	r2,r3,r2
   217a8:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x80;
   217ac:	e0bffd0b 	ldhu	r2,-12(fp)
   217b0:	10802014 	ori	r2,r2,128
   217b4:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x9 << 8;
   217b8:	e0bffd0b 	ldhu	r2,-12(fp)
   217bc:	10824014 	ori	r2,r2,2304
   217c0:	e0bffd0d 	sth	r2,-12(fp)

	lcdSema = 0;
   217c4:	d0200205 	stb	zero,-32760(gp)

	setTimer(LCD_TIMER, 1000);
   217c8:	0140fa04 	movi	r5,1000
   217cc:	0009883a 	mov	r4,zero
   217d0:	0021ac00 	call	21ac0 <setTimer>
	startTimer(LCD_TIMER);
   217d4:	0009883a 	mov	r4,zero
   217d8:	0021a000 	call	21a00 <startTimer>

	while(lcdSema == 0){};
   217dc:	0001883a 	nop
   217e0:	d0a00203 	ldbu	r2,-32760(gp)
   217e4:	10803fcc 	andi	r2,r2,255
   217e8:	103ffd26 	beq	r2,zero,217e0 <__alt_data_end+0xfffe87e0>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   217ec:	e0fffd0b 	ldhu	r3,-12(fp)
   217f0:	00800134 	movhi	r2,4
   217f4:	10841004 	addi	r2,r2,4160
   217f8:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   217fc:	e0fffd0b 	ldhu	r3,-12(fp)
   21800:	00bdffc4 	movi	r2,-2049
   21804:	1884703a 	and	r2,r3,r2
   21808:	e0bffd0d 	sth	r2,-12(fp)
	lcdSema = 0;
   2180c:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21810:	0001883a 	nop
   21814:	d0a00203 	ldbu	r2,-32760(gp)
   21818:	10803fcc 	andi	r2,r2,255
   2181c:	103ffd26 	beq	r2,zero,21814 <__alt_data_end+0xfffe8814>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   21820:	e0fffd0b 	ldhu	r3,-12(fp)
   21824:	00800134 	movhi	r2,4
   21828:	10841004 	addi	r2,r2,4160
   2182c:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   21830:	0009883a 	mov	r4,zero
   21834:	0021a600 	call	21a60 <stopTimer>
}
   21838:	0001883a 	nop
   2183c:	e037883a 	mov	sp,fp
   21840:	dfc00117 	ldw	ra,4(sp)
   21844:	df000017 	ldw	fp,0(sp)
   21848:	dec00204 	addi	sp,sp,8
   2184c:	f800283a 	ret

00021850 <lcdWrite>:


void lcdWrite(uint8_t data){
   21850:	defffc04 	addi	sp,sp,-16
   21854:	dfc00315 	stw	ra,12(sp)
   21858:	df000215 	stw	fp,8(sp)
   2185c:	df000204 	addi	fp,sp,8
   21860:	2005883a 	mov	r2,r4
   21864:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   21868:	e03ffe0d 	sth	zero,-8(fp)
	lcdData |= data;
   2186c:	e0ffff03 	ldbu	r3,-4(fp)
   21870:	e0bffe0b 	ldhu	r2,-8(fp)
   21874:	1884b03a 	or	r2,r3,r2
   21878:	e0bffe0d 	sth	r2,-8(fp)
	lcdData |= 0xB << 8;
   2187c:	e0bffe0b 	ldhu	r2,-8(fp)
   21880:	1082c014 	ori	r2,r2,2816
   21884:	e0bffe0d 	sth	r2,-8(fp)

	lcdSema = 0;
   21888:	d0200205 	stb	zero,-32760(gp)

	setTimer(LCD_TIMER, 1000);
   2188c:	0140fa04 	movi	r5,1000
   21890:	0009883a 	mov	r4,zero
   21894:	0021ac00 	call	21ac0 <setTimer>
	startTimer(LCD_TIMER);
   21898:	0009883a 	mov	r4,zero
   2189c:	0021a000 	call	21a00 <startTimer>
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	while(lcdSema == 0){};
   218a0:	0001883a 	nop
   218a4:	d0a00203 	ldbu	r2,-32760(gp)
   218a8:	10803fcc 	andi	r2,r2,255
   218ac:	103ffd26 	beq	r2,zero,218a4 <__alt_data_end+0xfffe88a4>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   218b0:	e0fffe0b 	ldhu	r3,-8(fp)
   218b4:	00800134 	movhi	r2,4
   218b8:	10841004 	addi	r2,r2,4160
   218bc:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   218c0:	e0fffe0b 	ldhu	r3,-8(fp)
   218c4:	00bdffc4 	movi	r2,-2049
   218c8:	1884703a 	and	r2,r3,r2
   218cc:	e0bffe0d 	sth	r2,-8(fp)
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	lcdSema = 0;
   218d0:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   218d4:	0001883a 	nop
   218d8:	d0a00203 	ldbu	r2,-32760(gp)
   218dc:	10803fcc 	andi	r2,r2,255
   218e0:	103ffd26 	beq	r2,zero,218d8 <__alt_data_end+0xfffe88d8>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   218e4:	e0fffe0b 	ldhu	r3,-8(fp)
   218e8:	00800134 	movhi	r2,4
   218ec:	10841004 	addi	r2,r2,4160
   218f0:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   218f4:	0009883a 	mov	r4,zero
   218f8:	0021a600 	call	21a60 <stopTimer>
}
   218fc:	0001883a 	nop
   21900:	e037883a 	mov	sp,fp
   21904:	dfc00117 	ldw	ra,4(sp)
   21908:	df000017 	ldw	fp,0(sp)
   2190c:	dec00204 	addi	sp,sp,8
   21910:	f800283a 	ret

00021914 <lcdClear>:


void lcdClear(){
   21914:	defffe04 	addi	sp,sp,-8
   21918:	dfc00115 	stw	ra,4(sp)
   2191c:	df000015 	stw	fp,0(sp)
   21920:	d839883a 	mov	fp,sp
	lcdSema = 0;
   21924:	d0200205 	stb	zero,-32760(gp)

	setTimer(LCD_TIMER, 1520);
   21928:	01417c04 	movi	r5,1520
   2192c:	0009883a 	mov	r4,zero
   21930:	0021ac00 	call	21ac0 <setTimer>
	startTimer(LCD_TIMER);
   21934:	0009883a 	mov	r4,zero
   21938:	0021a000 	call	21a00 <startTimer>

	while(lcdSema == 0){};
   2193c:	0001883a 	nop
   21940:	d0a00203 	ldbu	r2,-32760(gp)
   21944:	10803fcc 	andi	r2,r2,255
   21948:	103ffd26 	beq	r2,zero,21940 <__alt_data_end+0xfffe8940>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x801);
   2194c:	00c20044 	movi	r3,2049
   21950:	00800134 	movhi	r2,4
   21954:	10841004 	addi	r2,r2,4160
   21958:	10c00035 	stwio	r3,0(r2)

	lcdSema = 0;
   2195c:	d0200205 	stb	zero,-32760(gp)
	while(lcdSema == 0){};
   21960:	0001883a 	nop
   21964:	d0a00203 	ldbu	r2,-32760(gp)
   21968:	10803fcc 	andi	r2,r2,255
   2196c:	103ffd26 	beq	r2,zero,21964 <__alt_data_end+0xfffe8964>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x001);
   21970:	00c00044 	movi	r3,1
   21974:	00800134 	movhi	r2,4
   21978:	10841004 	addi	r2,r2,4160
   2197c:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   21980:	0009883a 	mov	r4,zero
   21984:	0021a600 	call	21a60 <stopTimer>
}
   21988:	0001883a 	nop
   2198c:	e037883a 	mov	sp,fp
   21990:	dfc00117 	ldw	ra,4(sp)
   21994:	df000017 	ldw	fp,0(sp)
   21998:	dec00204 	addi	sp,sp,8
   2199c:	f800283a 	ret

000219a0 <initTimers>:


void initTimers(void){
   219a0:	defffd04 	addi	sp,sp,-12
   219a4:	dfc00215 	stw	ra,8(sp)
   219a8:	df000115 	stw	fp,4(sp)
   219ac:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(TIMER_GAME_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_GAME_IRQ, &handleGameTimer, NULL, NULL);
   219b0:	d8000015 	stw	zero,0(sp)
   219b4:	000f883a 	mov	r7,zero
   219b8:	018000b4 	movhi	r6,2
   219bc:	31850d04 	addi	r6,r6,5172
   219c0:	01400044 	movi	r5,1
   219c4:	0009883a 	mov	r4,zero
   219c8:	0022fa80 	call	22fa8 <alt_ic_isr_register>
	alt_ic_isr_register(TIMER_LCD_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_LCD_IRQ, &handleLCDTimer, NULL, NULL);
   219cc:	d8000015 	stw	zero,0(sp)
   219d0:	000f883a 	mov	r7,zero
   219d4:	018000b4 	movhi	r6,2
   219d8:	31851c04 	addi	r6,r6,5232
   219dc:	01400084 	movi	r5,2
   219e0:	0009883a 	mov	r4,zero
   219e4:	0022fa80 	call	22fa8 <alt_ic_isr_register>
}
   219e8:	0001883a 	nop
   219ec:	e037883a 	mov	sp,fp
   219f0:	dfc00117 	ldw	ra,4(sp)
   219f4:	df000017 	ldw	fp,0(sp)
   219f8:	dec00204 	addi	sp,sp,8
   219fc:	f800283a 	ret

00021a00 <startTimer>:


void startTimer(uint8_t timerNum){
   21a00:	defffe04 	addi	sp,sp,-8
   21a04:	df000115 	stw	fp,4(sp)
   21a08:	df000104 	addi	fp,sp,4
   21a0c:	2005883a 	mov	r2,r4
   21a10:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   21a14:	e0bfff03 	ldbu	r2,-4(fp)
   21a18:	1000051e 	bne	r2,zero,21a30 <startTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
   21a1c:	00c001c4 	movi	r3,7
   21a20:	00800134 	movhi	r2,4
   21a24:	10840104 	addi	r2,r2,4100
   21a28:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
}
   21a2c:	00000706 	br	21a4c <startTimer+0x4c>


void startTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
	else if(timerNum == GAME_TIMER)
   21a30:	e0bfff03 	ldbu	r2,-4(fp)
   21a34:	10800058 	cmpnei	r2,r2,1
   21a38:	1000041e 	bne	r2,zero,21a4c <startTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
   21a3c:	00c001c4 	movi	r3,7
   21a40:	00800134 	movhi	r2,4
   21a44:	10840904 	addi	r2,r2,4132
   21a48:	10c00035 	stwio	r3,0(r2)
}
   21a4c:	0001883a 	nop
   21a50:	e037883a 	mov	sp,fp
   21a54:	df000017 	ldw	fp,0(sp)
   21a58:	dec00104 	addi	sp,sp,4
   21a5c:	f800283a 	ret

00021a60 <stopTimer>:


void stopTimer(uint8_t timerNum){
   21a60:	defffe04 	addi	sp,sp,-8
   21a64:	df000115 	stw	fp,4(sp)
   21a68:	df000104 	addi	fp,sp,4
   21a6c:	2005883a 	mov	r2,r4
   21a70:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   21a74:	e0bfff03 	ldbu	r2,-4(fp)
   21a78:	1000051e 	bne	r2,zero,21a90 <stopTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
   21a7c:	00c002c4 	movi	r3,11
   21a80:	00800134 	movhi	r2,4
   21a84:	10840104 	addi	r2,r2,4100
   21a88:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);

}
   21a8c:	00000706 	br	21aac <stopTimer+0x4c>


void stopTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
	else if(timerNum == GAME_TIMER)
   21a90:	e0bfff03 	ldbu	r2,-4(fp)
   21a94:	10800058 	cmpnei	r2,r2,1
   21a98:	1000041e 	bne	r2,zero,21aac <stopTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);
   21a9c:	00c002c4 	movi	r3,11
   21aa0:	00800134 	movhi	r2,4
   21aa4:	10840904 	addi	r2,r2,4132
   21aa8:	10c00035 	stwio	r3,0(r2)

}
   21aac:	0001883a 	nop
   21ab0:	e037883a 	mov	sp,fp
   21ab4:	df000017 	ldw	fp,0(sp)
   21ab8:	dec00104 	addi	sp,sp,4
   21abc:	f800283a 	ret

00021ac0 <setTimer>:


void setTimer(uint8_t timerNum, uint32_t microsec){
   21ac0:	defffa04 	addi	sp,sp,-24
   21ac4:	dfc00515 	stw	ra,20(sp)
   21ac8:	df000415 	stw	fp,16(sp)
   21acc:	df000404 	addi	fp,sp,16
   21ad0:	2005883a 	mov	r2,r4
   21ad4:	e17fff15 	stw	r5,-4(fp)
   21ad8:	e0bffe05 	stb	r2,-8(fp)
	uint32_t cycles = millisToClock(microsec);
   21adc:	e13fff17 	ldw	r4,-4(fp)
   21ae0:	0021b6c0 	call	21b6c <millisToClock>
   21ae4:	e0bffc15 	stw	r2,-16(fp)

	uint16_t lower = (uint16_t)(cycles&0x0000FFFF);
   21ae8:	e0bffc17 	ldw	r2,-16(fp)
   21aec:	e0bffd0d 	sth	r2,-12(fp)
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);
   21af0:	e0bffc17 	ldw	r2,-16(fp)
   21af4:	1004d43a 	srli	r2,r2,16
   21af8:	e0bffd8d 	sth	r2,-10(fp)

	if(timerNum == LCD_TIMER){
   21afc:	e0bffe03 	ldbu	r2,-8(fp)
   21b00:	1000091e 	bne	r2,zero,21b28 <setTimer+0x68>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
   21b04:	e0fffd0b 	ldhu	r3,-12(fp)
   21b08:	00800134 	movhi	r2,4
   21b0c:	10840204 	addi	r2,r2,4104
   21b10:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
   21b14:	e0fffd8b 	ldhu	r3,-10(fp)
   21b18:	00800134 	movhi	r2,4
   21b1c:	10840304 	addi	r2,r2,4108
   21b20:	10c00035 	stwio	r3,0(r2)
	}else if(timerNum == GAME_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
	}
}
   21b24:	00000b06 	br	21b54 <setTimer+0x94>
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);

	if(timerNum == LCD_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
	}else if(timerNum == GAME_TIMER){
   21b28:	e0bffe03 	ldbu	r2,-8(fp)
   21b2c:	10800058 	cmpnei	r2,r2,1
   21b30:	1000081e 	bne	r2,zero,21b54 <setTimer+0x94>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
   21b34:	e0fffd0b 	ldhu	r3,-12(fp)
   21b38:	00800134 	movhi	r2,4
   21b3c:	10840a04 	addi	r2,r2,4136
   21b40:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
   21b44:	e0fffd8b 	ldhu	r3,-10(fp)
   21b48:	00800134 	movhi	r2,4
   21b4c:	10840b04 	addi	r2,r2,4140
   21b50:	10c00035 	stwio	r3,0(r2)
	}
}
   21b54:	0001883a 	nop
   21b58:	e037883a 	mov	sp,fp
   21b5c:	dfc00117 	ldw	ra,4(sp)
   21b60:	df000017 	ldw	fp,0(sp)
   21b64:	dec00204 	addi	sp,sp,8
   21b68:	f800283a 	ret

00021b6c <millisToClock>:


uint32_t millisToClock(uint32_t microsec){
   21b6c:	defffd04 	addi	sp,sp,-12
   21b70:	dfc00215 	stw	ra,8(sp)
   21b74:	df000115 	stw	fp,4(sp)
   21b78:	df000104 	addi	fp,sp,4
   21b7c:	e13fff15 	stw	r4,-4(fp)
	return CLOCK_FREQ / 1000000 * microsec;
   21b80:	01400c84 	movi	r5,50
   21b84:	e13fff17 	ldw	r4,-4(fp)
   21b88:	0021d540 	call	21d54 <__mulsi3>
}
   21b8c:	e037883a 	mov	sp,fp
   21b90:	dfc00117 	ldw	ra,4(sp)
   21b94:	df000017 	ldw	fp,0(sp)
   21b98:	dec00204 	addi	sp,sp,8
   21b9c:	f800283a 	ret

00021ba0 <__divsi3>:
   21ba0:	20001b16 	blt	r4,zero,21c10 <__divsi3+0x70>
   21ba4:	000f883a 	mov	r7,zero
   21ba8:	28001616 	blt	r5,zero,21c04 <__divsi3+0x64>
   21bac:	200d883a 	mov	r6,r4
   21bb0:	29001a2e 	bgeu	r5,r4,21c1c <__divsi3+0x7c>
   21bb4:	00800804 	movi	r2,32
   21bb8:	00c00044 	movi	r3,1
   21bbc:	00000106 	br	21bc4 <__divsi3+0x24>
   21bc0:	10000d26 	beq	r2,zero,21bf8 <__divsi3+0x58>
   21bc4:	294b883a 	add	r5,r5,r5
   21bc8:	10bfffc4 	addi	r2,r2,-1
   21bcc:	18c7883a 	add	r3,r3,r3
   21bd0:	293ffb36 	bltu	r5,r4,21bc0 <__alt_data_end+0xfffe8bc0>
   21bd4:	0005883a 	mov	r2,zero
   21bd8:	18000726 	beq	r3,zero,21bf8 <__divsi3+0x58>
   21bdc:	0005883a 	mov	r2,zero
   21be0:	31400236 	bltu	r6,r5,21bec <__divsi3+0x4c>
   21be4:	314dc83a 	sub	r6,r6,r5
   21be8:	10c4b03a 	or	r2,r2,r3
   21bec:	1806d07a 	srli	r3,r3,1
   21bf0:	280ad07a 	srli	r5,r5,1
   21bf4:	183ffa1e 	bne	r3,zero,21be0 <__alt_data_end+0xfffe8be0>
   21bf8:	38000126 	beq	r7,zero,21c00 <__divsi3+0x60>
   21bfc:	0085c83a 	sub	r2,zero,r2
   21c00:	f800283a 	ret
   21c04:	014bc83a 	sub	r5,zero,r5
   21c08:	39c0005c 	xori	r7,r7,1
   21c0c:	003fe706 	br	21bac <__alt_data_end+0xfffe8bac>
   21c10:	0109c83a 	sub	r4,zero,r4
   21c14:	01c00044 	movi	r7,1
   21c18:	003fe306 	br	21ba8 <__alt_data_end+0xfffe8ba8>
   21c1c:	00c00044 	movi	r3,1
   21c20:	003fee06 	br	21bdc <__alt_data_end+0xfffe8bdc>

00021c24 <__modsi3>:
   21c24:	20001716 	blt	r4,zero,21c84 <__modsi3+0x60>
   21c28:	000f883a 	mov	r7,zero
   21c2c:	2005883a 	mov	r2,r4
   21c30:	28001216 	blt	r5,zero,21c7c <__modsi3+0x58>
   21c34:	2900162e 	bgeu	r5,r4,21c90 <__modsi3+0x6c>
   21c38:	01800804 	movi	r6,32
   21c3c:	00c00044 	movi	r3,1
   21c40:	00000106 	br	21c48 <__modsi3+0x24>
   21c44:	30000a26 	beq	r6,zero,21c70 <__modsi3+0x4c>
   21c48:	294b883a 	add	r5,r5,r5
   21c4c:	31bfffc4 	addi	r6,r6,-1
   21c50:	18c7883a 	add	r3,r3,r3
   21c54:	293ffb36 	bltu	r5,r4,21c44 <__alt_data_end+0xfffe8c44>
   21c58:	18000526 	beq	r3,zero,21c70 <__modsi3+0x4c>
   21c5c:	1806d07a 	srli	r3,r3,1
   21c60:	11400136 	bltu	r2,r5,21c68 <__modsi3+0x44>
   21c64:	1145c83a 	sub	r2,r2,r5
   21c68:	280ad07a 	srli	r5,r5,1
   21c6c:	183ffb1e 	bne	r3,zero,21c5c <__alt_data_end+0xfffe8c5c>
   21c70:	38000126 	beq	r7,zero,21c78 <__modsi3+0x54>
   21c74:	0085c83a 	sub	r2,zero,r2
   21c78:	f800283a 	ret
   21c7c:	014bc83a 	sub	r5,zero,r5
   21c80:	003fec06 	br	21c34 <__alt_data_end+0xfffe8c34>
   21c84:	0109c83a 	sub	r4,zero,r4
   21c88:	01c00044 	movi	r7,1
   21c8c:	003fe706 	br	21c2c <__alt_data_end+0xfffe8c2c>
   21c90:	00c00044 	movi	r3,1
   21c94:	003ff106 	br	21c5c <__alt_data_end+0xfffe8c5c>

00021c98 <__udivsi3>:
   21c98:	200d883a 	mov	r6,r4
   21c9c:	2900152e 	bgeu	r5,r4,21cf4 <__udivsi3+0x5c>
   21ca0:	28001416 	blt	r5,zero,21cf4 <__udivsi3+0x5c>
   21ca4:	00800804 	movi	r2,32
   21ca8:	00c00044 	movi	r3,1
   21cac:	00000206 	br	21cb8 <__udivsi3+0x20>
   21cb0:	10000e26 	beq	r2,zero,21cec <__udivsi3+0x54>
   21cb4:	28000516 	blt	r5,zero,21ccc <__udivsi3+0x34>
   21cb8:	294b883a 	add	r5,r5,r5
   21cbc:	10bfffc4 	addi	r2,r2,-1
   21cc0:	18c7883a 	add	r3,r3,r3
   21cc4:	293ffa36 	bltu	r5,r4,21cb0 <__alt_data_end+0xfffe8cb0>
   21cc8:	18000826 	beq	r3,zero,21cec <__udivsi3+0x54>
   21ccc:	0005883a 	mov	r2,zero
   21cd0:	31400236 	bltu	r6,r5,21cdc <__udivsi3+0x44>
   21cd4:	314dc83a 	sub	r6,r6,r5
   21cd8:	10c4b03a 	or	r2,r2,r3
   21cdc:	1806d07a 	srli	r3,r3,1
   21ce0:	280ad07a 	srli	r5,r5,1
   21ce4:	183ffa1e 	bne	r3,zero,21cd0 <__alt_data_end+0xfffe8cd0>
   21ce8:	f800283a 	ret
   21cec:	0005883a 	mov	r2,zero
   21cf0:	f800283a 	ret
   21cf4:	00c00044 	movi	r3,1
   21cf8:	003ff406 	br	21ccc <__alt_data_end+0xfffe8ccc>

00021cfc <__umodsi3>:
   21cfc:	2005883a 	mov	r2,r4
   21d00:	2900122e 	bgeu	r5,r4,21d4c <__umodsi3+0x50>
   21d04:	28001116 	blt	r5,zero,21d4c <__umodsi3+0x50>
   21d08:	01800804 	movi	r6,32
   21d0c:	00c00044 	movi	r3,1
   21d10:	00000206 	br	21d1c <__umodsi3+0x20>
   21d14:	30000c26 	beq	r6,zero,21d48 <__umodsi3+0x4c>
   21d18:	28000516 	blt	r5,zero,21d30 <__umodsi3+0x34>
   21d1c:	294b883a 	add	r5,r5,r5
   21d20:	31bfffc4 	addi	r6,r6,-1
   21d24:	18c7883a 	add	r3,r3,r3
   21d28:	293ffa36 	bltu	r5,r4,21d14 <__alt_data_end+0xfffe8d14>
   21d2c:	18000626 	beq	r3,zero,21d48 <__umodsi3+0x4c>
   21d30:	1806d07a 	srli	r3,r3,1
   21d34:	11400136 	bltu	r2,r5,21d3c <__umodsi3+0x40>
   21d38:	1145c83a 	sub	r2,r2,r5
   21d3c:	280ad07a 	srli	r5,r5,1
   21d40:	183ffb1e 	bne	r3,zero,21d30 <__alt_data_end+0xfffe8d30>
   21d44:	f800283a 	ret
   21d48:	f800283a 	ret
   21d4c:	00c00044 	movi	r3,1
   21d50:	003ff706 	br	21d30 <__alt_data_end+0xfffe8d30>

00021d54 <__mulsi3>:
   21d54:	0005883a 	mov	r2,zero
   21d58:	20000726 	beq	r4,zero,21d78 <__mulsi3+0x24>
   21d5c:	20c0004c 	andi	r3,r4,1
   21d60:	2008d07a 	srli	r4,r4,1
   21d64:	18000126 	beq	r3,zero,21d6c <__mulsi3+0x18>
   21d68:	1145883a 	add	r2,r2,r5
   21d6c:	294b883a 	add	r5,r5,r5
   21d70:	203ffa1e 	bne	r4,zero,21d5c <__alt_data_end+0xfffe8d5c>
   21d74:	f800283a 	ret
   21d78:	f800283a 	ret

00021d7c <malloc>:
   21d7c:	008000f4 	movhi	r2,3
   21d80:	10a5e804 	addi	r2,r2,-26720
   21d84:	200b883a 	mov	r5,r4
   21d88:	11000017 	ldw	r4,0(r2)
   21d8c:	0021da41 	jmpi	21da4 <_malloc_r>

00021d90 <free>:
   21d90:	008000f4 	movhi	r2,3
   21d94:	10a5e804 	addi	r2,r2,-26720
   21d98:	200b883a 	mov	r5,r4
   21d9c:	11000017 	ldw	r4,0(r2)
   21da0:	002293c1 	jmpi	2293c <_free_r>

00021da4 <_malloc_r>:
   21da4:	defff504 	addi	sp,sp,-44
   21da8:	dc800315 	stw	r18,12(sp)
   21dac:	dfc00a15 	stw	ra,40(sp)
   21db0:	df000915 	stw	fp,36(sp)
   21db4:	ddc00815 	stw	r23,32(sp)
   21db8:	dd800715 	stw	r22,28(sp)
   21dbc:	dd400615 	stw	r21,24(sp)
   21dc0:	dd000515 	stw	r20,20(sp)
   21dc4:	dcc00415 	stw	r19,16(sp)
   21dc8:	dc400215 	stw	r17,8(sp)
   21dcc:	dc000115 	stw	r16,4(sp)
   21dd0:	288002c4 	addi	r2,r5,11
   21dd4:	00c00584 	movi	r3,22
   21dd8:	2025883a 	mov	r18,r4
   21ddc:	18807f2e 	bgeu	r3,r2,21fdc <_malloc_r+0x238>
   21de0:	047ffe04 	movi	r17,-8
   21de4:	1462703a 	and	r17,r2,r17
   21de8:	8800a316 	blt	r17,zero,22078 <_malloc_r+0x2d4>
   21dec:	8940a236 	bltu	r17,r5,22078 <_malloc_r+0x2d4>
   21df0:	00233b00 	call	233b0 <__malloc_lock>
   21df4:	00807dc4 	movi	r2,503
   21df8:	1441e92e 	bgeu	r2,r17,225a0 <_malloc_r+0x7fc>
   21dfc:	8804d27a 	srli	r2,r17,9
   21e00:	1000a126 	beq	r2,zero,22088 <_malloc_r+0x2e4>
   21e04:	00c00104 	movi	r3,4
   21e08:	18811e36 	bltu	r3,r2,22284 <_malloc_r+0x4e0>
   21e0c:	8804d1ba 	srli	r2,r17,6
   21e10:	12000e44 	addi	r8,r2,57
   21e14:	11c00e04 	addi	r7,r2,56
   21e18:	4209883a 	add	r4,r8,r8
   21e1c:	04c000b4 	movhi	r19,2
   21e20:	2109883a 	add	r4,r4,r4
   21e24:	9cdf5504 	addi	r19,r19,32084
   21e28:	2109883a 	add	r4,r4,r4
   21e2c:	9909883a 	add	r4,r19,r4
   21e30:	24000117 	ldw	r16,4(r4)
   21e34:	213ffe04 	addi	r4,r4,-8
   21e38:	24009726 	beq	r4,r16,22098 <_malloc_r+0x2f4>
   21e3c:	80800117 	ldw	r2,4(r16)
   21e40:	01bfff04 	movi	r6,-4
   21e44:	014003c4 	movi	r5,15
   21e48:	1184703a 	and	r2,r2,r6
   21e4c:	1447c83a 	sub	r3,r2,r17
   21e50:	28c00716 	blt	r5,r3,21e70 <_malloc_r+0xcc>
   21e54:	1800920e 	bge	r3,zero,220a0 <_malloc_r+0x2fc>
   21e58:	84000317 	ldw	r16,12(r16)
   21e5c:	24008e26 	beq	r4,r16,22098 <_malloc_r+0x2f4>
   21e60:	80800117 	ldw	r2,4(r16)
   21e64:	1184703a 	and	r2,r2,r6
   21e68:	1447c83a 	sub	r3,r2,r17
   21e6c:	28fff90e 	bge	r5,r3,21e54 <__alt_data_end+0xfffe8e54>
   21e70:	3809883a 	mov	r4,r7
   21e74:	018000b4 	movhi	r6,2
   21e78:	9c000417 	ldw	r16,16(r19)
   21e7c:	319f5504 	addi	r6,r6,32084
   21e80:	32000204 	addi	r8,r6,8
   21e84:	82013426 	beq	r16,r8,22358 <_malloc_r+0x5b4>
   21e88:	80c00117 	ldw	r3,4(r16)
   21e8c:	00bfff04 	movi	r2,-4
   21e90:	188e703a 	and	r7,r3,r2
   21e94:	3c45c83a 	sub	r2,r7,r17
   21e98:	00c003c4 	movi	r3,15
   21e9c:	18811f16 	blt	r3,r2,2231c <_malloc_r+0x578>
   21ea0:	32000515 	stw	r8,20(r6)
   21ea4:	32000415 	stw	r8,16(r6)
   21ea8:	10007f0e 	bge	r2,zero,220a8 <_malloc_r+0x304>
   21eac:	00807fc4 	movi	r2,511
   21eb0:	11c0fd36 	bltu	r2,r7,222a8 <_malloc_r+0x504>
   21eb4:	3806d0fa 	srli	r3,r7,3
   21eb8:	01c00044 	movi	r7,1
   21ebc:	30800117 	ldw	r2,4(r6)
   21ec0:	19400044 	addi	r5,r3,1
   21ec4:	294b883a 	add	r5,r5,r5
   21ec8:	1807d0ba 	srai	r3,r3,2
   21ecc:	294b883a 	add	r5,r5,r5
   21ed0:	294b883a 	add	r5,r5,r5
   21ed4:	298b883a 	add	r5,r5,r6
   21ed8:	38c6983a 	sll	r3,r7,r3
   21edc:	29c00017 	ldw	r7,0(r5)
   21ee0:	2a7ffe04 	addi	r9,r5,-8
   21ee4:	1886b03a 	or	r3,r3,r2
   21ee8:	82400315 	stw	r9,12(r16)
   21eec:	81c00215 	stw	r7,8(r16)
   21ef0:	30c00115 	stw	r3,4(r6)
   21ef4:	2c000015 	stw	r16,0(r5)
   21ef8:	3c000315 	stw	r16,12(r7)
   21efc:	2005d0ba 	srai	r2,r4,2
   21f00:	01400044 	movi	r5,1
   21f04:	288a983a 	sll	r5,r5,r2
   21f08:	19406f36 	bltu	r3,r5,220c8 <_malloc_r+0x324>
   21f0c:	28c4703a 	and	r2,r5,r3
   21f10:	10000a1e 	bne	r2,zero,21f3c <_malloc_r+0x198>
   21f14:	00bfff04 	movi	r2,-4
   21f18:	294b883a 	add	r5,r5,r5
   21f1c:	2088703a 	and	r4,r4,r2
   21f20:	28c4703a 	and	r2,r5,r3
   21f24:	21000104 	addi	r4,r4,4
   21f28:	1000041e 	bne	r2,zero,21f3c <_malloc_r+0x198>
   21f2c:	294b883a 	add	r5,r5,r5
   21f30:	28c4703a 	and	r2,r5,r3
   21f34:	21000104 	addi	r4,r4,4
   21f38:	103ffc26 	beq	r2,zero,21f2c <__alt_data_end+0xfffe8f2c>
   21f3c:	02bfff04 	movi	r10,-4
   21f40:	024003c4 	movi	r9,15
   21f44:	21800044 	addi	r6,r4,1
   21f48:	318d883a 	add	r6,r6,r6
   21f4c:	318d883a 	add	r6,r6,r6
   21f50:	318d883a 	add	r6,r6,r6
   21f54:	998d883a 	add	r6,r19,r6
   21f58:	333ffe04 	addi	r12,r6,-8
   21f5c:	2017883a 	mov	r11,r4
   21f60:	31800104 	addi	r6,r6,4
   21f64:	34000017 	ldw	r16,0(r6)
   21f68:	31fffd04 	addi	r7,r6,-12
   21f6c:	81c0041e 	bne	r16,r7,21f80 <_malloc_r+0x1dc>
   21f70:	0000fb06 	br	22360 <_malloc_r+0x5bc>
   21f74:	1801030e 	bge	r3,zero,22384 <_malloc_r+0x5e0>
   21f78:	84000317 	ldw	r16,12(r16)
   21f7c:	81c0f826 	beq	r16,r7,22360 <_malloc_r+0x5bc>
   21f80:	80800117 	ldw	r2,4(r16)
   21f84:	1284703a 	and	r2,r2,r10
   21f88:	1447c83a 	sub	r3,r2,r17
   21f8c:	48fff90e 	bge	r9,r3,21f74 <__alt_data_end+0xfffe8f74>
   21f90:	80800317 	ldw	r2,12(r16)
   21f94:	81000217 	ldw	r4,8(r16)
   21f98:	89400054 	ori	r5,r17,1
   21f9c:	81400115 	stw	r5,4(r16)
   21fa0:	20800315 	stw	r2,12(r4)
   21fa4:	11000215 	stw	r4,8(r2)
   21fa8:	8463883a 	add	r17,r16,r17
   21fac:	9c400515 	stw	r17,20(r19)
   21fb0:	9c400415 	stw	r17,16(r19)
   21fb4:	18800054 	ori	r2,r3,1
   21fb8:	88800115 	stw	r2,4(r17)
   21fbc:	8a000315 	stw	r8,12(r17)
   21fc0:	8a000215 	stw	r8,8(r17)
   21fc4:	88e3883a 	add	r17,r17,r3
   21fc8:	88c00015 	stw	r3,0(r17)
   21fcc:	9009883a 	mov	r4,r18
   21fd0:	00233d40 	call	233d4 <__malloc_unlock>
   21fd4:	80800204 	addi	r2,r16,8
   21fd8:	00001b06 	br	22048 <_malloc_r+0x2a4>
   21fdc:	04400404 	movi	r17,16
   21fe0:	89402536 	bltu	r17,r5,22078 <_malloc_r+0x2d4>
   21fe4:	00233b00 	call	233b0 <__malloc_lock>
   21fe8:	00800184 	movi	r2,6
   21fec:	01000084 	movi	r4,2
   21ff0:	04c000b4 	movhi	r19,2
   21ff4:	1085883a 	add	r2,r2,r2
   21ff8:	9cdf5504 	addi	r19,r19,32084
   21ffc:	1085883a 	add	r2,r2,r2
   22000:	9885883a 	add	r2,r19,r2
   22004:	14000117 	ldw	r16,4(r2)
   22008:	10fffe04 	addi	r3,r2,-8
   2200c:	80c0d926 	beq	r16,r3,22374 <_malloc_r+0x5d0>
   22010:	80c00117 	ldw	r3,4(r16)
   22014:	81000317 	ldw	r4,12(r16)
   22018:	00bfff04 	movi	r2,-4
   2201c:	1884703a 	and	r2,r3,r2
   22020:	81400217 	ldw	r5,8(r16)
   22024:	8085883a 	add	r2,r16,r2
   22028:	10c00117 	ldw	r3,4(r2)
   2202c:	29000315 	stw	r4,12(r5)
   22030:	21400215 	stw	r5,8(r4)
   22034:	18c00054 	ori	r3,r3,1
   22038:	10c00115 	stw	r3,4(r2)
   2203c:	9009883a 	mov	r4,r18
   22040:	00233d40 	call	233d4 <__malloc_unlock>
   22044:	80800204 	addi	r2,r16,8
   22048:	dfc00a17 	ldw	ra,40(sp)
   2204c:	df000917 	ldw	fp,36(sp)
   22050:	ddc00817 	ldw	r23,32(sp)
   22054:	dd800717 	ldw	r22,28(sp)
   22058:	dd400617 	ldw	r21,24(sp)
   2205c:	dd000517 	ldw	r20,20(sp)
   22060:	dcc00417 	ldw	r19,16(sp)
   22064:	dc800317 	ldw	r18,12(sp)
   22068:	dc400217 	ldw	r17,8(sp)
   2206c:	dc000117 	ldw	r16,4(sp)
   22070:	dec00b04 	addi	sp,sp,44
   22074:	f800283a 	ret
   22078:	00800304 	movi	r2,12
   2207c:	90800015 	stw	r2,0(r18)
   22080:	0005883a 	mov	r2,zero
   22084:	003ff006 	br	22048 <__alt_data_end+0xfffe9048>
   22088:	01002004 	movi	r4,128
   2208c:	02001004 	movi	r8,64
   22090:	01c00fc4 	movi	r7,63
   22094:	003f6106 	br	21e1c <__alt_data_end+0xfffe8e1c>
   22098:	4009883a 	mov	r4,r8
   2209c:	003f7506 	br	21e74 <__alt_data_end+0xfffe8e74>
   220a0:	81000317 	ldw	r4,12(r16)
   220a4:	003fde06 	br	22020 <__alt_data_end+0xfffe9020>
   220a8:	81c5883a 	add	r2,r16,r7
   220ac:	11400117 	ldw	r5,4(r2)
   220b0:	9009883a 	mov	r4,r18
   220b4:	29400054 	ori	r5,r5,1
   220b8:	11400115 	stw	r5,4(r2)
   220bc:	00233d40 	call	233d4 <__malloc_unlock>
   220c0:	80800204 	addi	r2,r16,8
   220c4:	003fe006 	br	22048 <__alt_data_end+0xfffe9048>
   220c8:	9c000217 	ldw	r16,8(r19)
   220cc:	00bfff04 	movi	r2,-4
   220d0:	85800117 	ldw	r22,4(r16)
   220d4:	b0ac703a 	and	r22,r22,r2
   220d8:	b4400336 	bltu	r22,r17,220e8 <_malloc_r+0x344>
   220dc:	b445c83a 	sub	r2,r22,r17
   220e0:	00c003c4 	movi	r3,15
   220e4:	18805d16 	blt	r3,r2,2225c <_malloc_r+0x4b8>
   220e8:	05c000f4 	movhi	r23,3
   220ec:	008000f4 	movhi	r2,3
   220f0:	10aca404 	addi	r2,r2,-19824
   220f4:	bde5e504 	addi	r23,r23,-26732
   220f8:	15400017 	ldw	r21,0(r2)
   220fc:	b8c00017 	ldw	r3,0(r23)
   22100:	00bfffc4 	movi	r2,-1
   22104:	858d883a 	add	r6,r16,r22
   22108:	8d6b883a 	add	r21,r17,r21
   2210c:	1880ea26 	beq	r3,r2,224b8 <_malloc_r+0x714>
   22110:	ad4403c4 	addi	r21,r21,4111
   22114:	00bc0004 	movi	r2,-4096
   22118:	a8aa703a 	and	r21,r21,r2
   2211c:	a80b883a 	mov	r5,r21
   22120:	9009883a 	mov	r4,r18
   22124:	d9800015 	stw	r6,0(sp)
   22128:	00227740 	call	22774 <_sbrk_r>
   2212c:	1029883a 	mov	r20,r2
   22130:	00bfffc4 	movi	r2,-1
   22134:	d9800017 	ldw	r6,0(sp)
   22138:	a080e826 	beq	r20,r2,224dc <_malloc_r+0x738>
   2213c:	a180a636 	bltu	r20,r6,223d8 <_malloc_r+0x634>
   22140:	070000f4 	movhi	fp,3
   22144:	e72cb104 	addi	fp,fp,-19772
   22148:	e0800017 	ldw	r2,0(fp)
   2214c:	a887883a 	add	r3,r21,r2
   22150:	e0c00015 	stw	r3,0(fp)
   22154:	3500e626 	beq	r6,r20,224f0 <_malloc_r+0x74c>
   22158:	b9000017 	ldw	r4,0(r23)
   2215c:	00bfffc4 	movi	r2,-1
   22160:	2080ee26 	beq	r4,r2,2251c <_malloc_r+0x778>
   22164:	a185c83a 	sub	r2,r20,r6
   22168:	10c5883a 	add	r2,r2,r3
   2216c:	e0800015 	stw	r2,0(fp)
   22170:	a0c001cc 	andi	r3,r20,7
   22174:	1800bc26 	beq	r3,zero,22468 <_malloc_r+0x6c4>
   22178:	a0e9c83a 	sub	r20,r20,r3
   2217c:	00840204 	movi	r2,4104
   22180:	a5000204 	addi	r20,r20,8
   22184:	10c7c83a 	sub	r3,r2,r3
   22188:	a545883a 	add	r2,r20,r21
   2218c:	1083ffcc 	andi	r2,r2,4095
   22190:	18abc83a 	sub	r21,r3,r2
   22194:	a80b883a 	mov	r5,r21
   22198:	9009883a 	mov	r4,r18
   2219c:	00227740 	call	22774 <_sbrk_r>
   221a0:	00ffffc4 	movi	r3,-1
   221a4:	10c0e126 	beq	r2,r3,2252c <_malloc_r+0x788>
   221a8:	1505c83a 	sub	r2,r2,r20
   221ac:	1545883a 	add	r2,r2,r21
   221b0:	10800054 	ori	r2,r2,1
   221b4:	e0c00017 	ldw	r3,0(fp)
   221b8:	9d000215 	stw	r20,8(r19)
   221bc:	a0800115 	stw	r2,4(r20)
   221c0:	a8c7883a 	add	r3,r21,r3
   221c4:	e0c00015 	stw	r3,0(fp)
   221c8:	84c00e26 	beq	r16,r19,22204 <_malloc_r+0x460>
   221cc:	018003c4 	movi	r6,15
   221d0:	3580a72e 	bgeu	r6,r22,22470 <_malloc_r+0x6cc>
   221d4:	81400117 	ldw	r5,4(r16)
   221d8:	013ffe04 	movi	r4,-8
   221dc:	b0bffd04 	addi	r2,r22,-12
   221e0:	1104703a 	and	r2,r2,r4
   221e4:	2900004c 	andi	r4,r5,1
   221e8:	2088b03a 	or	r4,r4,r2
   221ec:	81000115 	stw	r4,4(r16)
   221f0:	01400144 	movi	r5,5
   221f4:	8089883a 	add	r4,r16,r2
   221f8:	21400115 	stw	r5,4(r4)
   221fc:	21400215 	stw	r5,8(r4)
   22200:	3080cd36 	bltu	r6,r2,22538 <_malloc_r+0x794>
   22204:	008000f4 	movhi	r2,3
   22208:	10aca304 	addi	r2,r2,-19828
   2220c:	11000017 	ldw	r4,0(r2)
   22210:	20c0012e 	bgeu	r4,r3,22218 <_malloc_r+0x474>
   22214:	10c00015 	stw	r3,0(r2)
   22218:	008000f4 	movhi	r2,3
   2221c:	10aca204 	addi	r2,r2,-19832
   22220:	11000017 	ldw	r4,0(r2)
   22224:	9c000217 	ldw	r16,8(r19)
   22228:	20c0012e 	bgeu	r4,r3,22230 <_malloc_r+0x48c>
   2222c:	10c00015 	stw	r3,0(r2)
   22230:	80c00117 	ldw	r3,4(r16)
   22234:	00bfff04 	movi	r2,-4
   22238:	1886703a 	and	r3,r3,r2
   2223c:	1c45c83a 	sub	r2,r3,r17
   22240:	1c400236 	bltu	r3,r17,2224c <_malloc_r+0x4a8>
   22244:	00c003c4 	movi	r3,15
   22248:	18800416 	blt	r3,r2,2225c <_malloc_r+0x4b8>
   2224c:	9009883a 	mov	r4,r18
   22250:	00233d40 	call	233d4 <__malloc_unlock>
   22254:	0005883a 	mov	r2,zero
   22258:	003f7b06 	br	22048 <__alt_data_end+0xfffe9048>
   2225c:	88c00054 	ori	r3,r17,1
   22260:	80c00115 	stw	r3,4(r16)
   22264:	8463883a 	add	r17,r16,r17
   22268:	10800054 	ori	r2,r2,1
   2226c:	9c400215 	stw	r17,8(r19)
   22270:	88800115 	stw	r2,4(r17)
   22274:	9009883a 	mov	r4,r18
   22278:	00233d40 	call	233d4 <__malloc_unlock>
   2227c:	80800204 	addi	r2,r16,8
   22280:	003f7106 	br	22048 <__alt_data_end+0xfffe9048>
   22284:	00c00504 	movi	r3,20
   22288:	18804a2e 	bgeu	r3,r2,223b4 <_malloc_r+0x610>
   2228c:	00c01504 	movi	r3,84
   22290:	18806e36 	bltu	r3,r2,2244c <_malloc_r+0x6a8>
   22294:	8804d33a 	srli	r2,r17,12
   22298:	12001bc4 	addi	r8,r2,111
   2229c:	11c01b84 	addi	r7,r2,110
   222a0:	4209883a 	add	r4,r8,r8
   222a4:	003edd06 	br	21e1c <__alt_data_end+0xfffe8e1c>
   222a8:	3804d27a 	srli	r2,r7,9
   222ac:	00c00104 	movi	r3,4
   222b0:	1880442e 	bgeu	r3,r2,223c4 <_malloc_r+0x620>
   222b4:	00c00504 	movi	r3,20
   222b8:	18808136 	bltu	r3,r2,224c0 <_malloc_r+0x71c>
   222bc:	11401704 	addi	r5,r2,92
   222c0:	10c016c4 	addi	r3,r2,91
   222c4:	294b883a 	add	r5,r5,r5
   222c8:	294b883a 	add	r5,r5,r5
   222cc:	294b883a 	add	r5,r5,r5
   222d0:	994b883a 	add	r5,r19,r5
   222d4:	28800017 	ldw	r2,0(r5)
   222d8:	018000b4 	movhi	r6,2
   222dc:	297ffe04 	addi	r5,r5,-8
   222e0:	319f5504 	addi	r6,r6,32084
   222e4:	28806526 	beq	r5,r2,2247c <_malloc_r+0x6d8>
   222e8:	01bfff04 	movi	r6,-4
   222ec:	10c00117 	ldw	r3,4(r2)
   222f0:	1986703a 	and	r3,r3,r6
   222f4:	38c0022e 	bgeu	r7,r3,22300 <_malloc_r+0x55c>
   222f8:	10800217 	ldw	r2,8(r2)
   222fc:	28bffb1e 	bne	r5,r2,222ec <__alt_data_end+0xfffe92ec>
   22300:	11400317 	ldw	r5,12(r2)
   22304:	98c00117 	ldw	r3,4(r19)
   22308:	81400315 	stw	r5,12(r16)
   2230c:	80800215 	stw	r2,8(r16)
   22310:	2c000215 	stw	r16,8(r5)
   22314:	14000315 	stw	r16,12(r2)
   22318:	003ef806 	br	21efc <__alt_data_end+0xfffe8efc>
   2231c:	88c00054 	ori	r3,r17,1
   22320:	80c00115 	stw	r3,4(r16)
   22324:	8463883a 	add	r17,r16,r17
   22328:	34400515 	stw	r17,20(r6)
   2232c:	34400415 	stw	r17,16(r6)
   22330:	10c00054 	ori	r3,r2,1
   22334:	8a000315 	stw	r8,12(r17)
   22338:	8a000215 	stw	r8,8(r17)
   2233c:	88c00115 	stw	r3,4(r17)
   22340:	88a3883a 	add	r17,r17,r2
   22344:	88800015 	stw	r2,0(r17)
   22348:	9009883a 	mov	r4,r18
   2234c:	00233d40 	call	233d4 <__malloc_unlock>
   22350:	80800204 	addi	r2,r16,8
   22354:	003f3c06 	br	22048 <__alt_data_end+0xfffe9048>
   22358:	30c00117 	ldw	r3,4(r6)
   2235c:	003ee706 	br	21efc <__alt_data_end+0xfffe8efc>
   22360:	5ac00044 	addi	r11,r11,1
   22364:	588000cc 	andi	r2,r11,3
   22368:	31800204 	addi	r6,r6,8
   2236c:	103efd1e 	bne	r2,zero,21f64 <__alt_data_end+0xfffe8f64>
   22370:	00002406 	br	22404 <_malloc_r+0x660>
   22374:	14000317 	ldw	r16,12(r2)
   22378:	143f251e 	bne	r2,r16,22010 <__alt_data_end+0xfffe9010>
   2237c:	21000084 	addi	r4,r4,2
   22380:	003ebc06 	br	21e74 <__alt_data_end+0xfffe8e74>
   22384:	8085883a 	add	r2,r16,r2
   22388:	10c00117 	ldw	r3,4(r2)
   2238c:	81000317 	ldw	r4,12(r16)
   22390:	81400217 	ldw	r5,8(r16)
   22394:	18c00054 	ori	r3,r3,1
   22398:	10c00115 	stw	r3,4(r2)
   2239c:	29000315 	stw	r4,12(r5)
   223a0:	21400215 	stw	r5,8(r4)
   223a4:	9009883a 	mov	r4,r18
   223a8:	00233d40 	call	233d4 <__malloc_unlock>
   223ac:	80800204 	addi	r2,r16,8
   223b0:	003f2506 	br	22048 <__alt_data_end+0xfffe9048>
   223b4:	12001704 	addi	r8,r2,92
   223b8:	11c016c4 	addi	r7,r2,91
   223bc:	4209883a 	add	r4,r8,r8
   223c0:	003e9606 	br	21e1c <__alt_data_end+0xfffe8e1c>
   223c4:	3804d1ba 	srli	r2,r7,6
   223c8:	11400e44 	addi	r5,r2,57
   223cc:	10c00e04 	addi	r3,r2,56
   223d0:	294b883a 	add	r5,r5,r5
   223d4:	003fbc06 	br	222c8 <__alt_data_end+0xfffe92c8>
   223d8:	84ff5926 	beq	r16,r19,22140 <__alt_data_end+0xfffe9140>
   223dc:	008000b4 	movhi	r2,2
   223e0:	109f5504 	addi	r2,r2,32084
   223e4:	14000217 	ldw	r16,8(r2)
   223e8:	00bfff04 	movi	r2,-4
   223ec:	80c00117 	ldw	r3,4(r16)
   223f0:	1886703a 	and	r3,r3,r2
   223f4:	003f9106 	br	2223c <__alt_data_end+0xfffe923c>
   223f8:	60800217 	ldw	r2,8(r12)
   223fc:	213fffc4 	addi	r4,r4,-1
   22400:	1300651e 	bne	r2,r12,22598 <_malloc_r+0x7f4>
   22404:	208000cc 	andi	r2,r4,3
   22408:	633ffe04 	addi	r12,r12,-8
   2240c:	103ffa1e 	bne	r2,zero,223f8 <__alt_data_end+0xfffe93f8>
   22410:	98800117 	ldw	r2,4(r19)
   22414:	0146303a 	nor	r3,zero,r5
   22418:	1884703a 	and	r2,r3,r2
   2241c:	98800115 	stw	r2,4(r19)
   22420:	294b883a 	add	r5,r5,r5
   22424:	117f2836 	bltu	r2,r5,220c8 <__alt_data_end+0xfffe90c8>
   22428:	283f2726 	beq	r5,zero,220c8 <__alt_data_end+0xfffe90c8>
   2242c:	2886703a 	and	r3,r5,r2
   22430:	5809883a 	mov	r4,r11
   22434:	183ec31e 	bne	r3,zero,21f44 <__alt_data_end+0xfffe8f44>
   22438:	294b883a 	add	r5,r5,r5
   2243c:	2886703a 	and	r3,r5,r2
   22440:	21000104 	addi	r4,r4,4
   22444:	183ffc26 	beq	r3,zero,22438 <__alt_data_end+0xfffe9438>
   22448:	003ebe06 	br	21f44 <__alt_data_end+0xfffe8f44>
   2244c:	00c05504 	movi	r3,340
   22450:	18801236 	bltu	r3,r2,2249c <_malloc_r+0x6f8>
   22454:	8804d3fa 	srli	r2,r17,15
   22458:	12001e04 	addi	r8,r2,120
   2245c:	11c01dc4 	addi	r7,r2,119
   22460:	4209883a 	add	r4,r8,r8
   22464:	003e6d06 	br	21e1c <__alt_data_end+0xfffe8e1c>
   22468:	00c40004 	movi	r3,4096
   2246c:	003f4606 	br	22188 <__alt_data_end+0xfffe9188>
   22470:	00800044 	movi	r2,1
   22474:	a0800115 	stw	r2,4(r20)
   22478:	003f7406 	br	2224c <__alt_data_end+0xfffe924c>
   2247c:	1805d0ba 	srai	r2,r3,2
   22480:	01c00044 	movi	r7,1
   22484:	30c00117 	ldw	r3,4(r6)
   22488:	388e983a 	sll	r7,r7,r2
   2248c:	2805883a 	mov	r2,r5
   22490:	38c6b03a 	or	r3,r7,r3
   22494:	30c00115 	stw	r3,4(r6)
   22498:	003f9b06 	br	22308 <__alt_data_end+0xfffe9308>
   2249c:	00c15504 	movi	r3,1364
   224a0:	18801a36 	bltu	r3,r2,2250c <_malloc_r+0x768>
   224a4:	8804d4ba 	srli	r2,r17,18
   224a8:	12001f44 	addi	r8,r2,125
   224ac:	11c01f04 	addi	r7,r2,124
   224b0:	4209883a 	add	r4,r8,r8
   224b4:	003e5906 	br	21e1c <__alt_data_end+0xfffe8e1c>
   224b8:	ad400404 	addi	r21,r21,16
   224bc:	003f1706 	br	2211c <__alt_data_end+0xfffe911c>
   224c0:	00c01504 	movi	r3,84
   224c4:	18802336 	bltu	r3,r2,22554 <_malloc_r+0x7b0>
   224c8:	3804d33a 	srli	r2,r7,12
   224cc:	11401bc4 	addi	r5,r2,111
   224d0:	10c01b84 	addi	r3,r2,110
   224d4:	294b883a 	add	r5,r5,r5
   224d8:	003f7b06 	br	222c8 <__alt_data_end+0xfffe92c8>
   224dc:	9c000217 	ldw	r16,8(r19)
   224e0:	00bfff04 	movi	r2,-4
   224e4:	80c00117 	ldw	r3,4(r16)
   224e8:	1886703a 	and	r3,r3,r2
   224ec:	003f5306 	br	2223c <__alt_data_end+0xfffe923c>
   224f0:	3083ffcc 	andi	r2,r6,4095
   224f4:	103f181e 	bne	r2,zero,22158 <__alt_data_end+0xfffe9158>
   224f8:	99000217 	ldw	r4,8(r19)
   224fc:	b545883a 	add	r2,r22,r21
   22500:	10800054 	ori	r2,r2,1
   22504:	20800115 	stw	r2,4(r4)
   22508:	003f3e06 	br	22204 <__alt_data_end+0xfffe9204>
   2250c:	01003f84 	movi	r4,254
   22510:	02001fc4 	movi	r8,127
   22514:	01c01f84 	movi	r7,126
   22518:	003e4006 	br	21e1c <__alt_data_end+0xfffe8e1c>
   2251c:	008000f4 	movhi	r2,3
   22520:	10a5e504 	addi	r2,r2,-26732
   22524:	15000015 	stw	r20,0(r2)
   22528:	003f1106 	br	22170 <__alt_data_end+0xfffe9170>
   2252c:	00800044 	movi	r2,1
   22530:	002b883a 	mov	r21,zero
   22534:	003f1f06 	br	221b4 <__alt_data_end+0xfffe91b4>
   22538:	81400204 	addi	r5,r16,8
   2253c:	9009883a 	mov	r4,r18
   22540:	002293c0 	call	2293c <_free_r>
   22544:	008000f4 	movhi	r2,3
   22548:	10acb104 	addi	r2,r2,-19772
   2254c:	10c00017 	ldw	r3,0(r2)
   22550:	003f2c06 	br	22204 <__alt_data_end+0xfffe9204>
   22554:	00c05504 	movi	r3,340
   22558:	18800536 	bltu	r3,r2,22570 <_malloc_r+0x7cc>
   2255c:	3804d3fa 	srli	r2,r7,15
   22560:	11401e04 	addi	r5,r2,120
   22564:	10c01dc4 	addi	r3,r2,119
   22568:	294b883a 	add	r5,r5,r5
   2256c:	003f5606 	br	222c8 <__alt_data_end+0xfffe92c8>
   22570:	00c15504 	movi	r3,1364
   22574:	18800536 	bltu	r3,r2,2258c <_malloc_r+0x7e8>
   22578:	3804d4ba 	srli	r2,r7,18
   2257c:	11401f44 	addi	r5,r2,125
   22580:	10c01f04 	addi	r3,r2,124
   22584:	294b883a 	add	r5,r5,r5
   22588:	003f4f06 	br	222c8 <__alt_data_end+0xfffe92c8>
   2258c:	01403f84 	movi	r5,254
   22590:	00c01f84 	movi	r3,126
   22594:	003f4c06 	br	222c8 <__alt_data_end+0xfffe92c8>
   22598:	98800117 	ldw	r2,4(r19)
   2259c:	003fa006 	br	22420 <__alt_data_end+0xfffe9420>
   225a0:	8808d0fa 	srli	r4,r17,3
   225a4:	20800044 	addi	r2,r4,1
   225a8:	1085883a 	add	r2,r2,r2
   225ac:	003e9006 	br	21ff0 <__alt_data_end+0xfffe8ff0>

000225b0 <memcpy>:
   225b0:	defffd04 	addi	sp,sp,-12
   225b4:	dfc00215 	stw	ra,8(sp)
   225b8:	dc400115 	stw	r17,4(sp)
   225bc:	dc000015 	stw	r16,0(sp)
   225c0:	00c003c4 	movi	r3,15
   225c4:	2005883a 	mov	r2,r4
   225c8:	1980452e 	bgeu	r3,r6,226e0 <memcpy+0x130>
   225cc:	2906b03a 	or	r3,r5,r4
   225d0:	18c000cc 	andi	r3,r3,3
   225d4:	1800441e 	bne	r3,zero,226e8 <memcpy+0x138>
   225d8:	347ffc04 	addi	r17,r6,-16
   225dc:	8822d13a 	srli	r17,r17,4
   225e0:	28c00104 	addi	r3,r5,4
   225e4:	23400104 	addi	r13,r4,4
   225e8:	8820913a 	slli	r16,r17,4
   225ec:	2b000204 	addi	r12,r5,8
   225f0:	22c00204 	addi	r11,r4,8
   225f4:	84000504 	addi	r16,r16,20
   225f8:	2a800304 	addi	r10,r5,12
   225fc:	22400304 	addi	r9,r4,12
   22600:	2c21883a 	add	r16,r5,r16
   22604:	2811883a 	mov	r8,r5
   22608:	200f883a 	mov	r7,r4
   2260c:	41000017 	ldw	r4,0(r8)
   22610:	1fc00017 	ldw	ra,0(r3)
   22614:	63c00017 	ldw	r15,0(r12)
   22618:	39000015 	stw	r4,0(r7)
   2261c:	53800017 	ldw	r14,0(r10)
   22620:	6fc00015 	stw	ra,0(r13)
   22624:	5bc00015 	stw	r15,0(r11)
   22628:	4b800015 	stw	r14,0(r9)
   2262c:	18c00404 	addi	r3,r3,16
   22630:	39c00404 	addi	r7,r7,16
   22634:	42000404 	addi	r8,r8,16
   22638:	6b400404 	addi	r13,r13,16
   2263c:	63000404 	addi	r12,r12,16
   22640:	5ac00404 	addi	r11,r11,16
   22644:	52800404 	addi	r10,r10,16
   22648:	4a400404 	addi	r9,r9,16
   2264c:	1c3fef1e 	bne	r3,r16,2260c <__alt_data_end+0xfffe960c>
   22650:	89c00044 	addi	r7,r17,1
   22654:	380e913a 	slli	r7,r7,4
   22658:	310003cc 	andi	r4,r6,15
   2265c:	02c000c4 	movi	r11,3
   22660:	11c7883a 	add	r3,r2,r7
   22664:	29cb883a 	add	r5,r5,r7
   22668:	5900212e 	bgeu	r11,r4,226f0 <memcpy+0x140>
   2266c:	1813883a 	mov	r9,r3
   22670:	2811883a 	mov	r8,r5
   22674:	200f883a 	mov	r7,r4
   22678:	42800017 	ldw	r10,0(r8)
   2267c:	4a400104 	addi	r9,r9,4
   22680:	39ffff04 	addi	r7,r7,-4
   22684:	4abfff15 	stw	r10,-4(r9)
   22688:	42000104 	addi	r8,r8,4
   2268c:	59fffa36 	bltu	r11,r7,22678 <__alt_data_end+0xfffe9678>
   22690:	213fff04 	addi	r4,r4,-4
   22694:	2008d0ba 	srli	r4,r4,2
   22698:	318000cc 	andi	r6,r6,3
   2269c:	21000044 	addi	r4,r4,1
   226a0:	2109883a 	add	r4,r4,r4
   226a4:	2109883a 	add	r4,r4,r4
   226a8:	1907883a 	add	r3,r3,r4
   226ac:	290b883a 	add	r5,r5,r4
   226b0:	30000626 	beq	r6,zero,226cc <memcpy+0x11c>
   226b4:	198d883a 	add	r6,r3,r6
   226b8:	29c00003 	ldbu	r7,0(r5)
   226bc:	18c00044 	addi	r3,r3,1
   226c0:	29400044 	addi	r5,r5,1
   226c4:	19ffffc5 	stb	r7,-1(r3)
   226c8:	19bffb1e 	bne	r3,r6,226b8 <__alt_data_end+0xfffe96b8>
   226cc:	dfc00217 	ldw	ra,8(sp)
   226d0:	dc400117 	ldw	r17,4(sp)
   226d4:	dc000017 	ldw	r16,0(sp)
   226d8:	dec00304 	addi	sp,sp,12
   226dc:	f800283a 	ret
   226e0:	2007883a 	mov	r3,r4
   226e4:	003ff206 	br	226b0 <__alt_data_end+0xfffe96b0>
   226e8:	2007883a 	mov	r3,r4
   226ec:	003ff106 	br	226b4 <__alt_data_end+0xfffe96b4>
   226f0:	200d883a 	mov	r6,r4
   226f4:	003fee06 	br	226b0 <__alt_data_end+0xfffe96b0>

000226f8 <srand>:
   226f8:	008000f4 	movhi	r2,3
   226fc:	10a5e804 	addi	r2,r2,-26720
   22700:	10800017 	ldw	r2,0(r2)
   22704:	11002915 	stw	r4,164(r2)
   22708:	10002a15 	stw	zero,168(r2)
   2270c:	f800283a 	ret

00022710 <rand>:
   22710:	008000f4 	movhi	r2,3
   22714:	defffe04 	addi	sp,sp,-8
   22718:	10a5e804 	addi	r2,r2,-26720
   2271c:	dc000015 	stw	r16,0(sp)
   22720:	14000017 	ldw	r16,0(r2)
   22724:	dfc00115 	stw	ra,4(sp)
   22728:	01932574 	movhi	r6,19605
   2272c:	81002917 	ldw	r4,164(r16)
   22730:	81402a17 	ldw	r5,168(r16)
   22734:	01d614b4 	movhi	r7,22610
   22738:	319fcb44 	addi	r6,r6,32557
   2273c:	39fd0b44 	addi	r7,r7,-3027
   22740:	0022ca80 	call	22ca8 <__muldi3>
   22744:	11000044 	addi	r4,r2,1
   22748:	2085803a 	cmpltu	r2,r4,r2
   2274c:	10c7883a 	add	r3,r2,r3
   22750:	00a00034 	movhi	r2,32768
   22754:	10bfffc4 	addi	r2,r2,-1
   22758:	1884703a 	and	r2,r3,r2
   2275c:	81002915 	stw	r4,164(r16)
   22760:	80c02a15 	stw	r3,168(r16)
   22764:	dfc00117 	ldw	ra,4(sp)
   22768:	dc000017 	ldw	r16,0(sp)
   2276c:	dec00204 	addi	sp,sp,8
   22770:	f800283a 	ret

00022774 <_sbrk_r>:
   22774:	defffd04 	addi	sp,sp,-12
   22778:	dc000015 	stw	r16,0(sp)
   2277c:	040000f4 	movhi	r16,3
   22780:	dc400115 	stw	r17,4(sp)
   22784:	842ca504 	addi	r16,r16,-19820
   22788:	2023883a 	mov	r17,r4
   2278c:	2809883a 	mov	r4,r5
   22790:	dfc00215 	stw	ra,8(sp)
   22794:	80000015 	stw	zero,0(r16)
   22798:	00234340 	call	23434 <sbrk>
   2279c:	00ffffc4 	movi	r3,-1
   227a0:	10c00526 	beq	r2,r3,227b8 <_sbrk_r+0x44>
   227a4:	dfc00217 	ldw	ra,8(sp)
   227a8:	dc400117 	ldw	r17,4(sp)
   227ac:	dc000017 	ldw	r16,0(sp)
   227b0:	dec00304 	addi	sp,sp,12
   227b4:	f800283a 	ret
   227b8:	80c00017 	ldw	r3,0(r16)
   227bc:	183ff926 	beq	r3,zero,227a4 <__alt_data_end+0xfffe97a4>
   227c0:	88c00015 	stw	r3,0(r17)
   227c4:	003ff706 	br	227a4 <__alt_data_end+0xfffe97a4>

000227c8 <time>:
   227c8:	008000f4 	movhi	r2,3
   227cc:	defffc04 	addi	sp,sp,-16
   227d0:	10a5e804 	addi	r2,r2,-26720
   227d4:	dc000215 	stw	r16,8(sp)
   227d8:	2021883a 	mov	r16,r4
   227dc:	11000017 	ldw	r4,0(r2)
   227e0:	000d883a 	mov	r6,zero
   227e4:	d80b883a 	mov	r5,sp
   227e8:	dfc00315 	stw	ra,12(sp)
   227ec:	0022c4c0 	call	22c4c <_gettimeofday_r>
   227f0:	10000716 	blt	r2,zero,22810 <time+0x48>
   227f4:	d8800017 	ldw	r2,0(sp)
   227f8:	80000126 	beq	r16,zero,22800 <time+0x38>
   227fc:	80800015 	stw	r2,0(r16)
   22800:	dfc00317 	ldw	ra,12(sp)
   22804:	dc000217 	ldw	r16,8(sp)
   22808:	dec00404 	addi	sp,sp,16
   2280c:	f800283a 	ret
   22810:	00bfffc4 	movi	r2,-1
   22814:	003ffa06 	br	22800 <__alt_data_end+0xfffe9800>

00022818 <_malloc_trim_r>:
   22818:	defffb04 	addi	sp,sp,-20
   2281c:	dcc00315 	stw	r19,12(sp)
   22820:	04c000b4 	movhi	r19,2
   22824:	dc800215 	stw	r18,8(sp)
   22828:	dc400115 	stw	r17,4(sp)
   2282c:	dc000015 	stw	r16,0(sp)
   22830:	dfc00415 	stw	ra,16(sp)
   22834:	2821883a 	mov	r16,r5
   22838:	9cdf5504 	addi	r19,r19,32084
   2283c:	2025883a 	mov	r18,r4
   22840:	00233b00 	call	233b0 <__malloc_lock>
   22844:	98800217 	ldw	r2,8(r19)
   22848:	14400117 	ldw	r17,4(r2)
   2284c:	00bfff04 	movi	r2,-4
   22850:	88a2703a 	and	r17,r17,r2
   22854:	8c21c83a 	sub	r16,r17,r16
   22858:	8403fbc4 	addi	r16,r16,4079
   2285c:	8020d33a 	srli	r16,r16,12
   22860:	0083ffc4 	movi	r2,4095
   22864:	843fffc4 	addi	r16,r16,-1
   22868:	8020933a 	slli	r16,r16,12
   2286c:	1400060e 	bge	r2,r16,22888 <_malloc_trim_r+0x70>
   22870:	000b883a 	mov	r5,zero
   22874:	9009883a 	mov	r4,r18
   22878:	00227740 	call	22774 <_sbrk_r>
   2287c:	98c00217 	ldw	r3,8(r19)
   22880:	1c47883a 	add	r3,r3,r17
   22884:	10c00a26 	beq	r2,r3,228b0 <_malloc_trim_r+0x98>
   22888:	9009883a 	mov	r4,r18
   2288c:	00233d40 	call	233d4 <__malloc_unlock>
   22890:	0005883a 	mov	r2,zero
   22894:	dfc00417 	ldw	ra,16(sp)
   22898:	dcc00317 	ldw	r19,12(sp)
   2289c:	dc800217 	ldw	r18,8(sp)
   228a0:	dc400117 	ldw	r17,4(sp)
   228a4:	dc000017 	ldw	r16,0(sp)
   228a8:	dec00504 	addi	sp,sp,20
   228ac:	f800283a 	ret
   228b0:	040bc83a 	sub	r5,zero,r16
   228b4:	9009883a 	mov	r4,r18
   228b8:	00227740 	call	22774 <_sbrk_r>
   228bc:	00ffffc4 	movi	r3,-1
   228c0:	10c00d26 	beq	r2,r3,228f8 <_malloc_trim_r+0xe0>
   228c4:	00c000f4 	movhi	r3,3
   228c8:	18ecb104 	addi	r3,r3,-19772
   228cc:	18800017 	ldw	r2,0(r3)
   228d0:	99000217 	ldw	r4,8(r19)
   228d4:	8c23c83a 	sub	r17,r17,r16
   228d8:	8c400054 	ori	r17,r17,1
   228dc:	1421c83a 	sub	r16,r2,r16
   228e0:	24400115 	stw	r17,4(r4)
   228e4:	9009883a 	mov	r4,r18
   228e8:	1c000015 	stw	r16,0(r3)
   228ec:	00233d40 	call	233d4 <__malloc_unlock>
   228f0:	00800044 	movi	r2,1
   228f4:	003fe706 	br	22894 <__alt_data_end+0xfffe9894>
   228f8:	000b883a 	mov	r5,zero
   228fc:	9009883a 	mov	r4,r18
   22900:	00227740 	call	22774 <_sbrk_r>
   22904:	99000217 	ldw	r4,8(r19)
   22908:	014003c4 	movi	r5,15
   2290c:	1107c83a 	sub	r3,r2,r4
   22910:	28ffdd0e 	bge	r5,r3,22888 <__alt_data_end+0xfffe9888>
   22914:	014000f4 	movhi	r5,3
   22918:	2965e504 	addi	r5,r5,-26732
   2291c:	29400017 	ldw	r5,0(r5)
   22920:	18c00054 	ori	r3,r3,1
   22924:	20c00115 	stw	r3,4(r4)
   22928:	00c000f4 	movhi	r3,3
   2292c:	1145c83a 	sub	r2,r2,r5
   22930:	18ecb104 	addi	r3,r3,-19772
   22934:	18800015 	stw	r2,0(r3)
   22938:	003fd306 	br	22888 <__alt_data_end+0xfffe9888>

0002293c <_free_r>:
   2293c:	28004126 	beq	r5,zero,22a44 <_free_r+0x108>
   22940:	defffd04 	addi	sp,sp,-12
   22944:	dc400115 	stw	r17,4(sp)
   22948:	dc000015 	stw	r16,0(sp)
   2294c:	2023883a 	mov	r17,r4
   22950:	2821883a 	mov	r16,r5
   22954:	dfc00215 	stw	ra,8(sp)
   22958:	00233b00 	call	233b0 <__malloc_lock>
   2295c:	81ffff17 	ldw	r7,-4(r16)
   22960:	00bfff84 	movi	r2,-2
   22964:	010000b4 	movhi	r4,2
   22968:	81bffe04 	addi	r6,r16,-8
   2296c:	3884703a 	and	r2,r7,r2
   22970:	211f5504 	addi	r4,r4,32084
   22974:	308b883a 	add	r5,r6,r2
   22978:	2a400117 	ldw	r9,4(r5)
   2297c:	22000217 	ldw	r8,8(r4)
   22980:	00ffff04 	movi	r3,-4
   22984:	48c6703a 	and	r3,r9,r3
   22988:	2a005726 	beq	r5,r8,22ae8 <_free_r+0x1ac>
   2298c:	28c00115 	stw	r3,4(r5)
   22990:	39c0004c 	andi	r7,r7,1
   22994:	3800091e 	bne	r7,zero,229bc <_free_r+0x80>
   22998:	823ffe17 	ldw	r8,-8(r16)
   2299c:	22400204 	addi	r9,r4,8
   229a0:	320dc83a 	sub	r6,r6,r8
   229a4:	31c00217 	ldw	r7,8(r6)
   229a8:	1205883a 	add	r2,r2,r8
   229ac:	3a406526 	beq	r7,r9,22b44 <_free_r+0x208>
   229b0:	32000317 	ldw	r8,12(r6)
   229b4:	3a000315 	stw	r8,12(r7)
   229b8:	41c00215 	stw	r7,8(r8)
   229bc:	28cf883a 	add	r7,r5,r3
   229c0:	39c00117 	ldw	r7,4(r7)
   229c4:	39c0004c 	andi	r7,r7,1
   229c8:	38003a26 	beq	r7,zero,22ab4 <_free_r+0x178>
   229cc:	10c00054 	ori	r3,r2,1
   229d0:	30c00115 	stw	r3,4(r6)
   229d4:	3087883a 	add	r3,r6,r2
   229d8:	18800015 	stw	r2,0(r3)
   229dc:	00c07fc4 	movi	r3,511
   229e0:	18801936 	bltu	r3,r2,22a48 <_free_r+0x10c>
   229e4:	1004d0fa 	srli	r2,r2,3
   229e8:	01c00044 	movi	r7,1
   229ec:	21400117 	ldw	r5,4(r4)
   229f0:	10c00044 	addi	r3,r2,1
   229f4:	18c7883a 	add	r3,r3,r3
   229f8:	1005d0ba 	srai	r2,r2,2
   229fc:	18c7883a 	add	r3,r3,r3
   22a00:	18c7883a 	add	r3,r3,r3
   22a04:	1907883a 	add	r3,r3,r4
   22a08:	3884983a 	sll	r2,r7,r2
   22a0c:	19c00017 	ldw	r7,0(r3)
   22a10:	1a3ffe04 	addi	r8,r3,-8
   22a14:	1144b03a 	or	r2,r2,r5
   22a18:	32000315 	stw	r8,12(r6)
   22a1c:	31c00215 	stw	r7,8(r6)
   22a20:	20800115 	stw	r2,4(r4)
   22a24:	19800015 	stw	r6,0(r3)
   22a28:	39800315 	stw	r6,12(r7)
   22a2c:	8809883a 	mov	r4,r17
   22a30:	dfc00217 	ldw	ra,8(sp)
   22a34:	dc400117 	ldw	r17,4(sp)
   22a38:	dc000017 	ldw	r16,0(sp)
   22a3c:	dec00304 	addi	sp,sp,12
   22a40:	00233d41 	jmpi	233d4 <__malloc_unlock>
   22a44:	f800283a 	ret
   22a48:	100ad27a 	srli	r5,r2,9
   22a4c:	00c00104 	movi	r3,4
   22a50:	19404a36 	bltu	r3,r5,22b7c <_free_r+0x240>
   22a54:	100ad1ba 	srli	r5,r2,6
   22a58:	28c00e44 	addi	r3,r5,57
   22a5c:	18c7883a 	add	r3,r3,r3
   22a60:	29400e04 	addi	r5,r5,56
   22a64:	18c7883a 	add	r3,r3,r3
   22a68:	18c7883a 	add	r3,r3,r3
   22a6c:	1909883a 	add	r4,r3,r4
   22a70:	20c00017 	ldw	r3,0(r4)
   22a74:	01c000b4 	movhi	r7,2
   22a78:	213ffe04 	addi	r4,r4,-8
   22a7c:	39df5504 	addi	r7,r7,32084
   22a80:	20c04426 	beq	r4,r3,22b94 <_free_r+0x258>
   22a84:	01ffff04 	movi	r7,-4
   22a88:	19400117 	ldw	r5,4(r3)
   22a8c:	29ca703a 	and	r5,r5,r7
   22a90:	1140022e 	bgeu	r2,r5,22a9c <_free_r+0x160>
   22a94:	18c00217 	ldw	r3,8(r3)
   22a98:	20fffb1e 	bne	r4,r3,22a88 <__alt_data_end+0xfffe9a88>
   22a9c:	19000317 	ldw	r4,12(r3)
   22aa0:	31000315 	stw	r4,12(r6)
   22aa4:	30c00215 	stw	r3,8(r6)
   22aa8:	21800215 	stw	r6,8(r4)
   22aac:	19800315 	stw	r6,12(r3)
   22ab0:	003fde06 	br	22a2c <__alt_data_end+0xfffe9a2c>
   22ab4:	29c00217 	ldw	r7,8(r5)
   22ab8:	10c5883a 	add	r2,r2,r3
   22abc:	00c000b4 	movhi	r3,2
   22ac0:	18df5704 	addi	r3,r3,32092
   22ac4:	38c03b26 	beq	r7,r3,22bb4 <_free_r+0x278>
   22ac8:	2a000317 	ldw	r8,12(r5)
   22acc:	11400054 	ori	r5,r2,1
   22ad0:	3087883a 	add	r3,r6,r2
   22ad4:	3a000315 	stw	r8,12(r7)
   22ad8:	41c00215 	stw	r7,8(r8)
   22adc:	31400115 	stw	r5,4(r6)
   22ae0:	18800015 	stw	r2,0(r3)
   22ae4:	003fbd06 	br	229dc <__alt_data_end+0xfffe99dc>
   22ae8:	39c0004c 	andi	r7,r7,1
   22aec:	10c5883a 	add	r2,r2,r3
   22af0:	3800071e 	bne	r7,zero,22b10 <_free_r+0x1d4>
   22af4:	81fffe17 	ldw	r7,-8(r16)
   22af8:	31cdc83a 	sub	r6,r6,r7
   22afc:	30c00317 	ldw	r3,12(r6)
   22b00:	31400217 	ldw	r5,8(r6)
   22b04:	11c5883a 	add	r2,r2,r7
   22b08:	28c00315 	stw	r3,12(r5)
   22b0c:	19400215 	stw	r5,8(r3)
   22b10:	10c00054 	ori	r3,r2,1
   22b14:	30c00115 	stw	r3,4(r6)
   22b18:	00c000f4 	movhi	r3,3
   22b1c:	18e5e604 	addi	r3,r3,-26728
   22b20:	18c00017 	ldw	r3,0(r3)
   22b24:	21800215 	stw	r6,8(r4)
   22b28:	10ffc036 	bltu	r2,r3,22a2c <__alt_data_end+0xfffe9a2c>
   22b2c:	008000f4 	movhi	r2,3
   22b30:	10aca404 	addi	r2,r2,-19824
   22b34:	11400017 	ldw	r5,0(r2)
   22b38:	8809883a 	mov	r4,r17
   22b3c:	00228180 	call	22818 <_malloc_trim_r>
   22b40:	003fba06 	br	22a2c <__alt_data_end+0xfffe9a2c>
   22b44:	28c9883a 	add	r4,r5,r3
   22b48:	21000117 	ldw	r4,4(r4)
   22b4c:	2100004c 	andi	r4,r4,1
   22b50:	2000391e 	bne	r4,zero,22c38 <_free_r+0x2fc>
   22b54:	29c00217 	ldw	r7,8(r5)
   22b58:	29000317 	ldw	r4,12(r5)
   22b5c:	1885883a 	add	r2,r3,r2
   22b60:	10c00054 	ori	r3,r2,1
   22b64:	39000315 	stw	r4,12(r7)
   22b68:	21c00215 	stw	r7,8(r4)
   22b6c:	30c00115 	stw	r3,4(r6)
   22b70:	308d883a 	add	r6,r6,r2
   22b74:	30800015 	stw	r2,0(r6)
   22b78:	003fac06 	br	22a2c <__alt_data_end+0xfffe9a2c>
   22b7c:	00c00504 	movi	r3,20
   22b80:	19401536 	bltu	r3,r5,22bd8 <_free_r+0x29c>
   22b84:	28c01704 	addi	r3,r5,92
   22b88:	18c7883a 	add	r3,r3,r3
   22b8c:	294016c4 	addi	r5,r5,91
   22b90:	003fb406 	br	22a64 <__alt_data_end+0xfffe9a64>
   22b94:	280bd0ba 	srai	r5,r5,2
   22b98:	00c00044 	movi	r3,1
   22b9c:	38800117 	ldw	r2,4(r7)
   22ba0:	194a983a 	sll	r5,r3,r5
   22ba4:	2007883a 	mov	r3,r4
   22ba8:	2884b03a 	or	r2,r5,r2
   22bac:	38800115 	stw	r2,4(r7)
   22bb0:	003fbb06 	br	22aa0 <__alt_data_end+0xfffe9aa0>
   22bb4:	21800515 	stw	r6,20(r4)
   22bb8:	21800415 	stw	r6,16(r4)
   22bbc:	10c00054 	ori	r3,r2,1
   22bc0:	31c00315 	stw	r7,12(r6)
   22bc4:	31c00215 	stw	r7,8(r6)
   22bc8:	30c00115 	stw	r3,4(r6)
   22bcc:	308d883a 	add	r6,r6,r2
   22bd0:	30800015 	stw	r2,0(r6)
   22bd4:	003f9506 	br	22a2c <__alt_data_end+0xfffe9a2c>
   22bd8:	00c01504 	movi	r3,84
   22bdc:	19400536 	bltu	r3,r5,22bf4 <_free_r+0x2b8>
   22be0:	100ad33a 	srli	r5,r2,12
   22be4:	28c01bc4 	addi	r3,r5,111
   22be8:	18c7883a 	add	r3,r3,r3
   22bec:	29401b84 	addi	r5,r5,110
   22bf0:	003f9c06 	br	22a64 <__alt_data_end+0xfffe9a64>
   22bf4:	00c05504 	movi	r3,340
   22bf8:	19400536 	bltu	r3,r5,22c10 <_free_r+0x2d4>
   22bfc:	100ad3fa 	srli	r5,r2,15
   22c00:	28c01e04 	addi	r3,r5,120
   22c04:	18c7883a 	add	r3,r3,r3
   22c08:	29401dc4 	addi	r5,r5,119
   22c0c:	003f9506 	br	22a64 <__alt_data_end+0xfffe9a64>
   22c10:	00c15504 	movi	r3,1364
   22c14:	19400536 	bltu	r3,r5,22c2c <_free_r+0x2f0>
   22c18:	100ad4ba 	srli	r5,r2,18
   22c1c:	28c01f44 	addi	r3,r5,125
   22c20:	18c7883a 	add	r3,r3,r3
   22c24:	29401f04 	addi	r5,r5,124
   22c28:	003f8e06 	br	22a64 <__alt_data_end+0xfffe9a64>
   22c2c:	00c03f84 	movi	r3,254
   22c30:	01401f84 	movi	r5,126
   22c34:	003f8b06 	br	22a64 <__alt_data_end+0xfffe9a64>
   22c38:	10c00054 	ori	r3,r2,1
   22c3c:	30c00115 	stw	r3,4(r6)
   22c40:	308d883a 	add	r6,r6,r2
   22c44:	30800015 	stw	r2,0(r6)
   22c48:	003f7806 	br	22a2c <__alt_data_end+0xfffe9a2c>

00022c4c <_gettimeofday_r>:
   22c4c:	defffd04 	addi	sp,sp,-12
   22c50:	2805883a 	mov	r2,r5
   22c54:	dc000015 	stw	r16,0(sp)
   22c58:	040000f4 	movhi	r16,3
   22c5c:	dc400115 	stw	r17,4(sp)
   22c60:	842ca504 	addi	r16,r16,-19820
   22c64:	2023883a 	mov	r17,r4
   22c68:	300b883a 	mov	r5,r6
   22c6c:	1009883a 	mov	r4,r2
   22c70:	dfc00215 	stw	ra,8(sp)
   22c74:	80000015 	stw	zero,0(r16)
   22c78:	0022db40 	call	22db4 <gettimeofday>
   22c7c:	00ffffc4 	movi	r3,-1
   22c80:	10c00526 	beq	r2,r3,22c98 <_gettimeofday_r+0x4c>
   22c84:	dfc00217 	ldw	ra,8(sp)
   22c88:	dc400117 	ldw	r17,4(sp)
   22c8c:	dc000017 	ldw	r16,0(sp)
   22c90:	dec00304 	addi	sp,sp,12
   22c94:	f800283a 	ret
   22c98:	80c00017 	ldw	r3,0(r16)
   22c9c:	183ff926 	beq	r3,zero,22c84 <__alt_data_end+0xfffe9c84>
   22ca0:	88c00015 	stw	r3,0(r17)
   22ca4:	003ff706 	br	22c84 <__alt_data_end+0xfffe9c84>

00022ca8 <__muldi3>:
   22ca8:	defff604 	addi	sp,sp,-40
   22cac:	dd800615 	stw	r22,24(sp)
   22cb0:	dd400515 	stw	r21,20(sp)
   22cb4:	dc400115 	stw	r17,4(sp)
   22cb8:	357fffcc 	andi	r21,r6,65535
   22cbc:	2022d43a 	srli	r17,r4,16
   22cc0:	25bfffcc 	andi	r22,r4,65535
   22cc4:	dcc00315 	stw	r19,12(sp)
   22cc8:	dc800215 	stw	r18,8(sp)
   22ccc:	2027883a 	mov	r19,r4
   22cd0:	2825883a 	mov	r18,r5
   22cd4:	b009883a 	mov	r4,r22
   22cd8:	a80b883a 	mov	r5,r21
   22cdc:	dfc00915 	stw	ra,36(sp)
   22ce0:	df000815 	stw	fp,32(sp)
   22ce4:	ddc00715 	stw	r23,28(sp)
   22ce8:	3839883a 	mov	fp,r7
   22cec:	302ed43a 	srli	r23,r6,16
   22cf0:	dd000415 	stw	r20,16(sp)
   22cf4:	dc000015 	stw	r16,0(sp)
   22cf8:	3029883a 	mov	r20,r6
   22cfc:	0021d540 	call	21d54 <__mulsi3>
   22d00:	a80b883a 	mov	r5,r21
   22d04:	8809883a 	mov	r4,r17
   22d08:	1021883a 	mov	r16,r2
   22d0c:	0021d540 	call	21d54 <__mulsi3>
   22d10:	8809883a 	mov	r4,r17
   22d14:	b80b883a 	mov	r5,r23
   22d18:	102b883a 	mov	r21,r2
   22d1c:	0021d540 	call	21d54 <__mulsi3>
   22d20:	b80b883a 	mov	r5,r23
   22d24:	b009883a 	mov	r4,r22
   22d28:	1023883a 	mov	r17,r2
   22d2c:	0021d540 	call	21d54 <__mulsi3>
   22d30:	8006d43a 	srli	r3,r16,16
   22d34:	1545883a 	add	r2,r2,r21
   22d38:	1885883a 	add	r2,r3,r2
   22d3c:	1540022e 	bgeu	r2,r21,22d48 <__muldi3+0xa0>
   22d40:	00c00074 	movhi	r3,1
   22d44:	88e3883a 	add	r17,r17,r3
   22d48:	1006d43a 	srli	r3,r2,16
   22d4c:	1004943a 	slli	r2,r2,16
   22d50:	e00b883a 	mov	r5,fp
   22d54:	9809883a 	mov	r4,r19
   22d58:	843fffcc 	andi	r16,r16,65535
   22d5c:	1c63883a 	add	r17,r3,r17
   22d60:	1421883a 	add	r16,r2,r16
   22d64:	0021d540 	call	21d54 <__mulsi3>
   22d68:	900b883a 	mov	r5,r18
   22d6c:	a009883a 	mov	r4,r20
   22d70:	1027883a 	mov	r19,r2
   22d74:	0021d540 	call	21d54 <__mulsi3>
   22d78:	9885883a 	add	r2,r19,r2
   22d7c:	1447883a 	add	r3,r2,r17
   22d80:	8005883a 	mov	r2,r16
   22d84:	dfc00917 	ldw	ra,36(sp)
   22d88:	df000817 	ldw	fp,32(sp)
   22d8c:	ddc00717 	ldw	r23,28(sp)
   22d90:	dd800617 	ldw	r22,24(sp)
   22d94:	dd400517 	ldw	r21,20(sp)
   22d98:	dd000417 	ldw	r20,16(sp)
   22d9c:	dcc00317 	ldw	r19,12(sp)
   22da0:	dc800217 	ldw	r18,8(sp)
   22da4:	dc400117 	ldw	r17,4(sp)
   22da8:	dc000017 	ldw	r16,0(sp)
   22dac:	dec00a04 	addi	sp,sp,40
   22db0:	f800283a 	ret

00022db4 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   22db4:	defff404 	addi	sp,sp,-48
   22db8:	dfc00b15 	stw	ra,44(sp)
   22dbc:	df000a15 	stw	fp,40(sp)
   22dc0:	dd000915 	stw	r20,36(sp)
   22dc4:	dcc00815 	stw	r19,32(sp)
   22dc8:	dc800715 	stw	r18,28(sp)
   22dcc:	dc400615 	stw	r17,24(sp)
   22dd0:	dc000515 	stw	r16,20(sp)
   22dd4:	df000a04 	addi	fp,sp,40
   22dd8:	e13ff915 	stw	r4,-28(fp)
   22ddc:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   22de0:	e0bffa17 	ldw	r2,-24(fp)
   22de4:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   22de8:	d0a6cd17 	ldw	r2,-25804(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   22dec:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22df0:	d0a6cc17 	ldw	r2,-25808(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   22df4:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   22df8:	e0bff817 	ldw	r2,-32(fp)
   22dfc:	10005f26 	beq	r2,zero,22f7c <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   22e00:	d0a6c617 	ldw	r2,-25832(gp)
   22e04:	1029883a 	mov	r20,r2
   22e08:	e17ff817 	ldw	r5,-32(fp)
   22e0c:	e13ff717 	ldw	r4,-36(fp)
   22e10:	0021c980 	call	21c98 <__udivsi3>
   22e14:	a085883a 	add	r2,r20,r2
   22e18:	1007883a 	mov	r3,r2
   22e1c:	e0bff917 	ldw	r2,-28(fp)
   22e20:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   22e24:	d0a6c717 	ldw	r2,-25828(gp)
   22e28:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   22e2c:	e0bff717 	ldw	r2,-36(fp)
   22e30:	1021883a 	mov	r16,r2
   22e34:	0023883a 	mov	r17,zero
   22e38:	e17ff817 	ldw	r5,-32(fp)
   22e3c:	010003f4 	movhi	r4,15
   22e40:	21109004 	addi	r4,r4,16960
   22e44:	0021c980 	call	21c98 <__udivsi3>
   22e48:	1025883a 	mov	r18,r2
   22e4c:	0027883a 	mov	r19,zero
   22e50:	900d883a 	mov	r6,r18
   22e54:	980f883a 	mov	r7,r19
   22e58:	8009883a 	mov	r4,r16
   22e5c:	880b883a 	mov	r5,r17
   22e60:	0022ca80 	call	22ca8 <__muldi3>
   22e64:	1009883a 	mov	r4,r2
   22e68:	180b883a 	mov	r5,r3
   22e6c:	2005883a 	mov	r2,r4
   22e70:	2807883a 	mov	r3,r5
   22e74:	018003f4 	movhi	r6,15
   22e78:	31909004 	addi	r6,r6,16960
   22e7c:	000f883a 	mov	r7,zero
   22e80:	1009883a 	mov	r4,r2
   22e84:	180b883a 	mov	r5,r3
   22e88:	00270140 	call	27014 <__umoddi3>
   22e8c:	1009883a 	mov	r4,r2
   22e90:	180b883a 	mov	r5,r3
   22e94:	2005883a 	mov	r2,r4
   22e98:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   22e9c:	a085883a 	add	r2,r20,r2
   22ea0:	1007883a 	mov	r3,r2
   22ea4:	e0bff917 	ldw	r2,-28(fp)
   22ea8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   22eac:	00001406 	br	22f00 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   22eb0:	e0bff917 	ldw	r2,-28(fp)
   22eb4:	10800017 	ldw	r2,0(r2)
   22eb8:	00800516 	blt	zero,r2,22ed0 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   22ebc:	e0bff917 	ldw	r2,-28(fp)
   22ec0:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   22ec4:	e0bff917 	ldw	r2,-28(fp)
   22ec8:	10000115 	stw	zero,4(r2)
          break;
   22ecc:	00000f06 	br	22f0c <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   22ed0:	e0bff917 	ldw	r2,-28(fp)
   22ed4:	10800017 	ldw	r2,0(r2)
   22ed8:	10ffffc4 	addi	r3,r2,-1
   22edc:	e0bff917 	ldw	r2,-28(fp)
   22ee0:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   22ee4:	e0bff917 	ldw	r2,-28(fp)
   22ee8:	10c00117 	ldw	r3,4(r2)
   22eec:	008003f4 	movhi	r2,15
   22ef0:	10909004 	addi	r2,r2,16960
   22ef4:	1887883a 	add	r3,r3,r2
   22ef8:	e0bff917 	ldw	r2,-28(fp)
   22efc:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   22f00:	e0bff917 	ldw	r2,-28(fp)
   22f04:	10800117 	ldw	r2,4(r2)
   22f08:	103fe916 	blt	r2,zero,22eb0 <__alt_data_end+0xfffe9eb0>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   22f0c:	00000c06 	br	22f40 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   22f10:	e0bff917 	ldw	r2,-28(fp)
   22f14:	10800017 	ldw	r2,0(r2)
   22f18:	10c00044 	addi	r3,r2,1
   22f1c:	e0bff917 	ldw	r2,-28(fp)
   22f20:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   22f24:	e0bff917 	ldw	r2,-28(fp)
   22f28:	10c00117 	ldw	r3,4(r2)
   22f2c:	00bffc74 	movhi	r2,65521
   22f30:	10af7004 	addi	r2,r2,-16960
   22f34:	1887883a 	add	r3,r3,r2
   22f38:	e0bff917 	ldw	r2,-28(fp)
   22f3c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   22f40:	e0bff917 	ldw	r2,-28(fp)
   22f44:	10c00117 	ldw	r3,4(r2)
   22f48:	008003f4 	movhi	r2,15
   22f4c:	10908fc4 	addi	r2,r2,16959
   22f50:	10ffef16 	blt	r2,r3,22f10 <__alt_data_end+0xfffe9f10>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   22f54:	e0bff617 	ldw	r2,-40(fp)
   22f58:	10000626 	beq	r2,zero,22f74 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   22f5c:	d0e6c417 	ldw	r3,-25840(gp)
   22f60:	e0bff617 	ldw	r2,-40(fp)
   22f64:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   22f68:	d0e6c517 	ldw	r3,-25836(gp)
   22f6c:	e0bff617 	ldw	r2,-40(fp)
   22f70:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   22f74:	0005883a 	mov	r2,zero
   22f78:	00000106 	br	22f80 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   22f7c:	00bfde84 	movi	r2,-134
}
   22f80:	e6fffb04 	addi	sp,fp,-20
   22f84:	dfc00617 	ldw	ra,24(sp)
   22f88:	df000517 	ldw	fp,20(sp)
   22f8c:	dd000417 	ldw	r20,16(sp)
   22f90:	dcc00317 	ldw	r19,12(sp)
   22f94:	dc800217 	ldw	r18,8(sp)
   22f98:	dc400117 	ldw	r17,4(sp)
   22f9c:	dc000017 	ldw	r16,0(sp)
   22fa0:	dec00704 	addi	sp,sp,28
   22fa4:	f800283a 	ret

00022fa8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22fa8:	defff904 	addi	sp,sp,-28
   22fac:	dfc00615 	stw	ra,24(sp)
   22fb0:	df000515 	stw	fp,20(sp)
   22fb4:	df000504 	addi	fp,sp,20
   22fb8:	e13ffc15 	stw	r4,-16(fp)
   22fbc:	e17ffd15 	stw	r5,-12(fp)
   22fc0:	e1bffe15 	stw	r6,-8(fp)
   22fc4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22fc8:	e0800217 	ldw	r2,8(fp)
   22fcc:	d8800015 	stw	r2,0(sp)
   22fd0:	e1ffff17 	ldw	r7,-4(fp)
   22fd4:	e1bffe17 	ldw	r6,-8(fp)
   22fd8:	e17ffd17 	ldw	r5,-12(fp)
   22fdc:	e13ffc17 	ldw	r4,-16(fp)
   22fe0:	00231580 	call	23158 <alt_iic_isr_register>
}  
   22fe4:	e037883a 	mov	sp,fp
   22fe8:	dfc00117 	ldw	ra,4(sp)
   22fec:	df000017 	ldw	fp,0(sp)
   22ff0:	dec00204 	addi	sp,sp,8
   22ff4:	f800283a 	ret

00022ff8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22ff8:	defff904 	addi	sp,sp,-28
   22ffc:	df000615 	stw	fp,24(sp)
   23000:	df000604 	addi	fp,sp,24
   23004:	e13ffe15 	stw	r4,-8(fp)
   23008:	e17fff15 	stw	r5,-4(fp)
   2300c:	e0bfff17 	ldw	r2,-4(fp)
   23010:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23014:	0005303a 	rdctl	r2,status
   23018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2301c:	e0fffb17 	ldw	r3,-20(fp)
   23020:	00bfff84 	movi	r2,-2
   23024:	1884703a 	and	r2,r3,r2
   23028:	1001703a 	wrctl	status,r2
  
  return context;
   2302c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23030:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   23034:	00c00044 	movi	r3,1
   23038:	e0bffa17 	ldw	r2,-24(fp)
   2303c:	1884983a 	sll	r2,r3,r2
   23040:	1007883a 	mov	r3,r2
   23044:	d0a6c817 	ldw	r2,-25824(gp)
   23048:	1884b03a 	or	r2,r3,r2
   2304c:	d0a6c815 	stw	r2,-25824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23050:	d0a6c817 	ldw	r2,-25824(gp)
   23054:	100170fa 	wrctl	ienable,r2
   23058:	e0bffc17 	ldw	r2,-16(fp)
   2305c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23060:	e0bffd17 	ldw	r2,-12(fp)
   23064:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23068:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2306c:	0001883a 	nop
}
   23070:	e037883a 	mov	sp,fp
   23074:	df000017 	ldw	fp,0(sp)
   23078:	dec00104 	addi	sp,sp,4
   2307c:	f800283a 	ret

00023080 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   23080:	defff904 	addi	sp,sp,-28
   23084:	df000615 	stw	fp,24(sp)
   23088:	df000604 	addi	fp,sp,24
   2308c:	e13ffe15 	stw	r4,-8(fp)
   23090:	e17fff15 	stw	r5,-4(fp)
   23094:	e0bfff17 	ldw	r2,-4(fp)
   23098:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2309c:	0005303a 	rdctl	r2,status
   230a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   230a4:	e0fffb17 	ldw	r3,-20(fp)
   230a8:	00bfff84 	movi	r2,-2
   230ac:	1884703a 	and	r2,r3,r2
   230b0:	1001703a 	wrctl	status,r2
  
  return context;
   230b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   230b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   230bc:	00c00044 	movi	r3,1
   230c0:	e0bffa17 	ldw	r2,-24(fp)
   230c4:	1884983a 	sll	r2,r3,r2
   230c8:	0084303a 	nor	r2,zero,r2
   230cc:	1007883a 	mov	r3,r2
   230d0:	d0a6c817 	ldw	r2,-25824(gp)
   230d4:	1884703a 	and	r2,r3,r2
   230d8:	d0a6c815 	stw	r2,-25824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   230dc:	d0a6c817 	ldw	r2,-25824(gp)
   230e0:	100170fa 	wrctl	ienable,r2
   230e4:	e0bffc17 	ldw	r2,-16(fp)
   230e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   230ec:	e0bffd17 	ldw	r2,-12(fp)
   230f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   230f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   230f8:	0001883a 	nop
}
   230fc:	e037883a 	mov	sp,fp
   23100:	df000017 	ldw	fp,0(sp)
   23104:	dec00104 	addi	sp,sp,4
   23108:	f800283a 	ret

0002310c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2310c:	defffc04 	addi	sp,sp,-16
   23110:	df000315 	stw	fp,12(sp)
   23114:	df000304 	addi	fp,sp,12
   23118:	e13ffe15 	stw	r4,-8(fp)
   2311c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   23120:	000530fa 	rdctl	r2,ienable
   23124:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23128:	00c00044 	movi	r3,1
   2312c:	e0bfff17 	ldw	r2,-4(fp)
   23130:	1884983a 	sll	r2,r3,r2
   23134:	1007883a 	mov	r3,r2
   23138:	e0bffd17 	ldw	r2,-12(fp)
   2313c:	1884703a 	and	r2,r3,r2
   23140:	1004c03a 	cmpne	r2,r2,zero
   23144:	10803fcc 	andi	r2,r2,255
}
   23148:	e037883a 	mov	sp,fp
   2314c:	df000017 	ldw	fp,0(sp)
   23150:	dec00104 	addi	sp,sp,4
   23154:	f800283a 	ret

00023158 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23158:	defff504 	addi	sp,sp,-44
   2315c:	dfc00a15 	stw	ra,40(sp)
   23160:	df000915 	stw	fp,36(sp)
   23164:	df000904 	addi	fp,sp,36
   23168:	e13ffc15 	stw	r4,-16(fp)
   2316c:	e17ffd15 	stw	r5,-12(fp)
   23170:	e1bffe15 	stw	r6,-8(fp)
   23174:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   23178:	00bffa84 	movi	r2,-22
   2317c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   23180:	e0bffd17 	ldw	r2,-12(fp)
   23184:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23188:	e0bff817 	ldw	r2,-32(fp)
   2318c:	10800808 	cmpgei	r2,r2,32
   23190:	1000271e 	bne	r2,zero,23230 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23194:	0005303a 	rdctl	r2,status
   23198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2319c:	e0fffb17 	ldw	r3,-20(fp)
   231a0:	00bfff84 	movi	r2,-2
   231a4:	1884703a 	and	r2,r3,r2
   231a8:	1001703a 	wrctl	status,r2
  
  return context;
   231ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   231b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   231b4:	008000f4 	movhi	r2,3
   231b8:	10acbb04 	addi	r2,r2,-19732
   231bc:	e0fff817 	ldw	r3,-32(fp)
   231c0:	180690fa 	slli	r3,r3,3
   231c4:	10c5883a 	add	r2,r2,r3
   231c8:	e0fffe17 	ldw	r3,-8(fp)
   231cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   231d0:	008000f4 	movhi	r2,3
   231d4:	10acbb04 	addi	r2,r2,-19732
   231d8:	e0fff817 	ldw	r3,-32(fp)
   231dc:	180690fa 	slli	r3,r3,3
   231e0:	10c5883a 	add	r2,r2,r3
   231e4:	10800104 	addi	r2,r2,4
   231e8:	e0ffff17 	ldw	r3,-4(fp)
   231ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   231f0:	e0bffe17 	ldw	r2,-8(fp)
   231f4:	10000526 	beq	r2,zero,2320c <alt_iic_isr_register+0xb4>
   231f8:	e0bff817 	ldw	r2,-32(fp)
   231fc:	100b883a 	mov	r5,r2
   23200:	e13ffc17 	ldw	r4,-16(fp)
   23204:	0022ff80 	call	22ff8 <alt_ic_irq_enable>
   23208:	00000406 	br	2321c <alt_iic_isr_register+0xc4>
   2320c:	e0bff817 	ldw	r2,-32(fp)
   23210:	100b883a 	mov	r5,r2
   23214:	e13ffc17 	ldw	r4,-16(fp)
   23218:	00230800 	call	23080 <alt_ic_irq_disable>
   2321c:	e0bff715 	stw	r2,-36(fp)
   23220:	e0bffa17 	ldw	r2,-24(fp)
   23224:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23228:	e0bff917 	ldw	r2,-28(fp)
   2322c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   23230:	e0bff717 	ldw	r2,-36(fp)
}
   23234:	e037883a 	mov	sp,fp
   23238:	dfc00117 	ldw	ra,4(sp)
   2323c:	df000017 	ldw	fp,0(sp)
   23240:	dec00204 	addi	sp,sp,8
   23244:	f800283a 	ret

00023248 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23248:	defffc04 	addi	sp,sp,-16
   2324c:	df000315 	stw	fp,12(sp)
   23250:	df000304 	addi	fp,sp,12
   23254:	e13ffd15 	stw	r4,-12(fp)
   23258:	e17ffe15 	stw	r5,-8(fp)
   2325c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23260:	e0fffe17 	ldw	r3,-8(fp)
   23264:	e0bffd17 	ldw	r2,-12(fp)
   23268:	18800c26 	beq	r3,r2,2329c <alt_load_section+0x54>
  {
    while( to != end )
   2326c:	00000806 	br	23290 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23270:	e0bffe17 	ldw	r2,-8(fp)
   23274:	10c00104 	addi	r3,r2,4
   23278:	e0fffe15 	stw	r3,-8(fp)
   2327c:	e0fffd17 	ldw	r3,-12(fp)
   23280:	19000104 	addi	r4,r3,4
   23284:	e13ffd15 	stw	r4,-12(fp)
   23288:	18c00017 	ldw	r3,0(r3)
   2328c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23290:	e0fffe17 	ldw	r3,-8(fp)
   23294:	e0bfff17 	ldw	r2,-4(fp)
   23298:	18bff51e 	bne	r3,r2,23270 <__alt_data_end+0xfffea270>
    {
      *to++ = *from++;
    }
  }
}
   2329c:	0001883a 	nop
   232a0:	e037883a 	mov	sp,fp
   232a4:	df000017 	ldw	fp,0(sp)
   232a8:	dec00104 	addi	sp,sp,4
   232ac:	f800283a 	ret

000232b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   232b0:	defffe04 	addi	sp,sp,-8
   232b4:	dfc00115 	stw	ra,4(sp)
   232b8:	df000015 	stw	fp,0(sp)
   232bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   232c0:	018000f4 	movhi	r6,3
   232c4:	31a5f304 	addi	r6,r6,-26676
   232c8:	014000b4 	movhi	r5,2
   232cc:	295f4504 	addi	r5,r5,32020
   232d0:	010000f4 	movhi	r4,3
   232d4:	2125f304 	addi	r4,r4,-26676
   232d8:	00232480 	call	23248 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   232dc:	018000b4 	movhi	r6,2
   232e0:	31808c04 	addi	r6,r6,560
   232e4:	014000b4 	movhi	r5,2
   232e8:	29400804 	addi	r5,r5,32
   232ec:	010000b4 	movhi	r4,2
   232f0:	21000804 	addi	r4,r4,32
   232f4:	00232480 	call	23248 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   232f8:	018000b4 	movhi	r6,2
   232fc:	319f4504 	addi	r6,r6,32020
   23300:	014000b4 	movhi	r5,2
   23304:	295edf04 	addi	r5,r5,31612
   23308:	010000b4 	movhi	r4,2
   2330c:	211edf04 	addi	r4,r4,31612
   23310:	00232480 	call	23248 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23314:	00244f00 	call	244f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23318:	00246dc0 	call	246dc <alt_icache_flush_all>
}
   2331c:	0001883a 	nop
   23320:	e037883a 	mov	sp,fp
   23324:	dfc00117 	ldw	ra,4(sp)
   23328:	df000017 	ldw	fp,0(sp)
   2332c:	dec00204 	addi	sp,sp,8
   23330:	f800283a 	ret

00023334 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23334:	defffd04 	addi	sp,sp,-12
   23338:	dfc00215 	stw	ra,8(sp)
   2333c:	df000115 	stw	fp,4(sp)
   23340:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23344:	0009883a 	mov	r4,zero
   23348:	00236bc0 	call	236bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2334c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23350:	00236f40 	call	236f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23354:	018000b4 	movhi	r6,2
   23358:	319efa04 	addi	r6,r6,31720
   2335c:	014000b4 	movhi	r5,2
   23360:	295efa04 	addi	r5,r5,31720
   23364:	010000b4 	movhi	r4,2
   23368:	211efa04 	addi	r4,r4,31720
   2336c:	002487c0 	call	2487c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23370:	002461c0 	call	2461c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23374:	010000b4 	movhi	r4,2
   23378:	21119f04 	addi	r4,r4,18044
   2337c:	0024e800 	call	24e80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23380:	d0a6c917 	ldw	r2,-25820(gp)
   23384:	d0e6ca17 	ldw	r3,-25816(gp)
   23388:	d126cb17 	ldw	r4,-25812(gp)
   2338c:	200d883a 	mov	r6,r4
   23390:	180b883a 	mov	r5,r3
   23394:	1009883a 	mov	r4,r2
   23398:	002026c0 	call	2026c <main>
   2339c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   233a0:	01000044 	movi	r4,1
   233a4:	00244180 	call	24418 <close>
  exit (result);
   233a8:	e13fff17 	ldw	r4,-4(fp)
   233ac:	0024e940 	call	24e94 <exit>

000233b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   233b0:	defffe04 	addi	sp,sp,-8
   233b4:	df000115 	stw	fp,4(sp)
   233b8:	df000104 	addi	fp,sp,4
   233bc:	e13fff15 	stw	r4,-4(fp)
}
   233c0:	0001883a 	nop
   233c4:	e037883a 	mov	sp,fp
   233c8:	df000017 	ldw	fp,0(sp)
   233cc:	dec00104 	addi	sp,sp,4
   233d0:	f800283a 	ret

000233d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   233d4:	defffe04 	addi	sp,sp,-8
   233d8:	df000115 	stw	fp,4(sp)
   233dc:	df000104 	addi	fp,sp,4
   233e0:	e13fff15 	stw	r4,-4(fp)
}
   233e4:	0001883a 	nop
   233e8:	e037883a 	mov	sp,fp
   233ec:	df000017 	ldw	fp,0(sp)
   233f0:	dec00104 	addi	sp,sp,4
   233f4:	f800283a 	ret

000233f8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   233f8:	defffd04 	addi	sp,sp,-12
   233fc:	dfc00215 	stw	ra,8(sp)
   23400:	df000115 	stw	fp,4(sp)
   23404:	df000104 	addi	fp,sp,4
   23408:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   2340c:	d0a00617 	ldw	r2,-32744(gp)
   23410:	10800217 	ldw	r2,8(r2)
   23414:	100b883a 	mov	r5,r2
   23418:	e13fff17 	ldw	r4,-4(fp)
   2341c:	0024f680 	call	24f68 <fputs>
#endif
#endif
}
   23420:	e037883a 	mov	sp,fp
   23424:	dfc00117 	ldw	ra,4(sp)
   23428:	df000017 	ldw	fp,0(sp)
   2342c:	dec00204 	addi	sp,sp,8
   23430:	f800283a 	ret

00023434 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23434:	defff904 	addi	sp,sp,-28
   23438:	df000615 	stw	fp,24(sp)
   2343c:	df000604 	addi	fp,sp,24
   23440:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23444:	0005303a 	rdctl	r2,status
   23448:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2344c:	e0fffe17 	ldw	r3,-8(fp)
   23450:	00bfff84 	movi	r2,-2
   23454:	1884703a 	and	r2,r3,r2
   23458:	1001703a 	wrctl	status,r2
  
  return context;
   2345c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23460:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23464:	d0a00817 	ldw	r2,-32736(gp)
   23468:	10c000c4 	addi	r3,r2,3
   2346c:	00bfff04 	movi	r2,-4
   23470:	1884703a 	and	r2,r3,r2
   23474:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23478:	d0e00817 	ldw	r3,-32736(gp)
   2347c:	e0bfff17 	ldw	r2,-4(fp)
   23480:	1887883a 	add	r3,r3,r2
   23484:	00800134 	movhi	r2,4
   23488:	10a40004 	addi	r2,r2,-28672
   2348c:	10c0062e 	bgeu	r2,r3,234a8 <sbrk+0x74>
   23490:	e0bffb17 	ldw	r2,-20(fp)
   23494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23498:	e0bffa17 	ldw	r2,-24(fp)
   2349c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   234a0:	00bfffc4 	movi	r2,-1
   234a4:	00000b06 	br	234d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   234a8:	d0a00817 	ldw	r2,-32736(gp)
   234ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   234b0:	d0e00817 	ldw	r3,-32736(gp)
   234b4:	e0bfff17 	ldw	r2,-4(fp)
   234b8:	1885883a 	add	r2,r3,r2
   234bc:	d0a00815 	stw	r2,-32736(gp)
   234c0:	e0bffb17 	ldw	r2,-20(fp)
   234c4:	e0bffc15 	stw	r2,-16(fp)
   234c8:	e0bffc17 	ldw	r2,-16(fp)
   234cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   234d0:	e0bffd17 	ldw	r2,-12(fp)
} 
   234d4:	e037883a 	mov	sp,fp
   234d8:	df000017 	ldw	fp,0(sp)
   234dc:	dec00104 	addi	sp,sp,4
   234e0:	f800283a 	ret

000234e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   234e4:	defffa04 	addi	sp,sp,-24
   234e8:	df000515 	stw	fp,20(sp)
   234ec:	df000504 	addi	fp,sp,20
   234f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234f4:	0005303a 	rdctl	r2,status
   234f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234fc:	e0fffc17 	ldw	r3,-16(fp)
   23500:	00bfff84 	movi	r2,-2
   23504:	1884703a 	and	r2,r3,r2
   23508:	1001703a 	wrctl	status,r2
  
  return context;
   2350c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23510:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23514:	e0bfff17 	ldw	r2,-4(fp)
   23518:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2351c:	e0bffd17 	ldw	r2,-12(fp)
   23520:	10800017 	ldw	r2,0(r2)
   23524:	e0fffd17 	ldw	r3,-12(fp)
   23528:	18c00117 	ldw	r3,4(r3)
   2352c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23530:	e0bffd17 	ldw	r2,-12(fp)
   23534:	10800117 	ldw	r2,4(r2)
   23538:	e0fffd17 	ldw	r3,-12(fp)
   2353c:	18c00017 	ldw	r3,0(r3)
   23540:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23544:	e0bffd17 	ldw	r2,-12(fp)
   23548:	e0fffd17 	ldw	r3,-12(fp)
   2354c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   23550:	e0bffd17 	ldw	r2,-12(fp)
   23554:	e0fffd17 	ldw	r3,-12(fp)
   23558:	10c00015 	stw	r3,0(r2)
   2355c:	e0bffb17 	ldw	r2,-20(fp)
   23560:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23564:	e0bffe17 	ldw	r2,-8(fp)
   23568:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2356c:	0001883a 	nop
   23570:	e037883a 	mov	sp,fp
   23574:	df000017 	ldw	fp,0(sp)
   23578:	dec00104 	addi	sp,sp,4
   2357c:	f800283a 	ret

00023580 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23580:	defffb04 	addi	sp,sp,-20
   23584:	dfc00415 	stw	ra,16(sp)
   23588:	df000315 	stw	fp,12(sp)
   2358c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23590:	d0a00917 	ldw	r2,-32732(gp)
   23594:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   23598:	d0a6cd17 	ldw	r2,-25804(gp)
   2359c:	10800044 	addi	r2,r2,1
   235a0:	d0a6cd15 	stw	r2,-25804(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   235a4:	00002e06 	br	23660 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   235a8:	e0bffd17 	ldw	r2,-12(fp)
   235ac:	10800017 	ldw	r2,0(r2)
   235b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   235b4:	e0bffd17 	ldw	r2,-12(fp)
   235b8:	10800403 	ldbu	r2,16(r2)
   235bc:	10803fcc 	andi	r2,r2,255
   235c0:	10000426 	beq	r2,zero,235d4 <alt_tick+0x54>
   235c4:	d0a6cd17 	ldw	r2,-25804(gp)
   235c8:	1000021e 	bne	r2,zero,235d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   235cc:	e0bffd17 	ldw	r2,-12(fp)
   235d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   235d4:	e0bffd17 	ldw	r2,-12(fp)
   235d8:	10800217 	ldw	r2,8(r2)
   235dc:	d0e6cd17 	ldw	r3,-25804(gp)
   235e0:	18801d36 	bltu	r3,r2,23658 <alt_tick+0xd8>
   235e4:	e0bffd17 	ldw	r2,-12(fp)
   235e8:	10800403 	ldbu	r2,16(r2)
   235ec:	10803fcc 	andi	r2,r2,255
   235f0:	1000191e 	bne	r2,zero,23658 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   235f4:	e0bffd17 	ldw	r2,-12(fp)
   235f8:	10800317 	ldw	r2,12(r2)
   235fc:	e0fffd17 	ldw	r3,-12(fp)
   23600:	18c00517 	ldw	r3,20(r3)
   23604:	1809883a 	mov	r4,r3
   23608:	103ee83a 	callr	r2
   2360c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23610:	e0bfff17 	ldw	r2,-4(fp)
   23614:	1000031e 	bne	r2,zero,23624 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23618:	e13ffd17 	ldw	r4,-12(fp)
   2361c:	00234e40 	call	234e4 <alt_alarm_stop>
   23620:	00000d06 	br	23658 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23624:	e0bffd17 	ldw	r2,-12(fp)
   23628:	10c00217 	ldw	r3,8(r2)
   2362c:	e0bfff17 	ldw	r2,-4(fp)
   23630:	1887883a 	add	r3,r3,r2
   23634:	e0bffd17 	ldw	r2,-12(fp)
   23638:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2363c:	e0bffd17 	ldw	r2,-12(fp)
   23640:	10c00217 	ldw	r3,8(r2)
   23644:	d0a6cd17 	ldw	r2,-25804(gp)
   23648:	1880032e 	bgeu	r3,r2,23658 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2364c:	e0bffd17 	ldw	r2,-12(fp)
   23650:	00c00044 	movi	r3,1
   23654:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   23658:	e0bffe17 	ldw	r2,-8(fp)
   2365c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23660:	e0fffd17 	ldw	r3,-12(fp)
   23664:	d0a00904 	addi	r2,gp,-32732
   23668:	18bfcf1e 	bne	r3,r2,235a8 <__alt_data_end+0xfffea5a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2366c:	0001883a 	nop
}
   23670:	0001883a 	nop
   23674:	e037883a 	mov	sp,fp
   23678:	dfc00117 	ldw	ra,4(sp)
   2367c:	df000017 	ldw	fp,0(sp)
   23680:	dec00204 	addi	sp,sp,8
   23684:	f800283a 	ret

00023688 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23688:	defffd04 	addi	sp,sp,-12
   2368c:	dfc00215 	stw	ra,8(sp)
   23690:	df000115 	stw	fp,4(sp)
   23694:	df000104 	addi	fp,sp,4
   23698:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2369c:	d1600d04 	addi	r5,gp,-32716
   236a0:	e13fff17 	ldw	r4,-4(fp)
   236a4:	00245780 	call	24578 <alt_dev_llist_insert>
}
   236a8:	e037883a 	mov	sp,fp
   236ac:	dfc00117 	ldw	ra,4(sp)
   236b0:	df000017 	ldw	fp,0(sp)
   236b4:	dec00204 	addi	sp,sp,8
   236b8:	f800283a 	ret

000236bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   236bc:	defffd04 	addi	sp,sp,-12
   236c0:	dfc00215 	stw	ra,8(sp)
   236c4:	df000115 	stw	fp,4(sp)
   236c8:	df000104 	addi	fp,sp,4
   236cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   236d0:	0024c000 	call	24c00 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   236d4:	00800044 	movi	r2,1
   236d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   236dc:	0001883a 	nop
   236e0:	e037883a 	mov	sp,fp
   236e4:	dfc00117 	ldw	ra,4(sp)
   236e8:	df000017 	ldw	fp,0(sp)
   236ec:	dec00204 	addi	sp,sp,8
   236f0:	f800283a 	ret

000236f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   236f4:	defffe04 	addi	sp,sp,-8
   236f8:	dfc00115 	stw	ra,4(sp)
   236fc:	df000015 	stw	fp,0(sp)
   23700:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_GAME, timer_game);
   23704:	01c00284 	movi	r7,10
   23708:	01800044 	movi	r6,1
   2370c:	000b883a 	mov	r5,zero
   23710:	01000134 	movhi	r4,4
   23714:	21040804 	addi	r4,r4,4128
   23718:	00242340 	call	24234 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_LCD, timer_lcd);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2371c:	000d883a 	mov	r6,zero
   23720:	000b883a 	mov	r5,zero
   23724:	010000f4 	movhi	r4,3
   23728:	21216a04 	addi	r4,r4,-31320
   2372c:	00238b80 	call	238b8 <altera_avalon_jtag_uart_init>
   23730:	010000f4 	movhi	r4,3
   23734:	21216004 	addi	r4,r4,-31360
   23738:	00236880 	call	23688 <alt_dev_reg>
}
   2373c:	0001883a 	nop
   23740:	e037883a 	mov	sp,fp
   23744:	dfc00117 	ldw	ra,4(sp)
   23748:	df000017 	ldw	fp,0(sp)
   2374c:	dec00204 	addi	sp,sp,8
   23750:	f800283a 	ret

00023754 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23754:	defffa04 	addi	sp,sp,-24
   23758:	dfc00515 	stw	ra,20(sp)
   2375c:	df000415 	stw	fp,16(sp)
   23760:	df000404 	addi	fp,sp,16
   23764:	e13ffd15 	stw	r4,-12(fp)
   23768:	e17ffe15 	stw	r5,-8(fp)
   2376c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23770:	e0bffd17 	ldw	r2,-12(fp)
   23774:	10800017 	ldw	r2,0(r2)
   23778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2377c:	e0bffc17 	ldw	r2,-16(fp)
   23780:	10c00a04 	addi	r3,r2,40
   23784:	e0bffd17 	ldw	r2,-12(fp)
   23788:	10800217 	ldw	r2,8(r2)
   2378c:	100f883a 	mov	r7,r2
   23790:	e1bfff17 	ldw	r6,-4(fp)
   23794:	e17ffe17 	ldw	r5,-8(fp)
   23798:	1809883a 	mov	r4,r3
   2379c:	0023d7c0 	call	23d7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   237a0:	e037883a 	mov	sp,fp
   237a4:	dfc00117 	ldw	ra,4(sp)
   237a8:	df000017 	ldw	fp,0(sp)
   237ac:	dec00204 	addi	sp,sp,8
   237b0:	f800283a 	ret

000237b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   237b4:	defffa04 	addi	sp,sp,-24
   237b8:	dfc00515 	stw	ra,20(sp)
   237bc:	df000415 	stw	fp,16(sp)
   237c0:	df000404 	addi	fp,sp,16
   237c4:	e13ffd15 	stw	r4,-12(fp)
   237c8:	e17ffe15 	stw	r5,-8(fp)
   237cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   237d0:	e0bffd17 	ldw	r2,-12(fp)
   237d4:	10800017 	ldw	r2,0(r2)
   237d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   237dc:	e0bffc17 	ldw	r2,-16(fp)
   237e0:	10c00a04 	addi	r3,r2,40
   237e4:	e0bffd17 	ldw	r2,-12(fp)
   237e8:	10800217 	ldw	r2,8(r2)
   237ec:	100f883a 	mov	r7,r2
   237f0:	e1bfff17 	ldw	r6,-4(fp)
   237f4:	e17ffe17 	ldw	r5,-8(fp)
   237f8:	1809883a 	mov	r4,r3
   237fc:	0023f980 	call	23f98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23800:	e037883a 	mov	sp,fp
   23804:	dfc00117 	ldw	ra,4(sp)
   23808:	df000017 	ldw	fp,0(sp)
   2380c:	dec00204 	addi	sp,sp,8
   23810:	f800283a 	ret

00023814 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23814:	defffc04 	addi	sp,sp,-16
   23818:	dfc00315 	stw	ra,12(sp)
   2381c:	df000215 	stw	fp,8(sp)
   23820:	df000204 	addi	fp,sp,8
   23824:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23828:	e0bfff17 	ldw	r2,-4(fp)
   2382c:	10800017 	ldw	r2,0(r2)
   23830:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23834:	e0bffe17 	ldw	r2,-8(fp)
   23838:	10c00a04 	addi	r3,r2,40
   2383c:	e0bfff17 	ldw	r2,-4(fp)
   23840:	10800217 	ldw	r2,8(r2)
   23844:	100b883a 	mov	r5,r2
   23848:	1809883a 	mov	r4,r3
   2384c:	0023c240 	call	23c24 <altera_avalon_jtag_uart_close>
}
   23850:	e037883a 	mov	sp,fp
   23854:	dfc00117 	ldw	ra,4(sp)
   23858:	df000017 	ldw	fp,0(sp)
   2385c:	dec00204 	addi	sp,sp,8
   23860:	f800283a 	ret

00023864 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23864:	defffa04 	addi	sp,sp,-24
   23868:	dfc00515 	stw	ra,20(sp)
   2386c:	df000415 	stw	fp,16(sp)
   23870:	df000404 	addi	fp,sp,16
   23874:	e13ffd15 	stw	r4,-12(fp)
   23878:	e17ffe15 	stw	r5,-8(fp)
   2387c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23880:	e0bffd17 	ldw	r2,-12(fp)
   23884:	10800017 	ldw	r2,0(r2)
   23888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2388c:	e0bffc17 	ldw	r2,-16(fp)
   23890:	10800a04 	addi	r2,r2,40
   23894:	e1bfff17 	ldw	r6,-4(fp)
   23898:	e17ffe17 	ldw	r5,-8(fp)
   2389c:	1009883a 	mov	r4,r2
   238a0:	0023c8c0 	call	23c8c <altera_avalon_jtag_uart_ioctl>
}
   238a4:	e037883a 	mov	sp,fp
   238a8:	dfc00117 	ldw	ra,4(sp)
   238ac:	df000017 	ldw	fp,0(sp)
   238b0:	dec00204 	addi	sp,sp,8
   238b4:	f800283a 	ret

000238b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   238b8:	defffa04 	addi	sp,sp,-24
   238bc:	dfc00515 	stw	ra,20(sp)
   238c0:	df000415 	stw	fp,16(sp)
   238c4:	df000404 	addi	fp,sp,16
   238c8:	e13ffd15 	stw	r4,-12(fp)
   238cc:	e17ffe15 	stw	r5,-8(fp)
   238d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   238d4:	e0bffd17 	ldw	r2,-12(fp)
   238d8:	00c00044 	movi	r3,1
   238dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   238e0:	e0bffd17 	ldw	r2,-12(fp)
   238e4:	10800017 	ldw	r2,0(r2)
   238e8:	10800104 	addi	r2,r2,4
   238ec:	1007883a 	mov	r3,r2
   238f0:	e0bffd17 	ldw	r2,-12(fp)
   238f4:	10800817 	ldw	r2,32(r2)
   238f8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   238fc:	e0bffe17 	ldw	r2,-8(fp)
   23900:	e0ffff17 	ldw	r3,-4(fp)
   23904:	d8000015 	stw	zero,0(sp)
   23908:	e1fffd17 	ldw	r7,-12(fp)
   2390c:	018000b4 	movhi	r6,2
   23910:	318e5e04 	addi	r6,r6,14712
   23914:	180b883a 	mov	r5,r3
   23918:	1009883a 	mov	r4,r2
   2391c:	0022fa80 	call	22fa8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23920:	e0bffd17 	ldw	r2,-12(fp)
   23924:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23928:	e0bffd17 	ldw	r2,-12(fp)
   2392c:	10800204 	addi	r2,r2,8
   23930:	d0e6cc17 	ldw	r3,-25808(gp)
   23934:	e1fffd17 	ldw	r7,-12(fp)
   23938:	018000b4 	movhi	r6,2
   2393c:	318ee104 	addi	r6,r6,15236
   23940:	180b883a 	mov	r5,r3
   23944:	1009883a 	mov	r4,r2
   23948:	00242b00 	call	242b0 <alt_alarm_start>
   2394c:	1000040e 	bge	r2,zero,23960 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23950:	e0fffd17 	ldw	r3,-12(fp)
   23954:	00a00034 	movhi	r2,32768
   23958:	10bfffc4 	addi	r2,r2,-1
   2395c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23960:	0001883a 	nop
   23964:	e037883a 	mov	sp,fp
   23968:	dfc00117 	ldw	ra,4(sp)
   2396c:	df000017 	ldw	fp,0(sp)
   23970:	dec00204 	addi	sp,sp,8
   23974:	f800283a 	ret

00023978 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23978:	defff804 	addi	sp,sp,-32
   2397c:	df000715 	stw	fp,28(sp)
   23980:	df000704 	addi	fp,sp,28
   23984:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23988:	e0bfff17 	ldw	r2,-4(fp)
   2398c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23990:	e0bffb17 	ldw	r2,-20(fp)
   23994:	10800017 	ldw	r2,0(r2)
   23998:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2399c:	e0bffc17 	ldw	r2,-16(fp)
   239a0:	10800104 	addi	r2,r2,4
   239a4:	10800037 	ldwio	r2,0(r2)
   239a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   239ac:	e0bffd17 	ldw	r2,-12(fp)
   239b0:	1080c00c 	andi	r2,r2,768
   239b4:	10006d26 	beq	r2,zero,23b6c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   239b8:	e0bffd17 	ldw	r2,-12(fp)
   239bc:	1080400c 	andi	r2,r2,256
   239c0:	10003526 	beq	r2,zero,23a98 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   239c4:	00800074 	movhi	r2,1
   239c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   239cc:	e0bffb17 	ldw	r2,-20(fp)
   239d0:	10800a17 	ldw	r2,40(r2)
   239d4:	10800044 	addi	r2,r2,1
   239d8:	1081ffcc 	andi	r2,r2,2047
   239dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   239e0:	e0bffb17 	ldw	r2,-20(fp)
   239e4:	10c00b17 	ldw	r3,44(r2)
   239e8:	e0bffe17 	ldw	r2,-8(fp)
   239ec:	18801526 	beq	r3,r2,23a44 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   239f0:	e0bffc17 	ldw	r2,-16(fp)
   239f4:	10800037 	ldwio	r2,0(r2)
   239f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   239fc:	e0bff917 	ldw	r2,-28(fp)
   23a00:	10a0000c 	andi	r2,r2,32768
   23a04:	10001126 	beq	r2,zero,23a4c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23a08:	e0bffb17 	ldw	r2,-20(fp)
   23a0c:	10800a17 	ldw	r2,40(r2)
   23a10:	e0fff917 	ldw	r3,-28(fp)
   23a14:	1809883a 	mov	r4,r3
   23a18:	e0fffb17 	ldw	r3,-20(fp)
   23a1c:	1885883a 	add	r2,r3,r2
   23a20:	10800e04 	addi	r2,r2,56
   23a24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23a28:	e0bffb17 	ldw	r2,-20(fp)
   23a2c:	10800a17 	ldw	r2,40(r2)
   23a30:	10800044 	addi	r2,r2,1
   23a34:	10c1ffcc 	andi	r3,r2,2047
   23a38:	e0bffb17 	ldw	r2,-20(fp)
   23a3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23a40:	003fe206 	br	239cc <__alt_data_end+0xfffea9cc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   23a44:	0001883a 	nop
   23a48:	00000106 	br	23a50 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23a4c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23a50:	e0bff917 	ldw	r2,-28(fp)
   23a54:	10bfffec 	andhi	r2,r2,65535
   23a58:	10000f26 	beq	r2,zero,23a98 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23a5c:	e0bffb17 	ldw	r2,-20(fp)
   23a60:	10c00817 	ldw	r3,32(r2)
   23a64:	00bfff84 	movi	r2,-2
   23a68:	1886703a 	and	r3,r3,r2
   23a6c:	e0bffb17 	ldw	r2,-20(fp)
   23a70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23a74:	e0bffc17 	ldw	r2,-16(fp)
   23a78:	10800104 	addi	r2,r2,4
   23a7c:	1007883a 	mov	r3,r2
   23a80:	e0bffb17 	ldw	r2,-20(fp)
   23a84:	10800817 	ldw	r2,32(r2)
   23a88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23a8c:	e0bffc17 	ldw	r2,-16(fp)
   23a90:	10800104 	addi	r2,r2,4
   23a94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23a98:	e0bffd17 	ldw	r2,-12(fp)
   23a9c:	1080800c 	andi	r2,r2,512
   23aa0:	103fbe26 	beq	r2,zero,2399c <__alt_data_end+0xfffea99c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23aa4:	e0bffd17 	ldw	r2,-12(fp)
   23aa8:	1004d43a 	srli	r2,r2,16
   23aac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23ab0:	00001406 	br	23b04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23ab4:	e0bffc17 	ldw	r2,-16(fp)
   23ab8:	e0fffb17 	ldw	r3,-20(fp)
   23abc:	18c00d17 	ldw	r3,52(r3)
   23ac0:	e13ffb17 	ldw	r4,-20(fp)
   23ac4:	20c7883a 	add	r3,r4,r3
   23ac8:	18c20e04 	addi	r3,r3,2104
   23acc:	18c00003 	ldbu	r3,0(r3)
   23ad0:	18c03fcc 	andi	r3,r3,255
   23ad4:	18c0201c 	xori	r3,r3,128
   23ad8:	18ffe004 	addi	r3,r3,-128
   23adc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23ae0:	e0bffb17 	ldw	r2,-20(fp)
   23ae4:	10800d17 	ldw	r2,52(r2)
   23ae8:	10800044 	addi	r2,r2,1
   23aec:	10c1ffcc 	andi	r3,r2,2047
   23af0:	e0bffb17 	ldw	r2,-20(fp)
   23af4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23af8:	e0bffa17 	ldw	r2,-24(fp)
   23afc:	10bfffc4 	addi	r2,r2,-1
   23b00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23b04:	e0bffa17 	ldw	r2,-24(fp)
   23b08:	10000526 	beq	r2,zero,23b20 <altera_avalon_jtag_uart_irq+0x1a8>
   23b0c:	e0bffb17 	ldw	r2,-20(fp)
   23b10:	10c00d17 	ldw	r3,52(r2)
   23b14:	e0bffb17 	ldw	r2,-20(fp)
   23b18:	10800c17 	ldw	r2,48(r2)
   23b1c:	18bfe51e 	bne	r3,r2,23ab4 <__alt_data_end+0xfffeaab4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23b20:	e0bffa17 	ldw	r2,-24(fp)
   23b24:	103f9d26 	beq	r2,zero,2399c <__alt_data_end+0xfffea99c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23b28:	e0bffb17 	ldw	r2,-20(fp)
   23b2c:	10c00817 	ldw	r3,32(r2)
   23b30:	00bfff44 	movi	r2,-3
   23b34:	1886703a 	and	r3,r3,r2
   23b38:	e0bffb17 	ldw	r2,-20(fp)
   23b3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23b40:	e0bffb17 	ldw	r2,-20(fp)
   23b44:	10800017 	ldw	r2,0(r2)
   23b48:	10800104 	addi	r2,r2,4
   23b4c:	1007883a 	mov	r3,r2
   23b50:	e0bffb17 	ldw	r2,-20(fp)
   23b54:	10800817 	ldw	r2,32(r2)
   23b58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23b5c:	e0bffc17 	ldw	r2,-16(fp)
   23b60:	10800104 	addi	r2,r2,4
   23b64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23b68:	003f8c06 	br	2399c <__alt_data_end+0xfffea99c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   23b6c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   23b70:	0001883a 	nop
   23b74:	e037883a 	mov	sp,fp
   23b78:	df000017 	ldw	fp,0(sp)
   23b7c:	dec00104 	addi	sp,sp,4
   23b80:	f800283a 	ret

00023b84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23b84:	defff804 	addi	sp,sp,-32
   23b88:	df000715 	stw	fp,28(sp)
   23b8c:	df000704 	addi	fp,sp,28
   23b90:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23b94:	e0bffb17 	ldw	r2,-20(fp)
   23b98:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23b9c:	e0bff917 	ldw	r2,-28(fp)
   23ba0:	10800017 	ldw	r2,0(r2)
   23ba4:	10800104 	addi	r2,r2,4
   23ba8:	10800037 	ldwio	r2,0(r2)
   23bac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23bb0:	e0bffa17 	ldw	r2,-24(fp)
   23bb4:	1081000c 	andi	r2,r2,1024
   23bb8:	10000b26 	beq	r2,zero,23be8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23bbc:	e0bff917 	ldw	r2,-28(fp)
   23bc0:	10800017 	ldw	r2,0(r2)
   23bc4:	10800104 	addi	r2,r2,4
   23bc8:	1007883a 	mov	r3,r2
   23bcc:	e0bff917 	ldw	r2,-28(fp)
   23bd0:	10800817 	ldw	r2,32(r2)
   23bd4:	10810014 	ori	r2,r2,1024
   23bd8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23bdc:	e0bff917 	ldw	r2,-28(fp)
   23be0:	10000915 	stw	zero,36(r2)
   23be4:	00000a06 	br	23c10 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23be8:	e0bff917 	ldw	r2,-28(fp)
   23bec:	10c00917 	ldw	r3,36(r2)
   23bf0:	00a00034 	movhi	r2,32768
   23bf4:	10bfff04 	addi	r2,r2,-4
   23bf8:	10c00536 	bltu	r2,r3,23c10 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23bfc:	e0bff917 	ldw	r2,-28(fp)
   23c00:	10800917 	ldw	r2,36(r2)
   23c04:	10c00044 	addi	r3,r2,1
   23c08:	e0bff917 	ldw	r2,-28(fp)
   23c0c:	10c00915 	stw	r3,36(r2)
   23c10:	d0a6cc17 	ldw	r2,-25808(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23c14:	e037883a 	mov	sp,fp
   23c18:	df000017 	ldw	fp,0(sp)
   23c1c:	dec00104 	addi	sp,sp,4
   23c20:	f800283a 	ret

00023c24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23c24:	defffd04 	addi	sp,sp,-12
   23c28:	df000215 	stw	fp,8(sp)
   23c2c:	df000204 	addi	fp,sp,8
   23c30:	e13ffe15 	stw	r4,-8(fp)
   23c34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23c38:	00000506 	br	23c50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23c3c:	e0bfff17 	ldw	r2,-4(fp)
   23c40:	1090000c 	andi	r2,r2,16384
   23c44:	10000226 	beq	r2,zero,23c50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23c48:	00bffd44 	movi	r2,-11
   23c4c:	00000b06 	br	23c7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23c50:	e0bffe17 	ldw	r2,-8(fp)
   23c54:	10c00d17 	ldw	r3,52(r2)
   23c58:	e0bffe17 	ldw	r2,-8(fp)
   23c5c:	10800c17 	ldw	r2,48(r2)
   23c60:	18800526 	beq	r3,r2,23c78 <altera_avalon_jtag_uart_close+0x54>
   23c64:	e0bffe17 	ldw	r2,-8(fp)
   23c68:	10c00917 	ldw	r3,36(r2)
   23c6c:	e0bffe17 	ldw	r2,-8(fp)
   23c70:	10800117 	ldw	r2,4(r2)
   23c74:	18bff136 	bltu	r3,r2,23c3c <__alt_data_end+0xfffeac3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23c78:	0005883a 	mov	r2,zero
}
   23c7c:	e037883a 	mov	sp,fp
   23c80:	df000017 	ldw	fp,0(sp)
   23c84:	dec00104 	addi	sp,sp,4
   23c88:	f800283a 	ret

00023c8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23c8c:	defffa04 	addi	sp,sp,-24
   23c90:	df000515 	stw	fp,20(sp)
   23c94:	df000504 	addi	fp,sp,20
   23c98:	e13ffd15 	stw	r4,-12(fp)
   23c9c:	e17ffe15 	stw	r5,-8(fp)
   23ca0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23ca4:	00bff9c4 	movi	r2,-25
   23ca8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23cac:	e0bffe17 	ldw	r2,-8(fp)
   23cb0:	10da8060 	cmpeqi	r3,r2,27137
   23cb4:	1800031e 	bne	r3,zero,23cc4 <altera_avalon_jtag_uart_ioctl+0x38>
   23cb8:	109a80a0 	cmpeqi	r2,r2,27138
   23cbc:	1000181e 	bne	r2,zero,23d20 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   23cc0:	00002906 	br	23d68 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23cc4:	e0bffd17 	ldw	r2,-12(fp)
   23cc8:	10c00117 	ldw	r3,4(r2)
   23ccc:	00a00034 	movhi	r2,32768
   23cd0:	10bfffc4 	addi	r2,r2,-1
   23cd4:	18802126 	beq	r3,r2,23d5c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   23cd8:	e0bfff17 	ldw	r2,-4(fp)
   23cdc:	10800017 	ldw	r2,0(r2)
   23ce0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23ce4:	e0bffc17 	ldw	r2,-16(fp)
   23ce8:	10800090 	cmplti	r2,r2,2
   23cec:	1000061e 	bne	r2,zero,23d08 <altera_avalon_jtag_uart_ioctl+0x7c>
   23cf0:	e0fffc17 	ldw	r3,-16(fp)
   23cf4:	00a00034 	movhi	r2,32768
   23cf8:	10bfffc4 	addi	r2,r2,-1
   23cfc:	18800226 	beq	r3,r2,23d08 <altera_avalon_jtag_uart_ioctl+0x7c>
   23d00:	e0bffc17 	ldw	r2,-16(fp)
   23d04:	00000206 	br	23d10 <altera_avalon_jtag_uart_ioctl+0x84>
   23d08:	00a00034 	movhi	r2,32768
   23d0c:	10bfff84 	addi	r2,r2,-2
   23d10:	e0fffd17 	ldw	r3,-12(fp)
   23d14:	18800115 	stw	r2,4(r3)
      rc = 0;
   23d18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23d1c:	00000f06 	br	23d5c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23d20:	e0bffd17 	ldw	r2,-12(fp)
   23d24:	10c00117 	ldw	r3,4(r2)
   23d28:	00a00034 	movhi	r2,32768
   23d2c:	10bfffc4 	addi	r2,r2,-1
   23d30:	18800c26 	beq	r3,r2,23d64 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23d34:	e0bffd17 	ldw	r2,-12(fp)
   23d38:	10c00917 	ldw	r3,36(r2)
   23d3c:	e0bffd17 	ldw	r2,-12(fp)
   23d40:	10800117 	ldw	r2,4(r2)
   23d44:	1885803a 	cmpltu	r2,r3,r2
   23d48:	10c03fcc 	andi	r3,r2,255
   23d4c:	e0bfff17 	ldw	r2,-4(fp)
   23d50:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23d54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23d58:	00000206 	br	23d64 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   23d5c:	0001883a 	nop
   23d60:	00000106 	br	23d68 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   23d64:	0001883a 	nop

  default:
    break;
  }

  return rc;
   23d68:	e0bffb17 	ldw	r2,-20(fp)
}
   23d6c:	e037883a 	mov	sp,fp
   23d70:	df000017 	ldw	fp,0(sp)
   23d74:	dec00104 	addi	sp,sp,4
   23d78:	f800283a 	ret

00023d7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23d7c:	defff304 	addi	sp,sp,-52
   23d80:	dfc00c15 	stw	ra,48(sp)
   23d84:	df000b15 	stw	fp,44(sp)
   23d88:	df000b04 	addi	fp,sp,44
   23d8c:	e13ffc15 	stw	r4,-16(fp)
   23d90:	e17ffd15 	stw	r5,-12(fp)
   23d94:	e1bffe15 	stw	r6,-8(fp)
   23d98:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   23d9c:	e0bffd17 	ldw	r2,-12(fp)
   23da0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23da4:	00004706 	br	23ec4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23da8:	e0bffc17 	ldw	r2,-16(fp)
   23dac:	10800a17 	ldw	r2,40(r2)
   23db0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   23db4:	e0bffc17 	ldw	r2,-16(fp)
   23db8:	10800b17 	ldw	r2,44(r2)
   23dbc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   23dc0:	e0fff717 	ldw	r3,-36(fp)
   23dc4:	e0bff817 	ldw	r2,-32(fp)
   23dc8:	18800536 	bltu	r3,r2,23de0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23dcc:	e0fff717 	ldw	r3,-36(fp)
   23dd0:	e0bff817 	ldw	r2,-32(fp)
   23dd4:	1885c83a 	sub	r2,r3,r2
   23dd8:	e0bff615 	stw	r2,-40(fp)
   23ddc:	00000406 	br	23df0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23de0:	00c20004 	movi	r3,2048
   23de4:	e0bff817 	ldw	r2,-32(fp)
   23de8:	1885c83a 	sub	r2,r3,r2
   23dec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23df0:	e0bff617 	ldw	r2,-40(fp)
   23df4:	10001e26 	beq	r2,zero,23e70 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   23df8:	e0fffe17 	ldw	r3,-8(fp)
   23dfc:	e0bff617 	ldw	r2,-40(fp)
   23e00:	1880022e 	bgeu	r3,r2,23e0c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   23e04:	e0bffe17 	ldw	r2,-8(fp)
   23e08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23e0c:	e0bffc17 	ldw	r2,-16(fp)
   23e10:	10c00e04 	addi	r3,r2,56
   23e14:	e0bff817 	ldw	r2,-32(fp)
   23e18:	1885883a 	add	r2,r3,r2
   23e1c:	e1bff617 	ldw	r6,-40(fp)
   23e20:	100b883a 	mov	r5,r2
   23e24:	e13ff517 	ldw	r4,-44(fp)
   23e28:	00225b00 	call	225b0 <memcpy>
      ptr   += n;
   23e2c:	e0fff517 	ldw	r3,-44(fp)
   23e30:	e0bff617 	ldw	r2,-40(fp)
   23e34:	1885883a 	add	r2,r3,r2
   23e38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   23e3c:	e0fffe17 	ldw	r3,-8(fp)
   23e40:	e0bff617 	ldw	r2,-40(fp)
   23e44:	1885c83a 	sub	r2,r3,r2
   23e48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e4c:	e0fff817 	ldw	r3,-32(fp)
   23e50:	e0bff617 	ldw	r2,-40(fp)
   23e54:	1885883a 	add	r2,r3,r2
   23e58:	10c1ffcc 	andi	r3,r2,2047
   23e5c:	e0bffc17 	ldw	r2,-16(fp)
   23e60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   23e64:	e0bffe17 	ldw	r2,-8(fp)
   23e68:	00bfcf16 	blt	zero,r2,23da8 <__alt_data_end+0xfffeada8>
   23e6c:	00000106 	br	23e74 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   23e70:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   23e74:	e0fff517 	ldw	r3,-44(fp)
   23e78:	e0bffd17 	ldw	r2,-12(fp)
   23e7c:	1880141e 	bne	r3,r2,23ed0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   23e80:	e0bfff17 	ldw	r2,-4(fp)
   23e84:	1090000c 	andi	r2,r2,16384
   23e88:	1000131e 	bne	r2,zero,23ed8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23e8c:	0001883a 	nop
   23e90:	e0bffc17 	ldw	r2,-16(fp)
   23e94:	10c00a17 	ldw	r3,40(r2)
   23e98:	e0bff717 	ldw	r2,-36(fp)
   23e9c:	1880051e 	bne	r3,r2,23eb4 <altera_avalon_jtag_uart_read+0x138>
   23ea0:	e0bffc17 	ldw	r2,-16(fp)
   23ea4:	10c00917 	ldw	r3,36(r2)
   23ea8:	e0bffc17 	ldw	r2,-16(fp)
   23eac:	10800117 	ldw	r2,4(r2)
   23eb0:	18bff736 	bltu	r3,r2,23e90 <__alt_data_end+0xfffeae90>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23eb4:	e0bffc17 	ldw	r2,-16(fp)
   23eb8:	10c00a17 	ldw	r3,40(r2)
   23ebc:	e0bff717 	ldw	r2,-36(fp)
   23ec0:	18800726 	beq	r3,r2,23ee0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23ec4:	e0bffe17 	ldw	r2,-8(fp)
   23ec8:	00bfb716 	blt	zero,r2,23da8 <__alt_data_end+0xfffeada8>
   23ecc:	00000506 	br	23ee4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   23ed0:	0001883a 	nop
   23ed4:	00000306 	br	23ee4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23ed8:	0001883a 	nop
   23edc:	00000106 	br	23ee4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   23ee0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23ee4:	e0fff517 	ldw	r3,-44(fp)
   23ee8:	e0bffd17 	ldw	r2,-12(fp)
   23eec:	18801826 	beq	r3,r2,23f50 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ef0:	0005303a 	rdctl	r2,status
   23ef4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23ef8:	e0fffb17 	ldw	r3,-20(fp)
   23efc:	00bfff84 	movi	r2,-2
   23f00:	1884703a 	and	r2,r3,r2
   23f04:	1001703a 	wrctl	status,r2
  
  return context;
   23f08:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23f0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23f10:	e0bffc17 	ldw	r2,-16(fp)
   23f14:	10800817 	ldw	r2,32(r2)
   23f18:	10c00054 	ori	r3,r2,1
   23f1c:	e0bffc17 	ldw	r2,-16(fp)
   23f20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f24:	e0bffc17 	ldw	r2,-16(fp)
   23f28:	10800017 	ldw	r2,0(r2)
   23f2c:	10800104 	addi	r2,r2,4
   23f30:	1007883a 	mov	r3,r2
   23f34:	e0bffc17 	ldw	r2,-16(fp)
   23f38:	10800817 	ldw	r2,32(r2)
   23f3c:	18800035 	stwio	r2,0(r3)
   23f40:	e0bffa17 	ldw	r2,-24(fp)
   23f44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23f48:	e0bff917 	ldw	r2,-28(fp)
   23f4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23f50:	e0fff517 	ldw	r3,-44(fp)
   23f54:	e0bffd17 	ldw	r2,-12(fp)
   23f58:	18800426 	beq	r3,r2,23f6c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   23f5c:	e0fff517 	ldw	r3,-44(fp)
   23f60:	e0bffd17 	ldw	r2,-12(fp)
   23f64:	1885c83a 	sub	r2,r3,r2
   23f68:	00000606 	br	23f84 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   23f6c:	e0bfff17 	ldw	r2,-4(fp)
   23f70:	1090000c 	andi	r2,r2,16384
   23f74:	10000226 	beq	r2,zero,23f80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   23f78:	00bffd44 	movi	r2,-11
   23f7c:	00000106 	br	23f84 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   23f80:	00bffec4 	movi	r2,-5
}
   23f84:	e037883a 	mov	sp,fp
   23f88:	dfc00117 	ldw	ra,4(sp)
   23f8c:	df000017 	ldw	fp,0(sp)
   23f90:	dec00204 	addi	sp,sp,8
   23f94:	f800283a 	ret

00023f98 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23f98:	defff304 	addi	sp,sp,-52
   23f9c:	dfc00c15 	stw	ra,48(sp)
   23fa0:	df000b15 	stw	fp,44(sp)
   23fa4:	df000b04 	addi	fp,sp,44
   23fa8:	e13ffc15 	stw	r4,-16(fp)
   23fac:	e17ffd15 	stw	r5,-12(fp)
   23fb0:	e1bffe15 	stw	r6,-8(fp)
   23fb4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23fb8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23fbc:	e0bffd17 	ldw	r2,-12(fp)
   23fc0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23fc4:	00003706 	br	240a4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23fc8:	e0bffc17 	ldw	r2,-16(fp)
   23fcc:	10800c17 	ldw	r2,48(r2)
   23fd0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   23fd4:	e0bffc17 	ldw	r2,-16(fp)
   23fd8:	10800d17 	ldw	r2,52(r2)
   23fdc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   23fe0:	e0fff917 	ldw	r3,-28(fp)
   23fe4:	e0bff517 	ldw	r2,-44(fp)
   23fe8:	1880062e 	bgeu	r3,r2,24004 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   23fec:	e0fff517 	ldw	r3,-44(fp)
   23ff0:	e0bff917 	ldw	r2,-28(fp)
   23ff4:	1885c83a 	sub	r2,r3,r2
   23ff8:	10bfffc4 	addi	r2,r2,-1
   23ffc:	e0bff615 	stw	r2,-40(fp)
   24000:	00000b06 	br	24030 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24004:	e0bff517 	ldw	r2,-44(fp)
   24008:	10000526 	beq	r2,zero,24020 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2400c:	00c20004 	movi	r3,2048
   24010:	e0bff917 	ldw	r2,-28(fp)
   24014:	1885c83a 	sub	r2,r3,r2
   24018:	e0bff615 	stw	r2,-40(fp)
   2401c:	00000406 	br	24030 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24020:	00c1ffc4 	movi	r3,2047
   24024:	e0bff917 	ldw	r2,-28(fp)
   24028:	1885c83a 	sub	r2,r3,r2
   2402c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24030:	e0bff617 	ldw	r2,-40(fp)
   24034:	10001e26 	beq	r2,zero,240b0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24038:	e0fffe17 	ldw	r3,-8(fp)
   2403c:	e0bff617 	ldw	r2,-40(fp)
   24040:	1880022e 	bgeu	r3,r2,2404c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24044:	e0bffe17 	ldw	r2,-8(fp)
   24048:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2404c:	e0bffc17 	ldw	r2,-16(fp)
   24050:	10c20e04 	addi	r3,r2,2104
   24054:	e0bff917 	ldw	r2,-28(fp)
   24058:	1885883a 	add	r2,r3,r2
   2405c:	e1bff617 	ldw	r6,-40(fp)
   24060:	e17ffd17 	ldw	r5,-12(fp)
   24064:	1009883a 	mov	r4,r2
   24068:	00225b00 	call	225b0 <memcpy>
      ptr   += n;
   2406c:	e0fffd17 	ldw	r3,-12(fp)
   24070:	e0bff617 	ldw	r2,-40(fp)
   24074:	1885883a 	add	r2,r3,r2
   24078:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2407c:	e0fffe17 	ldw	r3,-8(fp)
   24080:	e0bff617 	ldw	r2,-40(fp)
   24084:	1885c83a 	sub	r2,r3,r2
   24088:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2408c:	e0fff917 	ldw	r3,-28(fp)
   24090:	e0bff617 	ldw	r2,-40(fp)
   24094:	1885883a 	add	r2,r3,r2
   24098:	10c1ffcc 	andi	r3,r2,2047
   2409c:	e0bffc17 	ldw	r2,-16(fp)
   240a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   240a4:	e0bffe17 	ldw	r2,-8(fp)
   240a8:	00bfc716 	blt	zero,r2,23fc8 <__alt_data_end+0xfffeafc8>
   240ac:	00000106 	br	240b4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   240b0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   240b4:	0005303a 	rdctl	r2,status
   240b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   240bc:	e0fffb17 	ldw	r3,-20(fp)
   240c0:	00bfff84 	movi	r2,-2
   240c4:	1884703a 	and	r2,r3,r2
   240c8:	1001703a 	wrctl	status,r2
  
  return context;
   240cc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   240d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   240d4:	e0bffc17 	ldw	r2,-16(fp)
   240d8:	10800817 	ldw	r2,32(r2)
   240dc:	10c00094 	ori	r3,r2,2
   240e0:	e0bffc17 	ldw	r2,-16(fp)
   240e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   240e8:	e0bffc17 	ldw	r2,-16(fp)
   240ec:	10800017 	ldw	r2,0(r2)
   240f0:	10800104 	addi	r2,r2,4
   240f4:	1007883a 	mov	r3,r2
   240f8:	e0bffc17 	ldw	r2,-16(fp)
   240fc:	10800817 	ldw	r2,32(r2)
   24100:	18800035 	stwio	r2,0(r3)
   24104:	e0bffa17 	ldw	r2,-24(fp)
   24108:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2410c:	e0bff817 	ldw	r2,-32(fp)
   24110:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24114:	e0bffe17 	ldw	r2,-8(fp)
   24118:	0080100e 	bge	zero,r2,2415c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2411c:	e0bfff17 	ldw	r2,-4(fp)
   24120:	1090000c 	andi	r2,r2,16384
   24124:	1000101e 	bne	r2,zero,24168 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24128:	0001883a 	nop
   2412c:	e0bffc17 	ldw	r2,-16(fp)
   24130:	10c00d17 	ldw	r3,52(r2)
   24134:	e0bff517 	ldw	r2,-44(fp)
   24138:	1880051e 	bne	r3,r2,24150 <altera_avalon_jtag_uart_write+0x1b8>
   2413c:	e0bffc17 	ldw	r2,-16(fp)
   24140:	10c00917 	ldw	r3,36(r2)
   24144:	e0bffc17 	ldw	r2,-16(fp)
   24148:	10800117 	ldw	r2,4(r2)
   2414c:	18bff736 	bltu	r3,r2,2412c <__alt_data_end+0xfffeb12c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24150:	e0bffc17 	ldw	r2,-16(fp)
   24154:	10800917 	ldw	r2,36(r2)
   24158:	1000051e 	bne	r2,zero,24170 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2415c:	e0bffe17 	ldw	r2,-8(fp)
   24160:	00bfd016 	blt	zero,r2,240a4 <__alt_data_end+0xfffeb0a4>
   24164:	00000306 	br	24174 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   24168:	0001883a 	nop
   2416c:	00000106 	br	24174 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24170:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24174:	e0fffd17 	ldw	r3,-12(fp)
   24178:	e0bff717 	ldw	r2,-36(fp)
   2417c:	18800426 	beq	r3,r2,24190 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24180:	e0fffd17 	ldw	r3,-12(fp)
   24184:	e0bff717 	ldw	r2,-36(fp)
   24188:	1885c83a 	sub	r2,r3,r2
   2418c:	00000606 	br	241a8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24190:	e0bfff17 	ldw	r2,-4(fp)
   24194:	1090000c 	andi	r2,r2,16384
   24198:	10000226 	beq	r2,zero,241a4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2419c:	00bffd44 	movi	r2,-11
   241a0:	00000106 	br	241a8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   241a4:	00bffec4 	movi	r2,-5
}
   241a8:	e037883a 	mov	sp,fp
   241ac:	dfc00117 	ldw	ra,4(sp)
   241b0:	df000017 	ldw	fp,0(sp)
   241b4:	dec00204 	addi	sp,sp,8
   241b8:	f800283a 	ret

000241bc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   241bc:	defffa04 	addi	sp,sp,-24
   241c0:	dfc00515 	stw	ra,20(sp)
   241c4:	df000415 	stw	fp,16(sp)
   241c8:	df000404 	addi	fp,sp,16
   241cc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   241d0:	0007883a 	mov	r3,zero
   241d4:	e0bfff17 	ldw	r2,-4(fp)
   241d8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   241dc:	e0bfff17 	ldw	r2,-4(fp)
   241e0:	10800104 	addi	r2,r2,4
   241e4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   241e8:	0005303a 	rdctl	r2,status
   241ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   241f0:	e0fffd17 	ldw	r3,-12(fp)
   241f4:	00bfff84 	movi	r2,-2
   241f8:	1884703a 	and	r2,r3,r2
   241fc:	1001703a 	wrctl	status,r2
  
  return context;
   24200:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24204:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   24208:	00235800 	call	23580 <alt_tick>
   2420c:	e0bffc17 	ldw	r2,-16(fp)
   24210:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24214:	e0bffe17 	ldw	r2,-8(fp)
   24218:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2421c:	0001883a 	nop
   24220:	e037883a 	mov	sp,fp
   24224:	dfc00117 	ldw	ra,4(sp)
   24228:	df000017 	ldw	fp,0(sp)
   2422c:	dec00204 	addi	sp,sp,8
   24230:	f800283a 	ret

00024234 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24234:	defff804 	addi	sp,sp,-32
   24238:	dfc00715 	stw	ra,28(sp)
   2423c:	df000615 	stw	fp,24(sp)
   24240:	df000604 	addi	fp,sp,24
   24244:	e13ffc15 	stw	r4,-16(fp)
   24248:	e17ffd15 	stw	r5,-12(fp)
   2424c:	e1bffe15 	stw	r6,-8(fp)
   24250:	e1ffff15 	stw	r7,-4(fp)
   24254:	e0bfff17 	ldw	r2,-4(fp)
   24258:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2425c:	d0a6cc17 	ldw	r2,-25808(gp)
   24260:	1000021e 	bne	r2,zero,2426c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   24264:	e0bffb17 	ldw	r2,-20(fp)
   24268:	d0a6cc15 	stw	r2,-25808(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2426c:	e0bffc17 	ldw	r2,-16(fp)
   24270:	10800104 	addi	r2,r2,4
   24274:	00c001c4 	movi	r3,7
   24278:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2427c:	d8000015 	stw	zero,0(sp)
   24280:	e1fffc17 	ldw	r7,-16(fp)
   24284:	018000b4 	movhi	r6,2
   24288:	31906f04 	addi	r6,r6,16828
   2428c:	e17ffe17 	ldw	r5,-8(fp)
   24290:	e13ffd17 	ldw	r4,-12(fp)
   24294:	0022fa80 	call	22fa8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   24298:	0001883a 	nop
   2429c:	e037883a 	mov	sp,fp
   242a0:	dfc00117 	ldw	ra,4(sp)
   242a4:	df000017 	ldw	fp,0(sp)
   242a8:	dec00204 	addi	sp,sp,8
   242ac:	f800283a 	ret

000242b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   242b0:	defff504 	addi	sp,sp,-44
   242b4:	df000a15 	stw	fp,40(sp)
   242b8:	df000a04 	addi	fp,sp,40
   242bc:	e13ffc15 	stw	r4,-16(fp)
   242c0:	e17ffd15 	stw	r5,-12(fp)
   242c4:	e1bffe15 	stw	r6,-8(fp)
   242c8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   242cc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   242d0:	d0a6cc17 	ldw	r2,-25808(gp)
  
  if (alt_ticks_per_second ())
   242d4:	10003c26 	beq	r2,zero,243c8 <alt_alarm_start+0x118>
  {
    if (alarm)
   242d8:	e0bffc17 	ldw	r2,-16(fp)
   242dc:	10003826 	beq	r2,zero,243c0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   242e0:	e0bffc17 	ldw	r2,-16(fp)
   242e4:	e0fffe17 	ldw	r3,-8(fp)
   242e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   242ec:	e0bffc17 	ldw	r2,-16(fp)
   242f0:	e0ffff17 	ldw	r3,-4(fp)
   242f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   242f8:	0005303a 	rdctl	r2,status
   242fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24300:	e0fff917 	ldw	r3,-28(fp)
   24304:	00bfff84 	movi	r2,-2
   24308:	1884703a 	and	r2,r3,r2
   2430c:	1001703a 	wrctl	status,r2
  
  return context;
   24310:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24314:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24318:	d0a6cd17 	ldw	r2,-25804(gp)
      
      current_nticks = alt_nticks();
   2431c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24320:	e0fffd17 	ldw	r3,-12(fp)
   24324:	e0bff617 	ldw	r2,-40(fp)
   24328:	1885883a 	add	r2,r3,r2
   2432c:	10c00044 	addi	r3,r2,1
   24330:	e0bffc17 	ldw	r2,-16(fp)
   24334:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24338:	e0bffc17 	ldw	r2,-16(fp)
   2433c:	10c00217 	ldw	r3,8(r2)
   24340:	e0bff617 	ldw	r2,-40(fp)
   24344:	1880042e 	bgeu	r3,r2,24358 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   24348:	e0bffc17 	ldw	r2,-16(fp)
   2434c:	00c00044 	movi	r3,1
   24350:	10c00405 	stb	r3,16(r2)
   24354:	00000206 	br	24360 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   24358:	e0bffc17 	ldw	r2,-16(fp)
   2435c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24360:	e0bffc17 	ldw	r2,-16(fp)
   24364:	d0e00904 	addi	r3,gp,-32732
   24368:	e0fffa15 	stw	r3,-24(fp)
   2436c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24370:	e0bffb17 	ldw	r2,-20(fp)
   24374:	e0fffa17 	ldw	r3,-24(fp)
   24378:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2437c:	e0bffa17 	ldw	r2,-24(fp)
   24380:	10c00017 	ldw	r3,0(r2)
   24384:	e0bffb17 	ldw	r2,-20(fp)
   24388:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2438c:	e0bffa17 	ldw	r2,-24(fp)
   24390:	10800017 	ldw	r2,0(r2)
   24394:	e0fffb17 	ldw	r3,-20(fp)
   24398:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2439c:	e0bffa17 	ldw	r2,-24(fp)
   243a0:	e0fffb17 	ldw	r3,-20(fp)
   243a4:	10c00015 	stw	r3,0(r2)
   243a8:	e0bff817 	ldw	r2,-32(fp)
   243ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   243b0:	e0bff717 	ldw	r2,-36(fp)
   243b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   243b8:	0005883a 	mov	r2,zero
   243bc:	00000306 	br	243cc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   243c0:	00bffa84 	movi	r2,-22
   243c4:	00000106 	br	243cc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   243c8:	00bfde84 	movi	r2,-134
  }
}
   243cc:	e037883a 	mov	sp,fp
   243d0:	df000017 	ldw	fp,0(sp)
   243d4:	dec00104 	addi	sp,sp,4
   243d8:	f800283a 	ret

000243dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   243dc:	defffe04 	addi	sp,sp,-8
   243e0:	dfc00115 	stw	ra,4(sp)
   243e4:	df000015 	stw	fp,0(sp)
   243e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   243ec:	d0a01017 	ldw	r2,-32704(gp)
   243f0:	10000326 	beq	r2,zero,24400 <alt_get_errno+0x24>
   243f4:	d0a01017 	ldw	r2,-32704(gp)
   243f8:	103ee83a 	callr	r2
   243fc:	00000106 	br	24404 <alt_get_errno+0x28>
   24400:	d0a6c304 	addi	r2,gp,-25844
}
   24404:	e037883a 	mov	sp,fp
   24408:	dfc00117 	ldw	ra,4(sp)
   2440c:	df000017 	ldw	fp,0(sp)
   24410:	dec00204 	addi	sp,sp,8
   24414:	f800283a 	ret

00024418 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   24418:	defffb04 	addi	sp,sp,-20
   2441c:	dfc00415 	stw	ra,16(sp)
   24420:	df000315 	stw	fp,12(sp)
   24424:	df000304 	addi	fp,sp,12
   24428:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2442c:	e0bfff17 	ldw	r2,-4(fp)
   24430:	10000816 	blt	r2,zero,24454 <close+0x3c>
   24434:	01400304 	movi	r5,12
   24438:	e13fff17 	ldw	r4,-4(fp)
   2443c:	0021d540 	call	21d54 <__mulsi3>
   24440:	1007883a 	mov	r3,r2
   24444:	008000f4 	movhi	r2,3
   24448:	10a58204 	addi	r2,r2,-27128
   2444c:	1885883a 	add	r2,r3,r2
   24450:	00000106 	br	24458 <close+0x40>
   24454:	0005883a 	mov	r2,zero
   24458:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2445c:	e0bffd17 	ldw	r2,-12(fp)
   24460:	10001926 	beq	r2,zero,244c8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24464:	e0bffd17 	ldw	r2,-12(fp)
   24468:	10800017 	ldw	r2,0(r2)
   2446c:	10800417 	ldw	r2,16(r2)
   24470:	10000626 	beq	r2,zero,2448c <close+0x74>
   24474:	e0bffd17 	ldw	r2,-12(fp)
   24478:	10800017 	ldw	r2,0(r2)
   2447c:	10800417 	ldw	r2,16(r2)
   24480:	e13ffd17 	ldw	r4,-12(fp)
   24484:	103ee83a 	callr	r2
   24488:	00000106 	br	24490 <close+0x78>
   2448c:	0005883a 	mov	r2,zero
   24490:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24494:	e13fff17 	ldw	r4,-4(fp)
   24498:	0024b7c0 	call	24b7c <alt_release_fd>
    if (rval < 0)
   2449c:	e0bffe17 	ldw	r2,-8(fp)
   244a0:	1000070e 	bge	r2,zero,244c0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   244a4:	00243dc0 	call	243dc <alt_get_errno>
   244a8:	1007883a 	mov	r3,r2
   244ac:	e0bffe17 	ldw	r2,-8(fp)
   244b0:	0085c83a 	sub	r2,zero,r2
   244b4:	18800015 	stw	r2,0(r3)
      return -1;
   244b8:	00bfffc4 	movi	r2,-1
   244bc:	00000706 	br	244dc <close+0xc4>
    }
    return 0;
   244c0:	0005883a 	mov	r2,zero
   244c4:	00000506 	br	244dc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   244c8:	00243dc0 	call	243dc <alt_get_errno>
   244cc:	1007883a 	mov	r3,r2
   244d0:	00801444 	movi	r2,81
   244d4:	18800015 	stw	r2,0(r3)
    return -1;
   244d8:	00bfffc4 	movi	r2,-1
  }
}
   244dc:	e037883a 	mov	sp,fp
   244e0:	dfc00117 	ldw	ra,4(sp)
   244e4:	df000017 	ldw	fp,0(sp)
   244e8:	dec00204 	addi	sp,sp,8
   244ec:	f800283a 	ret

000244f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   244f0:	deffff04 	addi	sp,sp,-4
   244f4:	df000015 	stw	fp,0(sp)
   244f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   244fc:	0001883a 	nop
   24500:	e037883a 	mov	sp,fp
   24504:	df000017 	ldw	fp,0(sp)
   24508:	dec00104 	addi	sp,sp,4
   2450c:	f800283a 	ret

00024510 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   24510:	defffc04 	addi	sp,sp,-16
   24514:	df000315 	stw	fp,12(sp)
   24518:	df000304 	addi	fp,sp,12
   2451c:	e13ffd15 	stw	r4,-12(fp)
   24520:	e17ffe15 	stw	r5,-8(fp)
   24524:	e1bfff15 	stw	r6,-4(fp)
  return len;
   24528:	e0bfff17 	ldw	r2,-4(fp)
}
   2452c:	e037883a 	mov	sp,fp
   24530:	df000017 	ldw	fp,0(sp)
   24534:	dec00104 	addi	sp,sp,4
   24538:	f800283a 	ret

0002453c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2453c:	defffe04 	addi	sp,sp,-8
   24540:	dfc00115 	stw	ra,4(sp)
   24544:	df000015 	stw	fp,0(sp)
   24548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2454c:	d0a01017 	ldw	r2,-32704(gp)
   24550:	10000326 	beq	r2,zero,24560 <alt_get_errno+0x24>
   24554:	d0a01017 	ldw	r2,-32704(gp)
   24558:	103ee83a 	callr	r2
   2455c:	00000106 	br	24564 <alt_get_errno+0x28>
   24560:	d0a6c304 	addi	r2,gp,-25844
}
   24564:	e037883a 	mov	sp,fp
   24568:	dfc00117 	ldw	ra,4(sp)
   2456c:	df000017 	ldw	fp,0(sp)
   24570:	dec00204 	addi	sp,sp,8
   24574:	f800283a 	ret

00024578 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24578:	defffa04 	addi	sp,sp,-24
   2457c:	dfc00515 	stw	ra,20(sp)
   24580:	df000415 	stw	fp,16(sp)
   24584:	df000404 	addi	fp,sp,16
   24588:	e13ffe15 	stw	r4,-8(fp)
   2458c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24590:	e0bffe17 	ldw	r2,-8(fp)
   24594:	10000326 	beq	r2,zero,245a4 <alt_dev_llist_insert+0x2c>
   24598:	e0bffe17 	ldw	r2,-8(fp)
   2459c:	10800217 	ldw	r2,8(r2)
   245a0:	1000061e 	bne	r2,zero,245bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   245a4:	002453c0 	call	2453c <alt_get_errno>
   245a8:	1007883a 	mov	r3,r2
   245ac:	00800584 	movi	r2,22
   245b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   245b4:	00bffa84 	movi	r2,-22
   245b8:	00001306 	br	24608 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   245bc:	e0bffe17 	ldw	r2,-8(fp)
   245c0:	e0ffff17 	ldw	r3,-4(fp)
   245c4:	e0fffc15 	stw	r3,-16(fp)
   245c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   245cc:	e0bffd17 	ldw	r2,-12(fp)
   245d0:	e0fffc17 	ldw	r3,-16(fp)
   245d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   245d8:	e0bffc17 	ldw	r2,-16(fp)
   245dc:	10c00017 	ldw	r3,0(r2)
   245e0:	e0bffd17 	ldw	r2,-12(fp)
   245e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   245e8:	e0bffc17 	ldw	r2,-16(fp)
   245ec:	10800017 	ldw	r2,0(r2)
   245f0:	e0fffd17 	ldw	r3,-12(fp)
   245f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   245f8:	e0bffc17 	ldw	r2,-16(fp)
   245fc:	e0fffd17 	ldw	r3,-12(fp)
   24600:	10c00015 	stw	r3,0(r2)

  return 0;  
   24604:	0005883a 	mov	r2,zero
}
   24608:	e037883a 	mov	sp,fp
   2460c:	dfc00117 	ldw	ra,4(sp)
   24610:	df000017 	ldw	fp,0(sp)
   24614:	dec00204 	addi	sp,sp,8
   24618:	f800283a 	ret

0002461c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2461c:	defffd04 	addi	sp,sp,-12
   24620:	dfc00215 	stw	ra,8(sp)
   24624:	df000115 	stw	fp,4(sp)
   24628:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2462c:	008000b4 	movhi	r2,2
   24630:	109ede04 	addi	r2,r2,31608
   24634:	e0bfff15 	stw	r2,-4(fp)
   24638:	00000606 	br	24654 <_do_ctors+0x38>
        (*ctor) (); 
   2463c:	e0bfff17 	ldw	r2,-4(fp)
   24640:	10800017 	ldw	r2,0(r2)
   24644:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24648:	e0bfff17 	ldw	r2,-4(fp)
   2464c:	10bfff04 	addi	r2,r2,-4
   24650:	e0bfff15 	stw	r2,-4(fp)
   24654:	e0ffff17 	ldw	r3,-4(fp)
   24658:	008000b4 	movhi	r2,2
   2465c:	109edf04 	addi	r2,r2,31612
   24660:	18bff62e 	bgeu	r3,r2,2463c <__alt_data_end+0xfffeb63c>
        (*ctor) (); 
}
   24664:	0001883a 	nop
   24668:	e037883a 	mov	sp,fp
   2466c:	dfc00117 	ldw	ra,4(sp)
   24670:	df000017 	ldw	fp,0(sp)
   24674:	dec00204 	addi	sp,sp,8
   24678:	f800283a 	ret

0002467c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2467c:	defffd04 	addi	sp,sp,-12
   24680:	dfc00215 	stw	ra,8(sp)
   24684:	df000115 	stw	fp,4(sp)
   24688:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2468c:	008000b4 	movhi	r2,2
   24690:	109ede04 	addi	r2,r2,31608
   24694:	e0bfff15 	stw	r2,-4(fp)
   24698:	00000606 	br	246b4 <_do_dtors+0x38>
        (*dtor) (); 
   2469c:	e0bfff17 	ldw	r2,-4(fp)
   246a0:	10800017 	ldw	r2,0(r2)
   246a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   246a8:	e0bfff17 	ldw	r2,-4(fp)
   246ac:	10bfff04 	addi	r2,r2,-4
   246b0:	e0bfff15 	stw	r2,-4(fp)
   246b4:	e0ffff17 	ldw	r3,-4(fp)
   246b8:	008000b4 	movhi	r2,2
   246bc:	109edf04 	addi	r2,r2,31612
   246c0:	18bff62e 	bgeu	r3,r2,2469c <__alt_data_end+0xfffeb69c>
        (*dtor) (); 
}
   246c4:	0001883a 	nop
   246c8:	e037883a 	mov	sp,fp
   246cc:	dfc00117 	ldw	ra,4(sp)
   246d0:	df000017 	ldw	fp,0(sp)
   246d4:	dec00204 	addi	sp,sp,8
   246d8:	f800283a 	ret

000246dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   246dc:	deffff04 	addi	sp,sp,-4
   246e0:	df000015 	stw	fp,0(sp)
   246e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   246e8:	0001883a 	nop
   246ec:	e037883a 	mov	sp,fp
   246f0:	df000017 	ldw	fp,0(sp)
   246f4:	dec00104 	addi	sp,sp,4
   246f8:	f800283a 	ret

000246fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   246fc:	defffe04 	addi	sp,sp,-8
   24700:	df000115 	stw	fp,4(sp)
   24704:	df000104 	addi	fp,sp,4
   24708:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2470c:	e0bfff17 	ldw	r2,-4(fp)
   24710:	10bffe84 	addi	r2,r2,-6
   24714:	10c00428 	cmpgeui	r3,r2,16
   24718:	18001a1e 	bne	r3,zero,24784 <alt_exception_cause_generated_bad_addr+0x88>
   2471c:	100690ba 	slli	r3,r2,2
   24720:	008000b4 	movhi	r2,2
   24724:	1091cd04 	addi	r2,r2,18228
   24728:	1885883a 	add	r2,r3,r2
   2472c:	10800017 	ldw	r2,0(r2)
   24730:	1000683a 	jmp	r2
   24734:	00024774 	movhi	zero,2333
   24738:	00024774 	movhi	zero,2333
   2473c:	00024784 	movi	zero,2334
   24740:	00024784 	movi	zero,2334
   24744:	00024784 	movi	zero,2334
   24748:	00024774 	movhi	zero,2333
   2474c:	0002477c 	xorhi	zero,zero,2333
   24750:	00024784 	movi	zero,2334
   24754:	00024774 	movhi	zero,2333
   24758:	00024774 	movhi	zero,2333
   2475c:	00024784 	movi	zero,2334
   24760:	00024774 	movhi	zero,2333
   24764:	0002477c 	xorhi	zero,zero,2333
   24768:	00024784 	movi	zero,2334
   2476c:	00024784 	movi	zero,2334
   24770:	00024774 	movhi	zero,2333
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24774:	00800044 	movi	r2,1
   24778:	00000306 	br	24788 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2477c:	0005883a 	mov	r2,zero
   24780:	00000106 	br	24788 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24784:	0005883a 	mov	r2,zero
  }
}
   24788:	e037883a 	mov	sp,fp
   2478c:	df000017 	ldw	fp,0(sp)
   24790:	dec00104 	addi	sp,sp,4
   24794:	f800283a 	ret

00024798 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24798:	defff804 	addi	sp,sp,-32
   2479c:	dfc00715 	stw	ra,28(sp)
   247a0:	df000615 	stw	fp,24(sp)
   247a4:	dc000515 	stw	r16,20(sp)
   247a8:	df000604 	addi	fp,sp,24
   247ac:	e13ffb15 	stw	r4,-20(fp)
   247b0:	e17ffc15 	stw	r5,-16(fp)
   247b4:	e1bffd15 	stw	r6,-12(fp)
   247b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   247bc:	e1bffe17 	ldw	r6,-8(fp)
   247c0:	e17ffd17 	ldw	r5,-12(fp)
   247c4:	e13ffc17 	ldw	r4,-16(fp)
   247c8:	0024a200 	call	24a20 <open>
   247cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   247d0:	e0bffa17 	ldw	r2,-24(fp)
   247d4:	10002216 	blt	r2,zero,24860 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   247d8:	040000f4 	movhi	r16,3
   247dc:	84258204 	addi	r16,r16,-27128
   247e0:	e0bffa17 	ldw	r2,-24(fp)
   247e4:	01400304 	movi	r5,12
   247e8:	1009883a 	mov	r4,r2
   247ec:	0021d540 	call	21d54 <__mulsi3>
   247f0:	8085883a 	add	r2,r16,r2
   247f4:	10c00017 	ldw	r3,0(r2)
   247f8:	e0bffb17 	ldw	r2,-20(fp)
   247fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24800:	040000f4 	movhi	r16,3
   24804:	84258204 	addi	r16,r16,-27128
   24808:	e0bffa17 	ldw	r2,-24(fp)
   2480c:	01400304 	movi	r5,12
   24810:	1009883a 	mov	r4,r2
   24814:	0021d540 	call	21d54 <__mulsi3>
   24818:	8085883a 	add	r2,r16,r2
   2481c:	10800104 	addi	r2,r2,4
   24820:	10c00017 	ldw	r3,0(r2)
   24824:	e0bffb17 	ldw	r2,-20(fp)
   24828:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2482c:	040000f4 	movhi	r16,3
   24830:	84258204 	addi	r16,r16,-27128
   24834:	e0bffa17 	ldw	r2,-24(fp)
   24838:	01400304 	movi	r5,12
   2483c:	1009883a 	mov	r4,r2
   24840:	0021d540 	call	21d54 <__mulsi3>
   24844:	8085883a 	add	r2,r16,r2
   24848:	10800204 	addi	r2,r2,8
   2484c:	10c00017 	ldw	r3,0(r2)
   24850:	e0bffb17 	ldw	r2,-20(fp)
   24854:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24858:	e13ffa17 	ldw	r4,-24(fp)
   2485c:	0024b7c0 	call	24b7c <alt_release_fd>
  }
} 
   24860:	0001883a 	nop
   24864:	e6ffff04 	addi	sp,fp,-4
   24868:	dfc00217 	ldw	ra,8(sp)
   2486c:	df000117 	ldw	fp,4(sp)
   24870:	dc000017 	ldw	r16,0(sp)
   24874:	dec00304 	addi	sp,sp,12
   24878:	f800283a 	ret

0002487c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2487c:	defffb04 	addi	sp,sp,-20
   24880:	dfc00415 	stw	ra,16(sp)
   24884:	df000315 	stw	fp,12(sp)
   24888:	df000304 	addi	fp,sp,12
   2488c:	e13ffd15 	stw	r4,-12(fp)
   24890:	e17ffe15 	stw	r5,-8(fp)
   24894:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24898:	01c07fc4 	movi	r7,511
   2489c:	01800044 	movi	r6,1
   248a0:	e17ffd17 	ldw	r5,-12(fp)
   248a4:	010000f4 	movhi	r4,3
   248a8:	21258504 	addi	r4,r4,-27116
   248ac:	00247980 	call	24798 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   248b0:	01c07fc4 	movi	r7,511
   248b4:	000d883a 	mov	r6,zero
   248b8:	e17ffe17 	ldw	r5,-8(fp)
   248bc:	010000f4 	movhi	r4,3
   248c0:	21258204 	addi	r4,r4,-27128
   248c4:	00247980 	call	24798 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   248c8:	01c07fc4 	movi	r7,511
   248cc:	01800044 	movi	r6,1
   248d0:	e17fff17 	ldw	r5,-4(fp)
   248d4:	010000f4 	movhi	r4,3
   248d8:	21258804 	addi	r4,r4,-27104
   248dc:	00247980 	call	24798 <alt_open_fd>
}  
   248e0:	0001883a 	nop
   248e4:	e037883a 	mov	sp,fp
   248e8:	dfc00117 	ldw	ra,4(sp)
   248ec:	df000017 	ldw	fp,0(sp)
   248f0:	dec00204 	addi	sp,sp,8
   248f4:	f800283a 	ret

000248f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   248f8:	defffe04 	addi	sp,sp,-8
   248fc:	dfc00115 	stw	ra,4(sp)
   24900:	df000015 	stw	fp,0(sp)
   24904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24908:	d0a01017 	ldw	r2,-32704(gp)
   2490c:	10000326 	beq	r2,zero,2491c <alt_get_errno+0x24>
   24910:	d0a01017 	ldw	r2,-32704(gp)
   24914:	103ee83a 	callr	r2
   24918:	00000106 	br	24920 <alt_get_errno+0x28>
   2491c:	d0a6c304 	addi	r2,gp,-25844
}
   24920:	e037883a 	mov	sp,fp
   24924:	dfc00117 	ldw	ra,4(sp)
   24928:	df000017 	ldw	fp,0(sp)
   2492c:	dec00204 	addi	sp,sp,8
   24930:	f800283a 	ret

00024934 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24934:	defffb04 	addi	sp,sp,-20
   24938:	dfc00415 	stw	ra,16(sp)
   2493c:	df000315 	stw	fp,12(sp)
   24940:	dc000215 	stw	r16,8(sp)
   24944:	df000304 	addi	fp,sp,12
   24948:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2494c:	e0bffe17 	ldw	r2,-8(fp)
   24950:	10800217 	ldw	r2,8(r2)
   24954:	10d00034 	orhi	r3,r2,16384
   24958:	e0bffe17 	ldw	r2,-8(fp)
   2495c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24960:	e03ffd15 	stw	zero,-12(fp)
   24964:	00002306 	br	249f4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24968:	040000f4 	movhi	r16,3
   2496c:	84258204 	addi	r16,r16,-27128
   24970:	e0bffd17 	ldw	r2,-12(fp)
   24974:	01400304 	movi	r5,12
   24978:	1009883a 	mov	r4,r2
   2497c:	0021d540 	call	21d54 <__mulsi3>
   24980:	8085883a 	add	r2,r16,r2
   24984:	10c00017 	ldw	r3,0(r2)
   24988:	e0bffe17 	ldw	r2,-8(fp)
   2498c:	10800017 	ldw	r2,0(r2)
   24990:	1880151e 	bne	r3,r2,249e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24994:	040000f4 	movhi	r16,3
   24998:	84258204 	addi	r16,r16,-27128
   2499c:	e0bffd17 	ldw	r2,-12(fp)
   249a0:	01400304 	movi	r5,12
   249a4:	1009883a 	mov	r4,r2
   249a8:	0021d540 	call	21d54 <__mulsi3>
   249ac:	8085883a 	add	r2,r16,r2
   249b0:	10800204 	addi	r2,r2,8
   249b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   249b8:	10000b0e 	bge	r2,zero,249e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   249bc:	01400304 	movi	r5,12
   249c0:	e13ffd17 	ldw	r4,-12(fp)
   249c4:	0021d540 	call	21d54 <__mulsi3>
   249c8:	1007883a 	mov	r3,r2
   249cc:	008000f4 	movhi	r2,3
   249d0:	10a58204 	addi	r2,r2,-27128
   249d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   249d8:	e0bffe17 	ldw	r2,-8(fp)
   249dc:	18800226 	beq	r3,r2,249e8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   249e0:	00bffcc4 	movi	r2,-13
   249e4:	00000806 	br	24a08 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   249e8:	e0bffd17 	ldw	r2,-12(fp)
   249ec:	10800044 	addi	r2,r2,1
   249f0:	e0bffd15 	stw	r2,-12(fp)
   249f4:	d0a00f17 	ldw	r2,-32708(gp)
   249f8:	1007883a 	mov	r3,r2
   249fc:	e0bffd17 	ldw	r2,-12(fp)
   24a00:	18bfd92e 	bgeu	r3,r2,24968 <__alt_data_end+0xfffeb968>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24a04:	0005883a 	mov	r2,zero
}
   24a08:	e6ffff04 	addi	sp,fp,-4
   24a0c:	dfc00217 	ldw	ra,8(sp)
   24a10:	df000117 	ldw	fp,4(sp)
   24a14:	dc000017 	ldw	r16,0(sp)
   24a18:	dec00304 	addi	sp,sp,12
   24a1c:	f800283a 	ret

00024a20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24a20:	defff604 	addi	sp,sp,-40
   24a24:	dfc00915 	stw	ra,36(sp)
   24a28:	df000815 	stw	fp,32(sp)
   24a2c:	df000804 	addi	fp,sp,32
   24a30:	e13ffd15 	stw	r4,-12(fp)
   24a34:	e17ffe15 	stw	r5,-8(fp)
   24a38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24a3c:	00bfffc4 	movi	r2,-1
   24a40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24a44:	00bffb44 	movi	r2,-19
   24a48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24a4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24a50:	d1600d04 	addi	r5,gp,-32716
   24a54:	e13ffd17 	ldw	r4,-12(fp)
   24a58:	0024c240 	call	24c24 <alt_find_dev>
   24a5c:	e0bff815 	stw	r2,-32(fp)
   24a60:	e0bff817 	ldw	r2,-32(fp)
   24a64:	1000051e 	bne	r2,zero,24a7c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24a68:	e13ffd17 	ldw	r4,-12(fp)
   24a6c:	0024cb40 	call	24cb4 <alt_find_file>
   24a70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24a74:	00800044 	movi	r2,1
   24a78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24a7c:	e0bff817 	ldw	r2,-32(fp)
   24a80:	10002b26 	beq	r2,zero,24b30 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24a84:	e13ff817 	ldw	r4,-32(fp)
   24a88:	0024dbc0 	call	24dbc <alt_get_fd>
   24a8c:	e0bff915 	stw	r2,-28(fp)
   24a90:	e0bff917 	ldw	r2,-28(fp)
   24a94:	1000030e 	bge	r2,zero,24aa4 <open+0x84>
    {
      status = index;
   24a98:	e0bff917 	ldw	r2,-28(fp)
   24a9c:	e0bffa15 	stw	r2,-24(fp)
   24aa0:	00002506 	br	24b38 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24aa4:	01400304 	movi	r5,12
   24aa8:	e13ff917 	ldw	r4,-28(fp)
   24aac:	0021d540 	call	21d54 <__mulsi3>
   24ab0:	1007883a 	mov	r3,r2
   24ab4:	008000f4 	movhi	r2,3
   24ab8:	10a58204 	addi	r2,r2,-27128
   24abc:	1885883a 	add	r2,r3,r2
   24ac0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24ac4:	e0fffe17 	ldw	r3,-8(fp)
   24ac8:	00900034 	movhi	r2,16384
   24acc:	10bfffc4 	addi	r2,r2,-1
   24ad0:	1886703a 	and	r3,r3,r2
   24ad4:	e0bffc17 	ldw	r2,-16(fp)
   24ad8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24adc:	e0bffb17 	ldw	r2,-20(fp)
   24ae0:	1000051e 	bne	r2,zero,24af8 <open+0xd8>
   24ae4:	e13ffc17 	ldw	r4,-16(fp)
   24ae8:	00249340 	call	24934 <alt_file_locked>
   24aec:	e0bffa15 	stw	r2,-24(fp)
   24af0:	e0bffa17 	ldw	r2,-24(fp)
   24af4:	10001016 	blt	r2,zero,24b38 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24af8:	e0bff817 	ldw	r2,-32(fp)
   24afc:	10800317 	ldw	r2,12(r2)
   24b00:	10000826 	beq	r2,zero,24b24 <open+0x104>
   24b04:	e0bff817 	ldw	r2,-32(fp)
   24b08:	10800317 	ldw	r2,12(r2)
   24b0c:	e1ffff17 	ldw	r7,-4(fp)
   24b10:	e1bffe17 	ldw	r6,-8(fp)
   24b14:	e17ffd17 	ldw	r5,-12(fp)
   24b18:	e13ffc17 	ldw	r4,-16(fp)
   24b1c:	103ee83a 	callr	r2
   24b20:	00000106 	br	24b28 <open+0x108>
   24b24:	0005883a 	mov	r2,zero
   24b28:	e0bffa15 	stw	r2,-24(fp)
   24b2c:	00000206 	br	24b38 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24b30:	00bffb44 	movi	r2,-19
   24b34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24b38:	e0bffa17 	ldw	r2,-24(fp)
   24b3c:	1000090e 	bge	r2,zero,24b64 <open+0x144>
  {
    alt_release_fd (index);  
   24b40:	e13ff917 	ldw	r4,-28(fp)
   24b44:	0024b7c0 	call	24b7c <alt_release_fd>
    ALT_ERRNO = -status;
   24b48:	00248f80 	call	248f8 <alt_get_errno>
   24b4c:	1007883a 	mov	r3,r2
   24b50:	e0bffa17 	ldw	r2,-24(fp)
   24b54:	0085c83a 	sub	r2,zero,r2
   24b58:	18800015 	stw	r2,0(r3)
    return -1;
   24b5c:	00bfffc4 	movi	r2,-1
   24b60:	00000106 	br	24b68 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   24b64:	e0bff917 	ldw	r2,-28(fp)
}
   24b68:	e037883a 	mov	sp,fp
   24b6c:	dfc00117 	ldw	ra,4(sp)
   24b70:	df000017 	ldw	fp,0(sp)
   24b74:	dec00204 	addi	sp,sp,8
   24b78:	f800283a 	ret

00024b7c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24b7c:	defffc04 	addi	sp,sp,-16
   24b80:	dfc00315 	stw	ra,12(sp)
   24b84:	df000215 	stw	fp,8(sp)
   24b88:	dc000115 	stw	r16,4(sp)
   24b8c:	df000204 	addi	fp,sp,8
   24b90:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   24b94:	e0bffe17 	ldw	r2,-8(fp)
   24b98:	108000d0 	cmplti	r2,r2,3
   24b9c:	1000111e 	bne	r2,zero,24be4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   24ba0:	040000f4 	movhi	r16,3
   24ba4:	84258204 	addi	r16,r16,-27128
   24ba8:	e0bffe17 	ldw	r2,-8(fp)
   24bac:	01400304 	movi	r5,12
   24bb0:	1009883a 	mov	r4,r2
   24bb4:	0021d540 	call	21d54 <__mulsi3>
   24bb8:	8085883a 	add	r2,r16,r2
   24bbc:	10800204 	addi	r2,r2,8
   24bc0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   24bc4:	040000f4 	movhi	r16,3
   24bc8:	84258204 	addi	r16,r16,-27128
   24bcc:	e0bffe17 	ldw	r2,-8(fp)
   24bd0:	01400304 	movi	r5,12
   24bd4:	1009883a 	mov	r4,r2
   24bd8:	0021d540 	call	21d54 <__mulsi3>
   24bdc:	8085883a 	add	r2,r16,r2
   24be0:	10000015 	stw	zero,0(r2)
  }
}
   24be4:	0001883a 	nop
   24be8:	e6ffff04 	addi	sp,fp,-4
   24bec:	dfc00217 	ldw	ra,8(sp)
   24bf0:	df000117 	ldw	fp,4(sp)
   24bf4:	dc000017 	ldw	r16,0(sp)
   24bf8:	dec00304 	addi	sp,sp,12
   24bfc:	f800283a 	ret

00024c00 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24c00:	deffff04 	addi	sp,sp,-4
   24c04:	df000015 	stw	fp,0(sp)
   24c08:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24c0c:	000170fa 	wrctl	ienable,zero
}
   24c10:	0001883a 	nop
   24c14:	e037883a 	mov	sp,fp
   24c18:	df000017 	ldw	fp,0(sp)
   24c1c:	dec00104 	addi	sp,sp,4
   24c20:	f800283a 	ret

00024c24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24c24:	defffa04 	addi	sp,sp,-24
   24c28:	dfc00515 	stw	ra,20(sp)
   24c2c:	df000415 	stw	fp,16(sp)
   24c30:	df000404 	addi	fp,sp,16
   24c34:	e13ffe15 	stw	r4,-8(fp)
   24c38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24c3c:	e0bfff17 	ldw	r2,-4(fp)
   24c40:	10800017 	ldw	r2,0(r2)
   24c44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24c48:	e13ffe17 	ldw	r4,-8(fp)
   24c4c:	0025c680 	call	25c68 <strlen>
   24c50:	10800044 	addi	r2,r2,1
   24c54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24c58:	00000d06 	br	24c90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24c5c:	e0bffc17 	ldw	r2,-16(fp)
   24c60:	10800217 	ldw	r2,8(r2)
   24c64:	e0fffd17 	ldw	r3,-12(fp)
   24c68:	180d883a 	mov	r6,r3
   24c6c:	e17ffe17 	ldw	r5,-8(fp)
   24c70:	1009883a 	mov	r4,r2
   24c74:	002552c0 	call	2552c <memcmp>
   24c78:	1000021e 	bne	r2,zero,24c84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24c7c:	e0bffc17 	ldw	r2,-16(fp)
   24c80:	00000706 	br	24ca0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24c84:	e0bffc17 	ldw	r2,-16(fp)
   24c88:	10800017 	ldw	r2,0(r2)
   24c8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24c90:	e0fffc17 	ldw	r3,-16(fp)
   24c94:	e0bfff17 	ldw	r2,-4(fp)
   24c98:	18bff01e 	bne	r3,r2,24c5c <__alt_data_end+0xfffebc5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24c9c:	0005883a 	mov	r2,zero
}
   24ca0:	e037883a 	mov	sp,fp
   24ca4:	dfc00117 	ldw	ra,4(sp)
   24ca8:	df000017 	ldw	fp,0(sp)
   24cac:	dec00204 	addi	sp,sp,8
   24cb0:	f800283a 	ret

00024cb4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24cb4:	defffb04 	addi	sp,sp,-20
   24cb8:	dfc00415 	stw	ra,16(sp)
   24cbc:	df000315 	stw	fp,12(sp)
   24cc0:	df000304 	addi	fp,sp,12
   24cc4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24cc8:	d0a00b17 	ldw	r2,-32724(gp)
   24ccc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24cd0:	00003106 	br	24d98 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24cd4:	e0bffd17 	ldw	r2,-12(fp)
   24cd8:	10800217 	ldw	r2,8(r2)
   24cdc:	1009883a 	mov	r4,r2
   24ce0:	0025c680 	call	25c68 <strlen>
   24ce4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24ce8:	e0bffd17 	ldw	r2,-12(fp)
   24cec:	10c00217 	ldw	r3,8(r2)
   24cf0:	e0bffe17 	ldw	r2,-8(fp)
   24cf4:	10bfffc4 	addi	r2,r2,-1
   24cf8:	1885883a 	add	r2,r3,r2
   24cfc:	10800003 	ldbu	r2,0(r2)
   24d00:	10803fcc 	andi	r2,r2,255
   24d04:	1080201c 	xori	r2,r2,128
   24d08:	10bfe004 	addi	r2,r2,-128
   24d0c:	10800bd8 	cmpnei	r2,r2,47
   24d10:	1000031e 	bne	r2,zero,24d20 <alt_find_file+0x6c>
    {
      len -= 1;
   24d14:	e0bffe17 	ldw	r2,-8(fp)
   24d18:	10bfffc4 	addi	r2,r2,-1
   24d1c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24d20:	e0bffe17 	ldw	r2,-8(fp)
   24d24:	e0ffff17 	ldw	r3,-4(fp)
   24d28:	1885883a 	add	r2,r3,r2
   24d2c:	10800003 	ldbu	r2,0(r2)
   24d30:	10803fcc 	andi	r2,r2,255
   24d34:	1080201c 	xori	r2,r2,128
   24d38:	10bfe004 	addi	r2,r2,-128
   24d3c:	10800be0 	cmpeqi	r2,r2,47
   24d40:	1000081e 	bne	r2,zero,24d64 <alt_find_file+0xb0>
   24d44:	e0bffe17 	ldw	r2,-8(fp)
   24d48:	e0ffff17 	ldw	r3,-4(fp)
   24d4c:	1885883a 	add	r2,r3,r2
   24d50:	10800003 	ldbu	r2,0(r2)
   24d54:	10803fcc 	andi	r2,r2,255
   24d58:	1080201c 	xori	r2,r2,128
   24d5c:	10bfe004 	addi	r2,r2,-128
   24d60:	10000a1e 	bne	r2,zero,24d8c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24d64:	e0bffd17 	ldw	r2,-12(fp)
   24d68:	10800217 	ldw	r2,8(r2)
   24d6c:	e0fffe17 	ldw	r3,-8(fp)
   24d70:	180d883a 	mov	r6,r3
   24d74:	e17fff17 	ldw	r5,-4(fp)
   24d78:	1009883a 	mov	r4,r2
   24d7c:	002552c0 	call	2552c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24d80:	1000021e 	bne	r2,zero,24d8c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24d84:	e0bffd17 	ldw	r2,-12(fp)
   24d88:	00000706 	br	24da8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24d8c:	e0bffd17 	ldw	r2,-12(fp)
   24d90:	10800017 	ldw	r2,0(r2)
   24d94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24d98:	e0fffd17 	ldw	r3,-12(fp)
   24d9c:	d0a00b04 	addi	r2,gp,-32724
   24da0:	18bfcc1e 	bne	r3,r2,24cd4 <__alt_data_end+0xfffebcd4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24da4:	0005883a 	mov	r2,zero
}
   24da8:	e037883a 	mov	sp,fp
   24dac:	dfc00117 	ldw	ra,4(sp)
   24db0:	df000017 	ldw	fp,0(sp)
   24db4:	dec00204 	addi	sp,sp,8
   24db8:	f800283a 	ret

00024dbc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24dbc:	defffa04 	addi	sp,sp,-24
   24dc0:	dfc00515 	stw	ra,20(sp)
   24dc4:	df000415 	stw	fp,16(sp)
   24dc8:	dc000315 	stw	r16,12(sp)
   24dcc:	df000404 	addi	fp,sp,16
   24dd0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24dd4:	00bffa04 	movi	r2,-24
   24dd8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24ddc:	e03ffc15 	stw	zero,-16(fp)
   24de0:	00001d06 	br	24e58 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24de4:	040000f4 	movhi	r16,3
   24de8:	84258204 	addi	r16,r16,-27128
   24dec:	e0bffc17 	ldw	r2,-16(fp)
   24df0:	01400304 	movi	r5,12
   24df4:	1009883a 	mov	r4,r2
   24df8:	0021d540 	call	21d54 <__mulsi3>
   24dfc:	8085883a 	add	r2,r16,r2
   24e00:	10800017 	ldw	r2,0(r2)
   24e04:	1000111e 	bne	r2,zero,24e4c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   24e08:	040000f4 	movhi	r16,3
   24e0c:	84258204 	addi	r16,r16,-27128
   24e10:	e0bffc17 	ldw	r2,-16(fp)
   24e14:	01400304 	movi	r5,12
   24e18:	1009883a 	mov	r4,r2
   24e1c:	0021d540 	call	21d54 <__mulsi3>
   24e20:	8085883a 	add	r2,r16,r2
   24e24:	e0fffe17 	ldw	r3,-8(fp)
   24e28:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24e2c:	d0e00f17 	ldw	r3,-32708(gp)
   24e30:	e0bffc17 	ldw	r2,-16(fp)
   24e34:	1880020e 	bge	r3,r2,24e40 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   24e38:	e0bffc17 	ldw	r2,-16(fp)
   24e3c:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   24e40:	e0bffc17 	ldw	r2,-16(fp)
   24e44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24e48:	00000606 	br	24e64 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24e4c:	e0bffc17 	ldw	r2,-16(fp)
   24e50:	10800044 	addi	r2,r2,1
   24e54:	e0bffc15 	stw	r2,-16(fp)
   24e58:	e0bffc17 	ldw	r2,-16(fp)
   24e5c:	10800810 	cmplti	r2,r2,32
   24e60:	103fe01e 	bne	r2,zero,24de4 <__alt_data_end+0xfffebde4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24e64:	e0bffd17 	ldw	r2,-12(fp)
}
   24e68:	e6ffff04 	addi	sp,fp,-4
   24e6c:	dfc00217 	ldw	ra,8(sp)
   24e70:	df000117 	ldw	fp,4(sp)
   24e74:	dc000017 	ldw	r16,0(sp)
   24e78:	dec00304 	addi	sp,sp,12
   24e7c:	f800283a 	ret

00024e80 <atexit>:
   24e80:	200b883a 	mov	r5,r4
   24e84:	000f883a 	mov	r7,zero
   24e88:	000d883a 	mov	r6,zero
   24e8c:	0009883a 	mov	r4,zero
   24e90:	0025e541 	jmpi	25e54 <__register_exitproc>

00024e94 <exit>:
   24e94:	defffe04 	addi	sp,sp,-8
   24e98:	000b883a 	mov	r5,zero
   24e9c:	dc000015 	stw	r16,0(sp)
   24ea0:	dfc00115 	stw	ra,4(sp)
   24ea4:	2021883a 	mov	r16,r4
   24ea8:	0025f6c0 	call	25f6c <__call_exitprocs>
   24eac:	008000f4 	movhi	r2,3
   24eb0:	10a5e704 	addi	r2,r2,-26724
   24eb4:	11000017 	ldw	r4,0(r2)
   24eb8:	20800f17 	ldw	r2,60(r4)
   24ebc:	10000126 	beq	r2,zero,24ec4 <exit+0x30>
   24ec0:	103ee83a 	callr	r2
   24ec4:	8009883a 	mov	r4,r16
   24ec8:	00275d80 	call	275d8 <_exit>

00024ecc <_fputs_r>:
   24ecc:	defff804 	addi	sp,sp,-32
   24ed0:	dc400615 	stw	r17,24(sp)
   24ed4:	2023883a 	mov	r17,r4
   24ed8:	2809883a 	mov	r4,r5
   24edc:	dc000515 	stw	r16,20(sp)
   24ee0:	dfc00715 	stw	ra,28(sp)
   24ee4:	3021883a 	mov	r16,r6
   24ee8:	d9400315 	stw	r5,12(sp)
   24eec:	0025c680 	call	25c68 <strlen>
   24ef0:	d8800215 	stw	r2,8(sp)
   24ef4:	d8800415 	stw	r2,16(sp)
   24ef8:	d8800304 	addi	r2,sp,12
   24efc:	d8800015 	stw	r2,0(sp)
   24f00:	00800044 	movi	r2,1
   24f04:	d8800115 	stw	r2,4(sp)
   24f08:	88000226 	beq	r17,zero,24f14 <_fputs_r+0x48>
   24f0c:	88800e17 	ldw	r2,56(r17)
   24f10:	10001226 	beq	r2,zero,24f5c <_fputs_r+0x90>
   24f14:	8080030b 	ldhu	r2,12(r16)
   24f18:	10c8000c 	andi	r3,r2,8192
   24f1c:	1800061e 	bne	r3,zero,24f38 <_fputs_r+0x6c>
   24f20:	81001917 	ldw	r4,100(r16)
   24f24:	00f7ffc4 	movi	r3,-8193
   24f28:	10880014 	ori	r2,r2,8192
   24f2c:	20c6703a 	and	r3,r4,r3
   24f30:	8080030d 	sth	r2,12(r16)
   24f34:	80c01915 	stw	r3,100(r16)
   24f38:	d80d883a 	mov	r6,sp
   24f3c:	800b883a 	mov	r5,r16
   24f40:	8809883a 	mov	r4,r17
   24f44:	0024f800 	call	24f80 <__sfvwrite_r>
   24f48:	dfc00717 	ldw	ra,28(sp)
   24f4c:	dc400617 	ldw	r17,24(sp)
   24f50:	dc000517 	ldw	r16,20(sp)
   24f54:	dec00804 	addi	sp,sp,32
   24f58:	f800283a 	ret
   24f5c:	8809883a 	mov	r4,r17
   24f60:	00266f40 	call	266f4 <__sinit>
   24f64:	003feb06 	br	24f14 <__alt_data_end+0xfffebf14>

00024f68 <fputs>:
   24f68:	008000f4 	movhi	r2,3
   24f6c:	10a5e804 	addi	r2,r2,-26720
   24f70:	280d883a 	mov	r6,r5
   24f74:	200b883a 	mov	r5,r4
   24f78:	11000017 	ldw	r4,0(r2)
   24f7c:	0024ecc1 	jmpi	24ecc <_fputs_r>

00024f80 <__sfvwrite_r>:
   24f80:	30800217 	ldw	r2,8(r6)
   24f84:	10006726 	beq	r2,zero,25124 <__sfvwrite_r+0x1a4>
   24f88:	28c0030b 	ldhu	r3,12(r5)
   24f8c:	defff404 	addi	sp,sp,-48
   24f90:	dd400715 	stw	r21,28(sp)
   24f94:	dd000615 	stw	r20,24(sp)
   24f98:	dc000215 	stw	r16,8(sp)
   24f9c:	dfc00b15 	stw	ra,44(sp)
   24fa0:	df000a15 	stw	fp,40(sp)
   24fa4:	ddc00915 	stw	r23,36(sp)
   24fa8:	dd800815 	stw	r22,32(sp)
   24fac:	dcc00515 	stw	r19,20(sp)
   24fb0:	dc800415 	stw	r18,16(sp)
   24fb4:	dc400315 	stw	r17,12(sp)
   24fb8:	1880020c 	andi	r2,r3,8
   24fbc:	2821883a 	mov	r16,r5
   24fc0:	202b883a 	mov	r21,r4
   24fc4:	3029883a 	mov	r20,r6
   24fc8:	10002726 	beq	r2,zero,25068 <__sfvwrite_r+0xe8>
   24fcc:	28800417 	ldw	r2,16(r5)
   24fd0:	10002526 	beq	r2,zero,25068 <__sfvwrite_r+0xe8>
   24fd4:	1880008c 	andi	r2,r3,2
   24fd8:	a4400017 	ldw	r17,0(r20)
   24fdc:	10002a26 	beq	r2,zero,25088 <__sfvwrite_r+0x108>
   24fe0:	05a00034 	movhi	r22,32768
   24fe4:	0027883a 	mov	r19,zero
   24fe8:	0025883a 	mov	r18,zero
   24fec:	b5bf0004 	addi	r22,r22,-1024
   24ff0:	980d883a 	mov	r6,r19
   24ff4:	a809883a 	mov	r4,r21
   24ff8:	90004626 	beq	r18,zero,25114 <__sfvwrite_r+0x194>
   24ffc:	900f883a 	mov	r7,r18
   25000:	b480022e 	bgeu	r22,r18,2500c <__sfvwrite_r+0x8c>
   25004:	01e00034 	movhi	r7,32768
   25008:	39ff0004 	addi	r7,r7,-1024
   2500c:	80800917 	ldw	r2,36(r16)
   25010:	81400717 	ldw	r5,28(r16)
   25014:	103ee83a 	callr	r2
   25018:	00805a0e 	bge	zero,r2,25184 <__sfvwrite_r+0x204>
   2501c:	a0c00217 	ldw	r3,8(r20)
   25020:	98a7883a 	add	r19,r19,r2
   25024:	90a5c83a 	sub	r18,r18,r2
   25028:	1885c83a 	sub	r2,r3,r2
   2502c:	a0800215 	stw	r2,8(r20)
   25030:	103fef1e 	bne	r2,zero,24ff0 <__alt_data_end+0xfffebff0>
   25034:	0005883a 	mov	r2,zero
   25038:	dfc00b17 	ldw	ra,44(sp)
   2503c:	df000a17 	ldw	fp,40(sp)
   25040:	ddc00917 	ldw	r23,36(sp)
   25044:	dd800817 	ldw	r22,32(sp)
   25048:	dd400717 	ldw	r21,28(sp)
   2504c:	dd000617 	ldw	r20,24(sp)
   25050:	dcc00517 	ldw	r19,20(sp)
   25054:	dc800417 	ldw	r18,16(sp)
   25058:	dc400317 	ldw	r17,12(sp)
   2505c:	dc000217 	ldw	r16,8(sp)
   25060:	dec00c04 	addi	sp,sp,48
   25064:	f800283a 	ret
   25068:	800b883a 	mov	r5,r16
   2506c:	a809883a 	mov	r4,r21
   25070:	0025d000 	call	25d00 <__swsetup_r>
   25074:	1000ee1e 	bne	r2,zero,25430 <__sfvwrite_r+0x4b0>
   25078:	80c0030b 	ldhu	r3,12(r16)
   2507c:	a4400017 	ldw	r17,0(r20)
   25080:	1880008c 	andi	r2,r3,2
   25084:	103fd61e 	bne	r2,zero,24fe0 <__alt_data_end+0xfffebfe0>
   25088:	1880004c 	andi	r2,r3,1
   2508c:	1000421e 	bne	r2,zero,25198 <__sfvwrite_r+0x218>
   25090:	0039883a 	mov	fp,zero
   25094:	0025883a 	mov	r18,zero
   25098:	90001a26 	beq	r18,zero,25104 <__sfvwrite_r+0x184>
   2509c:	1880800c 	andi	r2,r3,512
   250a0:	84c00217 	ldw	r19,8(r16)
   250a4:	10002126 	beq	r2,zero,2512c <__sfvwrite_r+0x1ac>
   250a8:	982f883a 	mov	r23,r19
   250ac:	94c09636 	bltu	r18,r19,25308 <__sfvwrite_r+0x388>
   250b0:	1881200c 	andi	r2,r3,1152
   250b4:	1000a11e 	bne	r2,zero,2533c <__sfvwrite_r+0x3bc>
   250b8:	81000017 	ldw	r4,0(r16)
   250bc:	b80d883a 	mov	r6,r23
   250c0:	e00b883a 	mov	r5,fp
   250c4:	00255a80 	call	255a8 <memmove>
   250c8:	80c00217 	ldw	r3,8(r16)
   250cc:	81000017 	ldw	r4,0(r16)
   250d0:	9005883a 	mov	r2,r18
   250d4:	1ce7c83a 	sub	r19,r3,r19
   250d8:	25cf883a 	add	r7,r4,r23
   250dc:	84c00215 	stw	r19,8(r16)
   250e0:	81c00015 	stw	r7,0(r16)
   250e4:	a0c00217 	ldw	r3,8(r20)
   250e8:	e0b9883a 	add	fp,fp,r2
   250ec:	90a5c83a 	sub	r18,r18,r2
   250f0:	18a7c83a 	sub	r19,r3,r2
   250f4:	a4c00215 	stw	r19,8(r20)
   250f8:	983fce26 	beq	r19,zero,25034 <__alt_data_end+0xfffec034>
   250fc:	80c0030b 	ldhu	r3,12(r16)
   25100:	903fe61e 	bne	r18,zero,2509c <__alt_data_end+0xfffec09c>
   25104:	8f000017 	ldw	fp,0(r17)
   25108:	8c800117 	ldw	r18,4(r17)
   2510c:	8c400204 	addi	r17,r17,8
   25110:	003fe106 	br	25098 <__alt_data_end+0xfffec098>
   25114:	8cc00017 	ldw	r19,0(r17)
   25118:	8c800117 	ldw	r18,4(r17)
   2511c:	8c400204 	addi	r17,r17,8
   25120:	003fb306 	br	24ff0 <__alt_data_end+0xfffebff0>
   25124:	0005883a 	mov	r2,zero
   25128:	f800283a 	ret
   2512c:	81000017 	ldw	r4,0(r16)
   25130:	80800417 	ldw	r2,16(r16)
   25134:	11005a36 	bltu	r2,r4,252a0 <__sfvwrite_r+0x320>
   25138:	85c00517 	ldw	r23,20(r16)
   2513c:	95c05836 	bltu	r18,r23,252a0 <__sfvwrite_r+0x320>
   25140:	00a00034 	movhi	r2,32768
   25144:	10bfffc4 	addi	r2,r2,-1
   25148:	9009883a 	mov	r4,r18
   2514c:	1480012e 	bgeu	r2,r18,25154 <__sfvwrite_r+0x1d4>
   25150:	1009883a 	mov	r4,r2
   25154:	b80b883a 	mov	r5,r23
   25158:	0021ba00 	call	21ba0 <__divsi3>
   2515c:	b80b883a 	mov	r5,r23
   25160:	1009883a 	mov	r4,r2
   25164:	0021d540 	call	21d54 <__mulsi3>
   25168:	81400717 	ldw	r5,28(r16)
   2516c:	80c00917 	ldw	r3,36(r16)
   25170:	100f883a 	mov	r7,r2
   25174:	e00d883a 	mov	r6,fp
   25178:	a809883a 	mov	r4,r21
   2517c:	183ee83a 	callr	r3
   25180:	00bfd816 	blt	zero,r2,250e4 <__alt_data_end+0xfffec0e4>
   25184:	8080030b 	ldhu	r2,12(r16)
   25188:	10801014 	ori	r2,r2,64
   2518c:	8080030d 	sth	r2,12(r16)
   25190:	00bfffc4 	movi	r2,-1
   25194:	003fa806 	br	25038 <__alt_data_end+0xfffec038>
   25198:	0027883a 	mov	r19,zero
   2519c:	0011883a 	mov	r8,zero
   251a0:	0039883a 	mov	fp,zero
   251a4:	0025883a 	mov	r18,zero
   251a8:	90001f26 	beq	r18,zero,25228 <__sfvwrite_r+0x2a8>
   251ac:	40005a26 	beq	r8,zero,25318 <__sfvwrite_r+0x398>
   251b0:	982d883a 	mov	r22,r19
   251b4:	94c0012e 	bgeu	r18,r19,251bc <__sfvwrite_r+0x23c>
   251b8:	902d883a 	mov	r22,r18
   251bc:	81000017 	ldw	r4,0(r16)
   251c0:	80800417 	ldw	r2,16(r16)
   251c4:	b02f883a 	mov	r23,r22
   251c8:	81c00517 	ldw	r7,20(r16)
   251cc:	1100032e 	bgeu	r2,r4,251dc <__sfvwrite_r+0x25c>
   251d0:	80c00217 	ldw	r3,8(r16)
   251d4:	38c7883a 	add	r3,r7,r3
   251d8:	1d801816 	blt	r3,r22,2523c <__sfvwrite_r+0x2bc>
   251dc:	b1c03e16 	blt	r22,r7,252d8 <__sfvwrite_r+0x358>
   251e0:	80800917 	ldw	r2,36(r16)
   251e4:	81400717 	ldw	r5,28(r16)
   251e8:	e00d883a 	mov	r6,fp
   251ec:	da000115 	stw	r8,4(sp)
   251f0:	a809883a 	mov	r4,r21
   251f4:	103ee83a 	callr	r2
   251f8:	102f883a 	mov	r23,r2
   251fc:	da000117 	ldw	r8,4(sp)
   25200:	00bfe00e 	bge	zero,r2,25184 <__alt_data_end+0xfffec184>
   25204:	9de7c83a 	sub	r19,r19,r23
   25208:	98001f26 	beq	r19,zero,25288 <__sfvwrite_r+0x308>
   2520c:	a0800217 	ldw	r2,8(r20)
   25210:	e5f9883a 	add	fp,fp,r23
   25214:	95e5c83a 	sub	r18,r18,r23
   25218:	15efc83a 	sub	r23,r2,r23
   2521c:	a5c00215 	stw	r23,8(r20)
   25220:	b83f8426 	beq	r23,zero,25034 <__alt_data_end+0xfffec034>
   25224:	903fe11e 	bne	r18,zero,251ac <__alt_data_end+0xfffec1ac>
   25228:	8f000017 	ldw	fp,0(r17)
   2522c:	8c800117 	ldw	r18,4(r17)
   25230:	0011883a 	mov	r8,zero
   25234:	8c400204 	addi	r17,r17,8
   25238:	003fdb06 	br	251a8 <__alt_data_end+0xfffec1a8>
   2523c:	180d883a 	mov	r6,r3
   25240:	e00b883a 	mov	r5,fp
   25244:	da000115 	stw	r8,4(sp)
   25248:	d8c00015 	stw	r3,0(sp)
   2524c:	00255a80 	call	255a8 <memmove>
   25250:	d8c00017 	ldw	r3,0(sp)
   25254:	80800017 	ldw	r2,0(r16)
   25258:	800b883a 	mov	r5,r16
   2525c:	a809883a 	mov	r4,r21
   25260:	10c5883a 	add	r2,r2,r3
   25264:	80800015 	stw	r2,0(r16)
   25268:	d8c00015 	stw	r3,0(sp)
   2526c:	00263080 	call	26308 <_fflush_r>
   25270:	d8c00017 	ldw	r3,0(sp)
   25274:	da000117 	ldw	r8,4(sp)
   25278:	103fc21e 	bne	r2,zero,25184 <__alt_data_end+0xfffec184>
   2527c:	182f883a 	mov	r23,r3
   25280:	9de7c83a 	sub	r19,r19,r23
   25284:	983fe11e 	bne	r19,zero,2520c <__alt_data_end+0xfffec20c>
   25288:	800b883a 	mov	r5,r16
   2528c:	a809883a 	mov	r4,r21
   25290:	00263080 	call	26308 <_fflush_r>
   25294:	103fbb1e 	bne	r2,zero,25184 <__alt_data_end+0xfffec184>
   25298:	0011883a 	mov	r8,zero
   2529c:	003fdb06 	br	2520c <__alt_data_end+0xfffec20c>
   252a0:	94c0012e 	bgeu	r18,r19,252a8 <__sfvwrite_r+0x328>
   252a4:	9027883a 	mov	r19,r18
   252a8:	980d883a 	mov	r6,r19
   252ac:	e00b883a 	mov	r5,fp
   252b0:	00255a80 	call	255a8 <memmove>
   252b4:	80800217 	ldw	r2,8(r16)
   252b8:	80c00017 	ldw	r3,0(r16)
   252bc:	14c5c83a 	sub	r2,r2,r19
   252c0:	1cc7883a 	add	r3,r3,r19
   252c4:	80800215 	stw	r2,8(r16)
   252c8:	80c00015 	stw	r3,0(r16)
   252cc:	10004326 	beq	r2,zero,253dc <__sfvwrite_r+0x45c>
   252d0:	9805883a 	mov	r2,r19
   252d4:	003f8306 	br	250e4 <__alt_data_end+0xfffec0e4>
   252d8:	b00d883a 	mov	r6,r22
   252dc:	e00b883a 	mov	r5,fp
   252e0:	da000115 	stw	r8,4(sp)
   252e4:	00255a80 	call	255a8 <memmove>
   252e8:	80800217 	ldw	r2,8(r16)
   252ec:	80c00017 	ldw	r3,0(r16)
   252f0:	da000117 	ldw	r8,4(sp)
   252f4:	1585c83a 	sub	r2,r2,r22
   252f8:	1dad883a 	add	r22,r3,r22
   252fc:	80800215 	stw	r2,8(r16)
   25300:	85800015 	stw	r22,0(r16)
   25304:	003fbf06 	br	25204 <__alt_data_end+0xfffec204>
   25308:	81000017 	ldw	r4,0(r16)
   2530c:	9027883a 	mov	r19,r18
   25310:	902f883a 	mov	r23,r18
   25314:	003f6906 	br	250bc <__alt_data_end+0xfffec0bc>
   25318:	900d883a 	mov	r6,r18
   2531c:	01400284 	movi	r5,10
   25320:	e009883a 	mov	r4,fp
   25324:	00254480 	call	25448 <memchr>
   25328:	10003e26 	beq	r2,zero,25424 <__sfvwrite_r+0x4a4>
   2532c:	10800044 	addi	r2,r2,1
   25330:	1727c83a 	sub	r19,r2,fp
   25334:	02000044 	movi	r8,1
   25338:	003f9d06 	br	251b0 <__alt_data_end+0xfffec1b0>
   2533c:	80800517 	ldw	r2,20(r16)
   25340:	81400417 	ldw	r5,16(r16)
   25344:	81c00017 	ldw	r7,0(r16)
   25348:	10a7883a 	add	r19,r2,r2
   2534c:	9885883a 	add	r2,r19,r2
   25350:	1026d7fa 	srli	r19,r2,31
   25354:	396dc83a 	sub	r22,r7,r5
   25358:	b1000044 	addi	r4,r22,1
   2535c:	9885883a 	add	r2,r19,r2
   25360:	1027d07a 	srai	r19,r2,1
   25364:	2485883a 	add	r2,r4,r18
   25368:	980d883a 	mov	r6,r19
   2536c:	9880022e 	bgeu	r19,r2,25378 <__sfvwrite_r+0x3f8>
   25370:	1027883a 	mov	r19,r2
   25374:	100d883a 	mov	r6,r2
   25378:	18c1000c 	andi	r3,r3,1024
   2537c:	18001c26 	beq	r3,zero,253f0 <__sfvwrite_r+0x470>
   25380:	300b883a 	mov	r5,r6
   25384:	a809883a 	mov	r4,r21
   25388:	0021da40 	call	21da4 <_malloc_r>
   2538c:	102f883a 	mov	r23,r2
   25390:	10002926 	beq	r2,zero,25438 <__sfvwrite_r+0x4b8>
   25394:	81400417 	ldw	r5,16(r16)
   25398:	b00d883a 	mov	r6,r22
   2539c:	1009883a 	mov	r4,r2
   253a0:	00225b00 	call	225b0 <memcpy>
   253a4:	8080030b 	ldhu	r2,12(r16)
   253a8:	00fedfc4 	movi	r3,-1153
   253ac:	10c4703a 	and	r2,r2,r3
   253b0:	10802014 	ori	r2,r2,128
   253b4:	8080030d 	sth	r2,12(r16)
   253b8:	bd89883a 	add	r4,r23,r22
   253bc:	9d8fc83a 	sub	r7,r19,r22
   253c0:	85c00415 	stw	r23,16(r16)
   253c4:	84c00515 	stw	r19,20(r16)
   253c8:	81000015 	stw	r4,0(r16)
   253cc:	9027883a 	mov	r19,r18
   253d0:	81c00215 	stw	r7,8(r16)
   253d4:	902f883a 	mov	r23,r18
   253d8:	003f3806 	br	250bc <__alt_data_end+0xfffec0bc>
   253dc:	800b883a 	mov	r5,r16
   253e0:	a809883a 	mov	r4,r21
   253e4:	00263080 	call	26308 <_fflush_r>
   253e8:	103fb926 	beq	r2,zero,252d0 <__alt_data_end+0xfffec2d0>
   253ec:	003f6506 	br	25184 <__alt_data_end+0xfffec184>
   253f0:	a809883a 	mov	r4,r21
   253f4:	00257040 	call	25704 <_realloc_r>
   253f8:	102f883a 	mov	r23,r2
   253fc:	103fee1e 	bne	r2,zero,253b8 <__alt_data_end+0xfffec3b8>
   25400:	81400417 	ldw	r5,16(r16)
   25404:	a809883a 	mov	r4,r21
   25408:	002293c0 	call	2293c <_free_r>
   2540c:	8080030b 	ldhu	r2,12(r16)
   25410:	00ffdfc4 	movi	r3,-129
   25414:	1884703a 	and	r2,r3,r2
   25418:	00c00304 	movi	r3,12
   2541c:	a8c00015 	stw	r3,0(r21)
   25420:	003f5906 	br	25188 <__alt_data_end+0xfffec188>
   25424:	94c00044 	addi	r19,r18,1
   25428:	02000044 	movi	r8,1
   2542c:	003f6006 	br	251b0 <__alt_data_end+0xfffec1b0>
   25430:	00bfffc4 	movi	r2,-1
   25434:	003f0006 	br	25038 <__alt_data_end+0xfffec038>
   25438:	00800304 	movi	r2,12
   2543c:	a8800015 	stw	r2,0(r21)
   25440:	8080030b 	ldhu	r2,12(r16)
   25444:	003f5006 	br	25188 <__alt_data_end+0xfffec188>

00025448 <memchr>:
   25448:	208000cc 	andi	r2,r4,3
   2544c:	280f883a 	mov	r7,r5
   25450:	10003426 	beq	r2,zero,25524 <memchr+0xdc>
   25454:	30bfffc4 	addi	r2,r6,-1
   25458:	30001a26 	beq	r6,zero,254c4 <memchr+0x7c>
   2545c:	20c00003 	ldbu	r3,0(r4)
   25460:	29803fcc 	andi	r6,r5,255
   25464:	30c0051e 	bne	r6,r3,2547c <memchr+0x34>
   25468:	00001806 	br	254cc <memchr+0x84>
   2546c:	10001526 	beq	r2,zero,254c4 <memchr+0x7c>
   25470:	20c00003 	ldbu	r3,0(r4)
   25474:	10bfffc4 	addi	r2,r2,-1
   25478:	30c01426 	beq	r6,r3,254cc <memchr+0x84>
   2547c:	21000044 	addi	r4,r4,1
   25480:	20c000cc 	andi	r3,r4,3
   25484:	183ff91e 	bne	r3,zero,2546c <__alt_data_end+0xfffec46c>
   25488:	020000c4 	movi	r8,3
   2548c:	40801136 	bltu	r8,r2,254d4 <memchr+0x8c>
   25490:	10000c26 	beq	r2,zero,254c4 <memchr+0x7c>
   25494:	20c00003 	ldbu	r3,0(r4)
   25498:	29403fcc 	andi	r5,r5,255
   2549c:	28c00b26 	beq	r5,r3,254cc <memchr+0x84>
   254a0:	20c00044 	addi	r3,r4,1
   254a4:	39803fcc 	andi	r6,r7,255
   254a8:	2089883a 	add	r4,r4,r2
   254ac:	00000306 	br	254bc <memchr+0x74>
   254b0:	18c00044 	addi	r3,r3,1
   254b4:	197fffc3 	ldbu	r5,-1(r3)
   254b8:	31400526 	beq	r6,r5,254d0 <memchr+0x88>
   254bc:	1805883a 	mov	r2,r3
   254c0:	20fffb1e 	bne	r4,r3,254b0 <__alt_data_end+0xfffec4b0>
   254c4:	0005883a 	mov	r2,zero
   254c8:	f800283a 	ret
   254cc:	2005883a 	mov	r2,r4
   254d0:	f800283a 	ret
   254d4:	28c03fcc 	andi	r3,r5,255
   254d8:	1812923a 	slli	r9,r3,8
   254dc:	02ffbff4 	movhi	r11,65279
   254e0:	02a02074 	movhi	r10,32897
   254e4:	48d2b03a 	or	r9,r9,r3
   254e8:	4806943a 	slli	r3,r9,16
   254ec:	5affbfc4 	addi	r11,r11,-257
   254f0:	52a02004 	addi	r10,r10,-32640
   254f4:	48d2b03a 	or	r9,r9,r3
   254f8:	20c00017 	ldw	r3,0(r4)
   254fc:	48c6f03a 	xor	r3,r9,r3
   25500:	1acd883a 	add	r6,r3,r11
   25504:	00c6303a 	nor	r3,zero,r3
   25508:	30c6703a 	and	r3,r6,r3
   2550c:	1a86703a 	and	r3,r3,r10
   25510:	183fe01e 	bne	r3,zero,25494 <__alt_data_end+0xfffec494>
   25514:	10bfff04 	addi	r2,r2,-4
   25518:	21000104 	addi	r4,r4,4
   2551c:	40bff636 	bltu	r8,r2,254f8 <__alt_data_end+0xfffec4f8>
   25520:	003fdb06 	br	25490 <__alt_data_end+0xfffec490>
   25524:	3005883a 	mov	r2,r6
   25528:	003fd706 	br	25488 <__alt_data_end+0xfffec488>

0002552c <memcmp>:
   2552c:	01c000c4 	movi	r7,3
   25530:	3980192e 	bgeu	r7,r6,25598 <memcmp+0x6c>
   25534:	2144b03a 	or	r2,r4,r5
   25538:	11c4703a 	and	r2,r2,r7
   2553c:	10000f26 	beq	r2,zero,2557c <memcmp+0x50>
   25540:	20800003 	ldbu	r2,0(r4)
   25544:	28c00003 	ldbu	r3,0(r5)
   25548:	10c0151e 	bne	r2,r3,255a0 <memcmp+0x74>
   2554c:	31bfff84 	addi	r6,r6,-2
   25550:	01ffffc4 	movi	r7,-1
   25554:	00000406 	br	25568 <memcmp+0x3c>
   25558:	20800003 	ldbu	r2,0(r4)
   2555c:	28c00003 	ldbu	r3,0(r5)
   25560:	31bfffc4 	addi	r6,r6,-1
   25564:	10c00e1e 	bne	r2,r3,255a0 <memcmp+0x74>
   25568:	21000044 	addi	r4,r4,1
   2556c:	29400044 	addi	r5,r5,1
   25570:	31fff91e 	bne	r6,r7,25558 <__alt_data_end+0xfffec558>
   25574:	0005883a 	mov	r2,zero
   25578:	f800283a 	ret
   2557c:	20c00017 	ldw	r3,0(r4)
   25580:	28800017 	ldw	r2,0(r5)
   25584:	18bfee1e 	bne	r3,r2,25540 <__alt_data_end+0xfffec540>
   25588:	31bfff04 	addi	r6,r6,-4
   2558c:	21000104 	addi	r4,r4,4
   25590:	29400104 	addi	r5,r5,4
   25594:	39bff936 	bltu	r7,r6,2557c <__alt_data_end+0xfffec57c>
   25598:	303fe91e 	bne	r6,zero,25540 <__alt_data_end+0xfffec540>
   2559c:	003ff506 	br	25574 <__alt_data_end+0xfffec574>
   255a0:	10c5c83a 	sub	r2,r2,r3
   255a4:	f800283a 	ret

000255a8 <memmove>:
   255a8:	2005883a 	mov	r2,r4
   255ac:	29000b2e 	bgeu	r5,r4,255dc <memmove+0x34>
   255b0:	298f883a 	add	r7,r5,r6
   255b4:	21c0092e 	bgeu	r4,r7,255dc <memmove+0x34>
   255b8:	2187883a 	add	r3,r4,r6
   255bc:	198bc83a 	sub	r5,r3,r6
   255c0:	30004826 	beq	r6,zero,256e4 <memmove+0x13c>
   255c4:	39ffffc4 	addi	r7,r7,-1
   255c8:	39000003 	ldbu	r4,0(r7)
   255cc:	18ffffc4 	addi	r3,r3,-1
   255d0:	19000005 	stb	r4,0(r3)
   255d4:	28fffb1e 	bne	r5,r3,255c4 <__alt_data_end+0xfffec5c4>
   255d8:	f800283a 	ret
   255dc:	00c003c4 	movi	r3,15
   255e0:	1980412e 	bgeu	r3,r6,256e8 <memmove+0x140>
   255e4:	2886b03a 	or	r3,r5,r2
   255e8:	18c000cc 	andi	r3,r3,3
   255ec:	1800401e 	bne	r3,zero,256f0 <memmove+0x148>
   255f0:	33fffc04 	addi	r15,r6,-16
   255f4:	781ed13a 	srli	r15,r15,4
   255f8:	28c00104 	addi	r3,r5,4
   255fc:	13400104 	addi	r13,r2,4
   25600:	781c913a 	slli	r14,r15,4
   25604:	2b000204 	addi	r12,r5,8
   25608:	12c00204 	addi	r11,r2,8
   2560c:	73800504 	addi	r14,r14,20
   25610:	2a800304 	addi	r10,r5,12
   25614:	12400304 	addi	r9,r2,12
   25618:	2b9d883a 	add	r14,r5,r14
   2561c:	2811883a 	mov	r8,r5
   25620:	100f883a 	mov	r7,r2
   25624:	41000017 	ldw	r4,0(r8)
   25628:	39c00404 	addi	r7,r7,16
   2562c:	18c00404 	addi	r3,r3,16
   25630:	393ffc15 	stw	r4,-16(r7)
   25634:	193ffc17 	ldw	r4,-16(r3)
   25638:	6b400404 	addi	r13,r13,16
   2563c:	5ac00404 	addi	r11,r11,16
   25640:	693ffc15 	stw	r4,-16(r13)
   25644:	61000017 	ldw	r4,0(r12)
   25648:	4a400404 	addi	r9,r9,16
   2564c:	42000404 	addi	r8,r8,16
   25650:	593ffc15 	stw	r4,-16(r11)
   25654:	51000017 	ldw	r4,0(r10)
   25658:	63000404 	addi	r12,r12,16
   2565c:	52800404 	addi	r10,r10,16
   25660:	493ffc15 	stw	r4,-16(r9)
   25664:	1bbfef1e 	bne	r3,r14,25624 <__alt_data_end+0xfffec624>
   25668:	79000044 	addi	r4,r15,1
   2566c:	2008913a 	slli	r4,r4,4
   25670:	328003cc 	andi	r10,r6,15
   25674:	02c000c4 	movi	r11,3
   25678:	1107883a 	add	r3,r2,r4
   2567c:	290b883a 	add	r5,r5,r4
   25680:	5a801e2e 	bgeu	r11,r10,256fc <memmove+0x154>
   25684:	1813883a 	mov	r9,r3
   25688:	2811883a 	mov	r8,r5
   2568c:	500f883a 	mov	r7,r10
   25690:	41000017 	ldw	r4,0(r8)
   25694:	4a400104 	addi	r9,r9,4
   25698:	39ffff04 	addi	r7,r7,-4
   2569c:	493fff15 	stw	r4,-4(r9)
   256a0:	42000104 	addi	r8,r8,4
   256a4:	59fffa36 	bltu	r11,r7,25690 <__alt_data_end+0xfffec690>
   256a8:	513fff04 	addi	r4,r10,-4
   256ac:	2008d0ba 	srli	r4,r4,2
   256b0:	318000cc 	andi	r6,r6,3
   256b4:	21000044 	addi	r4,r4,1
   256b8:	2109883a 	add	r4,r4,r4
   256bc:	2109883a 	add	r4,r4,r4
   256c0:	1907883a 	add	r3,r3,r4
   256c4:	290b883a 	add	r5,r5,r4
   256c8:	30000b26 	beq	r6,zero,256f8 <memmove+0x150>
   256cc:	198d883a 	add	r6,r3,r6
   256d0:	29c00003 	ldbu	r7,0(r5)
   256d4:	18c00044 	addi	r3,r3,1
   256d8:	29400044 	addi	r5,r5,1
   256dc:	19ffffc5 	stb	r7,-1(r3)
   256e0:	19bffb1e 	bne	r3,r6,256d0 <__alt_data_end+0xfffec6d0>
   256e4:	f800283a 	ret
   256e8:	1007883a 	mov	r3,r2
   256ec:	003ff606 	br	256c8 <__alt_data_end+0xfffec6c8>
   256f0:	1007883a 	mov	r3,r2
   256f4:	003ff506 	br	256cc <__alt_data_end+0xfffec6cc>
   256f8:	f800283a 	ret
   256fc:	500d883a 	mov	r6,r10
   25700:	003ff106 	br	256c8 <__alt_data_end+0xfffec6c8>

00025704 <_realloc_r>:
   25704:	defff604 	addi	sp,sp,-40
   25708:	dc800215 	stw	r18,8(sp)
   2570c:	dfc00915 	stw	ra,36(sp)
   25710:	df000815 	stw	fp,32(sp)
   25714:	ddc00715 	stw	r23,28(sp)
   25718:	dd800615 	stw	r22,24(sp)
   2571c:	dd400515 	stw	r21,20(sp)
   25720:	dd000415 	stw	r20,16(sp)
   25724:	dcc00315 	stw	r19,12(sp)
   25728:	dc400115 	stw	r17,4(sp)
   2572c:	dc000015 	stw	r16,0(sp)
   25730:	3025883a 	mov	r18,r6
   25734:	2800b726 	beq	r5,zero,25a14 <_realloc_r+0x310>
   25738:	282b883a 	mov	r21,r5
   2573c:	2029883a 	mov	r20,r4
   25740:	00233b00 	call	233b0 <__malloc_lock>
   25744:	a8bfff17 	ldw	r2,-4(r21)
   25748:	043fff04 	movi	r16,-4
   2574c:	90c002c4 	addi	r3,r18,11
   25750:	01000584 	movi	r4,22
   25754:	acfffe04 	addi	r19,r21,-8
   25758:	1420703a 	and	r16,r2,r16
   2575c:	20c0332e 	bgeu	r4,r3,2582c <_realloc_r+0x128>
   25760:	047ffe04 	movi	r17,-8
   25764:	1c62703a 	and	r17,r3,r17
   25768:	8807883a 	mov	r3,r17
   2576c:	88005816 	blt	r17,zero,258d0 <_realloc_r+0x1cc>
   25770:	8c805736 	bltu	r17,r18,258d0 <_realloc_r+0x1cc>
   25774:	80c0300e 	bge	r16,r3,25838 <_realloc_r+0x134>
   25778:	070000b4 	movhi	fp,2
   2577c:	e71f5504 	addi	fp,fp,32084
   25780:	e1c00217 	ldw	r7,8(fp)
   25784:	9c09883a 	add	r4,r19,r16
   25788:	22000117 	ldw	r8,4(r4)
   2578c:	21c06326 	beq	r4,r7,2591c <_realloc_r+0x218>
   25790:	017fff84 	movi	r5,-2
   25794:	414a703a 	and	r5,r8,r5
   25798:	214b883a 	add	r5,r4,r5
   2579c:	29800117 	ldw	r6,4(r5)
   257a0:	3180004c 	andi	r6,r6,1
   257a4:	30003f26 	beq	r6,zero,258a4 <_realloc_r+0x1a0>
   257a8:	1080004c 	andi	r2,r2,1
   257ac:	10008326 	beq	r2,zero,259bc <_realloc_r+0x2b8>
   257b0:	900b883a 	mov	r5,r18
   257b4:	a009883a 	mov	r4,r20
   257b8:	0021da40 	call	21da4 <_malloc_r>
   257bc:	1025883a 	mov	r18,r2
   257c0:	10011e26 	beq	r2,zero,25c3c <_realloc_r+0x538>
   257c4:	a93fff17 	ldw	r4,-4(r21)
   257c8:	10fffe04 	addi	r3,r2,-8
   257cc:	00bfff84 	movi	r2,-2
   257d0:	2084703a 	and	r2,r4,r2
   257d4:	9885883a 	add	r2,r19,r2
   257d8:	1880ee26 	beq	r3,r2,25b94 <_realloc_r+0x490>
   257dc:	81bfff04 	addi	r6,r16,-4
   257e0:	00800904 	movi	r2,36
   257e4:	1180b836 	bltu	r2,r6,25ac8 <_realloc_r+0x3c4>
   257e8:	00c004c4 	movi	r3,19
   257ec:	19809636 	bltu	r3,r6,25a48 <_realloc_r+0x344>
   257f0:	9005883a 	mov	r2,r18
   257f4:	a807883a 	mov	r3,r21
   257f8:	19000017 	ldw	r4,0(r3)
   257fc:	11000015 	stw	r4,0(r2)
   25800:	19000117 	ldw	r4,4(r3)
   25804:	11000115 	stw	r4,4(r2)
   25808:	18c00217 	ldw	r3,8(r3)
   2580c:	10c00215 	stw	r3,8(r2)
   25810:	a80b883a 	mov	r5,r21
   25814:	a009883a 	mov	r4,r20
   25818:	002293c0 	call	2293c <_free_r>
   2581c:	a009883a 	mov	r4,r20
   25820:	00233d40 	call	233d4 <__malloc_unlock>
   25824:	9005883a 	mov	r2,r18
   25828:	00001206 	br	25874 <_realloc_r+0x170>
   2582c:	00c00404 	movi	r3,16
   25830:	1823883a 	mov	r17,r3
   25834:	003fce06 	br	25770 <__alt_data_end+0xfffec770>
   25838:	a825883a 	mov	r18,r21
   2583c:	8445c83a 	sub	r2,r16,r17
   25840:	00c003c4 	movi	r3,15
   25844:	18802636 	bltu	r3,r2,258e0 <_realloc_r+0x1dc>
   25848:	99800117 	ldw	r6,4(r19)
   2584c:	9c07883a 	add	r3,r19,r16
   25850:	3180004c 	andi	r6,r6,1
   25854:	3420b03a 	or	r16,r6,r16
   25858:	9c000115 	stw	r16,4(r19)
   2585c:	18800117 	ldw	r2,4(r3)
   25860:	10800054 	ori	r2,r2,1
   25864:	18800115 	stw	r2,4(r3)
   25868:	a009883a 	mov	r4,r20
   2586c:	00233d40 	call	233d4 <__malloc_unlock>
   25870:	9005883a 	mov	r2,r18
   25874:	dfc00917 	ldw	ra,36(sp)
   25878:	df000817 	ldw	fp,32(sp)
   2587c:	ddc00717 	ldw	r23,28(sp)
   25880:	dd800617 	ldw	r22,24(sp)
   25884:	dd400517 	ldw	r21,20(sp)
   25888:	dd000417 	ldw	r20,16(sp)
   2588c:	dcc00317 	ldw	r19,12(sp)
   25890:	dc800217 	ldw	r18,8(sp)
   25894:	dc400117 	ldw	r17,4(sp)
   25898:	dc000017 	ldw	r16,0(sp)
   2589c:	dec00a04 	addi	sp,sp,40
   258a0:	f800283a 	ret
   258a4:	017fff04 	movi	r5,-4
   258a8:	414a703a 	and	r5,r8,r5
   258ac:	814d883a 	add	r6,r16,r5
   258b0:	30c01f16 	blt	r6,r3,25930 <_realloc_r+0x22c>
   258b4:	20800317 	ldw	r2,12(r4)
   258b8:	20c00217 	ldw	r3,8(r4)
   258bc:	a825883a 	mov	r18,r21
   258c0:	3021883a 	mov	r16,r6
   258c4:	18800315 	stw	r2,12(r3)
   258c8:	10c00215 	stw	r3,8(r2)
   258cc:	003fdb06 	br	2583c <__alt_data_end+0xfffec83c>
   258d0:	00800304 	movi	r2,12
   258d4:	a0800015 	stw	r2,0(r20)
   258d8:	0005883a 	mov	r2,zero
   258dc:	003fe506 	br	25874 <__alt_data_end+0xfffec874>
   258e0:	98c00117 	ldw	r3,4(r19)
   258e4:	9c4b883a 	add	r5,r19,r17
   258e8:	11000054 	ori	r4,r2,1
   258ec:	18c0004c 	andi	r3,r3,1
   258f0:	1c62b03a 	or	r17,r3,r17
   258f4:	9c400115 	stw	r17,4(r19)
   258f8:	29000115 	stw	r4,4(r5)
   258fc:	2885883a 	add	r2,r5,r2
   25900:	10c00117 	ldw	r3,4(r2)
   25904:	29400204 	addi	r5,r5,8
   25908:	a009883a 	mov	r4,r20
   2590c:	18c00054 	ori	r3,r3,1
   25910:	10c00115 	stw	r3,4(r2)
   25914:	002293c0 	call	2293c <_free_r>
   25918:	003fd306 	br	25868 <__alt_data_end+0xfffec868>
   2591c:	017fff04 	movi	r5,-4
   25920:	414a703a 	and	r5,r8,r5
   25924:	89800404 	addi	r6,r17,16
   25928:	8151883a 	add	r8,r16,r5
   2592c:	4180590e 	bge	r8,r6,25a94 <_realloc_r+0x390>
   25930:	1080004c 	andi	r2,r2,1
   25934:	103f9e1e 	bne	r2,zero,257b0 <__alt_data_end+0xfffec7b0>
   25938:	adbffe17 	ldw	r22,-8(r21)
   2593c:	00bfff04 	movi	r2,-4
   25940:	9dadc83a 	sub	r22,r19,r22
   25944:	b1800117 	ldw	r6,4(r22)
   25948:	3084703a 	and	r2,r6,r2
   2594c:	20002026 	beq	r4,zero,259d0 <_realloc_r+0x2cc>
   25950:	80af883a 	add	r23,r16,r2
   25954:	b96f883a 	add	r23,r23,r5
   25958:	21c05f26 	beq	r4,r7,25ad8 <_realloc_r+0x3d4>
   2595c:	b8c01c16 	blt	r23,r3,259d0 <_realloc_r+0x2cc>
   25960:	20800317 	ldw	r2,12(r4)
   25964:	20c00217 	ldw	r3,8(r4)
   25968:	81bfff04 	addi	r6,r16,-4
   2596c:	01000904 	movi	r4,36
   25970:	18800315 	stw	r2,12(r3)
   25974:	10c00215 	stw	r3,8(r2)
   25978:	b0c00217 	ldw	r3,8(r22)
   2597c:	b0800317 	ldw	r2,12(r22)
   25980:	b4800204 	addi	r18,r22,8
   25984:	18800315 	stw	r2,12(r3)
   25988:	10c00215 	stw	r3,8(r2)
   2598c:	21801b36 	bltu	r4,r6,259fc <_realloc_r+0x2f8>
   25990:	008004c4 	movi	r2,19
   25994:	1180352e 	bgeu	r2,r6,25a6c <_realloc_r+0x368>
   25998:	a8800017 	ldw	r2,0(r21)
   2599c:	b0800215 	stw	r2,8(r22)
   259a0:	a8800117 	ldw	r2,4(r21)
   259a4:	b0800315 	stw	r2,12(r22)
   259a8:	008006c4 	movi	r2,27
   259ac:	11807f36 	bltu	r2,r6,25bac <_realloc_r+0x4a8>
   259b0:	b0800404 	addi	r2,r22,16
   259b4:	ad400204 	addi	r21,r21,8
   259b8:	00002d06 	br	25a70 <_realloc_r+0x36c>
   259bc:	adbffe17 	ldw	r22,-8(r21)
   259c0:	00bfff04 	movi	r2,-4
   259c4:	9dadc83a 	sub	r22,r19,r22
   259c8:	b1000117 	ldw	r4,4(r22)
   259cc:	2084703a 	and	r2,r4,r2
   259d0:	b03f7726 	beq	r22,zero,257b0 <__alt_data_end+0xfffec7b0>
   259d4:	80af883a 	add	r23,r16,r2
   259d8:	b8ff7516 	blt	r23,r3,257b0 <__alt_data_end+0xfffec7b0>
   259dc:	b0800317 	ldw	r2,12(r22)
   259e0:	b0c00217 	ldw	r3,8(r22)
   259e4:	81bfff04 	addi	r6,r16,-4
   259e8:	01000904 	movi	r4,36
   259ec:	18800315 	stw	r2,12(r3)
   259f0:	10c00215 	stw	r3,8(r2)
   259f4:	b4800204 	addi	r18,r22,8
   259f8:	21bfe52e 	bgeu	r4,r6,25990 <__alt_data_end+0xfffec990>
   259fc:	a80b883a 	mov	r5,r21
   25a00:	9009883a 	mov	r4,r18
   25a04:	00255a80 	call	255a8 <memmove>
   25a08:	b821883a 	mov	r16,r23
   25a0c:	b027883a 	mov	r19,r22
   25a10:	003f8a06 	br	2583c <__alt_data_end+0xfffec83c>
   25a14:	300b883a 	mov	r5,r6
   25a18:	dfc00917 	ldw	ra,36(sp)
   25a1c:	df000817 	ldw	fp,32(sp)
   25a20:	ddc00717 	ldw	r23,28(sp)
   25a24:	dd800617 	ldw	r22,24(sp)
   25a28:	dd400517 	ldw	r21,20(sp)
   25a2c:	dd000417 	ldw	r20,16(sp)
   25a30:	dcc00317 	ldw	r19,12(sp)
   25a34:	dc800217 	ldw	r18,8(sp)
   25a38:	dc400117 	ldw	r17,4(sp)
   25a3c:	dc000017 	ldw	r16,0(sp)
   25a40:	dec00a04 	addi	sp,sp,40
   25a44:	0021da41 	jmpi	21da4 <_malloc_r>
   25a48:	a8c00017 	ldw	r3,0(r21)
   25a4c:	90c00015 	stw	r3,0(r18)
   25a50:	a8c00117 	ldw	r3,4(r21)
   25a54:	90c00115 	stw	r3,4(r18)
   25a58:	00c006c4 	movi	r3,27
   25a5c:	19804536 	bltu	r3,r6,25b74 <_realloc_r+0x470>
   25a60:	90800204 	addi	r2,r18,8
   25a64:	a8c00204 	addi	r3,r21,8
   25a68:	003f6306 	br	257f8 <__alt_data_end+0xfffec7f8>
   25a6c:	9005883a 	mov	r2,r18
   25a70:	a8c00017 	ldw	r3,0(r21)
   25a74:	b821883a 	mov	r16,r23
   25a78:	b027883a 	mov	r19,r22
   25a7c:	10c00015 	stw	r3,0(r2)
   25a80:	a8c00117 	ldw	r3,4(r21)
   25a84:	10c00115 	stw	r3,4(r2)
   25a88:	a8c00217 	ldw	r3,8(r21)
   25a8c:	10c00215 	stw	r3,8(r2)
   25a90:	003f6a06 	br	2583c <__alt_data_end+0xfffec83c>
   25a94:	9c67883a 	add	r19,r19,r17
   25a98:	4445c83a 	sub	r2,r8,r17
   25a9c:	e4c00215 	stw	r19,8(fp)
   25aa0:	10800054 	ori	r2,r2,1
   25aa4:	98800115 	stw	r2,4(r19)
   25aa8:	a8bfff17 	ldw	r2,-4(r21)
   25aac:	a009883a 	mov	r4,r20
   25ab0:	1080004c 	andi	r2,r2,1
   25ab4:	1462b03a 	or	r17,r2,r17
   25ab8:	ac7fff15 	stw	r17,-4(r21)
   25abc:	00233d40 	call	233d4 <__malloc_unlock>
   25ac0:	a805883a 	mov	r2,r21
   25ac4:	003f6b06 	br	25874 <__alt_data_end+0xfffec874>
   25ac8:	a80b883a 	mov	r5,r21
   25acc:	9009883a 	mov	r4,r18
   25ad0:	00255a80 	call	255a8 <memmove>
   25ad4:	003f4e06 	br	25810 <__alt_data_end+0xfffec810>
   25ad8:	89000404 	addi	r4,r17,16
   25adc:	b93fbc16 	blt	r23,r4,259d0 <__alt_data_end+0xfffec9d0>
   25ae0:	b0800317 	ldw	r2,12(r22)
   25ae4:	b0c00217 	ldw	r3,8(r22)
   25ae8:	81bfff04 	addi	r6,r16,-4
   25aec:	01000904 	movi	r4,36
   25af0:	18800315 	stw	r2,12(r3)
   25af4:	10c00215 	stw	r3,8(r2)
   25af8:	b4800204 	addi	r18,r22,8
   25afc:	21804336 	bltu	r4,r6,25c0c <_realloc_r+0x508>
   25b00:	008004c4 	movi	r2,19
   25b04:	11803f2e 	bgeu	r2,r6,25c04 <_realloc_r+0x500>
   25b08:	a8800017 	ldw	r2,0(r21)
   25b0c:	b0800215 	stw	r2,8(r22)
   25b10:	a8800117 	ldw	r2,4(r21)
   25b14:	b0800315 	stw	r2,12(r22)
   25b18:	008006c4 	movi	r2,27
   25b1c:	11803f36 	bltu	r2,r6,25c1c <_realloc_r+0x518>
   25b20:	b0800404 	addi	r2,r22,16
   25b24:	ad400204 	addi	r21,r21,8
   25b28:	a8c00017 	ldw	r3,0(r21)
   25b2c:	10c00015 	stw	r3,0(r2)
   25b30:	a8c00117 	ldw	r3,4(r21)
   25b34:	10c00115 	stw	r3,4(r2)
   25b38:	a8c00217 	ldw	r3,8(r21)
   25b3c:	10c00215 	stw	r3,8(r2)
   25b40:	b447883a 	add	r3,r22,r17
   25b44:	bc45c83a 	sub	r2,r23,r17
   25b48:	e0c00215 	stw	r3,8(fp)
   25b4c:	10800054 	ori	r2,r2,1
   25b50:	18800115 	stw	r2,4(r3)
   25b54:	b0800117 	ldw	r2,4(r22)
   25b58:	a009883a 	mov	r4,r20
   25b5c:	1080004c 	andi	r2,r2,1
   25b60:	1462b03a 	or	r17,r2,r17
   25b64:	b4400115 	stw	r17,4(r22)
   25b68:	00233d40 	call	233d4 <__malloc_unlock>
   25b6c:	9005883a 	mov	r2,r18
   25b70:	003f4006 	br	25874 <__alt_data_end+0xfffec874>
   25b74:	a8c00217 	ldw	r3,8(r21)
   25b78:	90c00215 	stw	r3,8(r18)
   25b7c:	a8c00317 	ldw	r3,12(r21)
   25b80:	90c00315 	stw	r3,12(r18)
   25b84:	30801126 	beq	r6,r2,25bcc <_realloc_r+0x4c8>
   25b88:	90800404 	addi	r2,r18,16
   25b8c:	a8c00404 	addi	r3,r21,16
   25b90:	003f1906 	br	257f8 <__alt_data_end+0xfffec7f8>
   25b94:	90ffff17 	ldw	r3,-4(r18)
   25b98:	00bfff04 	movi	r2,-4
   25b9c:	a825883a 	mov	r18,r21
   25ba0:	1884703a 	and	r2,r3,r2
   25ba4:	80a1883a 	add	r16,r16,r2
   25ba8:	003f2406 	br	2583c <__alt_data_end+0xfffec83c>
   25bac:	a8800217 	ldw	r2,8(r21)
   25bb0:	b0800415 	stw	r2,16(r22)
   25bb4:	a8800317 	ldw	r2,12(r21)
   25bb8:	b0800515 	stw	r2,20(r22)
   25bbc:	31000a26 	beq	r6,r4,25be8 <_realloc_r+0x4e4>
   25bc0:	b0800604 	addi	r2,r22,24
   25bc4:	ad400404 	addi	r21,r21,16
   25bc8:	003fa906 	br	25a70 <__alt_data_end+0xfffeca70>
   25bcc:	a9000417 	ldw	r4,16(r21)
   25bd0:	90800604 	addi	r2,r18,24
   25bd4:	a8c00604 	addi	r3,r21,24
   25bd8:	91000415 	stw	r4,16(r18)
   25bdc:	a9000517 	ldw	r4,20(r21)
   25be0:	91000515 	stw	r4,20(r18)
   25be4:	003f0406 	br	257f8 <__alt_data_end+0xfffec7f8>
   25be8:	a8c00417 	ldw	r3,16(r21)
   25bec:	ad400604 	addi	r21,r21,24
   25bf0:	b0800804 	addi	r2,r22,32
   25bf4:	b0c00615 	stw	r3,24(r22)
   25bf8:	a8ffff17 	ldw	r3,-4(r21)
   25bfc:	b0c00715 	stw	r3,28(r22)
   25c00:	003f9b06 	br	25a70 <__alt_data_end+0xfffeca70>
   25c04:	9005883a 	mov	r2,r18
   25c08:	003fc706 	br	25b28 <__alt_data_end+0xfffecb28>
   25c0c:	a80b883a 	mov	r5,r21
   25c10:	9009883a 	mov	r4,r18
   25c14:	00255a80 	call	255a8 <memmove>
   25c18:	003fc906 	br	25b40 <__alt_data_end+0xfffecb40>
   25c1c:	a8800217 	ldw	r2,8(r21)
   25c20:	b0800415 	stw	r2,16(r22)
   25c24:	a8800317 	ldw	r2,12(r21)
   25c28:	b0800515 	stw	r2,20(r22)
   25c2c:	31000726 	beq	r6,r4,25c4c <_realloc_r+0x548>
   25c30:	b0800604 	addi	r2,r22,24
   25c34:	ad400404 	addi	r21,r21,16
   25c38:	003fbb06 	br	25b28 <__alt_data_end+0xfffecb28>
   25c3c:	a009883a 	mov	r4,r20
   25c40:	00233d40 	call	233d4 <__malloc_unlock>
   25c44:	0005883a 	mov	r2,zero
   25c48:	003f0a06 	br	25874 <__alt_data_end+0xfffec874>
   25c4c:	a8c00417 	ldw	r3,16(r21)
   25c50:	ad400604 	addi	r21,r21,24
   25c54:	b0800804 	addi	r2,r22,32
   25c58:	b0c00615 	stw	r3,24(r22)
   25c5c:	a8ffff17 	ldw	r3,-4(r21)
   25c60:	b0c00715 	stw	r3,28(r22)
   25c64:	003fb006 	br	25b28 <__alt_data_end+0xfffecb28>

00025c68 <strlen>:
   25c68:	208000cc 	andi	r2,r4,3
   25c6c:	10002026 	beq	r2,zero,25cf0 <strlen+0x88>
   25c70:	20800007 	ldb	r2,0(r4)
   25c74:	10002026 	beq	r2,zero,25cf8 <strlen+0x90>
   25c78:	2005883a 	mov	r2,r4
   25c7c:	00000206 	br	25c88 <strlen+0x20>
   25c80:	10c00007 	ldb	r3,0(r2)
   25c84:	18001826 	beq	r3,zero,25ce8 <strlen+0x80>
   25c88:	10800044 	addi	r2,r2,1
   25c8c:	10c000cc 	andi	r3,r2,3
   25c90:	183ffb1e 	bne	r3,zero,25c80 <__alt_data_end+0xfffecc80>
   25c94:	10c00017 	ldw	r3,0(r2)
   25c98:	01ffbff4 	movhi	r7,65279
   25c9c:	39ffbfc4 	addi	r7,r7,-257
   25ca0:	00ca303a 	nor	r5,zero,r3
   25ca4:	01a02074 	movhi	r6,32897
   25ca8:	19c7883a 	add	r3,r3,r7
   25cac:	31a02004 	addi	r6,r6,-32640
   25cb0:	1946703a 	and	r3,r3,r5
   25cb4:	1986703a 	and	r3,r3,r6
   25cb8:	1800091e 	bne	r3,zero,25ce0 <strlen+0x78>
   25cbc:	10800104 	addi	r2,r2,4
   25cc0:	10c00017 	ldw	r3,0(r2)
   25cc4:	19cb883a 	add	r5,r3,r7
   25cc8:	00c6303a 	nor	r3,zero,r3
   25ccc:	28c6703a 	and	r3,r5,r3
   25cd0:	1986703a 	and	r3,r3,r6
   25cd4:	183ff926 	beq	r3,zero,25cbc <__alt_data_end+0xfffeccbc>
   25cd8:	00000106 	br	25ce0 <strlen+0x78>
   25cdc:	10800044 	addi	r2,r2,1
   25ce0:	10c00007 	ldb	r3,0(r2)
   25ce4:	183ffd1e 	bne	r3,zero,25cdc <__alt_data_end+0xfffeccdc>
   25ce8:	1105c83a 	sub	r2,r2,r4
   25cec:	f800283a 	ret
   25cf0:	2005883a 	mov	r2,r4
   25cf4:	003fe706 	br	25c94 <__alt_data_end+0xfffecc94>
   25cf8:	0005883a 	mov	r2,zero
   25cfc:	f800283a 	ret

00025d00 <__swsetup_r>:
   25d00:	008000f4 	movhi	r2,3
   25d04:	defffd04 	addi	sp,sp,-12
   25d08:	10a5e804 	addi	r2,r2,-26720
   25d0c:	dc400115 	stw	r17,4(sp)
   25d10:	2023883a 	mov	r17,r4
   25d14:	11000017 	ldw	r4,0(r2)
   25d18:	dc000015 	stw	r16,0(sp)
   25d1c:	dfc00215 	stw	ra,8(sp)
   25d20:	2821883a 	mov	r16,r5
   25d24:	20000226 	beq	r4,zero,25d30 <__swsetup_r+0x30>
   25d28:	20800e17 	ldw	r2,56(r4)
   25d2c:	10003126 	beq	r2,zero,25df4 <__swsetup_r+0xf4>
   25d30:	8080030b 	ldhu	r2,12(r16)
   25d34:	10c0020c 	andi	r3,r2,8
   25d38:	1009883a 	mov	r4,r2
   25d3c:	18000f26 	beq	r3,zero,25d7c <__swsetup_r+0x7c>
   25d40:	80c00417 	ldw	r3,16(r16)
   25d44:	18001526 	beq	r3,zero,25d9c <__swsetup_r+0x9c>
   25d48:	1100004c 	andi	r4,r2,1
   25d4c:	20001c1e 	bne	r4,zero,25dc0 <__swsetup_r+0xc0>
   25d50:	1080008c 	andi	r2,r2,2
   25d54:	1000291e 	bne	r2,zero,25dfc <__swsetup_r+0xfc>
   25d58:	80800517 	ldw	r2,20(r16)
   25d5c:	80800215 	stw	r2,8(r16)
   25d60:	18001c26 	beq	r3,zero,25dd4 <__swsetup_r+0xd4>
   25d64:	0005883a 	mov	r2,zero
   25d68:	dfc00217 	ldw	ra,8(sp)
   25d6c:	dc400117 	ldw	r17,4(sp)
   25d70:	dc000017 	ldw	r16,0(sp)
   25d74:	dec00304 	addi	sp,sp,12
   25d78:	f800283a 	ret
   25d7c:	2080040c 	andi	r2,r4,16
   25d80:	10002e26 	beq	r2,zero,25e3c <__swsetup_r+0x13c>
   25d84:	2080010c 	andi	r2,r4,4
   25d88:	10001e1e 	bne	r2,zero,25e04 <__swsetup_r+0x104>
   25d8c:	80c00417 	ldw	r3,16(r16)
   25d90:	20800214 	ori	r2,r4,8
   25d94:	8080030d 	sth	r2,12(r16)
   25d98:	183feb1e 	bne	r3,zero,25d48 <__alt_data_end+0xfffecd48>
   25d9c:	1100a00c 	andi	r4,r2,640
   25da0:	01408004 	movi	r5,512
   25da4:	217fe826 	beq	r4,r5,25d48 <__alt_data_end+0xfffecd48>
   25da8:	800b883a 	mov	r5,r16
   25dac:	8809883a 	mov	r4,r17
   25db0:	00268cc0 	call	268cc <__smakebuf_r>
   25db4:	8080030b 	ldhu	r2,12(r16)
   25db8:	80c00417 	ldw	r3,16(r16)
   25dbc:	003fe206 	br	25d48 <__alt_data_end+0xfffecd48>
   25dc0:	80800517 	ldw	r2,20(r16)
   25dc4:	80000215 	stw	zero,8(r16)
   25dc8:	0085c83a 	sub	r2,zero,r2
   25dcc:	80800615 	stw	r2,24(r16)
   25dd0:	183fe41e 	bne	r3,zero,25d64 <__alt_data_end+0xfffecd64>
   25dd4:	80c0030b 	ldhu	r3,12(r16)
   25dd8:	0005883a 	mov	r2,zero
   25ddc:	1900200c 	andi	r4,r3,128
   25de0:	203fe126 	beq	r4,zero,25d68 <__alt_data_end+0xfffecd68>
   25de4:	18c01014 	ori	r3,r3,64
   25de8:	80c0030d 	sth	r3,12(r16)
   25dec:	00bfffc4 	movi	r2,-1
   25df0:	003fdd06 	br	25d68 <__alt_data_end+0xfffecd68>
   25df4:	00266f40 	call	266f4 <__sinit>
   25df8:	003fcd06 	br	25d30 <__alt_data_end+0xfffecd30>
   25dfc:	0005883a 	mov	r2,zero
   25e00:	003fd606 	br	25d5c <__alt_data_end+0xfffecd5c>
   25e04:	81400c17 	ldw	r5,48(r16)
   25e08:	28000626 	beq	r5,zero,25e24 <__swsetup_r+0x124>
   25e0c:	80801004 	addi	r2,r16,64
   25e10:	28800326 	beq	r5,r2,25e20 <__swsetup_r+0x120>
   25e14:	8809883a 	mov	r4,r17
   25e18:	002293c0 	call	2293c <_free_r>
   25e1c:	8100030b 	ldhu	r4,12(r16)
   25e20:	80000c15 	stw	zero,48(r16)
   25e24:	80c00417 	ldw	r3,16(r16)
   25e28:	00bff6c4 	movi	r2,-37
   25e2c:	1108703a 	and	r4,r2,r4
   25e30:	80000115 	stw	zero,4(r16)
   25e34:	80c00015 	stw	r3,0(r16)
   25e38:	003fd506 	br	25d90 <__alt_data_end+0xfffecd90>
   25e3c:	00800244 	movi	r2,9
   25e40:	88800015 	stw	r2,0(r17)
   25e44:	20801014 	ori	r2,r4,64
   25e48:	8080030d 	sth	r2,12(r16)
   25e4c:	00bfffc4 	movi	r2,-1
   25e50:	003fc506 	br	25d68 <__alt_data_end+0xfffecd68>

00025e54 <__register_exitproc>:
   25e54:	defffa04 	addi	sp,sp,-24
   25e58:	dc000315 	stw	r16,12(sp)
   25e5c:	040000f4 	movhi	r16,3
   25e60:	8425e704 	addi	r16,r16,-26724
   25e64:	80c00017 	ldw	r3,0(r16)
   25e68:	dc400415 	stw	r17,16(sp)
   25e6c:	dfc00515 	stw	ra,20(sp)
   25e70:	18805217 	ldw	r2,328(r3)
   25e74:	2023883a 	mov	r17,r4
   25e78:	10003726 	beq	r2,zero,25f58 <__register_exitproc+0x104>
   25e7c:	10c00117 	ldw	r3,4(r2)
   25e80:	010007c4 	movi	r4,31
   25e84:	20c00e16 	blt	r4,r3,25ec0 <__register_exitproc+0x6c>
   25e88:	1a000044 	addi	r8,r3,1
   25e8c:	8800221e 	bne	r17,zero,25f18 <__register_exitproc+0xc4>
   25e90:	18c00084 	addi	r3,r3,2
   25e94:	18c7883a 	add	r3,r3,r3
   25e98:	18c7883a 	add	r3,r3,r3
   25e9c:	12000115 	stw	r8,4(r2)
   25ea0:	10c7883a 	add	r3,r2,r3
   25ea4:	19400015 	stw	r5,0(r3)
   25ea8:	0005883a 	mov	r2,zero
   25eac:	dfc00517 	ldw	ra,20(sp)
   25eb0:	dc400417 	ldw	r17,16(sp)
   25eb4:	dc000317 	ldw	r16,12(sp)
   25eb8:	dec00604 	addi	sp,sp,24
   25ebc:	f800283a 	ret
   25ec0:	008000b4 	movhi	r2,2
   25ec4:	10875f04 	addi	r2,r2,7548
   25ec8:	10002626 	beq	r2,zero,25f64 <__register_exitproc+0x110>
   25ecc:	01006404 	movi	r4,400
   25ed0:	d9400015 	stw	r5,0(sp)
   25ed4:	d9800115 	stw	r6,4(sp)
   25ed8:	d9c00215 	stw	r7,8(sp)
   25edc:	0021d7c0 	call	21d7c <malloc>
   25ee0:	d9400017 	ldw	r5,0(sp)
   25ee4:	d9800117 	ldw	r6,4(sp)
   25ee8:	d9c00217 	ldw	r7,8(sp)
   25eec:	10001d26 	beq	r2,zero,25f64 <__register_exitproc+0x110>
   25ef0:	81000017 	ldw	r4,0(r16)
   25ef4:	10000115 	stw	zero,4(r2)
   25ef8:	02000044 	movi	r8,1
   25efc:	22405217 	ldw	r9,328(r4)
   25f00:	0007883a 	mov	r3,zero
   25f04:	12400015 	stw	r9,0(r2)
   25f08:	20805215 	stw	r2,328(r4)
   25f0c:	10006215 	stw	zero,392(r2)
   25f10:	10006315 	stw	zero,396(r2)
   25f14:	883fde26 	beq	r17,zero,25e90 <__alt_data_end+0xfffece90>
   25f18:	18c9883a 	add	r4,r3,r3
   25f1c:	2109883a 	add	r4,r4,r4
   25f20:	1109883a 	add	r4,r2,r4
   25f24:	21802215 	stw	r6,136(r4)
   25f28:	01800044 	movi	r6,1
   25f2c:	12406217 	ldw	r9,392(r2)
   25f30:	30cc983a 	sll	r6,r6,r3
   25f34:	4992b03a 	or	r9,r9,r6
   25f38:	12406215 	stw	r9,392(r2)
   25f3c:	21c04215 	stw	r7,264(r4)
   25f40:	01000084 	movi	r4,2
   25f44:	893fd21e 	bne	r17,r4,25e90 <__alt_data_end+0xfffece90>
   25f48:	11006317 	ldw	r4,396(r2)
   25f4c:	218cb03a 	or	r6,r4,r6
   25f50:	11806315 	stw	r6,396(r2)
   25f54:	003fce06 	br	25e90 <__alt_data_end+0xfffece90>
   25f58:	18805304 	addi	r2,r3,332
   25f5c:	18805215 	stw	r2,328(r3)
   25f60:	003fc606 	br	25e7c <__alt_data_end+0xfffece7c>
   25f64:	00bfffc4 	movi	r2,-1
   25f68:	003fd006 	br	25eac <__alt_data_end+0xfffeceac>

00025f6c <__call_exitprocs>:
   25f6c:	defff504 	addi	sp,sp,-44
   25f70:	df000915 	stw	fp,36(sp)
   25f74:	dd400615 	stw	r21,24(sp)
   25f78:	dc800315 	stw	r18,12(sp)
   25f7c:	dfc00a15 	stw	ra,40(sp)
   25f80:	ddc00815 	stw	r23,32(sp)
   25f84:	dd800715 	stw	r22,28(sp)
   25f88:	dd000515 	stw	r20,20(sp)
   25f8c:	dcc00415 	stw	r19,16(sp)
   25f90:	dc400215 	stw	r17,8(sp)
   25f94:	dc000115 	stw	r16,4(sp)
   25f98:	d9000015 	stw	r4,0(sp)
   25f9c:	2839883a 	mov	fp,r5
   25fa0:	04800044 	movi	r18,1
   25fa4:	057fffc4 	movi	r21,-1
   25fa8:	008000f4 	movhi	r2,3
   25fac:	10a5e704 	addi	r2,r2,-26724
   25fb0:	12000017 	ldw	r8,0(r2)
   25fb4:	45005217 	ldw	r20,328(r8)
   25fb8:	44c05204 	addi	r19,r8,328
   25fbc:	a0001c26 	beq	r20,zero,26030 <__call_exitprocs+0xc4>
   25fc0:	a0800117 	ldw	r2,4(r20)
   25fc4:	15ffffc4 	addi	r23,r2,-1
   25fc8:	b8000d16 	blt	r23,zero,26000 <__call_exitprocs+0x94>
   25fcc:	14000044 	addi	r16,r2,1
   25fd0:	8421883a 	add	r16,r16,r16
   25fd4:	8421883a 	add	r16,r16,r16
   25fd8:	84402004 	addi	r17,r16,128
   25fdc:	a463883a 	add	r17,r20,r17
   25fe0:	a421883a 	add	r16,r20,r16
   25fe4:	e0001e26 	beq	fp,zero,26060 <__call_exitprocs+0xf4>
   25fe8:	80804017 	ldw	r2,256(r16)
   25fec:	e0801c26 	beq	fp,r2,26060 <__call_exitprocs+0xf4>
   25ff0:	bdffffc4 	addi	r23,r23,-1
   25ff4:	843fff04 	addi	r16,r16,-4
   25ff8:	8c7fff04 	addi	r17,r17,-4
   25ffc:	bd7ff91e 	bne	r23,r21,25fe4 <__alt_data_end+0xfffecfe4>
   26000:	008000b4 	movhi	r2,2
   26004:	10876404 	addi	r2,r2,7568
   26008:	10000926 	beq	r2,zero,26030 <__call_exitprocs+0xc4>
   2600c:	a0800117 	ldw	r2,4(r20)
   26010:	1000301e 	bne	r2,zero,260d4 <__call_exitprocs+0x168>
   26014:	a0800017 	ldw	r2,0(r20)
   26018:	10003226 	beq	r2,zero,260e4 <__call_exitprocs+0x178>
   2601c:	a009883a 	mov	r4,r20
   26020:	98800015 	stw	r2,0(r19)
   26024:	0021d900 	call	21d90 <free>
   26028:	9d000017 	ldw	r20,0(r19)
   2602c:	a03fe41e 	bne	r20,zero,25fc0 <__alt_data_end+0xfffecfc0>
   26030:	dfc00a17 	ldw	ra,40(sp)
   26034:	df000917 	ldw	fp,36(sp)
   26038:	ddc00817 	ldw	r23,32(sp)
   2603c:	dd800717 	ldw	r22,28(sp)
   26040:	dd400617 	ldw	r21,24(sp)
   26044:	dd000517 	ldw	r20,20(sp)
   26048:	dcc00417 	ldw	r19,16(sp)
   2604c:	dc800317 	ldw	r18,12(sp)
   26050:	dc400217 	ldw	r17,8(sp)
   26054:	dc000117 	ldw	r16,4(sp)
   26058:	dec00b04 	addi	sp,sp,44
   2605c:	f800283a 	ret
   26060:	a0800117 	ldw	r2,4(r20)
   26064:	80c00017 	ldw	r3,0(r16)
   26068:	10bfffc4 	addi	r2,r2,-1
   2606c:	15c01426 	beq	r2,r23,260c0 <__call_exitprocs+0x154>
   26070:	80000015 	stw	zero,0(r16)
   26074:	183fde26 	beq	r3,zero,25ff0 <__alt_data_end+0xfffecff0>
   26078:	95c8983a 	sll	r4,r18,r23
   2607c:	a0806217 	ldw	r2,392(r20)
   26080:	a5800117 	ldw	r22,4(r20)
   26084:	2084703a 	and	r2,r4,r2
   26088:	10000b26 	beq	r2,zero,260b8 <__call_exitprocs+0x14c>
   2608c:	a0806317 	ldw	r2,396(r20)
   26090:	2088703a 	and	r4,r4,r2
   26094:	20000c1e 	bne	r4,zero,260c8 <__call_exitprocs+0x15c>
   26098:	89400017 	ldw	r5,0(r17)
   2609c:	d9000017 	ldw	r4,0(sp)
   260a0:	183ee83a 	callr	r3
   260a4:	a0800117 	ldw	r2,4(r20)
   260a8:	15bfbf1e 	bne	r2,r22,25fa8 <__alt_data_end+0xfffecfa8>
   260ac:	98800017 	ldw	r2,0(r19)
   260b0:	153fcf26 	beq	r2,r20,25ff0 <__alt_data_end+0xfffecff0>
   260b4:	003fbc06 	br	25fa8 <__alt_data_end+0xfffecfa8>
   260b8:	183ee83a 	callr	r3
   260bc:	003ff906 	br	260a4 <__alt_data_end+0xfffed0a4>
   260c0:	a5c00115 	stw	r23,4(r20)
   260c4:	003feb06 	br	26074 <__alt_data_end+0xfffed074>
   260c8:	89000017 	ldw	r4,0(r17)
   260cc:	183ee83a 	callr	r3
   260d0:	003ff406 	br	260a4 <__alt_data_end+0xfffed0a4>
   260d4:	a0800017 	ldw	r2,0(r20)
   260d8:	a027883a 	mov	r19,r20
   260dc:	1029883a 	mov	r20,r2
   260e0:	003fb606 	br	25fbc <__alt_data_end+0xfffecfbc>
   260e4:	0005883a 	mov	r2,zero
   260e8:	003ffb06 	br	260d8 <__alt_data_end+0xfffed0d8>

000260ec <__sflush_r>:
   260ec:	2880030b 	ldhu	r2,12(r5)
   260f0:	defffb04 	addi	sp,sp,-20
   260f4:	dcc00315 	stw	r19,12(sp)
   260f8:	dc400115 	stw	r17,4(sp)
   260fc:	dfc00415 	stw	ra,16(sp)
   26100:	dc800215 	stw	r18,8(sp)
   26104:	dc000015 	stw	r16,0(sp)
   26108:	10c0020c 	andi	r3,r2,8
   2610c:	2823883a 	mov	r17,r5
   26110:	2027883a 	mov	r19,r4
   26114:	1800311e 	bne	r3,zero,261dc <__sflush_r+0xf0>
   26118:	28c00117 	ldw	r3,4(r5)
   2611c:	10820014 	ori	r2,r2,2048
   26120:	2880030d 	sth	r2,12(r5)
   26124:	00c04b0e 	bge	zero,r3,26254 <__sflush_r+0x168>
   26128:	8a000a17 	ldw	r8,40(r17)
   2612c:	40002326 	beq	r8,zero,261bc <__sflush_r+0xd0>
   26130:	9c000017 	ldw	r16,0(r19)
   26134:	10c4000c 	andi	r3,r2,4096
   26138:	98000015 	stw	zero,0(r19)
   2613c:	18004826 	beq	r3,zero,26260 <__sflush_r+0x174>
   26140:	89801417 	ldw	r6,80(r17)
   26144:	10c0010c 	andi	r3,r2,4
   26148:	18000626 	beq	r3,zero,26164 <__sflush_r+0x78>
   2614c:	88c00117 	ldw	r3,4(r17)
   26150:	88800c17 	ldw	r2,48(r17)
   26154:	30cdc83a 	sub	r6,r6,r3
   26158:	10000226 	beq	r2,zero,26164 <__sflush_r+0x78>
   2615c:	88800f17 	ldw	r2,60(r17)
   26160:	308dc83a 	sub	r6,r6,r2
   26164:	89400717 	ldw	r5,28(r17)
   26168:	000f883a 	mov	r7,zero
   2616c:	9809883a 	mov	r4,r19
   26170:	403ee83a 	callr	r8
   26174:	00ffffc4 	movi	r3,-1
   26178:	10c04426 	beq	r2,r3,2628c <__sflush_r+0x1a0>
   2617c:	88c0030b 	ldhu	r3,12(r17)
   26180:	89000417 	ldw	r4,16(r17)
   26184:	88000115 	stw	zero,4(r17)
   26188:	197dffcc 	andi	r5,r3,63487
   2618c:	8940030d 	sth	r5,12(r17)
   26190:	89000015 	stw	r4,0(r17)
   26194:	18c4000c 	andi	r3,r3,4096
   26198:	18002c1e 	bne	r3,zero,2624c <__sflush_r+0x160>
   2619c:	89400c17 	ldw	r5,48(r17)
   261a0:	9c000015 	stw	r16,0(r19)
   261a4:	28000526 	beq	r5,zero,261bc <__sflush_r+0xd0>
   261a8:	88801004 	addi	r2,r17,64
   261ac:	28800226 	beq	r5,r2,261b8 <__sflush_r+0xcc>
   261b0:	9809883a 	mov	r4,r19
   261b4:	002293c0 	call	2293c <_free_r>
   261b8:	88000c15 	stw	zero,48(r17)
   261bc:	0005883a 	mov	r2,zero
   261c0:	dfc00417 	ldw	ra,16(sp)
   261c4:	dcc00317 	ldw	r19,12(sp)
   261c8:	dc800217 	ldw	r18,8(sp)
   261cc:	dc400117 	ldw	r17,4(sp)
   261d0:	dc000017 	ldw	r16,0(sp)
   261d4:	dec00504 	addi	sp,sp,20
   261d8:	f800283a 	ret
   261dc:	2c800417 	ldw	r18,16(r5)
   261e0:	903ff626 	beq	r18,zero,261bc <__alt_data_end+0xfffed1bc>
   261e4:	2c000017 	ldw	r16,0(r5)
   261e8:	108000cc 	andi	r2,r2,3
   261ec:	2c800015 	stw	r18,0(r5)
   261f0:	84a1c83a 	sub	r16,r16,r18
   261f4:	1000131e 	bne	r2,zero,26244 <__sflush_r+0x158>
   261f8:	28800517 	ldw	r2,20(r5)
   261fc:	88800215 	stw	r2,8(r17)
   26200:	04000316 	blt	zero,r16,26210 <__sflush_r+0x124>
   26204:	003fed06 	br	261bc <__alt_data_end+0xfffed1bc>
   26208:	90a5883a 	add	r18,r18,r2
   2620c:	043feb0e 	bge	zero,r16,261bc <__alt_data_end+0xfffed1bc>
   26210:	88800917 	ldw	r2,36(r17)
   26214:	89400717 	ldw	r5,28(r17)
   26218:	800f883a 	mov	r7,r16
   2621c:	900d883a 	mov	r6,r18
   26220:	9809883a 	mov	r4,r19
   26224:	103ee83a 	callr	r2
   26228:	80a1c83a 	sub	r16,r16,r2
   2622c:	00bff616 	blt	zero,r2,26208 <__alt_data_end+0xfffed208>
   26230:	88c0030b 	ldhu	r3,12(r17)
   26234:	00bfffc4 	movi	r2,-1
   26238:	18c01014 	ori	r3,r3,64
   2623c:	88c0030d 	sth	r3,12(r17)
   26240:	003fdf06 	br	261c0 <__alt_data_end+0xfffed1c0>
   26244:	0005883a 	mov	r2,zero
   26248:	003fec06 	br	261fc <__alt_data_end+0xfffed1fc>
   2624c:	88801415 	stw	r2,80(r17)
   26250:	003fd206 	br	2619c <__alt_data_end+0xfffed19c>
   26254:	28c00f17 	ldw	r3,60(r5)
   26258:	00ffb316 	blt	zero,r3,26128 <__alt_data_end+0xfffed128>
   2625c:	003fd706 	br	261bc <__alt_data_end+0xfffed1bc>
   26260:	89400717 	ldw	r5,28(r17)
   26264:	000d883a 	mov	r6,zero
   26268:	01c00044 	movi	r7,1
   2626c:	9809883a 	mov	r4,r19
   26270:	403ee83a 	callr	r8
   26274:	100d883a 	mov	r6,r2
   26278:	00bfffc4 	movi	r2,-1
   2627c:	30801426 	beq	r6,r2,262d0 <__sflush_r+0x1e4>
   26280:	8880030b 	ldhu	r2,12(r17)
   26284:	8a000a17 	ldw	r8,40(r17)
   26288:	003fae06 	br	26144 <__alt_data_end+0xfffed144>
   2628c:	98c00017 	ldw	r3,0(r19)
   26290:	183fba26 	beq	r3,zero,2617c <__alt_data_end+0xfffed17c>
   26294:	01000744 	movi	r4,29
   26298:	19000626 	beq	r3,r4,262b4 <__sflush_r+0x1c8>
   2629c:	01000584 	movi	r4,22
   262a0:	19000426 	beq	r3,r4,262b4 <__sflush_r+0x1c8>
   262a4:	88c0030b 	ldhu	r3,12(r17)
   262a8:	18c01014 	ori	r3,r3,64
   262ac:	88c0030d 	sth	r3,12(r17)
   262b0:	003fc306 	br	261c0 <__alt_data_end+0xfffed1c0>
   262b4:	8880030b 	ldhu	r2,12(r17)
   262b8:	88c00417 	ldw	r3,16(r17)
   262bc:	88000115 	stw	zero,4(r17)
   262c0:	10bdffcc 	andi	r2,r2,63487
   262c4:	8880030d 	sth	r2,12(r17)
   262c8:	88c00015 	stw	r3,0(r17)
   262cc:	003fb306 	br	2619c <__alt_data_end+0xfffed19c>
   262d0:	98800017 	ldw	r2,0(r19)
   262d4:	103fea26 	beq	r2,zero,26280 <__alt_data_end+0xfffed280>
   262d8:	00c00744 	movi	r3,29
   262dc:	10c00226 	beq	r2,r3,262e8 <__sflush_r+0x1fc>
   262e0:	00c00584 	movi	r3,22
   262e4:	10c0031e 	bne	r2,r3,262f4 <__sflush_r+0x208>
   262e8:	9c000015 	stw	r16,0(r19)
   262ec:	0005883a 	mov	r2,zero
   262f0:	003fb306 	br	261c0 <__alt_data_end+0xfffed1c0>
   262f4:	88c0030b 	ldhu	r3,12(r17)
   262f8:	3005883a 	mov	r2,r6
   262fc:	18c01014 	ori	r3,r3,64
   26300:	88c0030d 	sth	r3,12(r17)
   26304:	003fae06 	br	261c0 <__alt_data_end+0xfffed1c0>

00026308 <_fflush_r>:
   26308:	defffd04 	addi	sp,sp,-12
   2630c:	dc000115 	stw	r16,4(sp)
   26310:	dfc00215 	stw	ra,8(sp)
   26314:	2021883a 	mov	r16,r4
   26318:	20000226 	beq	r4,zero,26324 <_fflush_r+0x1c>
   2631c:	20800e17 	ldw	r2,56(r4)
   26320:	10000c26 	beq	r2,zero,26354 <_fflush_r+0x4c>
   26324:	2880030f 	ldh	r2,12(r5)
   26328:	1000051e 	bne	r2,zero,26340 <_fflush_r+0x38>
   2632c:	0005883a 	mov	r2,zero
   26330:	dfc00217 	ldw	ra,8(sp)
   26334:	dc000117 	ldw	r16,4(sp)
   26338:	dec00304 	addi	sp,sp,12
   2633c:	f800283a 	ret
   26340:	8009883a 	mov	r4,r16
   26344:	dfc00217 	ldw	ra,8(sp)
   26348:	dc000117 	ldw	r16,4(sp)
   2634c:	dec00304 	addi	sp,sp,12
   26350:	00260ec1 	jmpi	260ec <__sflush_r>
   26354:	d9400015 	stw	r5,0(sp)
   26358:	00266f40 	call	266f4 <__sinit>
   2635c:	d9400017 	ldw	r5,0(sp)
   26360:	003ff006 	br	26324 <__alt_data_end+0xfffed324>

00026364 <fflush>:
   26364:	20000526 	beq	r4,zero,2637c <fflush+0x18>
   26368:	008000f4 	movhi	r2,3
   2636c:	10a5e804 	addi	r2,r2,-26720
   26370:	200b883a 	mov	r5,r4
   26374:	11000017 	ldw	r4,0(r2)
   26378:	00263081 	jmpi	26308 <_fflush_r>
   2637c:	008000f4 	movhi	r2,3
   26380:	10a5e704 	addi	r2,r2,-26724
   26384:	11000017 	ldw	r4,0(r2)
   26388:	014000b4 	movhi	r5,2
   2638c:	2958c204 	addi	r5,r5,25352
   26390:	00268081 	jmpi	26808 <_fwalk_reent>

00026394 <__fp_unlock>:
   26394:	0005883a 	mov	r2,zero
   26398:	f800283a 	ret

0002639c <_cleanup_r>:
   2639c:	014000b4 	movhi	r5,2
   263a0:	295b6804 	addi	r5,r5,28064
   263a4:	00268081 	jmpi	26808 <_fwalk_reent>

000263a8 <__sinit.part.1>:
   263a8:	defff704 	addi	sp,sp,-36
   263ac:	00c000b4 	movhi	r3,2
   263b0:	dfc00815 	stw	ra,32(sp)
   263b4:	ddc00715 	stw	r23,28(sp)
   263b8:	dd800615 	stw	r22,24(sp)
   263bc:	dd400515 	stw	r21,20(sp)
   263c0:	dd000415 	stw	r20,16(sp)
   263c4:	dcc00315 	stw	r19,12(sp)
   263c8:	dc800215 	stw	r18,8(sp)
   263cc:	dc400115 	stw	r17,4(sp)
   263d0:	dc000015 	stw	r16,0(sp)
   263d4:	18d8e704 	addi	r3,r3,25500
   263d8:	24000117 	ldw	r16,4(r4)
   263dc:	20c00f15 	stw	r3,60(r4)
   263e0:	2080bb04 	addi	r2,r4,748
   263e4:	00c000c4 	movi	r3,3
   263e8:	20c0b915 	stw	r3,740(r4)
   263ec:	2080ba15 	stw	r2,744(r4)
   263f0:	2000b815 	stw	zero,736(r4)
   263f4:	05c00204 	movi	r23,8
   263f8:	00800104 	movi	r2,4
   263fc:	2025883a 	mov	r18,r4
   26400:	b80d883a 	mov	r6,r23
   26404:	81001704 	addi	r4,r16,92
   26408:	000b883a 	mov	r5,zero
   2640c:	80000015 	stw	zero,0(r16)
   26410:	80000115 	stw	zero,4(r16)
   26414:	80000215 	stw	zero,8(r16)
   26418:	8080030d 	sth	r2,12(r16)
   2641c:	80001915 	stw	zero,100(r16)
   26420:	8000038d 	sth	zero,14(r16)
   26424:	80000415 	stw	zero,16(r16)
   26428:	80000515 	stw	zero,20(r16)
   2642c:	80000615 	stw	zero,24(r16)
   26430:	0026a880 	call	26a88 <memset>
   26434:	058000b4 	movhi	r22,2
   26438:	94400217 	ldw	r17,8(r18)
   2643c:	054000b4 	movhi	r21,2
   26440:	050000b4 	movhi	r20,2
   26444:	04c000b4 	movhi	r19,2
   26448:	b59aec04 	addi	r22,r22,27568
   2644c:	ad5b0304 	addi	r21,r21,27660
   26450:	a51b2204 	addi	r20,r20,27784
   26454:	9cdb3904 	addi	r19,r19,27876
   26458:	85800815 	stw	r22,32(r16)
   2645c:	85400915 	stw	r21,36(r16)
   26460:	85000a15 	stw	r20,40(r16)
   26464:	84c00b15 	stw	r19,44(r16)
   26468:	84000715 	stw	r16,28(r16)
   2646c:	00800284 	movi	r2,10
   26470:	8880030d 	sth	r2,12(r17)
   26474:	00800044 	movi	r2,1
   26478:	b80d883a 	mov	r6,r23
   2647c:	89001704 	addi	r4,r17,92
   26480:	000b883a 	mov	r5,zero
   26484:	88000015 	stw	zero,0(r17)
   26488:	88000115 	stw	zero,4(r17)
   2648c:	88000215 	stw	zero,8(r17)
   26490:	88001915 	stw	zero,100(r17)
   26494:	8880038d 	sth	r2,14(r17)
   26498:	88000415 	stw	zero,16(r17)
   2649c:	88000515 	stw	zero,20(r17)
   264a0:	88000615 	stw	zero,24(r17)
   264a4:	0026a880 	call	26a88 <memset>
   264a8:	94000317 	ldw	r16,12(r18)
   264ac:	00800484 	movi	r2,18
   264b0:	8c400715 	stw	r17,28(r17)
   264b4:	8d800815 	stw	r22,32(r17)
   264b8:	8d400915 	stw	r21,36(r17)
   264bc:	8d000a15 	stw	r20,40(r17)
   264c0:	8cc00b15 	stw	r19,44(r17)
   264c4:	8080030d 	sth	r2,12(r16)
   264c8:	00800084 	movi	r2,2
   264cc:	80000015 	stw	zero,0(r16)
   264d0:	80000115 	stw	zero,4(r16)
   264d4:	80000215 	stw	zero,8(r16)
   264d8:	80001915 	stw	zero,100(r16)
   264dc:	8080038d 	sth	r2,14(r16)
   264e0:	80000415 	stw	zero,16(r16)
   264e4:	80000515 	stw	zero,20(r16)
   264e8:	80000615 	stw	zero,24(r16)
   264ec:	b80d883a 	mov	r6,r23
   264f0:	000b883a 	mov	r5,zero
   264f4:	81001704 	addi	r4,r16,92
   264f8:	0026a880 	call	26a88 <memset>
   264fc:	00800044 	movi	r2,1
   26500:	84000715 	stw	r16,28(r16)
   26504:	85800815 	stw	r22,32(r16)
   26508:	85400915 	stw	r21,36(r16)
   2650c:	85000a15 	stw	r20,40(r16)
   26510:	84c00b15 	stw	r19,44(r16)
   26514:	90800e15 	stw	r2,56(r18)
   26518:	dfc00817 	ldw	ra,32(sp)
   2651c:	ddc00717 	ldw	r23,28(sp)
   26520:	dd800617 	ldw	r22,24(sp)
   26524:	dd400517 	ldw	r21,20(sp)
   26528:	dd000417 	ldw	r20,16(sp)
   2652c:	dcc00317 	ldw	r19,12(sp)
   26530:	dc800217 	ldw	r18,8(sp)
   26534:	dc400117 	ldw	r17,4(sp)
   26538:	dc000017 	ldw	r16,0(sp)
   2653c:	dec00904 	addi	sp,sp,36
   26540:	f800283a 	ret

00026544 <__fp_lock>:
   26544:	0005883a 	mov	r2,zero
   26548:	f800283a 	ret

0002654c <__sfmoreglue>:
   2654c:	defffc04 	addi	sp,sp,-16
   26550:	dc800215 	stw	r18,8(sp)
   26554:	2825883a 	mov	r18,r5
   26558:	dc000015 	stw	r16,0(sp)
   2655c:	01401a04 	movi	r5,104
   26560:	2021883a 	mov	r16,r4
   26564:	913fffc4 	addi	r4,r18,-1
   26568:	dfc00315 	stw	ra,12(sp)
   2656c:	dc400115 	stw	r17,4(sp)
   26570:	0021d540 	call	21d54 <__mulsi3>
   26574:	8009883a 	mov	r4,r16
   26578:	11401d04 	addi	r5,r2,116
   2657c:	1023883a 	mov	r17,r2
   26580:	0021da40 	call	21da4 <_malloc_r>
   26584:	1021883a 	mov	r16,r2
   26588:	10000726 	beq	r2,zero,265a8 <__sfmoreglue+0x5c>
   2658c:	11000304 	addi	r4,r2,12
   26590:	10000015 	stw	zero,0(r2)
   26594:	14800115 	stw	r18,4(r2)
   26598:	11000215 	stw	r4,8(r2)
   2659c:	89801a04 	addi	r6,r17,104
   265a0:	000b883a 	mov	r5,zero
   265a4:	0026a880 	call	26a88 <memset>
   265a8:	8005883a 	mov	r2,r16
   265ac:	dfc00317 	ldw	ra,12(sp)
   265b0:	dc800217 	ldw	r18,8(sp)
   265b4:	dc400117 	ldw	r17,4(sp)
   265b8:	dc000017 	ldw	r16,0(sp)
   265bc:	dec00404 	addi	sp,sp,16
   265c0:	f800283a 	ret

000265c4 <__sfp>:
   265c4:	defffb04 	addi	sp,sp,-20
   265c8:	dc000015 	stw	r16,0(sp)
   265cc:	040000f4 	movhi	r16,3
   265d0:	8425e704 	addi	r16,r16,-26724
   265d4:	dcc00315 	stw	r19,12(sp)
   265d8:	2027883a 	mov	r19,r4
   265dc:	81000017 	ldw	r4,0(r16)
   265e0:	dfc00415 	stw	ra,16(sp)
   265e4:	dc800215 	stw	r18,8(sp)
   265e8:	20800e17 	ldw	r2,56(r4)
   265ec:	dc400115 	stw	r17,4(sp)
   265f0:	1000021e 	bne	r2,zero,265fc <__sfp+0x38>
   265f4:	00263a80 	call	263a8 <__sinit.part.1>
   265f8:	81000017 	ldw	r4,0(r16)
   265fc:	2480b804 	addi	r18,r4,736
   26600:	047fffc4 	movi	r17,-1
   26604:	91000117 	ldw	r4,4(r18)
   26608:	94000217 	ldw	r16,8(r18)
   2660c:	213fffc4 	addi	r4,r4,-1
   26610:	20000a16 	blt	r4,zero,2663c <__sfp+0x78>
   26614:	8080030f 	ldh	r2,12(r16)
   26618:	10000c26 	beq	r2,zero,2664c <__sfp+0x88>
   2661c:	80c01d04 	addi	r3,r16,116
   26620:	00000206 	br	2662c <__sfp+0x68>
   26624:	18bfe60f 	ldh	r2,-104(r3)
   26628:	10000826 	beq	r2,zero,2664c <__sfp+0x88>
   2662c:	213fffc4 	addi	r4,r4,-1
   26630:	1c3ffd04 	addi	r16,r3,-12
   26634:	18c01a04 	addi	r3,r3,104
   26638:	247ffa1e 	bne	r4,r17,26624 <__alt_data_end+0xfffed624>
   2663c:	90800017 	ldw	r2,0(r18)
   26640:	10001d26 	beq	r2,zero,266b8 <__sfp+0xf4>
   26644:	1025883a 	mov	r18,r2
   26648:	003fee06 	br	26604 <__alt_data_end+0xfffed604>
   2664c:	00bfffc4 	movi	r2,-1
   26650:	8080038d 	sth	r2,14(r16)
   26654:	00800044 	movi	r2,1
   26658:	8080030d 	sth	r2,12(r16)
   2665c:	80001915 	stw	zero,100(r16)
   26660:	80000015 	stw	zero,0(r16)
   26664:	80000215 	stw	zero,8(r16)
   26668:	80000115 	stw	zero,4(r16)
   2666c:	80000415 	stw	zero,16(r16)
   26670:	80000515 	stw	zero,20(r16)
   26674:	80000615 	stw	zero,24(r16)
   26678:	01800204 	movi	r6,8
   2667c:	000b883a 	mov	r5,zero
   26680:	81001704 	addi	r4,r16,92
   26684:	0026a880 	call	26a88 <memset>
   26688:	8005883a 	mov	r2,r16
   2668c:	80000c15 	stw	zero,48(r16)
   26690:	80000d15 	stw	zero,52(r16)
   26694:	80001115 	stw	zero,68(r16)
   26698:	80001215 	stw	zero,72(r16)
   2669c:	dfc00417 	ldw	ra,16(sp)
   266a0:	dcc00317 	ldw	r19,12(sp)
   266a4:	dc800217 	ldw	r18,8(sp)
   266a8:	dc400117 	ldw	r17,4(sp)
   266ac:	dc000017 	ldw	r16,0(sp)
   266b0:	dec00504 	addi	sp,sp,20
   266b4:	f800283a 	ret
   266b8:	01400104 	movi	r5,4
   266bc:	9809883a 	mov	r4,r19
   266c0:	002654c0 	call	2654c <__sfmoreglue>
   266c4:	90800015 	stw	r2,0(r18)
   266c8:	103fde1e 	bne	r2,zero,26644 <__alt_data_end+0xfffed644>
   266cc:	00800304 	movi	r2,12
   266d0:	98800015 	stw	r2,0(r19)
   266d4:	0005883a 	mov	r2,zero
   266d8:	003ff006 	br	2669c <__alt_data_end+0xfffed69c>

000266dc <_cleanup>:
   266dc:	008000f4 	movhi	r2,3
   266e0:	10a5e704 	addi	r2,r2,-26724
   266e4:	11000017 	ldw	r4,0(r2)
   266e8:	014000b4 	movhi	r5,2
   266ec:	295b6804 	addi	r5,r5,28064
   266f0:	00268081 	jmpi	26808 <_fwalk_reent>

000266f4 <__sinit>:
   266f4:	20800e17 	ldw	r2,56(r4)
   266f8:	10000126 	beq	r2,zero,26700 <__sinit+0xc>
   266fc:	f800283a 	ret
   26700:	00263a81 	jmpi	263a8 <__sinit.part.1>

00026704 <__sfp_lock_acquire>:
   26704:	f800283a 	ret

00026708 <__sfp_lock_release>:
   26708:	f800283a 	ret

0002670c <__sinit_lock_acquire>:
   2670c:	f800283a 	ret

00026710 <__sinit_lock_release>:
   26710:	f800283a 	ret

00026714 <__fp_lock_all>:
   26714:	008000f4 	movhi	r2,3
   26718:	10a5e804 	addi	r2,r2,-26720
   2671c:	11000017 	ldw	r4,0(r2)
   26720:	014000b4 	movhi	r5,2
   26724:	29595104 	addi	r5,r5,25924
   26728:	00267441 	jmpi	26744 <_fwalk>

0002672c <__fp_unlock_all>:
   2672c:	008000f4 	movhi	r2,3
   26730:	10a5e804 	addi	r2,r2,-26720
   26734:	11000017 	ldw	r4,0(r2)
   26738:	014000b4 	movhi	r5,2
   2673c:	2958e504 	addi	r5,r5,25492
   26740:	00267441 	jmpi	26744 <_fwalk>

00026744 <_fwalk>:
   26744:	defff704 	addi	sp,sp,-36
   26748:	dd000415 	stw	r20,16(sp)
   2674c:	dfc00815 	stw	ra,32(sp)
   26750:	ddc00715 	stw	r23,28(sp)
   26754:	dd800615 	stw	r22,24(sp)
   26758:	dd400515 	stw	r21,20(sp)
   2675c:	dcc00315 	stw	r19,12(sp)
   26760:	dc800215 	stw	r18,8(sp)
   26764:	dc400115 	stw	r17,4(sp)
   26768:	dc000015 	stw	r16,0(sp)
   2676c:	2500b804 	addi	r20,r4,736
   26770:	a0002326 	beq	r20,zero,26800 <_fwalk+0xbc>
   26774:	282b883a 	mov	r21,r5
   26778:	002f883a 	mov	r23,zero
   2677c:	05800044 	movi	r22,1
   26780:	04ffffc4 	movi	r19,-1
   26784:	a4400117 	ldw	r17,4(r20)
   26788:	a4800217 	ldw	r18,8(r20)
   2678c:	8c7fffc4 	addi	r17,r17,-1
   26790:	88000d16 	blt	r17,zero,267c8 <_fwalk+0x84>
   26794:	94000304 	addi	r16,r18,12
   26798:	94800384 	addi	r18,r18,14
   2679c:	8080000b 	ldhu	r2,0(r16)
   267a0:	8c7fffc4 	addi	r17,r17,-1
   267a4:	813ffd04 	addi	r4,r16,-12
   267a8:	b080042e 	bgeu	r22,r2,267bc <_fwalk+0x78>
   267ac:	9080000f 	ldh	r2,0(r18)
   267b0:	14c00226 	beq	r2,r19,267bc <_fwalk+0x78>
   267b4:	a83ee83a 	callr	r21
   267b8:	b8aeb03a 	or	r23,r23,r2
   267bc:	84001a04 	addi	r16,r16,104
   267c0:	94801a04 	addi	r18,r18,104
   267c4:	8cfff51e 	bne	r17,r19,2679c <__alt_data_end+0xfffed79c>
   267c8:	a5000017 	ldw	r20,0(r20)
   267cc:	a03fed1e 	bne	r20,zero,26784 <__alt_data_end+0xfffed784>
   267d0:	b805883a 	mov	r2,r23
   267d4:	dfc00817 	ldw	ra,32(sp)
   267d8:	ddc00717 	ldw	r23,28(sp)
   267dc:	dd800617 	ldw	r22,24(sp)
   267e0:	dd400517 	ldw	r21,20(sp)
   267e4:	dd000417 	ldw	r20,16(sp)
   267e8:	dcc00317 	ldw	r19,12(sp)
   267ec:	dc800217 	ldw	r18,8(sp)
   267f0:	dc400117 	ldw	r17,4(sp)
   267f4:	dc000017 	ldw	r16,0(sp)
   267f8:	dec00904 	addi	sp,sp,36
   267fc:	f800283a 	ret
   26800:	002f883a 	mov	r23,zero
   26804:	003ff206 	br	267d0 <__alt_data_end+0xfffed7d0>

00026808 <_fwalk_reent>:
   26808:	defff704 	addi	sp,sp,-36
   2680c:	dd000415 	stw	r20,16(sp)
   26810:	dfc00815 	stw	ra,32(sp)
   26814:	ddc00715 	stw	r23,28(sp)
   26818:	dd800615 	stw	r22,24(sp)
   2681c:	dd400515 	stw	r21,20(sp)
   26820:	dcc00315 	stw	r19,12(sp)
   26824:	dc800215 	stw	r18,8(sp)
   26828:	dc400115 	stw	r17,4(sp)
   2682c:	dc000015 	stw	r16,0(sp)
   26830:	2500b804 	addi	r20,r4,736
   26834:	a0002326 	beq	r20,zero,268c4 <_fwalk_reent+0xbc>
   26838:	282b883a 	mov	r21,r5
   2683c:	2027883a 	mov	r19,r4
   26840:	002f883a 	mov	r23,zero
   26844:	05800044 	movi	r22,1
   26848:	04bfffc4 	movi	r18,-1
   2684c:	a4400117 	ldw	r17,4(r20)
   26850:	a4000217 	ldw	r16,8(r20)
   26854:	8c7fffc4 	addi	r17,r17,-1
   26858:	88000c16 	blt	r17,zero,2688c <_fwalk_reent+0x84>
   2685c:	84000304 	addi	r16,r16,12
   26860:	8080000b 	ldhu	r2,0(r16)
   26864:	8c7fffc4 	addi	r17,r17,-1
   26868:	817ffd04 	addi	r5,r16,-12
   2686c:	b080052e 	bgeu	r22,r2,26884 <_fwalk_reent+0x7c>
   26870:	8080008f 	ldh	r2,2(r16)
   26874:	9809883a 	mov	r4,r19
   26878:	14800226 	beq	r2,r18,26884 <_fwalk_reent+0x7c>
   2687c:	a83ee83a 	callr	r21
   26880:	b8aeb03a 	or	r23,r23,r2
   26884:	84001a04 	addi	r16,r16,104
   26888:	8cbff51e 	bne	r17,r18,26860 <__alt_data_end+0xfffed860>
   2688c:	a5000017 	ldw	r20,0(r20)
   26890:	a03fee1e 	bne	r20,zero,2684c <__alt_data_end+0xfffed84c>
   26894:	b805883a 	mov	r2,r23
   26898:	dfc00817 	ldw	ra,32(sp)
   2689c:	ddc00717 	ldw	r23,28(sp)
   268a0:	dd800617 	ldw	r22,24(sp)
   268a4:	dd400517 	ldw	r21,20(sp)
   268a8:	dd000417 	ldw	r20,16(sp)
   268ac:	dcc00317 	ldw	r19,12(sp)
   268b0:	dc800217 	ldw	r18,8(sp)
   268b4:	dc400117 	ldw	r17,4(sp)
   268b8:	dc000017 	ldw	r16,0(sp)
   268bc:	dec00904 	addi	sp,sp,36
   268c0:	f800283a 	ret
   268c4:	002f883a 	mov	r23,zero
   268c8:	003ff206 	br	26894 <__alt_data_end+0xfffed894>

000268cc <__smakebuf_r>:
   268cc:	2880030b 	ldhu	r2,12(r5)
   268d0:	10c0008c 	andi	r3,r2,2
   268d4:	1800411e 	bne	r3,zero,269dc <__smakebuf_r+0x110>
   268d8:	deffec04 	addi	sp,sp,-80
   268dc:	dc000f15 	stw	r16,60(sp)
   268e0:	2821883a 	mov	r16,r5
   268e4:	2940038f 	ldh	r5,14(r5)
   268e8:	dc401015 	stw	r17,64(sp)
   268ec:	dfc01315 	stw	ra,76(sp)
   268f0:	dcc01215 	stw	r19,72(sp)
   268f4:	dc801115 	stw	r18,68(sp)
   268f8:	2023883a 	mov	r17,r4
   268fc:	28001c16 	blt	r5,zero,26970 <__smakebuf_r+0xa4>
   26900:	d80d883a 	mov	r6,sp
   26904:	0026ea40 	call	26ea4 <_fstat_r>
   26908:	10001816 	blt	r2,zero,2696c <__smakebuf_r+0xa0>
   2690c:	d8800117 	ldw	r2,4(sp)
   26910:	00e00014 	movui	r3,32768
   26914:	10bc000c 	andi	r2,r2,61440
   26918:	14c80020 	cmpeqi	r19,r2,8192
   2691c:	10c03726 	beq	r2,r3,269fc <__smakebuf_r+0x130>
   26920:	80c0030b 	ldhu	r3,12(r16)
   26924:	18c20014 	ori	r3,r3,2048
   26928:	80c0030d 	sth	r3,12(r16)
   2692c:	00c80004 	movi	r3,8192
   26930:	10c0521e 	bne	r2,r3,26a7c <__smakebuf_r+0x1b0>
   26934:	8140038f 	ldh	r5,14(r16)
   26938:	8809883a 	mov	r4,r17
   2693c:	0026f000 	call	26f00 <_isatty_r>
   26940:	10004c26 	beq	r2,zero,26a74 <__smakebuf_r+0x1a8>
   26944:	8080030b 	ldhu	r2,12(r16)
   26948:	80c010c4 	addi	r3,r16,67
   2694c:	80c00015 	stw	r3,0(r16)
   26950:	10800054 	ori	r2,r2,1
   26954:	8080030d 	sth	r2,12(r16)
   26958:	00800044 	movi	r2,1
   2695c:	80c00415 	stw	r3,16(r16)
   26960:	80800515 	stw	r2,20(r16)
   26964:	04810004 	movi	r18,1024
   26968:	00000706 	br	26988 <__smakebuf_r+0xbc>
   2696c:	8080030b 	ldhu	r2,12(r16)
   26970:	10c0200c 	andi	r3,r2,128
   26974:	18001f1e 	bne	r3,zero,269f4 <__smakebuf_r+0x128>
   26978:	04810004 	movi	r18,1024
   2697c:	10820014 	ori	r2,r2,2048
   26980:	8080030d 	sth	r2,12(r16)
   26984:	0027883a 	mov	r19,zero
   26988:	900b883a 	mov	r5,r18
   2698c:	8809883a 	mov	r4,r17
   26990:	0021da40 	call	21da4 <_malloc_r>
   26994:	10002c26 	beq	r2,zero,26a48 <__smakebuf_r+0x17c>
   26998:	80c0030b 	ldhu	r3,12(r16)
   2699c:	010000b4 	movhi	r4,2
   269a0:	2118e704 	addi	r4,r4,25500
   269a4:	89000f15 	stw	r4,60(r17)
   269a8:	18c02014 	ori	r3,r3,128
   269ac:	80c0030d 	sth	r3,12(r16)
   269b0:	80800015 	stw	r2,0(r16)
   269b4:	80800415 	stw	r2,16(r16)
   269b8:	84800515 	stw	r18,20(r16)
   269bc:	98001a1e 	bne	r19,zero,26a28 <__smakebuf_r+0x15c>
   269c0:	dfc01317 	ldw	ra,76(sp)
   269c4:	dcc01217 	ldw	r19,72(sp)
   269c8:	dc801117 	ldw	r18,68(sp)
   269cc:	dc401017 	ldw	r17,64(sp)
   269d0:	dc000f17 	ldw	r16,60(sp)
   269d4:	dec01404 	addi	sp,sp,80
   269d8:	f800283a 	ret
   269dc:	288010c4 	addi	r2,r5,67
   269e0:	28800015 	stw	r2,0(r5)
   269e4:	28800415 	stw	r2,16(r5)
   269e8:	00800044 	movi	r2,1
   269ec:	28800515 	stw	r2,20(r5)
   269f0:	f800283a 	ret
   269f4:	04801004 	movi	r18,64
   269f8:	003fe006 	br	2697c <__alt_data_end+0xfffed97c>
   269fc:	81000a17 	ldw	r4,40(r16)
   26a00:	00c000b4 	movhi	r3,2
   26a04:	18db2204 	addi	r3,r3,27784
   26a08:	20ffc51e 	bne	r4,r3,26920 <__alt_data_end+0xfffed920>
   26a0c:	8080030b 	ldhu	r2,12(r16)
   26a10:	04810004 	movi	r18,1024
   26a14:	84801315 	stw	r18,76(r16)
   26a18:	1484b03a 	or	r2,r2,r18
   26a1c:	8080030d 	sth	r2,12(r16)
   26a20:	0027883a 	mov	r19,zero
   26a24:	003fd806 	br	26988 <__alt_data_end+0xfffed988>
   26a28:	8140038f 	ldh	r5,14(r16)
   26a2c:	8809883a 	mov	r4,r17
   26a30:	0026f000 	call	26f00 <_isatty_r>
   26a34:	103fe226 	beq	r2,zero,269c0 <__alt_data_end+0xfffed9c0>
   26a38:	8080030b 	ldhu	r2,12(r16)
   26a3c:	10800054 	ori	r2,r2,1
   26a40:	8080030d 	sth	r2,12(r16)
   26a44:	003fde06 	br	269c0 <__alt_data_end+0xfffed9c0>
   26a48:	8080030b 	ldhu	r2,12(r16)
   26a4c:	10c0800c 	andi	r3,r2,512
   26a50:	183fdb1e 	bne	r3,zero,269c0 <__alt_data_end+0xfffed9c0>
   26a54:	10800094 	ori	r2,r2,2
   26a58:	80c010c4 	addi	r3,r16,67
   26a5c:	8080030d 	sth	r2,12(r16)
   26a60:	00800044 	movi	r2,1
   26a64:	80c00015 	stw	r3,0(r16)
   26a68:	80c00415 	stw	r3,16(r16)
   26a6c:	80800515 	stw	r2,20(r16)
   26a70:	003fd306 	br	269c0 <__alt_data_end+0xfffed9c0>
   26a74:	04810004 	movi	r18,1024
   26a78:	003fc306 	br	26988 <__alt_data_end+0xfffed988>
   26a7c:	0027883a 	mov	r19,zero
   26a80:	04810004 	movi	r18,1024
   26a84:	003fc006 	br	26988 <__alt_data_end+0xfffed988>

00026a88 <memset>:
   26a88:	20c000cc 	andi	r3,r4,3
   26a8c:	2005883a 	mov	r2,r4
   26a90:	18004426 	beq	r3,zero,26ba4 <memset+0x11c>
   26a94:	31ffffc4 	addi	r7,r6,-1
   26a98:	30004026 	beq	r6,zero,26b9c <memset+0x114>
   26a9c:	2813883a 	mov	r9,r5
   26aa0:	200d883a 	mov	r6,r4
   26aa4:	2007883a 	mov	r3,r4
   26aa8:	00000406 	br	26abc <memset+0x34>
   26aac:	3a3fffc4 	addi	r8,r7,-1
   26ab0:	31800044 	addi	r6,r6,1
   26ab4:	38003926 	beq	r7,zero,26b9c <memset+0x114>
   26ab8:	400f883a 	mov	r7,r8
   26abc:	18c00044 	addi	r3,r3,1
   26ac0:	32400005 	stb	r9,0(r6)
   26ac4:	1a0000cc 	andi	r8,r3,3
   26ac8:	403ff81e 	bne	r8,zero,26aac <__alt_data_end+0xfffedaac>
   26acc:	010000c4 	movi	r4,3
   26ad0:	21c02d2e 	bgeu	r4,r7,26b88 <memset+0x100>
   26ad4:	29003fcc 	andi	r4,r5,255
   26ad8:	200c923a 	slli	r6,r4,8
   26adc:	3108b03a 	or	r4,r6,r4
   26ae0:	200c943a 	slli	r6,r4,16
   26ae4:	218cb03a 	or	r6,r4,r6
   26ae8:	010003c4 	movi	r4,15
   26aec:	21c0182e 	bgeu	r4,r7,26b50 <memset+0xc8>
   26af0:	3b3ffc04 	addi	r12,r7,-16
   26af4:	6018d13a 	srli	r12,r12,4
   26af8:	1a000104 	addi	r8,r3,4
   26afc:	1ac00204 	addi	r11,r3,8
   26b00:	6008913a 	slli	r4,r12,4
   26b04:	1a800304 	addi	r10,r3,12
   26b08:	1813883a 	mov	r9,r3
   26b0c:	21000504 	addi	r4,r4,20
   26b10:	1909883a 	add	r4,r3,r4
   26b14:	49800015 	stw	r6,0(r9)
   26b18:	41800015 	stw	r6,0(r8)
   26b1c:	59800015 	stw	r6,0(r11)
   26b20:	51800015 	stw	r6,0(r10)
   26b24:	42000404 	addi	r8,r8,16
   26b28:	4a400404 	addi	r9,r9,16
   26b2c:	5ac00404 	addi	r11,r11,16
   26b30:	52800404 	addi	r10,r10,16
   26b34:	413ff71e 	bne	r8,r4,26b14 <__alt_data_end+0xfffedb14>
   26b38:	63000044 	addi	r12,r12,1
   26b3c:	6018913a 	slli	r12,r12,4
   26b40:	39c003cc 	andi	r7,r7,15
   26b44:	010000c4 	movi	r4,3
   26b48:	1b07883a 	add	r3,r3,r12
   26b4c:	21c00e2e 	bgeu	r4,r7,26b88 <memset+0x100>
   26b50:	1813883a 	mov	r9,r3
   26b54:	3811883a 	mov	r8,r7
   26b58:	010000c4 	movi	r4,3
   26b5c:	49800015 	stw	r6,0(r9)
   26b60:	423fff04 	addi	r8,r8,-4
   26b64:	4a400104 	addi	r9,r9,4
   26b68:	223ffc36 	bltu	r4,r8,26b5c <__alt_data_end+0xfffedb5c>
   26b6c:	393fff04 	addi	r4,r7,-4
   26b70:	2008d0ba 	srli	r4,r4,2
   26b74:	39c000cc 	andi	r7,r7,3
   26b78:	21000044 	addi	r4,r4,1
   26b7c:	2109883a 	add	r4,r4,r4
   26b80:	2109883a 	add	r4,r4,r4
   26b84:	1907883a 	add	r3,r3,r4
   26b88:	38000526 	beq	r7,zero,26ba0 <memset+0x118>
   26b8c:	19cf883a 	add	r7,r3,r7
   26b90:	19400005 	stb	r5,0(r3)
   26b94:	18c00044 	addi	r3,r3,1
   26b98:	38fffd1e 	bne	r7,r3,26b90 <__alt_data_end+0xfffedb90>
   26b9c:	f800283a 	ret
   26ba0:	f800283a 	ret
   26ba4:	2007883a 	mov	r3,r4
   26ba8:	300f883a 	mov	r7,r6
   26bac:	003fc706 	br	26acc <__alt_data_end+0xfffedacc>

00026bb0 <__sread>:
   26bb0:	defffe04 	addi	sp,sp,-8
   26bb4:	dc000015 	stw	r16,0(sp)
   26bb8:	2821883a 	mov	r16,r5
   26bbc:	2940038f 	ldh	r5,14(r5)
   26bc0:	dfc00115 	stw	ra,4(sp)
   26bc4:	0026fb40 	call	26fb4 <_read_r>
   26bc8:	10000716 	blt	r2,zero,26be8 <__sread+0x38>
   26bcc:	80c01417 	ldw	r3,80(r16)
   26bd0:	1887883a 	add	r3,r3,r2
   26bd4:	80c01415 	stw	r3,80(r16)
   26bd8:	dfc00117 	ldw	ra,4(sp)
   26bdc:	dc000017 	ldw	r16,0(sp)
   26be0:	dec00204 	addi	sp,sp,8
   26be4:	f800283a 	ret
   26be8:	80c0030b 	ldhu	r3,12(r16)
   26bec:	18fbffcc 	andi	r3,r3,61439
   26bf0:	80c0030d 	sth	r3,12(r16)
   26bf4:	dfc00117 	ldw	ra,4(sp)
   26bf8:	dc000017 	ldw	r16,0(sp)
   26bfc:	dec00204 	addi	sp,sp,8
   26c00:	f800283a 	ret

00026c04 <__seofread>:
   26c04:	0005883a 	mov	r2,zero
   26c08:	f800283a 	ret

00026c0c <__swrite>:
   26c0c:	2880030b 	ldhu	r2,12(r5)
   26c10:	defffb04 	addi	sp,sp,-20
   26c14:	dcc00315 	stw	r19,12(sp)
   26c18:	dc800215 	stw	r18,8(sp)
   26c1c:	dc400115 	stw	r17,4(sp)
   26c20:	dc000015 	stw	r16,0(sp)
   26c24:	dfc00415 	stw	ra,16(sp)
   26c28:	10c0400c 	andi	r3,r2,256
   26c2c:	2821883a 	mov	r16,r5
   26c30:	2023883a 	mov	r17,r4
   26c34:	3025883a 	mov	r18,r6
   26c38:	3827883a 	mov	r19,r7
   26c3c:	18000526 	beq	r3,zero,26c54 <__swrite+0x48>
   26c40:	2940038f 	ldh	r5,14(r5)
   26c44:	01c00084 	movi	r7,2
   26c48:	000d883a 	mov	r6,zero
   26c4c:	0026f540 	call	26f54 <_lseek_r>
   26c50:	8080030b 	ldhu	r2,12(r16)
   26c54:	8140038f 	ldh	r5,14(r16)
   26c58:	10bbffcc 	andi	r2,r2,61439
   26c5c:	980f883a 	mov	r7,r19
   26c60:	900d883a 	mov	r6,r18
   26c64:	8809883a 	mov	r4,r17
   26c68:	8080030d 	sth	r2,12(r16)
   26c6c:	dfc00417 	ldw	ra,16(sp)
   26c70:	dcc00317 	ldw	r19,12(sp)
   26c74:	dc800217 	ldw	r18,8(sp)
   26c78:	dc400117 	ldw	r17,4(sp)
   26c7c:	dc000017 	ldw	r16,0(sp)
   26c80:	dec00504 	addi	sp,sp,20
   26c84:	0026cec1 	jmpi	26cec <_write_r>

00026c88 <__sseek>:
   26c88:	defffe04 	addi	sp,sp,-8
   26c8c:	dc000015 	stw	r16,0(sp)
   26c90:	2821883a 	mov	r16,r5
   26c94:	2940038f 	ldh	r5,14(r5)
   26c98:	dfc00115 	stw	ra,4(sp)
   26c9c:	0026f540 	call	26f54 <_lseek_r>
   26ca0:	00ffffc4 	movi	r3,-1
   26ca4:	10c00826 	beq	r2,r3,26cc8 <__sseek+0x40>
   26ca8:	80c0030b 	ldhu	r3,12(r16)
   26cac:	80801415 	stw	r2,80(r16)
   26cb0:	18c40014 	ori	r3,r3,4096
   26cb4:	80c0030d 	sth	r3,12(r16)
   26cb8:	dfc00117 	ldw	ra,4(sp)
   26cbc:	dc000017 	ldw	r16,0(sp)
   26cc0:	dec00204 	addi	sp,sp,8
   26cc4:	f800283a 	ret
   26cc8:	80c0030b 	ldhu	r3,12(r16)
   26ccc:	18fbffcc 	andi	r3,r3,61439
   26cd0:	80c0030d 	sth	r3,12(r16)
   26cd4:	dfc00117 	ldw	ra,4(sp)
   26cd8:	dc000017 	ldw	r16,0(sp)
   26cdc:	dec00204 	addi	sp,sp,8
   26ce0:	f800283a 	ret

00026ce4 <__sclose>:
   26ce4:	2940038f 	ldh	r5,14(r5)
   26ce8:	0026d4c1 	jmpi	26d4c <_close_r>

00026cec <_write_r>:
   26cec:	defffd04 	addi	sp,sp,-12
   26cf0:	2805883a 	mov	r2,r5
   26cf4:	dc000015 	stw	r16,0(sp)
   26cf8:	040000f4 	movhi	r16,3
   26cfc:	dc400115 	stw	r17,4(sp)
   26d00:	300b883a 	mov	r5,r6
   26d04:	842ca504 	addi	r16,r16,-19820
   26d08:	2023883a 	mov	r17,r4
   26d0c:	380d883a 	mov	r6,r7
   26d10:	1009883a 	mov	r4,r2
   26d14:	dfc00215 	stw	ra,8(sp)
   26d18:	80000015 	stw	zero,0(r16)
   26d1c:	0027a7c0 	call	27a7c <write>
   26d20:	00ffffc4 	movi	r3,-1
   26d24:	10c00526 	beq	r2,r3,26d3c <_write_r+0x50>
   26d28:	dfc00217 	ldw	ra,8(sp)
   26d2c:	dc400117 	ldw	r17,4(sp)
   26d30:	dc000017 	ldw	r16,0(sp)
   26d34:	dec00304 	addi	sp,sp,12
   26d38:	f800283a 	ret
   26d3c:	80c00017 	ldw	r3,0(r16)
   26d40:	183ff926 	beq	r3,zero,26d28 <__alt_data_end+0xfffedd28>
   26d44:	88c00015 	stw	r3,0(r17)
   26d48:	003ff706 	br	26d28 <__alt_data_end+0xfffedd28>

00026d4c <_close_r>:
   26d4c:	defffd04 	addi	sp,sp,-12
   26d50:	dc000015 	stw	r16,0(sp)
   26d54:	040000f4 	movhi	r16,3
   26d58:	dc400115 	stw	r17,4(sp)
   26d5c:	842ca504 	addi	r16,r16,-19820
   26d60:	2023883a 	mov	r17,r4
   26d64:	2809883a 	mov	r4,r5
   26d68:	dfc00215 	stw	ra,8(sp)
   26d6c:	80000015 	stw	zero,0(r16)
   26d70:	00244180 	call	24418 <close>
   26d74:	00ffffc4 	movi	r3,-1
   26d78:	10c00526 	beq	r2,r3,26d90 <_close_r+0x44>
   26d7c:	dfc00217 	ldw	ra,8(sp)
   26d80:	dc400117 	ldw	r17,4(sp)
   26d84:	dc000017 	ldw	r16,0(sp)
   26d88:	dec00304 	addi	sp,sp,12
   26d8c:	f800283a 	ret
   26d90:	80c00017 	ldw	r3,0(r16)
   26d94:	183ff926 	beq	r3,zero,26d7c <__alt_data_end+0xfffedd7c>
   26d98:	88c00015 	stw	r3,0(r17)
   26d9c:	003ff706 	br	26d7c <__alt_data_end+0xfffedd7c>

00026da0 <_fclose_r>:
   26da0:	28003926 	beq	r5,zero,26e88 <_fclose_r+0xe8>
   26da4:	defffc04 	addi	sp,sp,-16
   26da8:	dc400115 	stw	r17,4(sp)
   26dac:	dc000015 	stw	r16,0(sp)
   26db0:	dfc00315 	stw	ra,12(sp)
   26db4:	dc800215 	stw	r18,8(sp)
   26db8:	2023883a 	mov	r17,r4
   26dbc:	2821883a 	mov	r16,r5
   26dc0:	20000226 	beq	r4,zero,26dcc <_fclose_r+0x2c>
   26dc4:	20800e17 	ldw	r2,56(r4)
   26dc8:	10002726 	beq	r2,zero,26e68 <_fclose_r+0xc8>
   26dcc:	8080030f 	ldh	r2,12(r16)
   26dd0:	1000071e 	bne	r2,zero,26df0 <_fclose_r+0x50>
   26dd4:	0005883a 	mov	r2,zero
   26dd8:	dfc00317 	ldw	ra,12(sp)
   26ddc:	dc800217 	ldw	r18,8(sp)
   26de0:	dc400117 	ldw	r17,4(sp)
   26de4:	dc000017 	ldw	r16,0(sp)
   26de8:	dec00404 	addi	sp,sp,16
   26dec:	f800283a 	ret
   26df0:	800b883a 	mov	r5,r16
   26df4:	8809883a 	mov	r4,r17
   26df8:	00260ec0 	call	260ec <__sflush_r>
   26dfc:	1025883a 	mov	r18,r2
   26e00:	80800b17 	ldw	r2,44(r16)
   26e04:	10000426 	beq	r2,zero,26e18 <_fclose_r+0x78>
   26e08:	81400717 	ldw	r5,28(r16)
   26e0c:	8809883a 	mov	r4,r17
   26e10:	103ee83a 	callr	r2
   26e14:	10001616 	blt	r2,zero,26e70 <_fclose_r+0xd0>
   26e18:	8080030b 	ldhu	r2,12(r16)
   26e1c:	1080200c 	andi	r2,r2,128
   26e20:	1000151e 	bne	r2,zero,26e78 <_fclose_r+0xd8>
   26e24:	81400c17 	ldw	r5,48(r16)
   26e28:	28000526 	beq	r5,zero,26e40 <_fclose_r+0xa0>
   26e2c:	80801004 	addi	r2,r16,64
   26e30:	28800226 	beq	r5,r2,26e3c <_fclose_r+0x9c>
   26e34:	8809883a 	mov	r4,r17
   26e38:	002293c0 	call	2293c <_free_r>
   26e3c:	80000c15 	stw	zero,48(r16)
   26e40:	81401117 	ldw	r5,68(r16)
   26e44:	28000326 	beq	r5,zero,26e54 <_fclose_r+0xb4>
   26e48:	8809883a 	mov	r4,r17
   26e4c:	002293c0 	call	2293c <_free_r>
   26e50:	80001115 	stw	zero,68(r16)
   26e54:	00267040 	call	26704 <__sfp_lock_acquire>
   26e58:	8000030d 	sth	zero,12(r16)
   26e5c:	00267080 	call	26708 <__sfp_lock_release>
   26e60:	9005883a 	mov	r2,r18
   26e64:	003fdc06 	br	26dd8 <__alt_data_end+0xfffeddd8>
   26e68:	00266f40 	call	266f4 <__sinit>
   26e6c:	003fd706 	br	26dcc <__alt_data_end+0xfffeddcc>
   26e70:	04bfffc4 	movi	r18,-1
   26e74:	003fe806 	br	26e18 <__alt_data_end+0xfffede18>
   26e78:	81400417 	ldw	r5,16(r16)
   26e7c:	8809883a 	mov	r4,r17
   26e80:	002293c0 	call	2293c <_free_r>
   26e84:	003fe706 	br	26e24 <__alt_data_end+0xfffede24>
   26e88:	0005883a 	mov	r2,zero
   26e8c:	f800283a 	ret

00026e90 <fclose>:
   26e90:	008000f4 	movhi	r2,3
   26e94:	10a5e804 	addi	r2,r2,-26720
   26e98:	200b883a 	mov	r5,r4
   26e9c:	11000017 	ldw	r4,0(r2)
   26ea0:	0026da01 	jmpi	26da0 <_fclose_r>

00026ea4 <_fstat_r>:
   26ea4:	defffd04 	addi	sp,sp,-12
   26ea8:	2805883a 	mov	r2,r5
   26eac:	dc000015 	stw	r16,0(sp)
   26eb0:	040000f4 	movhi	r16,3
   26eb4:	dc400115 	stw	r17,4(sp)
   26eb8:	842ca504 	addi	r16,r16,-19820
   26ebc:	2023883a 	mov	r17,r4
   26ec0:	300b883a 	mov	r5,r6
   26ec4:	1009883a 	mov	r4,r2
   26ec8:	dfc00215 	stw	ra,8(sp)
   26ecc:	80000015 	stw	zero,0(r16)
   26ed0:	00276480 	call	27648 <fstat>
   26ed4:	00ffffc4 	movi	r3,-1
   26ed8:	10c00526 	beq	r2,r3,26ef0 <_fstat_r+0x4c>
   26edc:	dfc00217 	ldw	ra,8(sp)
   26ee0:	dc400117 	ldw	r17,4(sp)
   26ee4:	dc000017 	ldw	r16,0(sp)
   26ee8:	dec00304 	addi	sp,sp,12
   26eec:	f800283a 	ret
   26ef0:	80c00017 	ldw	r3,0(r16)
   26ef4:	183ff926 	beq	r3,zero,26edc <__alt_data_end+0xfffededc>
   26ef8:	88c00015 	stw	r3,0(r17)
   26efc:	003ff706 	br	26edc <__alt_data_end+0xfffededc>

00026f00 <_isatty_r>:
   26f00:	defffd04 	addi	sp,sp,-12
   26f04:	dc000015 	stw	r16,0(sp)
   26f08:	040000f4 	movhi	r16,3
   26f0c:	dc400115 	stw	r17,4(sp)
   26f10:	842ca504 	addi	r16,r16,-19820
   26f14:	2023883a 	mov	r17,r4
   26f18:	2809883a 	mov	r4,r5
   26f1c:	dfc00215 	stw	ra,8(sp)
   26f20:	80000015 	stw	zero,0(r16)
   26f24:	002773c0 	call	2773c <isatty>
   26f28:	00ffffc4 	movi	r3,-1
   26f2c:	10c00526 	beq	r2,r3,26f44 <_isatty_r+0x44>
   26f30:	dfc00217 	ldw	ra,8(sp)
   26f34:	dc400117 	ldw	r17,4(sp)
   26f38:	dc000017 	ldw	r16,0(sp)
   26f3c:	dec00304 	addi	sp,sp,12
   26f40:	f800283a 	ret
   26f44:	80c00017 	ldw	r3,0(r16)
   26f48:	183ff926 	beq	r3,zero,26f30 <__alt_data_end+0xfffedf30>
   26f4c:	88c00015 	stw	r3,0(r17)
   26f50:	003ff706 	br	26f30 <__alt_data_end+0xfffedf30>

00026f54 <_lseek_r>:
   26f54:	defffd04 	addi	sp,sp,-12
   26f58:	2805883a 	mov	r2,r5
   26f5c:	dc000015 	stw	r16,0(sp)
   26f60:	040000f4 	movhi	r16,3
   26f64:	dc400115 	stw	r17,4(sp)
   26f68:	300b883a 	mov	r5,r6
   26f6c:	842ca504 	addi	r16,r16,-19820
   26f70:	2023883a 	mov	r17,r4
   26f74:	380d883a 	mov	r6,r7
   26f78:	1009883a 	mov	r4,r2
   26f7c:	dfc00215 	stw	ra,8(sp)
   26f80:	80000015 	stw	zero,0(r16)
   26f84:	00278240 	call	27824 <lseek>
   26f88:	00ffffc4 	movi	r3,-1
   26f8c:	10c00526 	beq	r2,r3,26fa4 <_lseek_r+0x50>
   26f90:	dfc00217 	ldw	ra,8(sp)
   26f94:	dc400117 	ldw	r17,4(sp)
   26f98:	dc000017 	ldw	r16,0(sp)
   26f9c:	dec00304 	addi	sp,sp,12
   26fa0:	f800283a 	ret
   26fa4:	80c00017 	ldw	r3,0(r16)
   26fa8:	183ff926 	beq	r3,zero,26f90 <__alt_data_end+0xfffedf90>
   26fac:	88c00015 	stw	r3,0(r17)
   26fb0:	003ff706 	br	26f90 <__alt_data_end+0xfffedf90>

00026fb4 <_read_r>:
   26fb4:	defffd04 	addi	sp,sp,-12
   26fb8:	2805883a 	mov	r2,r5
   26fbc:	dc000015 	stw	r16,0(sp)
   26fc0:	040000f4 	movhi	r16,3
   26fc4:	dc400115 	stw	r17,4(sp)
   26fc8:	300b883a 	mov	r5,r6
   26fcc:	842ca504 	addi	r16,r16,-19820
   26fd0:	2023883a 	mov	r17,r4
   26fd4:	380d883a 	mov	r6,r7
   26fd8:	1009883a 	mov	r4,r2
   26fdc:	dfc00215 	stw	ra,8(sp)
   26fe0:	80000015 	stw	zero,0(r16)
   26fe4:	002793c0 	call	2793c <read>
   26fe8:	00ffffc4 	movi	r3,-1
   26fec:	10c00526 	beq	r2,r3,27004 <_read_r+0x50>
   26ff0:	dfc00217 	ldw	ra,8(sp)
   26ff4:	dc400117 	ldw	r17,4(sp)
   26ff8:	dc000017 	ldw	r16,0(sp)
   26ffc:	dec00304 	addi	sp,sp,12
   27000:	f800283a 	ret
   27004:	80c00017 	ldw	r3,0(r16)
   27008:	183ff926 	beq	r3,zero,26ff0 <__alt_data_end+0xfffedff0>
   2700c:	88c00015 	stw	r3,0(r17)
   27010:	003ff706 	br	26ff0 <__alt_data_end+0xfffedff0>

00027014 <__umoddi3>:
   27014:	defff304 	addi	sp,sp,-52
   27018:	df000b15 	stw	fp,44(sp)
   2701c:	dc400415 	stw	r17,16(sp)
   27020:	dc000315 	stw	r16,12(sp)
   27024:	dfc00c15 	stw	ra,48(sp)
   27028:	ddc00a15 	stw	r23,40(sp)
   2702c:	dd800915 	stw	r22,36(sp)
   27030:	dd400815 	stw	r21,32(sp)
   27034:	dd000715 	stw	r20,28(sp)
   27038:	dcc00615 	stw	r19,24(sp)
   2703c:	dc800515 	stw	r18,20(sp)
   27040:	2021883a 	mov	r16,r4
   27044:	2823883a 	mov	r17,r5
   27048:	2839883a 	mov	fp,r5
   2704c:	3800401e 	bne	r7,zero,27150 <__umoddi3+0x13c>
   27050:	3027883a 	mov	r19,r6
   27054:	2029883a 	mov	r20,r4
   27058:	2980552e 	bgeu	r5,r6,271b0 <__umoddi3+0x19c>
   2705c:	00bfffd4 	movui	r2,65535
   27060:	1180a236 	bltu	r2,r6,272ec <__umoddi3+0x2d8>
   27064:	01003fc4 	movi	r4,255
   27068:	2189803a 	cmpltu	r4,r4,r6
   2706c:	200890fa 	slli	r4,r4,3
   27070:	3104d83a 	srl	r2,r6,r4
   27074:	00c000b4 	movhi	r3,2
   27078:	18df0484 	addi	r3,r3,31762
   2707c:	1885883a 	add	r2,r3,r2
   27080:	10c00003 	ldbu	r3,0(r2)
   27084:	00800804 	movi	r2,32
   27088:	1909883a 	add	r4,r3,r4
   2708c:	1125c83a 	sub	r18,r2,r4
   27090:	90000526 	beq	r18,zero,270a8 <__umoddi3+0x94>
   27094:	8ca2983a 	sll	r17,r17,r18
   27098:	8108d83a 	srl	r4,r16,r4
   2709c:	34a6983a 	sll	r19,r6,r18
   270a0:	84a8983a 	sll	r20,r16,r18
   270a4:	2478b03a 	or	fp,r4,r17
   270a8:	982cd43a 	srli	r22,r19,16
   270ac:	e009883a 	mov	r4,fp
   270b0:	9dffffcc 	andi	r23,r19,65535
   270b4:	b00b883a 	mov	r5,r22
   270b8:	0021cfc0 	call	21cfc <__umodsi3>
   270bc:	b00b883a 	mov	r5,r22
   270c0:	e009883a 	mov	r4,fp
   270c4:	102b883a 	mov	r21,r2
   270c8:	0021c980 	call	21c98 <__udivsi3>
   270cc:	100b883a 	mov	r5,r2
   270d0:	b809883a 	mov	r4,r23
   270d4:	0021d540 	call	21d54 <__mulsi3>
   270d8:	a82a943a 	slli	r21,r21,16
   270dc:	a006d43a 	srli	r3,r20,16
   270e0:	1d46b03a 	or	r3,r3,r21
   270e4:	1880032e 	bgeu	r3,r2,270f4 <__umoddi3+0xe0>
   270e8:	1cc7883a 	add	r3,r3,r19
   270ec:	1cc00136 	bltu	r3,r19,270f4 <__umoddi3+0xe0>
   270f0:	18813136 	bltu	r3,r2,275b8 <__umoddi3+0x5a4>
   270f4:	18a1c83a 	sub	r16,r3,r2
   270f8:	b00b883a 	mov	r5,r22
   270fc:	8009883a 	mov	r4,r16
   27100:	0021cfc0 	call	21cfc <__umodsi3>
   27104:	b00b883a 	mov	r5,r22
   27108:	8009883a 	mov	r4,r16
   2710c:	1023883a 	mov	r17,r2
   27110:	0021c980 	call	21c98 <__udivsi3>
   27114:	100b883a 	mov	r5,r2
   27118:	b809883a 	mov	r4,r23
   2711c:	8822943a 	slli	r17,r17,16
   27120:	0021d540 	call	21d54 <__mulsi3>
   27124:	a0ffffcc 	andi	r3,r20,65535
   27128:	1c46b03a 	or	r3,r3,r17
   2712c:	1880042e 	bgeu	r3,r2,27140 <__umoddi3+0x12c>
   27130:	1cc7883a 	add	r3,r3,r19
   27134:	1cc00236 	bltu	r3,r19,27140 <__umoddi3+0x12c>
   27138:	1880012e 	bgeu	r3,r2,27140 <__umoddi3+0x12c>
   2713c:	1cc7883a 	add	r3,r3,r19
   27140:	1885c83a 	sub	r2,r3,r2
   27144:	1484d83a 	srl	r2,r2,r18
   27148:	0007883a 	mov	r3,zero
   2714c:	00005306 	br	2729c <__umoddi3+0x288>
   27150:	29c05036 	bltu	r5,r7,27294 <__umoddi3+0x280>
   27154:	00bfffd4 	movui	r2,65535
   27158:	11c05c2e 	bgeu	r2,r7,272cc <__umoddi3+0x2b8>
   2715c:	00804034 	movhi	r2,256
   27160:	10bfffc4 	addi	r2,r2,-1
   27164:	11c10636 	bltu	r2,r7,27580 <__umoddi3+0x56c>
   27168:	01000404 	movi	r4,16
   2716c:	3904d83a 	srl	r2,r7,r4
   27170:	00c000b4 	movhi	r3,2
   27174:	18df0484 	addi	r3,r3,31762
   27178:	1885883a 	add	r2,r3,r2
   2717c:	14c00003 	ldbu	r19,0(r2)
   27180:	00c00804 	movi	r3,32
   27184:	9927883a 	add	r19,r19,r4
   27188:	1ce9c83a 	sub	r20,r3,r19
   2718c:	a0005c1e 	bne	r20,zero,27300 <__umoddi3+0x2ec>
   27190:	3c400136 	bltu	r7,r17,27198 <__umoddi3+0x184>
   27194:	81810a36 	bltu	r16,r6,275c0 <__umoddi3+0x5ac>
   27198:	8185c83a 	sub	r2,r16,r6
   2719c:	89e3c83a 	sub	r17,r17,r7
   271a0:	8089803a 	cmpltu	r4,r16,r2
   271a4:	8939c83a 	sub	fp,r17,r4
   271a8:	e007883a 	mov	r3,fp
   271ac:	00003b06 	br	2729c <__umoddi3+0x288>
   271b0:	3000041e 	bne	r6,zero,271c4 <__umoddi3+0x1b0>
   271b4:	000b883a 	mov	r5,zero
   271b8:	01000044 	movi	r4,1
   271bc:	0021c980 	call	21c98 <__udivsi3>
   271c0:	1027883a 	mov	r19,r2
   271c4:	00bfffd4 	movui	r2,65535
   271c8:	14c0442e 	bgeu	r2,r19,272dc <__umoddi3+0x2c8>
   271cc:	00804034 	movhi	r2,256
   271d0:	10bfffc4 	addi	r2,r2,-1
   271d4:	14c0ec36 	bltu	r2,r19,27588 <__umoddi3+0x574>
   271d8:	00800404 	movi	r2,16
   271dc:	9886d83a 	srl	r3,r19,r2
   271e0:	010000b4 	movhi	r4,2
   271e4:	211f0484 	addi	r4,r4,31762
   271e8:	20c7883a 	add	r3,r4,r3
   271ec:	18c00003 	ldbu	r3,0(r3)
   271f0:	1887883a 	add	r3,r3,r2
   271f4:	00800804 	movi	r2,32
   271f8:	10e5c83a 	sub	r18,r2,r3
   271fc:	9000ab1e 	bne	r18,zero,274ac <__umoddi3+0x498>
   27200:	982cd43a 	srli	r22,r19,16
   27204:	8ce3c83a 	sub	r17,r17,r19
   27208:	9dffffcc 	andi	r23,r19,65535
   2720c:	b00b883a 	mov	r5,r22
   27210:	8809883a 	mov	r4,r17
   27214:	0021cfc0 	call	21cfc <__umodsi3>
   27218:	b00b883a 	mov	r5,r22
   2721c:	8809883a 	mov	r4,r17
   27220:	102b883a 	mov	r21,r2
   27224:	0021c980 	call	21c98 <__udivsi3>
   27228:	b80b883a 	mov	r5,r23
   2722c:	1009883a 	mov	r4,r2
   27230:	0021d540 	call	21d54 <__mulsi3>
   27234:	a82a943a 	slli	r21,r21,16
   27238:	a006d43a 	srli	r3,r20,16
   2723c:	1d46b03a 	or	r3,r3,r21
   27240:	1880042e 	bgeu	r3,r2,27254 <__umoddi3+0x240>
   27244:	1cc7883a 	add	r3,r3,r19
   27248:	1cc00236 	bltu	r3,r19,27254 <__umoddi3+0x240>
   2724c:	1880012e 	bgeu	r3,r2,27254 <__umoddi3+0x240>
   27250:	1cc7883a 	add	r3,r3,r19
   27254:	18a1c83a 	sub	r16,r3,r2
   27258:	b00b883a 	mov	r5,r22
   2725c:	8009883a 	mov	r4,r16
   27260:	0021cfc0 	call	21cfc <__umodsi3>
   27264:	1023883a 	mov	r17,r2
   27268:	b00b883a 	mov	r5,r22
   2726c:	8009883a 	mov	r4,r16
   27270:	0021c980 	call	21c98 <__udivsi3>
   27274:	8822943a 	slli	r17,r17,16
   27278:	b80b883a 	mov	r5,r23
   2727c:	1009883a 	mov	r4,r2
   27280:	0021d540 	call	21d54 <__mulsi3>
   27284:	a53fffcc 	andi	r20,r20,65535
   27288:	a446b03a 	or	r3,r20,r17
   2728c:	18bfac2e 	bgeu	r3,r2,27140 <__alt_data_end+0xfffee140>
   27290:	003fa706 	br	27130 <__alt_data_end+0xfffee130>
   27294:	2005883a 	mov	r2,r4
   27298:	2807883a 	mov	r3,r5
   2729c:	dfc00c17 	ldw	ra,48(sp)
   272a0:	df000b17 	ldw	fp,44(sp)
   272a4:	ddc00a17 	ldw	r23,40(sp)
   272a8:	dd800917 	ldw	r22,36(sp)
   272ac:	dd400817 	ldw	r21,32(sp)
   272b0:	dd000717 	ldw	r20,28(sp)
   272b4:	dcc00617 	ldw	r19,24(sp)
   272b8:	dc800517 	ldw	r18,20(sp)
   272bc:	dc400417 	ldw	r17,16(sp)
   272c0:	dc000317 	ldw	r16,12(sp)
   272c4:	dec00d04 	addi	sp,sp,52
   272c8:	f800283a 	ret
   272cc:	04c03fc4 	movi	r19,255
   272d0:	99c9803a 	cmpltu	r4,r19,r7
   272d4:	200890fa 	slli	r4,r4,3
   272d8:	003fa406 	br	2716c <__alt_data_end+0xfffee16c>
   272dc:	00803fc4 	movi	r2,255
   272e0:	14c5803a 	cmpltu	r2,r2,r19
   272e4:	100490fa 	slli	r2,r2,3
   272e8:	003fbc06 	br	271dc <__alt_data_end+0xfffee1dc>
   272ec:	00804034 	movhi	r2,256
   272f0:	10bfffc4 	addi	r2,r2,-1
   272f4:	1180a636 	bltu	r2,r6,27590 <__umoddi3+0x57c>
   272f8:	01000404 	movi	r4,16
   272fc:	003f5c06 	br	27070 <__alt_data_end+0xfffee070>
   27300:	3d0e983a 	sll	r7,r7,r20
   27304:	34ead83a 	srl	r21,r6,r19
   27308:	8cc6d83a 	srl	r3,r17,r19
   2730c:	8d10983a 	sll	r8,r17,r20
   27310:	3d6ab03a 	or	r21,r7,r21
   27314:	a82cd43a 	srli	r22,r21,16
   27318:	84e2d83a 	srl	r17,r16,r19
   2731c:	1809883a 	mov	r4,r3
   27320:	b00b883a 	mov	r5,r22
   27324:	8a22b03a 	or	r17,r17,r8
   27328:	3524983a 	sll	r18,r6,r20
   2732c:	dc400015 	stw	r17,0(sp)
   27330:	d8c00115 	stw	r3,4(sp)
   27334:	0021cfc0 	call	21cfc <__umodsi3>
   27338:	d8c00117 	ldw	r3,4(sp)
   2733c:	b00b883a 	mov	r5,r22
   27340:	1039883a 	mov	fp,r2
   27344:	1809883a 	mov	r4,r3
   27348:	0021c980 	call	21c98 <__udivsi3>
   2734c:	adffffcc 	andi	r23,r21,65535
   27350:	100b883a 	mov	r5,r2
   27354:	b809883a 	mov	r4,r23
   27358:	1023883a 	mov	r17,r2
   2735c:	0021d540 	call	21d54 <__mulsi3>
   27360:	d9400017 	ldw	r5,0(sp)
   27364:	e008943a 	slli	r4,fp,16
   27368:	8520983a 	sll	r16,r16,r20
   2736c:	2806d43a 	srli	r3,r5,16
   27370:	1906b03a 	or	r3,r3,r4
   27374:	1880042e 	bgeu	r3,r2,27388 <__umoddi3+0x374>
   27378:	1d47883a 	add	r3,r3,r21
   2737c:	893fffc4 	addi	r4,r17,-1
   27380:	1d40892e 	bgeu	r3,r21,275a8 <__umoddi3+0x594>
   27384:	2023883a 	mov	r17,r4
   27388:	18b9c83a 	sub	fp,r3,r2
   2738c:	b00b883a 	mov	r5,r22
   27390:	e009883a 	mov	r4,fp
   27394:	0021cfc0 	call	21cfc <__umodsi3>
   27398:	b00b883a 	mov	r5,r22
   2739c:	e009883a 	mov	r4,fp
   273a0:	d8800215 	stw	r2,8(sp)
   273a4:	0021c980 	call	21c98 <__udivsi3>
   273a8:	100b883a 	mov	r5,r2
   273ac:	b809883a 	mov	r4,r23
   273b0:	102d883a 	mov	r22,r2
   273b4:	0021d540 	call	21d54 <__mulsi3>
   273b8:	d9800217 	ldw	r6,8(sp)
   273bc:	d8c00017 	ldw	r3,0(sp)
   273c0:	300c943a 	slli	r6,r6,16
   273c4:	1a3fffcc 	andi	r8,r3,65535
   273c8:	4190b03a 	or	r8,r8,r6
   273cc:	4080042e 	bgeu	r8,r2,273e0 <__umoddi3+0x3cc>
   273d0:	4551883a 	add	r8,r8,r21
   273d4:	b0ffffc4 	addi	r3,r22,-1
   273d8:	45406f2e 	bgeu	r8,r21,27598 <__umoddi3+0x584>
   273dc:	182d883a 	mov	r22,r3
   273e0:	880e943a 	slli	r7,r17,16
   273e4:	9006d43a 	srli	r3,r18,16
   273e8:	91bfffcc 	andi	r6,r18,65535
   273ec:	3dacb03a 	or	r22,r7,r22
   273f0:	b02ed43a 	srli	r23,r22,16
   273f4:	b5bfffcc 	andi	r22,r22,65535
   273f8:	300b883a 	mov	r5,r6
   273fc:	b009883a 	mov	r4,r22
   27400:	40a3c83a 	sub	r17,r8,r2
   27404:	d8c00115 	stw	r3,4(sp)
   27408:	d9800215 	stw	r6,8(sp)
   2740c:	0021d540 	call	21d54 <__mulsi3>
   27410:	d9800217 	ldw	r6,8(sp)
   27414:	b809883a 	mov	r4,r23
   27418:	1039883a 	mov	fp,r2
   2741c:	300b883a 	mov	r5,r6
   27420:	0021d540 	call	21d54 <__mulsi3>
   27424:	d8c00117 	ldw	r3,4(sp)
   27428:	b809883a 	mov	r4,r23
   2742c:	d8800215 	stw	r2,8(sp)
   27430:	180b883a 	mov	r5,r3
   27434:	0021d540 	call	21d54 <__mulsi3>
   27438:	d8c00117 	ldw	r3,4(sp)
   2743c:	b009883a 	mov	r4,r22
   27440:	102f883a 	mov	r23,r2
   27444:	180b883a 	mov	r5,r3
   27448:	0021d540 	call	21d54 <__mulsi3>
   2744c:	d9800217 	ldw	r6,8(sp)
   27450:	e006d43a 	srli	r3,fp,16
   27454:	1185883a 	add	r2,r2,r6
   27458:	1885883a 	add	r2,r3,r2
   2745c:	1180022e 	bgeu	r2,r6,27468 <__umoddi3+0x454>
   27460:	00c00074 	movhi	r3,1
   27464:	b8ef883a 	add	r23,r23,r3
   27468:	1006d43a 	srli	r3,r2,16
   2746c:	1004943a 	slli	r2,r2,16
   27470:	e73fffcc 	andi	fp,fp,65535
   27474:	1dc7883a 	add	r3,r3,r23
   27478:	1739883a 	add	fp,r2,fp
   2747c:	88c03a36 	bltu	r17,r3,27568 <__umoddi3+0x554>
   27480:	88c05126 	beq	r17,r3,275c8 <__umoddi3+0x5b4>
   27484:	88c9c83a 	sub	r4,r17,r3
   27488:	e00f883a 	mov	r7,fp
   2748c:	81cfc83a 	sub	r7,r16,r7
   27490:	81c7803a 	cmpltu	r3,r16,r7
   27494:	20c7c83a 	sub	r3,r4,r3
   27498:	1cc4983a 	sll	r2,r3,r19
   2749c:	3d0ed83a 	srl	r7,r7,r20
   274a0:	1d06d83a 	srl	r3,r3,r20
   274a4:	11c4b03a 	or	r2,r2,r7
   274a8:	003f7c06 	br	2729c <__alt_data_end+0xfffee29c>
   274ac:	9ca6983a 	sll	r19,r19,r18
   274b0:	88f8d83a 	srl	fp,r17,r3
   274b4:	80c4d83a 	srl	r2,r16,r3
   274b8:	982cd43a 	srli	r22,r19,16
   274bc:	8ca2983a 	sll	r17,r17,r18
   274c0:	e009883a 	mov	r4,fp
   274c4:	b00b883a 	mov	r5,r22
   274c8:	146ab03a 	or	r21,r2,r17
   274cc:	0021cfc0 	call	21cfc <__umodsi3>
   274d0:	b00b883a 	mov	r5,r22
   274d4:	e009883a 	mov	r4,fp
   274d8:	1029883a 	mov	r20,r2
   274dc:	9dffffcc 	andi	r23,r19,65535
   274e0:	0021c980 	call	21c98 <__udivsi3>
   274e4:	b809883a 	mov	r4,r23
   274e8:	100b883a 	mov	r5,r2
   274ec:	0021d540 	call	21d54 <__mulsi3>
   274f0:	a008943a 	slli	r4,r20,16
   274f4:	a806d43a 	srli	r3,r21,16
   274f8:	84a8983a 	sll	r20,r16,r18
   274fc:	1906b03a 	or	r3,r3,r4
   27500:	1880042e 	bgeu	r3,r2,27514 <__umoddi3+0x500>
   27504:	1cc7883a 	add	r3,r3,r19
   27508:	1cc00236 	bltu	r3,r19,27514 <__umoddi3+0x500>
   2750c:	1880012e 	bgeu	r3,r2,27514 <__umoddi3+0x500>
   27510:	1cc7883a 	add	r3,r3,r19
   27514:	18a3c83a 	sub	r17,r3,r2
   27518:	b00b883a 	mov	r5,r22
   2751c:	8809883a 	mov	r4,r17
   27520:	0021cfc0 	call	21cfc <__umodsi3>
   27524:	b00b883a 	mov	r5,r22
   27528:	8809883a 	mov	r4,r17
   2752c:	1021883a 	mov	r16,r2
   27530:	0021c980 	call	21c98 <__udivsi3>
   27534:	100b883a 	mov	r5,r2
   27538:	b809883a 	mov	r4,r23
   2753c:	8020943a 	slli	r16,r16,16
   27540:	0021d540 	call	21d54 <__mulsi3>
   27544:	a8ffffcc 	andi	r3,r21,65535
   27548:	1c06b03a 	or	r3,r3,r16
   2754c:	1880042e 	bgeu	r3,r2,27560 <__umoddi3+0x54c>
   27550:	1cc7883a 	add	r3,r3,r19
   27554:	1cc00236 	bltu	r3,r19,27560 <__umoddi3+0x54c>
   27558:	1880012e 	bgeu	r3,r2,27560 <__umoddi3+0x54c>
   2755c:	1cc7883a 	add	r3,r3,r19
   27560:	18a3c83a 	sub	r17,r3,r2
   27564:	003f2906 	br	2720c <__alt_data_end+0xfffee20c>
   27568:	e48fc83a 	sub	r7,fp,r18
   2756c:	1d49c83a 	sub	r4,r3,r21
   27570:	e1f9803a 	cmpltu	fp,fp,r7
   27574:	2739c83a 	sub	fp,r4,fp
   27578:	8f09c83a 	sub	r4,r17,fp
   2757c:	003fc306 	br	2748c <__alt_data_end+0xfffee48c>
   27580:	01000604 	movi	r4,24
   27584:	003ef906 	br	2716c <__alt_data_end+0xfffee16c>
   27588:	00800604 	movi	r2,24
   2758c:	003f1306 	br	271dc <__alt_data_end+0xfffee1dc>
   27590:	01000604 	movi	r4,24
   27594:	003eb606 	br	27070 <__alt_data_end+0xfffee070>
   27598:	40bf902e 	bgeu	r8,r2,273dc <__alt_data_end+0xfffee3dc>
   2759c:	b5bfff84 	addi	r22,r22,-2
   275a0:	4551883a 	add	r8,r8,r21
   275a4:	003f8e06 	br	273e0 <__alt_data_end+0xfffee3e0>
   275a8:	18bf762e 	bgeu	r3,r2,27384 <__alt_data_end+0xfffee384>
   275ac:	8c7fff84 	addi	r17,r17,-2
   275b0:	1d47883a 	add	r3,r3,r21
   275b4:	003f7406 	br	27388 <__alt_data_end+0xfffee388>
   275b8:	1cc7883a 	add	r3,r3,r19
   275bc:	003ecd06 	br	270f4 <__alt_data_end+0xfffee0f4>
   275c0:	8005883a 	mov	r2,r16
   275c4:	003ef806 	br	271a8 <__alt_data_end+0xfffee1a8>
   275c8:	873fe736 	bltu	r16,fp,27568 <__alt_data_end+0xfffee568>
   275cc:	e00f883a 	mov	r7,fp
   275d0:	0009883a 	mov	r4,zero
   275d4:	003fad06 	br	2748c <__alt_data_end+0xfffee48c>

000275d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   275d8:	defffd04 	addi	sp,sp,-12
   275dc:	df000215 	stw	fp,8(sp)
   275e0:	df000204 	addi	fp,sp,8
   275e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   275e8:	0001883a 	nop
   275ec:	e0bfff17 	ldw	r2,-4(fp)
   275f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   275f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   275f8:	10000226 	beq	r2,zero,27604 <_exit+0x2c>
    ALT_SIM_FAIL();
   275fc:	002af070 	cmpltui	zero,zero,43969
   27600:	00000106 	br	27608 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   27604:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   27608:	003fff06 	br	27608 <__alt_data_end+0xfffee608>

0002760c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2760c:	defffe04 	addi	sp,sp,-8
   27610:	dfc00115 	stw	ra,4(sp)
   27614:	df000015 	stw	fp,0(sp)
   27618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2761c:	d0a01017 	ldw	r2,-32704(gp)
   27620:	10000326 	beq	r2,zero,27630 <alt_get_errno+0x24>
   27624:	d0a01017 	ldw	r2,-32704(gp)
   27628:	103ee83a 	callr	r2
   2762c:	00000106 	br	27634 <alt_get_errno+0x28>
   27630:	d0a6c304 	addi	r2,gp,-25844
}
   27634:	e037883a 	mov	sp,fp
   27638:	dfc00117 	ldw	ra,4(sp)
   2763c:	df000017 	ldw	fp,0(sp)
   27640:	dec00204 	addi	sp,sp,8
   27644:	f800283a 	ret

00027648 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   27648:	defffb04 	addi	sp,sp,-20
   2764c:	dfc00415 	stw	ra,16(sp)
   27650:	df000315 	stw	fp,12(sp)
   27654:	df000304 	addi	fp,sp,12
   27658:	e13ffe15 	stw	r4,-8(fp)
   2765c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   27660:	e0bffe17 	ldw	r2,-8(fp)
   27664:	10000816 	blt	r2,zero,27688 <fstat+0x40>
   27668:	01400304 	movi	r5,12
   2766c:	e13ffe17 	ldw	r4,-8(fp)
   27670:	0021d540 	call	21d54 <__mulsi3>
   27674:	1007883a 	mov	r3,r2
   27678:	008000f4 	movhi	r2,3
   2767c:	10a58204 	addi	r2,r2,-27128
   27680:	1885883a 	add	r2,r3,r2
   27684:	00000106 	br	2768c <fstat+0x44>
   27688:	0005883a 	mov	r2,zero
   2768c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   27690:	e0bffd17 	ldw	r2,-12(fp)
   27694:	10001026 	beq	r2,zero,276d8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   27698:	e0bffd17 	ldw	r2,-12(fp)
   2769c:	10800017 	ldw	r2,0(r2)
   276a0:	10800817 	ldw	r2,32(r2)
   276a4:	10000726 	beq	r2,zero,276c4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   276a8:	e0bffd17 	ldw	r2,-12(fp)
   276ac:	10800017 	ldw	r2,0(r2)
   276b0:	10800817 	ldw	r2,32(r2)
   276b4:	e17fff17 	ldw	r5,-4(fp)
   276b8:	e13ffd17 	ldw	r4,-12(fp)
   276bc:	103ee83a 	callr	r2
   276c0:	00000a06 	br	276ec <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   276c4:	e0bfff17 	ldw	r2,-4(fp)
   276c8:	00c80004 	movi	r3,8192
   276cc:	10c00115 	stw	r3,4(r2)
      return 0;
   276d0:	0005883a 	mov	r2,zero
   276d4:	00000506 	br	276ec <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   276d8:	002760c0 	call	2760c <alt_get_errno>
   276dc:	1007883a 	mov	r3,r2
   276e0:	00801444 	movi	r2,81
   276e4:	18800015 	stw	r2,0(r3)
    return -1;
   276e8:	00bfffc4 	movi	r2,-1
  }
}
   276ec:	e037883a 	mov	sp,fp
   276f0:	dfc00117 	ldw	ra,4(sp)
   276f4:	df000017 	ldw	fp,0(sp)
   276f8:	dec00204 	addi	sp,sp,8
   276fc:	f800283a 	ret

00027700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   27700:	defffe04 	addi	sp,sp,-8
   27704:	dfc00115 	stw	ra,4(sp)
   27708:	df000015 	stw	fp,0(sp)
   2770c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   27710:	d0a01017 	ldw	r2,-32704(gp)
   27714:	10000326 	beq	r2,zero,27724 <alt_get_errno+0x24>
   27718:	d0a01017 	ldw	r2,-32704(gp)
   2771c:	103ee83a 	callr	r2
   27720:	00000106 	br	27728 <alt_get_errno+0x28>
   27724:	d0a6c304 	addi	r2,gp,-25844
}
   27728:	e037883a 	mov	sp,fp
   2772c:	dfc00117 	ldw	ra,4(sp)
   27730:	df000017 	ldw	fp,0(sp)
   27734:	dec00204 	addi	sp,sp,8
   27738:	f800283a 	ret

0002773c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2773c:	deffed04 	addi	sp,sp,-76
   27740:	dfc01215 	stw	ra,72(sp)
   27744:	df001115 	stw	fp,68(sp)
   27748:	df001104 	addi	fp,sp,68
   2774c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   27750:	e0bfff17 	ldw	r2,-4(fp)
   27754:	10000816 	blt	r2,zero,27778 <isatty+0x3c>
   27758:	01400304 	movi	r5,12
   2775c:	e13fff17 	ldw	r4,-4(fp)
   27760:	0021d540 	call	21d54 <__mulsi3>
   27764:	1007883a 	mov	r3,r2
   27768:	008000f4 	movhi	r2,3
   2776c:	10a58204 	addi	r2,r2,-27128
   27770:	1885883a 	add	r2,r3,r2
   27774:	00000106 	br	2777c <isatty+0x40>
   27778:	0005883a 	mov	r2,zero
   2777c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   27780:	e0bfef17 	ldw	r2,-68(fp)
   27784:	10000e26 	beq	r2,zero,277c0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   27788:	e0bfef17 	ldw	r2,-68(fp)
   2778c:	10800017 	ldw	r2,0(r2)
   27790:	10800817 	ldw	r2,32(r2)
   27794:	1000021e 	bne	r2,zero,277a0 <isatty+0x64>
    {
      return 1;
   27798:	00800044 	movi	r2,1
   2779c:	00000d06 	br	277d4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   277a0:	e0bff004 	addi	r2,fp,-64
   277a4:	100b883a 	mov	r5,r2
   277a8:	e13fff17 	ldw	r4,-4(fp)
   277ac:	00276480 	call	27648 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   277b0:	e0bff117 	ldw	r2,-60(fp)
   277b4:	10880020 	cmpeqi	r2,r2,8192
   277b8:	10803fcc 	andi	r2,r2,255
   277bc:	00000506 	br	277d4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   277c0:	00277000 	call	27700 <alt_get_errno>
   277c4:	1007883a 	mov	r3,r2
   277c8:	00801444 	movi	r2,81
   277cc:	18800015 	stw	r2,0(r3)
    return 0;
   277d0:	0005883a 	mov	r2,zero
  }
}
   277d4:	e037883a 	mov	sp,fp
   277d8:	dfc00117 	ldw	ra,4(sp)
   277dc:	df000017 	ldw	fp,0(sp)
   277e0:	dec00204 	addi	sp,sp,8
   277e4:	f800283a 	ret

000277e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   277e8:	defffe04 	addi	sp,sp,-8
   277ec:	dfc00115 	stw	ra,4(sp)
   277f0:	df000015 	stw	fp,0(sp)
   277f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   277f8:	d0a01017 	ldw	r2,-32704(gp)
   277fc:	10000326 	beq	r2,zero,2780c <alt_get_errno+0x24>
   27800:	d0a01017 	ldw	r2,-32704(gp)
   27804:	103ee83a 	callr	r2
   27808:	00000106 	br	27810 <alt_get_errno+0x28>
   2780c:	d0a6c304 	addi	r2,gp,-25844
}
   27810:	e037883a 	mov	sp,fp
   27814:	dfc00117 	ldw	ra,4(sp)
   27818:	df000017 	ldw	fp,0(sp)
   2781c:	dec00204 	addi	sp,sp,8
   27820:	f800283a 	ret

00027824 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   27824:	defff904 	addi	sp,sp,-28
   27828:	dfc00615 	stw	ra,24(sp)
   2782c:	df000515 	stw	fp,20(sp)
   27830:	df000504 	addi	fp,sp,20
   27834:	e13ffd15 	stw	r4,-12(fp)
   27838:	e17ffe15 	stw	r5,-8(fp)
   2783c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   27840:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   27844:	e0bffd17 	ldw	r2,-12(fp)
   27848:	10000816 	blt	r2,zero,2786c <lseek+0x48>
   2784c:	01400304 	movi	r5,12
   27850:	e13ffd17 	ldw	r4,-12(fp)
   27854:	0021d540 	call	21d54 <__mulsi3>
   27858:	1007883a 	mov	r3,r2
   2785c:	008000f4 	movhi	r2,3
   27860:	10a58204 	addi	r2,r2,-27128
   27864:	1885883a 	add	r2,r3,r2
   27868:	00000106 	br	27870 <lseek+0x4c>
   2786c:	0005883a 	mov	r2,zero
   27870:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   27874:	e0bffc17 	ldw	r2,-16(fp)
   27878:	10001026 	beq	r2,zero,278bc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2787c:	e0bffc17 	ldw	r2,-16(fp)
   27880:	10800017 	ldw	r2,0(r2)
   27884:	10800717 	ldw	r2,28(r2)
   27888:	10000926 	beq	r2,zero,278b0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2788c:	e0bffc17 	ldw	r2,-16(fp)
   27890:	10800017 	ldw	r2,0(r2)
   27894:	10800717 	ldw	r2,28(r2)
   27898:	e1bfff17 	ldw	r6,-4(fp)
   2789c:	e17ffe17 	ldw	r5,-8(fp)
   278a0:	e13ffc17 	ldw	r4,-16(fp)
   278a4:	103ee83a 	callr	r2
   278a8:	e0bffb15 	stw	r2,-20(fp)
   278ac:	00000506 	br	278c4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   278b0:	00bfde84 	movi	r2,-134
   278b4:	e0bffb15 	stw	r2,-20(fp)
   278b8:	00000206 	br	278c4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   278bc:	00bfebc4 	movi	r2,-81
   278c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   278c4:	e0bffb17 	ldw	r2,-20(fp)
   278c8:	1000070e 	bge	r2,zero,278e8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   278cc:	00277e80 	call	277e8 <alt_get_errno>
   278d0:	1007883a 	mov	r3,r2
   278d4:	e0bffb17 	ldw	r2,-20(fp)
   278d8:	0085c83a 	sub	r2,zero,r2
   278dc:	18800015 	stw	r2,0(r3)
    rc = -1;
   278e0:	00bfffc4 	movi	r2,-1
   278e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   278e8:	e0bffb17 	ldw	r2,-20(fp)
}
   278ec:	e037883a 	mov	sp,fp
   278f0:	dfc00117 	ldw	ra,4(sp)
   278f4:	df000017 	ldw	fp,0(sp)
   278f8:	dec00204 	addi	sp,sp,8
   278fc:	f800283a 	ret

00027900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   27900:	defffe04 	addi	sp,sp,-8
   27904:	dfc00115 	stw	ra,4(sp)
   27908:	df000015 	stw	fp,0(sp)
   2790c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   27910:	d0a01017 	ldw	r2,-32704(gp)
   27914:	10000326 	beq	r2,zero,27924 <alt_get_errno+0x24>
   27918:	d0a01017 	ldw	r2,-32704(gp)
   2791c:	103ee83a 	callr	r2
   27920:	00000106 	br	27928 <alt_get_errno+0x28>
   27924:	d0a6c304 	addi	r2,gp,-25844
}
   27928:	e037883a 	mov	sp,fp
   2792c:	dfc00117 	ldw	ra,4(sp)
   27930:	df000017 	ldw	fp,0(sp)
   27934:	dec00204 	addi	sp,sp,8
   27938:	f800283a 	ret

0002793c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2793c:	defff904 	addi	sp,sp,-28
   27940:	dfc00615 	stw	ra,24(sp)
   27944:	df000515 	stw	fp,20(sp)
   27948:	df000504 	addi	fp,sp,20
   2794c:	e13ffd15 	stw	r4,-12(fp)
   27950:	e17ffe15 	stw	r5,-8(fp)
   27954:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   27958:	e0bffd17 	ldw	r2,-12(fp)
   2795c:	10000816 	blt	r2,zero,27980 <read+0x44>
   27960:	01400304 	movi	r5,12
   27964:	e13ffd17 	ldw	r4,-12(fp)
   27968:	0021d540 	call	21d54 <__mulsi3>
   2796c:	1007883a 	mov	r3,r2
   27970:	008000f4 	movhi	r2,3
   27974:	10a58204 	addi	r2,r2,-27128
   27978:	1885883a 	add	r2,r3,r2
   2797c:	00000106 	br	27984 <read+0x48>
   27980:	0005883a 	mov	r2,zero
   27984:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   27988:	e0bffb17 	ldw	r2,-20(fp)
   2798c:	10002226 	beq	r2,zero,27a18 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   27990:	e0bffb17 	ldw	r2,-20(fp)
   27994:	10800217 	ldw	r2,8(r2)
   27998:	108000cc 	andi	r2,r2,3
   2799c:	10800060 	cmpeqi	r2,r2,1
   279a0:	1000181e 	bne	r2,zero,27a04 <read+0xc8>
        (fd->dev->read))
   279a4:	e0bffb17 	ldw	r2,-20(fp)
   279a8:	10800017 	ldw	r2,0(r2)
   279ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   279b0:	10001426 	beq	r2,zero,27a04 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   279b4:	e0bffb17 	ldw	r2,-20(fp)
   279b8:	10800017 	ldw	r2,0(r2)
   279bc:	10800517 	ldw	r2,20(r2)
   279c0:	e0ffff17 	ldw	r3,-4(fp)
   279c4:	180d883a 	mov	r6,r3
   279c8:	e17ffe17 	ldw	r5,-8(fp)
   279cc:	e13ffb17 	ldw	r4,-20(fp)
   279d0:	103ee83a 	callr	r2
   279d4:	e0bffc15 	stw	r2,-16(fp)
   279d8:	e0bffc17 	ldw	r2,-16(fp)
   279dc:	1000070e 	bge	r2,zero,279fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   279e0:	00279000 	call	27900 <alt_get_errno>
   279e4:	1007883a 	mov	r3,r2
   279e8:	e0bffc17 	ldw	r2,-16(fp)
   279ec:	0085c83a 	sub	r2,zero,r2
   279f0:	18800015 	stw	r2,0(r3)
          return -1;
   279f4:	00bfffc4 	movi	r2,-1
   279f8:	00000c06 	br	27a2c <read+0xf0>
        }
        return rval;
   279fc:	e0bffc17 	ldw	r2,-16(fp)
   27a00:	00000a06 	br	27a2c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   27a04:	00279000 	call	27900 <alt_get_errno>
   27a08:	1007883a 	mov	r3,r2
   27a0c:	00800344 	movi	r2,13
   27a10:	18800015 	stw	r2,0(r3)
   27a14:	00000406 	br	27a28 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   27a18:	00279000 	call	27900 <alt_get_errno>
   27a1c:	1007883a 	mov	r3,r2
   27a20:	00801444 	movi	r2,81
   27a24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   27a28:	00bfffc4 	movi	r2,-1
}
   27a2c:	e037883a 	mov	sp,fp
   27a30:	dfc00117 	ldw	ra,4(sp)
   27a34:	df000017 	ldw	fp,0(sp)
   27a38:	dec00204 	addi	sp,sp,8
   27a3c:	f800283a 	ret

00027a40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   27a40:	defffe04 	addi	sp,sp,-8
   27a44:	dfc00115 	stw	ra,4(sp)
   27a48:	df000015 	stw	fp,0(sp)
   27a4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   27a50:	d0a01017 	ldw	r2,-32704(gp)
   27a54:	10000326 	beq	r2,zero,27a64 <alt_get_errno+0x24>
   27a58:	d0a01017 	ldw	r2,-32704(gp)
   27a5c:	103ee83a 	callr	r2
   27a60:	00000106 	br	27a68 <alt_get_errno+0x28>
   27a64:	d0a6c304 	addi	r2,gp,-25844
}
   27a68:	e037883a 	mov	sp,fp
   27a6c:	dfc00117 	ldw	ra,4(sp)
   27a70:	df000017 	ldw	fp,0(sp)
   27a74:	dec00204 	addi	sp,sp,8
   27a78:	f800283a 	ret

00027a7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   27a7c:	defff904 	addi	sp,sp,-28
   27a80:	dfc00615 	stw	ra,24(sp)
   27a84:	df000515 	stw	fp,20(sp)
   27a88:	df000504 	addi	fp,sp,20
   27a8c:	e13ffd15 	stw	r4,-12(fp)
   27a90:	e17ffe15 	stw	r5,-8(fp)
   27a94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   27a98:	e0bffd17 	ldw	r2,-12(fp)
   27a9c:	10000816 	blt	r2,zero,27ac0 <write+0x44>
   27aa0:	01400304 	movi	r5,12
   27aa4:	e13ffd17 	ldw	r4,-12(fp)
   27aa8:	0021d540 	call	21d54 <__mulsi3>
   27aac:	1007883a 	mov	r3,r2
   27ab0:	008000f4 	movhi	r2,3
   27ab4:	10a58204 	addi	r2,r2,-27128
   27ab8:	1885883a 	add	r2,r3,r2
   27abc:	00000106 	br	27ac4 <write+0x48>
   27ac0:	0005883a 	mov	r2,zero
   27ac4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   27ac8:	e0bffb17 	ldw	r2,-20(fp)
   27acc:	10002126 	beq	r2,zero,27b54 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   27ad0:	e0bffb17 	ldw	r2,-20(fp)
   27ad4:	10800217 	ldw	r2,8(r2)
   27ad8:	108000cc 	andi	r2,r2,3
   27adc:	10001826 	beq	r2,zero,27b40 <write+0xc4>
   27ae0:	e0bffb17 	ldw	r2,-20(fp)
   27ae4:	10800017 	ldw	r2,0(r2)
   27ae8:	10800617 	ldw	r2,24(r2)
   27aec:	10001426 	beq	r2,zero,27b40 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   27af0:	e0bffb17 	ldw	r2,-20(fp)
   27af4:	10800017 	ldw	r2,0(r2)
   27af8:	10800617 	ldw	r2,24(r2)
   27afc:	e0ffff17 	ldw	r3,-4(fp)
   27b00:	180d883a 	mov	r6,r3
   27b04:	e17ffe17 	ldw	r5,-8(fp)
   27b08:	e13ffb17 	ldw	r4,-20(fp)
   27b0c:	103ee83a 	callr	r2
   27b10:	e0bffc15 	stw	r2,-16(fp)
   27b14:	e0bffc17 	ldw	r2,-16(fp)
   27b18:	1000070e 	bge	r2,zero,27b38 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   27b1c:	0027a400 	call	27a40 <alt_get_errno>
   27b20:	1007883a 	mov	r3,r2
   27b24:	e0bffc17 	ldw	r2,-16(fp)
   27b28:	0085c83a 	sub	r2,zero,r2
   27b2c:	18800015 	stw	r2,0(r3)
        return -1;
   27b30:	00bfffc4 	movi	r2,-1
   27b34:	00000c06 	br	27b68 <write+0xec>
      }
      return rval;
   27b38:	e0bffc17 	ldw	r2,-16(fp)
   27b3c:	00000a06 	br	27b68 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   27b40:	0027a400 	call	27a40 <alt_get_errno>
   27b44:	1007883a 	mov	r3,r2
   27b48:	00800344 	movi	r2,13
   27b4c:	18800015 	stw	r2,0(r3)
   27b50:	00000406 	br	27b64 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   27b54:	0027a400 	call	27a40 <alt_get_errno>
   27b58:	1007883a 	mov	r3,r2
   27b5c:	00801444 	movi	r2,81
   27b60:	18800015 	stw	r2,0(r3)
  }
  return -1;
   27b64:	00bfffc4 	movi	r2,-1
}
   27b68:	e037883a 	mov	sp,fp
   27b6c:	dfc00117 	ldw	ra,4(sp)
   27b70:	df000017 	ldw	fp,0(sp)
   27b74:	dec00204 	addi	sp,sp,8
   27b78:	f800283a 	ret
