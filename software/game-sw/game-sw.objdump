
game-sw.elf:     file format elf32-littlenios2
game-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006124 memsz 0x00006124 flags r-x
    LOAD off    0x00007144 vaddr 0x00026144 paddr 0x00027bb4 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x00009624 vaddr 0x00029624 paddr 0x00029624 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e8c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  000260bc  000260bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  00026144  00027bb4  00007144  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00029624  00029624  00009624  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00029778  00029778  00008bb4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008bb4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a70  00000000  00000000  00008bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017190  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000634a  00000000  00000000  000207d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006cd0  00000000  00000000  00026b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001860  00000000  00000000  0002d7f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002956  00000000  00000000  0002f054  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ae9  00000000  00000000  000319aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00036494  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003926e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00039271  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039274  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039275  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00039276  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003927f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00039288  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00039291  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  00039295  2**0
                  CONTENTS, READONLY
 26 .jdi          00004230  00000000  00000000  000392c1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000560d3  00000000  00000000  0003d4f1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
000260bc l    d  .rodata	00000000 .rodata
00026144 l    d  .rwdata	00000000 .rwdata
00029624 l    d  .bss	00000000 .bss
00029778 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game-sw_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 hw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00020f70 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00021114 l     F .text	00000034 alt_dev_reg
00026144 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021404 l     F .text	0000020c altera_avalon_jtag_uart_irq
00021610 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021c48 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021e68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00021f9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00021fc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022224 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00022384 l     F .text	0000003c alt_get_errno
000223c0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0002734c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002496c l     F .text	00000008 __fp_unlock
00024980 l     F .text	0000019c __sinit.part.1
00024b1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00025a54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00025b48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00025c30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00025d90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027bb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00025f80 l     F .text	0000003c alt_get_errno
00029634 g     O .bss	00000004 alt_instruction_exception_handler
0002590c g     F .text	00000054 _isatty_r
0002105c g     F .text	0000007c alt_main
000206c4 g     F .text	000000e0 lcdSetAddr
00029678 g     O .bss	00000100 alt_irq
00025960 g     F .text	00000060 _lseek_r
00027bb4 g       *ABS*	00000000 __flash_rwdata_start
00029778 g       *ABS*	00000000 __alt_heap_start
00020388 g     F .text	0000003c handleGameTimer
00025694 g     F .text	0000005c __sseek
00024ccc g     F .text	00000010 __sinit
00020954 g     F .text	00000060 startTimer
00024b24 g     F .text	00000078 __sfmoreglue
00025d6c g     F .text	00000024 __malloc_unlock
00023b2c g     F .text	0000015c memmove
00024cb4 g     F .text	00000018 _cleanup
000210d8 g     F .text	0000003c alt_putstr
00020400 g     F .text	00000028 readSwitch
00022830 g     F .text	00000024 altera_nios2_gen2_irq_init
00020428 g     F .text	00000028 readKey
00020000 g     F .entry	0000000c __reset
000202f4 g     F .text	00000048 clearSema
000208f4 g     F .text	00000060 initTimers
00020020 g       *ABS*	00000000 __flash_exceptions_start
000258b0 g     F .text	0000005c _fstat_r
00029640 g     O .bss	00000004 errno
00025610 g     F .text	00000008 __seofread
00020450 g     F .text	0000003c setLEDs
0002962c g     O .bss	00000004 alt_argv
0002fb78 g       *ABS*	00000000 _gp
000271cc g     O .rwdata	00000180 alt_fd_list
00022854 g     F .text	00000090 alt_find_dev
000239e4 g     F .text	00000148 memcpy
00024974 g     F .text	0000000c _cleanup_r
000207a4 g     F .text	000000c4 lcdWrite
00022308 g     F .text	0000007c alt_io_redirect
000260bc g       *ABS*	00000000 __DTOR_END__
0002048c g     F .text	00000194 setSevenSeg
00022188 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00021808 g     F .text	0000021c altera_avalon_jtag_uart_read
00020bec g     F .text	00000064 .hidden __udivsi3
00025b84 g     F .text	000000ac isatty
0002964c g     O .bss	00000004 __malloc_top_pad
00022bb0 g     F .text	000004c8 __sfvwrite_r
000241ec g     F .text	00000054 _sbrk_r
000259c0 g     F .text	00000060 _read_r
00027b90 g     O .rwdata	00000004 alt_max_fd
000257ac g     F .text	000000f0 _fclose_r
0002493c g     F .text	00000030 fflush
00029648 g     O .bss	00000004 __malloc_max_sbrked_mem
00020ac0 g     F .text	00000034 millisToClock
00025c6c g     F .text	000000dc lseek
00027ba0 g     O .rwdata	00000004 _global_impure_ptr
00023c88 g     F .text	00000564 _realloc_r
000203c4 g     F .text	0000003c handleLCDTimer
00029778 g       *ABS*	00000000 __bss_end
00020e80 g     F .text	000000f0 alt_iic_isr_register
00022728 g     F .text	00000108 alt_tick
00024cec g     F .text	00000018 __fp_lock_all
00020e34 g     F .text	0000004c alt_ic_irq_enabled
0002268c g     F .text	0000009c alt_alarm_stop
00029624 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000271a4 g     O .rwdata	00000028 alt_dev_null
00021f7c g     F .text	00000020 alt_dcache_flush_all
00027bb4 g       *ABS*	00000000 __ram_rwdata_end
00027b88 g     O .rwdata	00000008 alt_dev_list
00025fbc g     F .text	00000100 write
00026144 g       *ABS*	00000000 __ram_rodata_end
00025a90 g     F .text	000000b8 fstat
00020c50 g     F .text	00000058 .hidden __umodsi3
00029778 g       *ABS*	00000000 end
00021344 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000260bc g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00021cc0 g     F .text	0000007c alt_avalon_timer_sc_init
00021a24 g     F .text	00000224 altera_avalon_jtag_uart_write
00024cdc g     F .text	00000004 __sfp_lock_acquire
00023884 g     F .text	000000e4 memchr
00024e40 g     F .text	00000310 _free_r
00020620 g     F .text	000000a4 lcdInit
00024544 g     F .text	00000180 __call_exitprocs
00027ba8 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00029638 g     O .bss	00000004 _alt_tick_rate
0002963c g     O .bss	00000004 _alt_nticks
00025dcc g     F .text	00000104 read
00021180 g     F .text	00000060 alt_sys_init
0002442c g     F .text	00000118 __register_exitproc
00027b79 g     O .rwdata	00000001 gameSema
000216b0 g     F .text	00000068 altera_avalon_jtag_uart_close
00020ca8 g     F .text	00000028 .hidden __mulsi3
00026144 g       *ABS*	00000000 __ram_rwdata_start
000260bc g       *ABS*	00000000 __ram_rodata_start
00029650 g     O .bss	00000028 __malloc_current_mallinfo
000211e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000229ec g     F .text	000000c4 alt_get_fd
00025758 g     F .text	00000054 _close_r
00023968 g     F .text	0000007c memcmp
000212a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00029778 g       *ABS*	00000000 __alt_stack_base
000212f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000242d8 g     F .text	00000154 __swsetup_r
00024b9c g     F .text	00000118 __sfp
00027770 g     O .rwdata	00000408 __malloc_av_
00024ce8 g     F .text	00000004 __sinit_lock_release
000255bc g     F .text	00000054 __sread
000228e4 g     F .text	00000108 alt_find_file
00022004 g     F .text	000000a4 alt_dev_llist_insert
00025d48 g     F .text	00000024 __malloc_lock
00025ed0 g     F .text	000000b0 sbrk
000248e0 g     F .text	0000005c _fflush_r
00029624 g       *ABS*	00000000 __bss_start
00025494 g     F .text	00000128 memset
0002026c g     F .text	00000088 main
00029630 g     O .bss	00000004 alt_envp
00029644 g     O .bss	00000004 __malloc_max_total_mem
00021240 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000256f0 g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
0002589c g     F .text	00000014 fclose
00023078 g     F .text	0000080c _malloc_r
00027b94 g     O .rwdata	00000004 alt_errno
00025150 g     F .text	000000c4 _fwalk
00020af4 g     F .text	00000084 .hidden __divsi3
00024d1c g     F .text	00000124 _malloc_trim_r
000260bc g       *ABS*	00000000 __CTOR_END__
000260bc g       *ABS*	00000000 __flash_rodata_start
000260bc g       *ABS*	00000000 __DTOR_LIST__
0002033c g     F .text	0000004c getSema
000209b4 g     F .text	00000060 stopTimer
00021148 g     F .text	00000038 alt_irq_init
00022608 g     F .text	00000084 alt_release_fd
00022ab0 g     F .text	00000014 atexit
000256f8 g     F .text	00000060 _write_r
00027ba4 g     O .rwdata	00000004 _impure_ptr
00029628 g     O .bss	00000004 alt_argc
000246c4 g     F .text	0000021c __sflush_r
00022108 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024d04 g     F .text	00000018 __fp_unlock_all
00027b80 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020cd0 g     F .text	00000050 alt_ic_isr_register
00027bb4 g       *ABS*	00000000 _edata
000260ec g     O .rodata	00000028 HexArray
00029778 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00021718 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00022afc g     F .text	0000009c _fputs_r
00020da8 g     F .text	0000008c alt_ic_irq_disable
00025618 g     F .text	0000007c __swrite
00027bac g     O .rwdata	00000004 __malloc_trim_threshold
00022ac4 g     F .text	00000038 exit
00020a14 g     F .text	000000ac setTimer
00025214 g     F .text	000000c4 _fwalk_reent
00020b78 g     F .text	00000074 .hidden __modsi3
000260d0 g     O .rodata	0000001c commands
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024ce0 g     F .text	00000004 __sfp_lock_release
00020868 g     F .text	0000008c lcdClear
00020000 g       *ABS*	00000000 __alt_mem_onchip_ram
00025a20 g     F .text	00000034 _exit
00021d3c g     F .text	0000012c alt_alarm_start
000252d8 g     F .text	000001bc __smakebuf_r
00024240 g     F .text	00000098 strlen
000224ac g     F .text	0000015c open
00022168 g     F .text	00000020 alt_icache_flush_all
00022b98 g     F .text	00000018 fputs
00027b7c g     O .rwdata	00000004 alt_priority_mask
00027b78 g     O .rwdata	00000001 lcdSema
00020d20 g     F .text	00000088 alt_ic_irq_enable
00027b98 g     O .rwdata	00000008 alt_alarm_list
000220a8 g     F .text	00000060 _do_ctors
00021ea4 g     F .text	000000d8 close
00020fd8 g     F .text	00000084 alt_load
00024ce4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a59e04 	addi	r2,r2,-27016
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a59e04 	addi	r2,r2,-27016
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe712c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6af17 	ldw	r2,-25924(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6af17 	ldw	r2,-25924(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2023c:	d6bede14 	ori	gp,gp,64376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a58914 	ori	r2,r2,38436

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e5de14 	ori	r3,r3,38776

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	0020fd80 	call	20fd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002105c0 	call	2105c <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7268>

0002026c <main>:
#include "hw.h"


int main(){
   2026c:	defffd04 	addi	sp,sp,-12
   20270:	dfc00215 	stw	ra,8(sp)
   20274:	df000115 	stw	fp,4(sp)
   20278:	df000104 	addi	fp,sp,4
	uint8_t switch_data;
	initTimers();
   2027c:	00208f40 	call	208f4 <initTimers>
	lcdInit();
   20280:	00206200 	call	20620 <lcdInit>

	alt_putstr("Ciao from Nios II!\n");
   20284:	010000b4 	movhi	r4,2
   20288:	21182f04 	addi	r4,r4,24764
   2028c:	00210d80 	call	210d8 <alt_putstr>

	setTimer(GAME_TIMER, 10000);
   20290:	0149c404 	movi	r5,10000
   20294:	01000044 	movi	r4,1
   20298:	0020a140 	call	20a14 <setTimer>
	startTimer(GAME_TIMER);
   2029c:	01000044 	movi	r4,1
   202a0:	00209540 	call	20954 <startTimer>

	while(1) {
		clearSema(GAME_TIMER);
   202a4:	01000044 	movi	r4,1
   202a8:	00202f40 	call	202f4 <clearSema>
		while(getSema(GAME_TIMER) == 0){};
   202ac:	0001883a 	nop
   202b0:	01000044 	movi	r4,1
   202b4:	002033c0 	call	2033c <getSema>
   202b8:	10803fcc 	andi	r2,r2,255
   202bc:	103ffc26 	beq	r2,zero,202b0 <__alt_data_end+0xfffe72b0>
		switch_data = readSwitch();
   202c0:	00204000 	call	20400 <readSwitch>
   202c4:	e0bfff05 	stb	r2,-4(fp)

		lcdClear();
   202c8:	00208680 	call	20868 <lcdClear>
		lcdSetAddr((~switch_data) & 0x01, 1);
   202cc:	e0bfff03 	ldbu	r2,-4(fp)
   202d0:	1080004c 	andi	r2,r2,1
   202d4:	1005003a 	cmpeq	r2,r2,zero
   202d8:	10803fcc 	andi	r2,r2,255
   202dc:	01400044 	movi	r5,1
   202e0:	1009883a 	mov	r4,r2
   202e4:	00206c40 	call	206c4 <lcdSetAddr>
		lcdWrite(0xF6);
   202e8:	01003d84 	movi	r4,246
   202ec:	00207a40 	call	207a4 <lcdWrite>
	}
   202f0:	003fec06 	br	202a4 <__alt_data_end+0xfffe72a4>

000202f4 <clearSema>:

uint8_t lcdSema = 1;
uint8_t gameSema = 1;


void clearSema(uint8_t timerNum){
   202f4:	defffe04 	addi	sp,sp,-8
   202f8:	df000115 	stw	fp,4(sp)
   202fc:	df000104 	addi	fp,sp,4
   20300:	2005883a 	mov	r2,r4
   20304:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20308:	e0bfff03 	ldbu	r2,-4(fp)
   2030c:	1000021e 	bne	r2,zero,20318 <clearSema+0x24>
		lcdSema = 0;
   20310:	d0200005 	stb	zero,-32768(gp)
	else if(timerNum == GAME_TIMER)
		gameSema = 0;
}
   20314:	00000406 	br	20328 <clearSema+0x34>


void clearSema(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		lcdSema = 0;
	else if(timerNum == GAME_TIMER)
   20318:	e0bfff03 	ldbu	r2,-4(fp)
   2031c:	10800058 	cmpnei	r2,r2,1
   20320:	1000011e 	bne	r2,zero,20328 <clearSema+0x34>
		gameSema = 0;
   20324:	d0200045 	stb	zero,-32767(gp)
}
   20328:	0001883a 	nop
   2032c:	e037883a 	mov	sp,fp
   20330:	df000017 	ldw	fp,0(sp)
   20334:	dec00104 	addi	sp,sp,4
   20338:	f800283a 	ret

0002033c <getSema>:


uint8_t getSema(uint8_t timerNum){
   2033c:	defffe04 	addi	sp,sp,-8
   20340:	df000115 	stw	fp,4(sp)
   20344:	df000104 	addi	fp,sp,4
   20348:	2005883a 	mov	r2,r4
   2034c:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20350:	e0bfff03 	ldbu	r2,-4(fp)
   20354:	1000021e 	bne	r2,zero,20360 <getSema+0x24>
		return lcdSema;
   20358:	d0a00003 	ldbu	r2,-32768(gp)
   2035c:	00000606 	br	20378 <getSema+0x3c>
	else if(timerNum == GAME_TIMER)
   20360:	e0bfff03 	ldbu	r2,-4(fp)
   20364:	10800058 	cmpnei	r2,r2,1
   20368:	1000021e 	bne	r2,zero,20374 <getSema+0x38>
		return gameSema;
   2036c:	d0a00043 	ldbu	r2,-32767(gp)
   20370:	00000106 	br	20378 <getSema+0x3c>
	else
		return 0;
   20374:	0005883a 	mov	r2,zero
}
   20378:	e037883a 	mov	sp,fp
   2037c:	df000017 	ldw	fp,0(sp)
   20380:	dec00104 	addi	sp,sp,4
   20384:	f800283a 	ret

00020388 <handleGameTimer>:


void handleGameTimer(void* isr_context){
   20388:	defffe04 	addi	sp,sp,-8
   2038c:	df000115 	stw	fp,4(sp)
   20390:	df000104 	addi	fp,sp,4
   20394:	e13fff15 	stw	r4,-4(fp)
	//alt_putstr("Hello from Timer_Game\n");
	gameSema = 1;
   20398:	00800044 	movi	r2,1
   2039c:	d0a00045 	stb	r2,-32767(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_GAME_BASE, 0);
   203a0:	0007883a 	mov	r3,zero
   203a4:	00800134 	movhi	r2,4
   203a8:	10840804 	addi	r2,r2,4128
   203ac:	10c00035 	stwio	r3,0(r2)
}
   203b0:	0001883a 	nop
   203b4:	e037883a 	mov	sp,fp
   203b8:	df000017 	ldw	fp,0(sp)
   203bc:	dec00104 	addi	sp,sp,4
   203c0:	f800283a 	ret

000203c4 <handleLCDTimer>:


void handleLCDTimer(void* context){
   203c4:	defffe04 	addi	sp,sp,-8
   203c8:	df000115 	stw	fp,4(sp)
   203cc:	df000104 	addi	fp,sp,4
   203d0:	e13fff15 	stw	r4,-4(fp)
	lcdSema = 1;
   203d4:	00800044 	movi	r2,1
   203d8:	d0a00005 	stb	r2,-32768(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_LCD_BASE, 0);
   203dc:	0007883a 	mov	r3,zero
   203e0:	00800134 	movhi	r2,4
   203e4:	10840004 	addi	r2,r2,4096
   203e8:	10c00035 	stwio	r3,0(r2)
}
   203ec:	0001883a 	nop
   203f0:	e037883a 	mov	sp,fp
   203f4:	df000017 	ldw	fp,0(sp)
   203f8:	dec00104 	addi	sp,sp,4
   203fc:	f800283a 	ret

00020400 <readSwitch>:


uint8_t readSwitch(void){
   20400:	deffff04 	addi	sp,sp,-4
   20404:	df000015 	stw	fp,0(sp)
   20408:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   2040c:	00800134 	movhi	r2,4
   20410:	10842004 	addi	r2,r2,4224
   20414:	10800037 	ldwio	r2,0(r2)
}
   20418:	e037883a 	mov	sp,fp
   2041c:	df000017 	ldw	fp,0(sp)
   20420:	dec00104 	addi	sp,sp,4
   20424:	f800283a 	ret

00020428 <readKey>:

uint8_t readKey(void){
   20428:	deffff04 	addi	sp,sp,-4
   2042c:	df000015 	stw	fp,0(sp)
   20430:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
   20434:	00800134 	movhi	r2,4
   20438:	10841804 	addi	r2,r2,4192
   2043c:	10800037 	ldwio	r2,0(r2)
}
   20440:	e037883a 	mov	sp,fp
   20444:	df000017 	ldw	fp,0(sp)
   20448:	dec00104 	addi	sp,sp,4
   2044c:	f800283a 	ret

00020450 <setLEDs>:


void setLEDs(uint8_t led_pattern){
   20450:	defffe04 	addi	sp,sp,-8
   20454:	df000115 	stw	fp,4(sp)
   20458:	df000104 	addi	fp,sp,4
   2045c:	2005883a 	mov	r2,r4
   20460:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (led_pattern&0x0F));
   20464:	e0bfff03 	ldbu	r2,-4(fp)
   20468:	10c003cc 	andi	r3,r2,15
   2046c:	00800134 	movhi	r2,4
   20470:	10841c04 	addi	r2,r2,4208
   20474:	10c00035 	stwio	r3,0(r2)
}
   20478:	0001883a 	nop
   2047c:	e037883a 	mov	sp,fp
   20480:	df000017 	ldw	fp,0(sp)
   20484:	dec00104 	addi	sp,sp,4
   20488:	f800283a 	ret

0002048c <setSevenSeg>:


void setSevenSeg(uint32_t num){
   2048c:	defff804 	addi	sp,sp,-32
   20490:	dfc00715 	stw	ra,28(sp)
   20494:	df000615 	stw	fp,24(sp)
   20498:	df000604 	addi	fp,sp,24
   2049c:	e13fff15 	stw	r4,-4(fp)
	int ones, tens, hundreds, thousands;

	ones = num % 10;
   204a0:	e0bfff17 	ldw	r2,-4(fp)
   204a4:	01400284 	movi	r5,10
   204a8:	1009883a 	mov	r4,r2
   204ac:	0020c500 	call	20c50 <__umodsi3>
   204b0:	e0bffb15 	stw	r2,-20(fp)
	tens = (num/10) % 10;
   204b4:	e0bfff17 	ldw	r2,-4(fp)
   204b8:	01400284 	movi	r5,10
   204bc:	1009883a 	mov	r4,r2
   204c0:	0020bec0 	call	20bec <__udivsi3>
   204c4:	01400284 	movi	r5,10
   204c8:	1009883a 	mov	r4,r2
   204cc:	0020c500 	call	20c50 <__umodsi3>
   204d0:	e0bffc15 	stw	r2,-16(fp)
	hundreds = (num/100) % 10;
   204d4:	e0bfff17 	ldw	r2,-4(fp)
   204d8:	01401904 	movi	r5,100
   204dc:	1009883a 	mov	r4,r2
   204e0:	0020bec0 	call	20bec <__udivsi3>
   204e4:	01400284 	movi	r5,10
   204e8:	1009883a 	mov	r4,r2
   204ec:	0020c500 	call	20c50 <__umodsi3>
   204f0:	e0bffd15 	stw	r2,-12(fp)
	thousands = (num/1000) % 10;
   204f4:	e0bfff17 	ldw	r2,-4(fp)
   204f8:	0140fa04 	movi	r5,1000
   204fc:	1009883a 	mov	r4,r2
   20500:	0020bec0 	call	20bec <__udivsi3>
   20504:	01400284 	movi	r5,10
   20508:	1009883a 	mov	r4,r2
   2050c:	0020c500 	call	20c50 <__umodsi3>
   20510:	e0bffe15 	stw	r2,-8(fp)

	uint32_t hex_data = 0xFFFFFFFF;
   20514:	00bfffc4 	movi	r2,-1
   20518:	e0bffa15 	stw	r2,-24(fp)
	if(num > 999)
   2051c:	e0bfff17 	ldw	r2,-4(fp)
   20520:	1080fa30 	cmpltui	r2,r2,1000
   20524:	10000a1e 	bne	r2,zero,20550 <setSevenSeg+0xc4>
		hex_data &= HexArray[thousands];
   20528:	008000b4 	movhi	r2,2
   2052c:	10983b04 	addi	r2,r2,24812
   20530:	e0fffe17 	ldw	r3,-8(fp)
   20534:	18c7883a 	add	r3,r3,r3
   20538:	18c7883a 	add	r3,r3,r3
   2053c:	10c5883a 	add	r2,r2,r3
   20540:	10800017 	ldw	r2,0(r2)
   20544:	e0fffa17 	ldw	r3,-24(fp)
   20548:	1884703a 	and	r2,r3,r2
   2054c:	e0bffa15 	stw	r2,-24(fp)
	if(num > 99)
   20550:	e0bfff17 	ldw	r2,-4(fp)
   20554:	10801930 	cmpltui	r2,r2,100
   20558:	10000c1e 	bne	r2,zero,2058c <setSevenSeg+0x100>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[hundreds]);
   2055c:	e0bffa17 	ldw	r2,-24(fp)
   20560:	100491fa 	slli	r2,r2,7
   20564:	11001fd4 	ori	r4,r2,127
   20568:	008000b4 	movhi	r2,2
   2056c:	10983b04 	addi	r2,r2,24812
   20570:	e0fffd17 	ldw	r3,-12(fp)
   20574:	18c7883a 	add	r3,r3,r3
   20578:	18c7883a 	add	r3,r3,r3
   2057c:	10c5883a 	add	r2,r2,r3
   20580:	10800017 	ldw	r2,0(r2)
   20584:	2084703a 	and	r2,r4,r2
   20588:	e0bffa15 	stw	r2,-24(fp)
	if(num > 9)
   2058c:	e0bfff17 	ldw	r2,-4(fp)
   20590:	108002b0 	cmpltui	r2,r2,10
   20594:	10000c1e 	bne	r2,zero,205c8 <setSevenSeg+0x13c>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[tens]);
   20598:	e0bffa17 	ldw	r2,-24(fp)
   2059c:	100491fa 	slli	r2,r2,7
   205a0:	11001fd4 	ori	r4,r2,127
   205a4:	008000b4 	movhi	r2,2
   205a8:	10983b04 	addi	r2,r2,24812
   205ac:	e0fffc17 	ldw	r3,-16(fp)
   205b0:	18c7883a 	add	r3,r3,r3
   205b4:	18c7883a 	add	r3,r3,r3
   205b8:	10c5883a 	add	r2,r2,r3
   205bc:	10800017 	ldw	r2,0(r2)
   205c0:	2084703a 	and	r2,r4,r2
   205c4:	e0bffa15 	stw	r2,-24(fp)

	hex_data = (((hex_data << 7) | 0x7F) & HexArray[ones]);
   205c8:	e0bffa17 	ldw	r2,-24(fp)
   205cc:	100491fa 	slli	r2,r2,7
   205d0:	11001fd4 	ori	r4,r2,127
   205d4:	008000b4 	movhi	r2,2
   205d8:	10983b04 	addi	r2,r2,24812
   205dc:	e0fffb17 	ldw	r3,-20(fp)
   205e0:	18c7883a 	add	r3,r3,r3
   205e4:	18c7883a 	add	r3,r3,r3
   205e8:	10c5883a 	add	r2,r2,r3
   205ec:	10800017 	ldw	r2,0(r2)
   205f0:	2084703a 	and	r2,r4,r2
   205f4:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, hex_data);
   205f8:	e0fffa17 	ldw	r3,-24(fp)
   205fc:	00800134 	movhi	r2,4
   20600:	10841404 	addi	r2,r2,4176
   20604:	10c00035 	stwio	r3,0(r2)
}
   20608:	0001883a 	nop
   2060c:	e037883a 	mov	sp,fp
   20610:	dfc00117 	ldw	ra,4(sp)
   20614:	df000017 	ldw	fp,0(sp)
   20618:	dec00204 	addi	sp,sp,8
   2061c:	f800283a 	ret

00020620 <lcdInit>:


// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
   20620:	defffd04 	addi	sp,sp,-12
   20624:	dfc00215 	stw	ra,8(sp)
   20628:	df000115 	stw	fp,4(sp)
   2062c:	df000104 	addi	fp,sp,4
	setTimer(LCD_TIMER,5000);
   20630:	0144e204 	movi	r5,5000
   20634:	0009883a 	mov	r4,zero
   20638:	0020a140 	call	20a14 <setTimer>
	startTimer(LCD_TIMER);
   2063c:	0009883a 	mov	r4,zero
   20640:	00209540 	call	20954 <startTimer>

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   20644:	e03fff15 	stw	zero,-4(fp)
   20648:	00001306 	br	20698 <lcdInit+0x78>
		while(lcdSema == 0){};
   2064c:	0001883a 	nop
   20650:	d0a00003 	ldbu	r2,-32768(gp)
   20654:	10803fcc 	andi	r2,r2,255
   20658:	103ffd26 	beq	r2,zero,20650 <__alt_data_end+0xfffe7650>
		lcdSema = 0;
   2065c:	d0200005 	stb	zero,-32768(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
   20660:	008000b4 	movhi	r2,2
   20664:	10983404 	addi	r2,r2,24784
   20668:	e0ffff17 	ldw	r3,-4(fp)
   2066c:	18c7883a 	add	r3,r3,r3
   20670:	10c5883a 	add	r2,r2,r3
   20674:	1080000b 	ldhu	r2,0(r2)
   20678:	10bfffcc 	andi	r2,r2,65535
   2067c:	10c3ffcc 	andi	r3,r2,4095
   20680:	00800134 	movhi	r2,4
   20684:	10841004 	addi	r2,r2,4160
   20688:	10c00035 	stwio	r3,0(r2)
// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
	setTimer(LCD_TIMER,5000);
	startTimer(LCD_TIMER);

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   2068c:	e0bfff17 	ldw	r2,-4(fp)
   20690:	10800044 	addi	r2,r2,1
   20694:	e0bfff15 	stw	r2,-4(fp)
   20698:	e0bfff17 	ldw	r2,-4(fp)
   2069c:	10800390 	cmplti	r2,r2,14
   206a0:	103fea1e 	bne	r2,zero,2064c <__alt_data_end+0xfffe764c>
		while(lcdSema == 0){};
		lcdSema = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
	}

	stopTimer(LCD_TIMER);
   206a4:	0009883a 	mov	r4,zero
   206a8:	00209b40 	call	209b4 <stopTimer>
}
   206ac:	0001883a 	nop
   206b0:	e037883a 	mov	sp,fp
   206b4:	dfc00117 	ldw	ra,4(sp)
   206b8:	df000017 	ldw	fp,0(sp)
   206bc:	dec00204 	addi	sp,sp,8
   206c0:	f800283a 	ret

000206c4 <lcdSetAddr>:


void lcdSetAddr(uint8_t row, uint8_t col){
   206c4:	defffb04 	addi	sp,sp,-20
   206c8:	dfc00415 	stw	ra,16(sp)
   206cc:	df000315 	stw	fp,12(sp)
   206d0:	df000304 	addi	fp,sp,12
   206d4:	2007883a 	mov	r3,r4
   206d8:	2805883a 	mov	r2,r5
   206dc:	e0fffe05 	stb	r3,-8(fp)
   206e0:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   206e4:	e03ffd0d 	sth	zero,-12(fp)
	lcdData = row * 0x40 + col;
   206e8:	e0bffe03 	ldbu	r2,-8(fp)
   206ec:	100491ba 	slli	r2,r2,6
   206f0:	1007883a 	mov	r3,r2
   206f4:	e0bfff03 	ldbu	r2,-4(fp)
   206f8:	1885883a 	add	r2,r3,r2
   206fc:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x80;
   20700:	e0bffd0b 	ldhu	r2,-12(fp)
   20704:	10802014 	ori	r2,r2,128
   20708:	e0bffd0d 	sth	r2,-12(fp)
	lcdData |= 0x9 << 8;
   2070c:	e0bffd0b 	ldhu	r2,-12(fp)
   20710:	10824014 	ori	r2,r2,2304
   20714:	e0bffd0d 	sth	r2,-12(fp)

	lcdSema = 0;
   20718:	d0200005 	stb	zero,-32768(gp)

	setTimer(LCD_TIMER, 1000);
   2071c:	0140fa04 	movi	r5,1000
   20720:	0009883a 	mov	r4,zero
   20724:	0020a140 	call	20a14 <setTimer>
	startTimer(LCD_TIMER);
   20728:	0009883a 	mov	r4,zero
   2072c:	00209540 	call	20954 <startTimer>

	while(lcdSema == 0){};
   20730:	0001883a 	nop
   20734:	d0a00003 	ldbu	r2,-32768(gp)
   20738:	10803fcc 	andi	r2,r2,255
   2073c:	103ffd26 	beq	r2,zero,20734 <__alt_data_end+0xfffe7734>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   20740:	e0fffd0b 	ldhu	r3,-12(fp)
   20744:	00800134 	movhi	r2,4
   20748:	10841004 	addi	r2,r2,4160
   2074c:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   20750:	e0fffd0b 	ldhu	r3,-12(fp)
   20754:	00bdffc4 	movi	r2,-2049
   20758:	1884703a 	and	r2,r3,r2
   2075c:	e0bffd0d 	sth	r2,-12(fp)
	lcdSema = 0;
   20760:	d0200005 	stb	zero,-32768(gp)
	while(lcdSema == 0){};
   20764:	0001883a 	nop
   20768:	d0a00003 	ldbu	r2,-32768(gp)
   2076c:	10803fcc 	andi	r2,r2,255
   20770:	103ffd26 	beq	r2,zero,20768 <__alt_data_end+0xfffe7768>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   20774:	e0fffd0b 	ldhu	r3,-12(fp)
   20778:	00800134 	movhi	r2,4
   2077c:	10841004 	addi	r2,r2,4160
   20780:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   20784:	0009883a 	mov	r4,zero
   20788:	00209b40 	call	209b4 <stopTimer>
}
   2078c:	0001883a 	nop
   20790:	e037883a 	mov	sp,fp
   20794:	dfc00117 	ldw	ra,4(sp)
   20798:	df000017 	ldw	fp,0(sp)
   2079c:	dec00204 	addi	sp,sp,8
   207a0:	f800283a 	ret

000207a4 <lcdWrite>:


void lcdWrite(uint8_t data){
   207a4:	defffc04 	addi	sp,sp,-16
   207a8:	dfc00315 	stw	ra,12(sp)
   207ac:	df000215 	stw	fp,8(sp)
   207b0:	df000204 	addi	fp,sp,8
   207b4:	2005883a 	mov	r2,r4
   207b8:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   207bc:	e03ffe0d 	sth	zero,-8(fp)
	lcdData |= data;
   207c0:	e0ffff03 	ldbu	r3,-4(fp)
   207c4:	e0bffe0b 	ldhu	r2,-8(fp)
   207c8:	1884b03a 	or	r2,r3,r2
   207cc:	e0bffe0d 	sth	r2,-8(fp)
	lcdData |= 0xB << 8;
   207d0:	e0bffe0b 	ldhu	r2,-8(fp)
   207d4:	1082c014 	ori	r2,r2,2816
   207d8:	e0bffe0d 	sth	r2,-8(fp)

	lcdSema = 0;
   207dc:	d0200005 	stb	zero,-32768(gp)

	setTimer(LCD_TIMER, 1000);
   207e0:	0140fa04 	movi	r5,1000
   207e4:	0009883a 	mov	r4,zero
   207e8:	0020a140 	call	20a14 <setTimer>
	startTimer(LCD_TIMER);
   207ec:	0009883a 	mov	r4,zero
   207f0:	00209540 	call	20954 <startTimer>
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	while(lcdSema == 0){};
   207f4:	0001883a 	nop
   207f8:	d0a00003 	ldbu	r2,-32768(gp)
   207fc:	10803fcc 	andi	r2,r2,255
   20800:	103ffd26 	beq	r2,zero,207f8 <__alt_data_end+0xfffe77f8>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   20804:	e0fffe0b 	ldhu	r3,-8(fp)
   20808:	00800134 	movhi	r2,4
   2080c:	10841004 	addi	r2,r2,4160
   20810:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   20814:	e0fffe0b 	ldhu	r3,-8(fp)
   20818:	00bdffc4 	movi	r2,-2049
   2081c:	1884703a 	and	r2,r3,r2
   20820:	e0bffe0d 	sth	r2,-8(fp)
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	lcdSema = 0;
   20824:	d0200005 	stb	zero,-32768(gp)
	while(lcdSema == 0){};
   20828:	0001883a 	nop
   2082c:	d0a00003 	ldbu	r2,-32768(gp)
   20830:	10803fcc 	andi	r2,r2,255
   20834:	103ffd26 	beq	r2,zero,2082c <__alt_data_end+0xfffe782c>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   20838:	e0fffe0b 	ldhu	r3,-8(fp)
   2083c:	00800134 	movhi	r2,4
   20840:	10841004 	addi	r2,r2,4160
   20844:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   20848:	0009883a 	mov	r4,zero
   2084c:	00209b40 	call	209b4 <stopTimer>
}
   20850:	0001883a 	nop
   20854:	e037883a 	mov	sp,fp
   20858:	dfc00117 	ldw	ra,4(sp)
   2085c:	df000017 	ldw	fp,0(sp)
   20860:	dec00204 	addi	sp,sp,8
   20864:	f800283a 	ret

00020868 <lcdClear>:


void lcdClear(){
   20868:	defffe04 	addi	sp,sp,-8
   2086c:	dfc00115 	stw	ra,4(sp)
   20870:	df000015 	stw	fp,0(sp)
   20874:	d839883a 	mov	fp,sp
	lcdSema = 0;
   20878:	d0200005 	stb	zero,-32768(gp)

	setTimer(LCD_TIMER, 1520);
   2087c:	01417c04 	movi	r5,1520
   20880:	0009883a 	mov	r4,zero
   20884:	0020a140 	call	20a14 <setTimer>
	startTimer(LCD_TIMER);
   20888:	0009883a 	mov	r4,zero
   2088c:	00209540 	call	20954 <startTimer>

	while(lcdSema == 0){};
   20890:	0001883a 	nop
   20894:	d0a00003 	ldbu	r2,-32768(gp)
   20898:	10803fcc 	andi	r2,r2,255
   2089c:	103ffd26 	beq	r2,zero,20894 <__alt_data_end+0xfffe7894>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x801);
   208a0:	00c20044 	movi	r3,2049
   208a4:	00800134 	movhi	r2,4
   208a8:	10841004 	addi	r2,r2,4160
   208ac:	10c00035 	stwio	r3,0(r2)

	lcdSema = 0;
   208b0:	d0200005 	stb	zero,-32768(gp)
	while(lcdSema == 0){};
   208b4:	0001883a 	nop
   208b8:	d0a00003 	ldbu	r2,-32768(gp)
   208bc:	10803fcc 	andi	r2,r2,255
   208c0:	103ffd26 	beq	r2,zero,208b8 <__alt_data_end+0xfffe78b8>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x001);
   208c4:	00c00044 	movi	r3,1
   208c8:	00800134 	movhi	r2,4
   208cc:	10841004 	addi	r2,r2,4160
   208d0:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   208d4:	0009883a 	mov	r4,zero
   208d8:	00209b40 	call	209b4 <stopTimer>
}
   208dc:	0001883a 	nop
   208e0:	e037883a 	mov	sp,fp
   208e4:	dfc00117 	ldw	ra,4(sp)
   208e8:	df000017 	ldw	fp,0(sp)
   208ec:	dec00204 	addi	sp,sp,8
   208f0:	f800283a 	ret

000208f4 <initTimers>:


void initTimers(void){
   208f4:	defffd04 	addi	sp,sp,-12
   208f8:	dfc00215 	stw	ra,8(sp)
   208fc:	df000115 	stw	fp,4(sp)
   20900:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(TIMER_GAME_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_GAME_IRQ, &handleGameTimer, NULL, NULL);
   20904:	d8000015 	stw	zero,0(sp)
   20908:	000f883a 	mov	r7,zero
   2090c:	018000b4 	movhi	r6,2
   20910:	3180e204 	addi	r6,r6,904
   20914:	01400044 	movi	r5,1
   20918:	0009883a 	mov	r4,zero
   2091c:	0020cd00 	call	20cd0 <alt_ic_isr_register>
	alt_ic_isr_register(TIMER_LCD_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_LCD_IRQ, &handleLCDTimer, NULL, NULL);
   20920:	d8000015 	stw	zero,0(sp)
   20924:	000f883a 	mov	r7,zero
   20928:	018000b4 	movhi	r6,2
   2092c:	3180f104 	addi	r6,r6,964
   20930:	01400084 	movi	r5,2
   20934:	0009883a 	mov	r4,zero
   20938:	0020cd00 	call	20cd0 <alt_ic_isr_register>
}
   2093c:	0001883a 	nop
   20940:	e037883a 	mov	sp,fp
   20944:	dfc00117 	ldw	ra,4(sp)
   20948:	df000017 	ldw	fp,0(sp)
   2094c:	dec00204 	addi	sp,sp,8
   20950:	f800283a 	ret

00020954 <startTimer>:


void startTimer(uint8_t timerNum){
   20954:	defffe04 	addi	sp,sp,-8
   20958:	df000115 	stw	fp,4(sp)
   2095c:	df000104 	addi	fp,sp,4
   20960:	2005883a 	mov	r2,r4
   20964:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20968:	e0bfff03 	ldbu	r2,-4(fp)
   2096c:	1000051e 	bne	r2,zero,20984 <startTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
   20970:	00c001c4 	movi	r3,7
   20974:	00800134 	movhi	r2,4
   20978:	10840104 	addi	r2,r2,4100
   2097c:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
}
   20980:	00000706 	br	209a0 <startTimer+0x4c>


void startTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
	else if(timerNum == GAME_TIMER)
   20984:	e0bfff03 	ldbu	r2,-4(fp)
   20988:	10800058 	cmpnei	r2,r2,1
   2098c:	1000041e 	bne	r2,zero,209a0 <startTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
   20990:	00c001c4 	movi	r3,7
   20994:	00800134 	movhi	r2,4
   20998:	10840904 	addi	r2,r2,4132
   2099c:	10c00035 	stwio	r3,0(r2)
}
   209a0:	0001883a 	nop
   209a4:	e037883a 	mov	sp,fp
   209a8:	df000017 	ldw	fp,0(sp)
   209ac:	dec00104 	addi	sp,sp,4
   209b0:	f800283a 	ret

000209b4 <stopTimer>:


void stopTimer(uint8_t timerNum){
   209b4:	defffe04 	addi	sp,sp,-8
   209b8:	df000115 	stw	fp,4(sp)
   209bc:	df000104 	addi	fp,sp,4
   209c0:	2005883a 	mov	r2,r4
   209c4:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   209c8:	e0bfff03 	ldbu	r2,-4(fp)
   209cc:	1000051e 	bne	r2,zero,209e4 <stopTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
   209d0:	00c002c4 	movi	r3,11
   209d4:	00800134 	movhi	r2,4
   209d8:	10840104 	addi	r2,r2,4100
   209dc:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);

}
   209e0:	00000706 	br	20a00 <stopTimer+0x4c>


void stopTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
	else if(timerNum == GAME_TIMER)
   209e4:	e0bfff03 	ldbu	r2,-4(fp)
   209e8:	10800058 	cmpnei	r2,r2,1
   209ec:	1000041e 	bne	r2,zero,20a00 <stopTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);
   209f0:	00c002c4 	movi	r3,11
   209f4:	00800134 	movhi	r2,4
   209f8:	10840904 	addi	r2,r2,4132
   209fc:	10c00035 	stwio	r3,0(r2)

}
   20a00:	0001883a 	nop
   20a04:	e037883a 	mov	sp,fp
   20a08:	df000017 	ldw	fp,0(sp)
   20a0c:	dec00104 	addi	sp,sp,4
   20a10:	f800283a 	ret

00020a14 <setTimer>:


void setTimer(uint8_t timerNum, uint32_t microsec){
   20a14:	defffa04 	addi	sp,sp,-24
   20a18:	dfc00515 	stw	ra,20(sp)
   20a1c:	df000415 	stw	fp,16(sp)
   20a20:	df000404 	addi	fp,sp,16
   20a24:	2005883a 	mov	r2,r4
   20a28:	e17fff15 	stw	r5,-4(fp)
   20a2c:	e0bffe05 	stb	r2,-8(fp)
	uint32_t cycles = millisToClock(microsec);
   20a30:	e13fff17 	ldw	r4,-4(fp)
   20a34:	0020ac00 	call	20ac0 <millisToClock>
   20a38:	e0bffc15 	stw	r2,-16(fp)

	uint16_t lower = (uint16_t)(cycles&0x0000FFFF);
   20a3c:	e0bffc17 	ldw	r2,-16(fp)
   20a40:	e0bffd0d 	sth	r2,-12(fp)
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);
   20a44:	e0bffc17 	ldw	r2,-16(fp)
   20a48:	1004d43a 	srli	r2,r2,16
   20a4c:	e0bffd8d 	sth	r2,-10(fp)

	if(timerNum == LCD_TIMER){
   20a50:	e0bffe03 	ldbu	r2,-8(fp)
   20a54:	1000091e 	bne	r2,zero,20a7c <setTimer+0x68>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
   20a58:	e0fffd0b 	ldhu	r3,-12(fp)
   20a5c:	00800134 	movhi	r2,4
   20a60:	10840204 	addi	r2,r2,4104
   20a64:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
   20a68:	e0fffd8b 	ldhu	r3,-10(fp)
   20a6c:	00800134 	movhi	r2,4
   20a70:	10840304 	addi	r2,r2,4108
   20a74:	10c00035 	stwio	r3,0(r2)
	}else if(timerNum == GAME_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
	}
}
   20a78:	00000b06 	br	20aa8 <setTimer+0x94>
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);

	if(timerNum == LCD_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
	}else if(timerNum == GAME_TIMER){
   20a7c:	e0bffe03 	ldbu	r2,-8(fp)
   20a80:	10800058 	cmpnei	r2,r2,1
   20a84:	1000081e 	bne	r2,zero,20aa8 <setTimer+0x94>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
   20a88:	e0fffd0b 	ldhu	r3,-12(fp)
   20a8c:	00800134 	movhi	r2,4
   20a90:	10840a04 	addi	r2,r2,4136
   20a94:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
   20a98:	e0fffd8b 	ldhu	r3,-10(fp)
   20a9c:	00800134 	movhi	r2,4
   20aa0:	10840b04 	addi	r2,r2,4140
   20aa4:	10c00035 	stwio	r3,0(r2)
	}
}
   20aa8:	0001883a 	nop
   20aac:	e037883a 	mov	sp,fp
   20ab0:	dfc00117 	ldw	ra,4(sp)
   20ab4:	df000017 	ldw	fp,0(sp)
   20ab8:	dec00204 	addi	sp,sp,8
   20abc:	f800283a 	ret

00020ac0 <millisToClock>:


uint32_t millisToClock(uint32_t microsec){
   20ac0:	defffd04 	addi	sp,sp,-12
   20ac4:	dfc00215 	stw	ra,8(sp)
   20ac8:	df000115 	stw	fp,4(sp)
   20acc:	df000104 	addi	fp,sp,4
   20ad0:	e13fff15 	stw	r4,-4(fp)
	return CLOCK_FREQ / 1000000 * microsec;
   20ad4:	01400c84 	movi	r5,50
   20ad8:	e13fff17 	ldw	r4,-4(fp)
   20adc:	0020ca80 	call	20ca8 <__mulsi3>
}
   20ae0:	e037883a 	mov	sp,fp
   20ae4:	dfc00117 	ldw	ra,4(sp)
   20ae8:	df000017 	ldw	fp,0(sp)
   20aec:	dec00204 	addi	sp,sp,8
   20af0:	f800283a 	ret

00020af4 <__divsi3>:
   20af4:	20001b16 	blt	r4,zero,20b64 <__divsi3+0x70>
   20af8:	000f883a 	mov	r7,zero
   20afc:	28001616 	blt	r5,zero,20b58 <__divsi3+0x64>
   20b00:	200d883a 	mov	r6,r4
   20b04:	29001a2e 	bgeu	r5,r4,20b70 <__divsi3+0x7c>
   20b08:	00800804 	movi	r2,32
   20b0c:	00c00044 	movi	r3,1
   20b10:	00000106 	br	20b18 <__divsi3+0x24>
   20b14:	10000d26 	beq	r2,zero,20b4c <__divsi3+0x58>
   20b18:	294b883a 	add	r5,r5,r5
   20b1c:	10bfffc4 	addi	r2,r2,-1
   20b20:	18c7883a 	add	r3,r3,r3
   20b24:	293ffb36 	bltu	r5,r4,20b14 <__alt_data_end+0xfffe7b14>
   20b28:	0005883a 	mov	r2,zero
   20b2c:	18000726 	beq	r3,zero,20b4c <__divsi3+0x58>
   20b30:	0005883a 	mov	r2,zero
   20b34:	31400236 	bltu	r6,r5,20b40 <__divsi3+0x4c>
   20b38:	314dc83a 	sub	r6,r6,r5
   20b3c:	10c4b03a 	or	r2,r2,r3
   20b40:	1806d07a 	srli	r3,r3,1
   20b44:	280ad07a 	srli	r5,r5,1
   20b48:	183ffa1e 	bne	r3,zero,20b34 <__alt_data_end+0xfffe7b34>
   20b4c:	38000126 	beq	r7,zero,20b54 <__divsi3+0x60>
   20b50:	0085c83a 	sub	r2,zero,r2
   20b54:	f800283a 	ret
   20b58:	014bc83a 	sub	r5,zero,r5
   20b5c:	39c0005c 	xori	r7,r7,1
   20b60:	003fe706 	br	20b00 <__alt_data_end+0xfffe7b00>
   20b64:	0109c83a 	sub	r4,zero,r4
   20b68:	01c00044 	movi	r7,1
   20b6c:	003fe306 	br	20afc <__alt_data_end+0xfffe7afc>
   20b70:	00c00044 	movi	r3,1
   20b74:	003fee06 	br	20b30 <__alt_data_end+0xfffe7b30>

00020b78 <__modsi3>:
   20b78:	20001716 	blt	r4,zero,20bd8 <__modsi3+0x60>
   20b7c:	000f883a 	mov	r7,zero
   20b80:	2005883a 	mov	r2,r4
   20b84:	28001216 	blt	r5,zero,20bd0 <__modsi3+0x58>
   20b88:	2900162e 	bgeu	r5,r4,20be4 <__modsi3+0x6c>
   20b8c:	01800804 	movi	r6,32
   20b90:	00c00044 	movi	r3,1
   20b94:	00000106 	br	20b9c <__modsi3+0x24>
   20b98:	30000a26 	beq	r6,zero,20bc4 <__modsi3+0x4c>
   20b9c:	294b883a 	add	r5,r5,r5
   20ba0:	31bfffc4 	addi	r6,r6,-1
   20ba4:	18c7883a 	add	r3,r3,r3
   20ba8:	293ffb36 	bltu	r5,r4,20b98 <__alt_data_end+0xfffe7b98>
   20bac:	18000526 	beq	r3,zero,20bc4 <__modsi3+0x4c>
   20bb0:	1806d07a 	srli	r3,r3,1
   20bb4:	11400136 	bltu	r2,r5,20bbc <__modsi3+0x44>
   20bb8:	1145c83a 	sub	r2,r2,r5
   20bbc:	280ad07a 	srli	r5,r5,1
   20bc0:	183ffb1e 	bne	r3,zero,20bb0 <__alt_data_end+0xfffe7bb0>
   20bc4:	38000126 	beq	r7,zero,20bcc <__modsi3+0x54>
   20bc8:	0085c83a 	sub	r2,zero,r2
   20bcc:	f800283a 	ret
   20bd0:	014bc83a 	sub	r5,zero,r5
   20bd4:	003fec06 	br	20b88 <__alt_data_end+0xfffe7b88>
   20bd8:	0109c83a 	sub	r4,zero,r4
   20bdc:	01c00044 	movi	r7,1
   20be0:	003fe706 	br	20b80 <__alt_data_end+0xfffe7b80>
   20be4:	00c00044 	movi	r3,1
   20be8:	003ff106 	br	20bb0 <__alt_data_end+0xfffe7bb0>

00020bec <__udivsi3>:
   20bec:	200d883a 	mov	r6,r4
   20bf0:	2900152e 	bgeu	r5,r4,20c48 <__udivsi3+0x5c>
   20bf4:	28001416 	blt	r5,zero,20c48 <__udivsi3+0x5c>
   20bf8:	00800804 	movi	r2,32
   20bfc:	00c00044 	movi	r3,1
   20c00:	00000206 	br	20c0c <__udivsi3+0x20>
   20c04:	10000e26 	beq	r2,zero,20c40 <__udivsi3+0x54>
   20c08:	28000516 	blt	r5,zero,20c20 <__udivsi3+0x34>
   20c0c:	294b883a 	add	r5,r5,r5
   20c10:	10bfffc4 	addi	r2,r2,-1
   20c14:	18c7883a 	add	r3,r3,r3
   20c18:	293ffa36 	bltu	r5,r4,20c04 <__alt_data_end+0xfffe7c04>
   20c1c:	18000826 	beq	r3,zero,20c40 <__udivsi3+0x54>
   20c20:	0005883a 	mov	r2,zero
   20c24:	31400236 	bltu	r6,r5,20c30 <__udivsi3+0x44>
   20c28:	314dc83a 	sub	r6,r6,r5
   20c2c:	10c4b03a 	or	r2,r2,r3
   20c30:	1806d07a 	srli	r3,r3,1
   20c34:	280ad07a 	srli	r5,r5,1
   20c38:	183ffa1e 	bne	r3,zero,20c24 <__alt_data_end+0xfffe7c24>
   20c3c:	f800283a 	ret
   20c40:	0005883a 	mov	r2,zero
   20c44:	f800283a 	ret
   20c48:	00c00044 	movi	r3,1
   20c4c:	003ff406 	br	20c20 <__alt_data_end+0xfffe7c20>

00020c50 <__umodsi3>:
   20c50:	2005883a 	mov	r2,r4
   20c54:	2900122e 	bgeu	r5,r4,20ca0 <__umodsi3+0x50>
   20c58:	28001116 	blt	r5,zero,20ca0 <__umodsi3+0x50>
   20c5c:	01800804 	movi	r6,32
   20c60:	00c00044 	movi	r3,1
   20c64:	00000206 	br	20c70 <__umodsi3+0x20>
   20c68:	30000c26 	beq	r6,zero,20c9c <__umodsi3+0x4c>
   20c6c:	28000516 	blt	r5,zero,20c84 <__umodsi3+0x34>
   20c70:	294b883a 	add	r5,r5,r5
   20c74:	31bfffc4 	addi	r6,r6,-1
   20c78:	18c7883a 	add	r3,r3,r3
   20c7c:	293ffa36 	bltu	r5,r4,20c68 <__alt_data_end+0xfffe7c68>
   20c80:	18000626 	beq	r3,zero,20c9c <__umodsi3+0x4c>
   20c84:	1806d07a 	srli	r3,r3,1
   20c88:	11400136 	bltu	r2,r5,20c90 <__umodsi3+0x40>
   20c8c:	1145c83a 	sub	r2,r2,r5
   20c90:	280ad07a 	srli	r5,r5,1
   20c94:	183ffb1e 	bne	r3,zero,20c84 <__alt_data_end+0xfffe7c84>
   20c98:	f800283a 	ret
   20c9c:	f800283a 	ret
   20ca0:	00c00044 	movi	r3,1
   20ca4:	003ff706 	br	20c84 <__alt_data_end+0xfffe7c84>

00020ca8 <__mulsi3>:
   20ca8:	0005883a 	mov	r2,zero
   20cac:	20000726 	beq	r4,zero,20ccc <__mulsi3+0x24>
   20cb0:	20c0004c 	andi	r3,r4,1
   20cb4:	2008d07a 	srli	r4,r4,1
   20cb8:	18000126 	beq	r3,zero,20cc0 <__mulsi3+0x18>
   20cbc:	1145883a 	add	r2,r2,r5
   20cc0:	294b883a 	add	r5,r5,r5
   20cc4:	203ffa1e 	bne	r4,zero,20cb0 <__alt_data_end+0xfffe7cb0>
   20cc8:	f800283a 	ret
   20ccc:	f800283a 	ret

00020cd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20cd0:	defff904 	addi	sp,sp,-28
   20cd4:	dfc00615 	stw	ra,24(sp)
   20cd8:	df000515 	stw	fp,20(sp)
   20cdc:	df000504 	addi	fp,sp,20
   20ce0:	e13ffc15 	stw	r4,-16(fp)
   20ce4:	e17ffd15 	stw	r5,-12(fp)
   20ce8:	e1bffe15 	stw	r6,-8(fp)
   20cec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   20cf0:	e0800217 	ldw	r2,8(fp)
   20cf4:	d8800015 	stw	r2,0(sp)
   20cf8:	e1ffff17 	ldw	r7,-4(fp)
   20cfc:	e1bffe17 	ldw	r6,-8(fp)
   20d00:	e17ffd17 	ldw	r5,-12(fp)
   20d04:	e13ffc17 	ldw	r4,-16(fp)
   20d08:	0020e800 	call	20e80 <alt_iic_isr_register>
}  
   20d0c:	e037883a 	mov	sp,fp
   20d10:	dfc00117 	ldw	ra,4(sp)
   20d14:	df000017 	ldw	fp,0(sp)
   20d18:	dec00204 	addi	sp,sp,8
   20d1c:	f800283a 	ret

00020d20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   20d20:	defff904 	addi	sp,sp,-28
   20d24:	df000615 	stw	fp,24(sp)
   20d28:	df000604 	addi	fp,sp,24
   20d2c:	e13ffe15 	stw	r4,-8(fp)
   20d30:	e17fff15 	stw	r5,-4(fp)
   20d34:	e0bfff17 	ldw	r2,-4(fp)
   20d38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d3c:	0005303a 	rdctl	r2,status
   20d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d44:	e0fffb17 	ldw	r3,-20(fp)
   20d48:	00bfff84 	movi	r2,-2
   20d4c:	1884703a 	and	r2,r3,r2
   20d50:	1001703a 	wrctl	status,r2
  
  return context;
   20d54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20d58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   20d5c:	00c00044 	movi	r3,1
   20d60:	e0bffa17 	ldw	r2,-24(fp)
   20d64:	1884983a 	sll	r2,r3,r2
   20d68:	1007883a 	mov	r3,r2
   20d6c:	d0a6ab17 	ldw	r2,-25940(gp)
   20d70:	1884b03a 	or	r2,r3,r2
   20d74:	d0a6ab15 	stw	r2,-25940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20d78:	d0a6ab17 	ldw	r2,-25940(gp)
   20d7c:	100170fa 	wrctl	ienable,r2
   20d80:	e0bffc17 	ldw	r2,-16(fp)
   20d84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20d88:	e0bffd17 	ldw	r2,-12(fp)
   20d8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20d90:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   20d94:	0001883a 	nop
}
   20d98:	e037883a 	mov	sp,fp
   20d9c:	df000017 	ldw	fp,0(sp)
   20da0:	dec00104 	addi	sp,sp,4
   20da4:	f800283a 	ret

00020da8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   20da8:	defff904 	addi	sp,sp,-28
   20dac:	df000615 	stw	fp,24(sp)
   20db0:	df000604 	addi	fp,sp,24
   20db4:	e13ffe15 	stw	r4,-8(fp)
   20db8:	e17fff15 	stw	r5,-4(fp)
   20dbc:	e0bfff17 	ldw	r2,-4(fp)
   20dc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20dc4:	0005303a 	rdctl	r2,status
   20dc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20dcc:	e0fffb17 	ldw	r3,-20(fp)
   20dd0:	00bfff84 	movi	r2,-2
   20dd4:	1884703a 	and	r2,r3,r2
   20dd8:	1001703a 	wrctl	status,r2
  
  return context;
   20ddc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20de0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   20de4:	00c00044 	movi	r3,1
   20de8:	e0bffa17 	ldw	r2,-24(fp)
   20dec:	1884983a 	sll	r2,r3,r2
   20df0:	0084303a 	nor	r2,zero,r2
   20df4:	1007883a 	mov	r3,r2
   20df8:	d0a6ab17 	ldw	r2,-25940(gp)
   20dfc:	1884703a 	and	r2,r3,r2
   20e00:	d0a6ab15 	stw	r2,-25940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20e04:	d0a6ab17 	ldw	r2,-25940(gp)
   20e08:	100170fa 	wrctl	ienable,r2
   20e0c:	e0bffc17 	ldw	r2,-16(fp)
   20e10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20e14:	e0bffd17 	ldw	r2,-12(fp)
   20e18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20e1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   20e20:	0001883a 	nop
}
   20e24:	e037883a 	mov	sp,fp
   20e28:	df000017 	ldw	fp,0(sp)
   20e2c:	dec00104 	addi	sp,sp,4
   20e30:	f800283a 	ret

00020e34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   20e34:	defffc04 	addi	sp,sp,-16
   20e38:	df000315 	stw	fp,12(sp)
   20e3c:	df000304 	addi	fp,sp,12
   20e40:	e13ffe15 	stw	r4,-8(fp)
   20e44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   20e48:	000530fa 	rdctl	r2,ienable
   20e4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   20e50:	00c00044 	movi	r3,1
   20e54:	e0bfff17 	ldw	r2,-4(fp)
   20e58:	1884983a 	sll	r2,r3,r2
   20e5c:	1007883a 	mov	r3,r2
   20e60:	e0bffd17 	ldw	r2,-12(fp)
   20e64:	1884703a 	and	r2,r3,r2
   20e68:	1004c03a 	cmpne	r2,r2,zero
   20e6c:	10803fcc 	andi	r2,r2,255
}
   20e70:	e037883a 	mov	sp,fp
   20e74:	df000017 	ldw	fp,0(sp)
   20e78:	dec00104 	addi	sp,sp,4
   20e7c:	f800283a 	ret

00020e80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20e80:	defff504 	addi	sp,sp,-44
   20e84:	dfc00a15 	stw	ra,40(sp)
   20e88:	df000915 	stw	fp,36(sp)
   20e8c:	df000904 	addi	fp,sp,36
   20e90:	e13ffc15 	stw	r4,-16(fp)
   20e94:	e17ffd15 	stw	r5,-12(fp)
   20e98:	e1bffe15 	stw	r6,-8(fp)
   20e9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   20ea0:	00bffa84 	movi	r2,-22
   20ea4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   20ea8:	e0bffd17 	ldw	r2,-12(fp)
   20eac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   20eb0:	e0bff817 	ldw	r2,-32(fp)
   20eb4:	10800808 	cmpgei	r2,r2,32
   20eb8:	1000271e 	bne	r2,zero,20f58 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20ebc:	0005303a 	rdctl	r2,status
   20ec0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20ec4:	e0fffb17 	ldw	r3,-20(fp)
   20ec8:	00bfff84 	movi	r2,-2
   20ecc:	1884703a 	and	r2,r3,r2
   20ed0:	1001703a 	wrctl	status,r2
  
  return context;
   20ed4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   20ed8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   20edc:	008000f4 	movhi	r2,3
   20ee0:	10a59e04 	addi	r2,r2,-27016
   20ee4:	e0fff817 	ldw	r3,-32(fp)
   20ee8:	180690fa 	slli	r3,r3,3
   20eec:	10c5883a 	add	r2,r2,r3
   20ef0:	e0fffe17 	ldw	r3,-8(fp)
   20ef4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   20ef8:	008000f4 	movhi	r2,3
   20efc:	10a59e04 	addi	r2,r2,-27016
   20f00:	e0fff817 	ldw	r3,-32(fp)
   20f04:	180690fa 	slli	r3,r3,3
   20f08:	10c5883a 	add	r2,r2,r3
   20f0c:	10800104 	addi	r2,r2,4
   20f10:	e0ffff17 	ldw	r3,-4(fp)
   20f14:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   20f18:	e0bffe17 	ldw	r2,-8(fp)
   20f1c:	10000526 	beq	r2,zero,20f34 <alt_iic_isr_register+0xb4>
   20f20:	e0bff817 	ldw	r2,-32(fp)
   20f24:	100b883a 	mov	r5,r2
   20f28:	e13ffc17 	ldw	r4,-16(fp)
   20f2c:	0020d200 	call	20d20 <alt_ic_irq_enable>
   20f30:	00000406 	br	20f44 <alt_iic_isr_register+0xc4>
   20f34:	e0bff817 	ldw	r2,-32(fp)
   20f38:	100b883a 	mov	r5,r2
   20f3c:	e13ffc17 	ldw	r4,-16(fp)
   20f40:	0020da80 	call	20da8 <alt_ic_irq_disable>
   20f44:	e0bff715 	stw	r2,-36(fp)
   20f48:	e0bffa17 	ldw	r2,-24(fp)
   20f4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f50:	e0bff917 	ldw	r2,-28(fp)
   20f54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   20f58:	e0bff717 	ldw	r2,-36(fp)
}
   20f5c:	e037883a 	mov	sp,fp
   20f60:	dfc00117 	ldw	ra,4(sp)
   20f64:	df000017 	ldw	fp,0(sp)
   20f68:	dec00204 	addi	sp,sp,8
   20f6c:	f800283a 	ret

00020f70 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20f70:	defffc04 	addi	sp,sp,-16
   20f74:	df000315 	stw	fp,12(sp)
   20f78:	df000304 	addi	fp,sp,12
   20f7c:	e13ffd15 	stw	r4,-12(fp)
   20f80:	e17ffe15 	stw	r5,-8(fp)
   20f84:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20f88:	e0fffe17 	ldw	r3,-8(fp)
   20f8c:	e0bffd17 	ldw	r2,-12(fp)
   20f90:	18800c26 	beq	r3,r2,20fc4 <alt_load_section+0x54>
  {
    while( to != end )
   20f94:	00000806 	br	20fb8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20f98:	e0bffe17 	ldw	r2,-8(fp)
   20f9c:	10c00104 	addi	r3,r2,4
   20fa0:	e0fffe15 	stw	r3,-8(fp)
   20fa4:	e0fffd17 	ldw	r3,-12(fp)
   20fa8:	19000104 	addi	r4,r3,4
   20fac:	e13ffd15 	stw	r4,-12(fp)
   20fb0:	18c00017 	ldw	r3,0(r3)
   20fb4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20fb8:	e0fffe17 	ldw	r3,-8(fp)
   20fbc:	e0bfff17 	ldw	r2,-4(fp)
   20fc0:	18bff51e 	bne	r3,r2,20f98 <__alt_data_end+0xfffe7f98>
    {
      *to++ = *from++;
    }
  }
}
   20fc4:	0001883a 	nop
   20fc8:	e037883a 	mov	sp,fp
   20fcc:	df000017 	ldw	fp,0(sp)
   20fd0:	dec00104 	addi	sp,sp,4
   20fd4:	f800283a 	ret

00020fd8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20fd8:	defffe04 	addi	sp,sp,-8
   20fdc:	dfc00115 	stw	ra,4(sp)
   20fe0:	df000015 	stw	fp,0(sp)
   20fe4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20fe8:	018000b4 	movhi	r6,2
   20fec:	319eed04 	addi	r6,r6,31668
   20ff0:	014000b4 	movhi	r5,2
   20ff4:	29585104 	addi	r5,r5,24900
   20ff8:	010000b4 	movhi	r4,2
   20ffc:	211eed04 	addi	r4,r4,31668
   21000:	0020f700 	call	20f70 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   21004:	018000b4 	movhi	r6,2
   21008:	31808c04 	addi	r6,r6,560
   2100c:	014000b4 	movhi	r5,2
   21010:	29400804 	addi	r5,r5,32
   21014:	010000b4 	movhi	r4,2
   21018:	21000804 	addi	r4,r4,32
   2101c:	0020f700 	call	20f70 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   21020:	018000b4 	movhi	r6,2
   21024:	31985104 	addi	r6,r6,24900
   21028:	014000b4 	movhi	r5,2
   2102c:	29582f04 	addi	r5,r5,24764
   21030:	010000b4 	movhi	r4,2
   21034:	21182f04 	addi	r4,r4,24764
   21038:	0020f700 	call	20f70 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2103c:	0021f7c0 	call	21f7c <alt_dcache_flush_all>
  alt_icache_flush_all();
   21040:	00221680 	call	22168 <alt_icache_flush_all>
}
   21044:	0001883a 	nop
   21048:	e037883a 	mov	sp,fp
   2104c:	dfc00117 	ldw	ra,4(sp)
   21050:	df000017 	ldw	fp,0(sp)
   21054:	dec00204 	addi	sp,sp,8
   21058:	f800283a 	ret

0002105c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2105c:	defffd04 	addi	sp,sp,-12
   21060:	dfc00215 	stw	ra,8(sp)
   21064:	df000115 	stw	fp,4(sp)
   21068:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2106c:	0009883a 	mov	r4,zero
   21070:	00211480 	call	21148 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   21074:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   21078:	00211800 	call	21180 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2107c:	018000b4 	movhi	r6,2
   21080:	31984504 	addi	r6,r6,24852
   21084:	014000b4 	movhi	r5,2
   21088:	29584504 	addi	r5,r5,24852
   2108c:	010000b4 	movhi	r4,2
   21090:	21184504 	addi	r4,r4,24852
   21094:	00223080 	call	22308 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   21098:	00220a80 	call	220a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2109c:	010000b4 	movhi	r4,2
   210a0:	21084204 	addi	r4,r4,8456
   210a4:	0022ab00 	call	22ab0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   210a8:	d0a6ac17 	ldw	r2,-25936(gp)
   210ac:	d0e6ad17 	ldw	r3,-25932(gp)
   210b0:	d126ae17 	ldw	r4,-25928(gp)
   210b4:	200d883a 	mov	r6,r4
   210b8:	180b883a 	mov	r5,r3
   210bc:	1009883a 	mov	r4,r2
   210c0:	002026c0 	call	2026c <main>
   210c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   210c8:	01000044 	movi	r4,1
   210cc:	0021ea40 	call	21ea4 <close>
  exit (result);
   210d0:	e13fff17 	ldw	r4,-4(fp)
   210d4:	0022ac40 	call	22ac4 <exit>

000210d8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   210d8:	defffd04 	addi	sp,sp,-12
   210dc:	dfc00215 	stw	ra,8(sp)
   210e0:	df000115 	stw	fp,4(sp)
   210e4:	df000104 	addi	fp,sp,4
   210e8:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   210ec:	d0a00b17 	ldw	r2,-32724(gp)
   210f0:	10800217 	ldw	r2,8(r2)
   210f4:	100b883a 	mov	r5,r2
   210f8:	e13fff17 	ldw	r4,-4(fp)
   210fc:	0022b980 	call	22b98 <fputs>
#endif
#endif
}
   21100:	e037883a 	mov	sp,fp
   21104:	dfc00117 	ldw	ra,4(sp)
   21108:	df000017 	ldw	fp,0(sp)
   2110c:	dec00204 	addi	sp,sp,8
   21110:	f800283a 	ret

00021114 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   21114:	defffd04 	addi	sp,sp,-12
   21118:	dfc00215 	stw	ra,8(sp)
   2111c:	df000115 	stw	fp,4(sp)
   21120:	df000104 	addi	fp,sp,4
   21124:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   21128:	d1600404 	addi	r5,gp,-32752
   2112c:	e13fff17 	ldw	r4,-4(fp)
   21130:	00220040 	call	22004 <alt_dev_llist_insert>
}
   21134:	e037883a 	mov	sp,fp
   21138:	dfc00117 	ldw	ra,4(sp)
   2113c:	df000017 	ldw	fp,0(sp)
   21140:	dec00204 	addi	sp,sp,8
   21144:	f800283a 	ret

00021148 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21148:	defffd04 	addi	sp,sp,-12
   2114c:	dfc00215 	stw	ra,8(sp)
   21150:	df000115 	stw	fp,4(sp)
   21154:	df000104 	addi	fp,sp,4
   21158:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   2115c:	00228300 	call	22830 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21160:	00800044 	movi	r2,1
   21164:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21168:	0001883a 	nop
   2116c:	e037883a 	mov	sp,fp
   21170:	dfc00117 	ldw	ra,4(sp)
   21174:	df000017 	ldw	fp,0(sp)
   21178:	dec00204 	addi	sp,sp,8
   2117c:	f800283a 	ret

00021180 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21180:	defffe04 	addi	sp,sp,-8
   21184:	dfc00115 	stw	ra,4(sp)
   21188:	df000015 	stw	fp,0(sp)
   2118c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_GAME, timer_game);
   21190:	01c00284 	movi	r7,10
   21194:	01800044 	movi	r6,1
   21198:	000b883a 	mov	r5,zero
   2119c:	01000134 	movhi	r4,4
   211a0:	21040804 	addi	r4,r4,4128
   211a4:	0021cc00 	call	21cc0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_LCD, timer_lcd);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   211a8:	000d883a 	mov	r6,zero
   211ac:	000b883a 	mov	r5,zero
   211b0:	010000b4 	movhi	r4,2
   211b4:	21185b04 	addi	r4,r4,24940
   211b8:	00213440 	call	21344 <altera_avalon_jtag_uart_init>
   211bc:	010000b4 	movhi	r4,2
   211c0:	21185104 	addi	r4,r4,24900
   211c4:	00211140 	call	21114 <alt_dev_reg>
}
   211c8:	0001883a 	nop
   211cc:	e037883a 	mov	sp,fp
   211d0:	dfc00117 	ldw	ra,4(sp)
   211d4:	df000017 	ldw	fp,0(sp)
   211d8:	dec00204 	addi	sp,sp,8
   211dc:	f800283a 	ret

000211e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   211e0:	defffa04 	addi	sp,sp,-24
   211e4:	dfc00515 	stw	ra,20(sp)
   211e8:	df000415 	stw	fp,16(sp)
   211ec:	df000404 	addi	fp,sp,16
   211f0:	e13ffd15 	stw	r4,-12(fp)
   211f4:	e17ffe15 	stw	r5,-8(fp)
   211f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   211fc:	e0bffd17 	ldw	r2,-12(fp)
   21200:	10800017 	ldw	r2,0(r2)
   21204:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21208:	e0bffc17 	ldw	r2,-16(fp)
   2120c:	10c00a04 	addi	r3,r2,40
   21210:	e0bffd17 	ldw	r2,-12(fp)
   21214:	10800217 	ldw	r2,8(r2)
   21218:	100f883a 	mov	r7,r2
   2121c:	e1bfff17 	ldw	r6,-4(fp)
   21220:	e17ffe17 	ldw	r5,-8(fp)
   21224:	1809883a 	mov	r4,r3
   21228:	00218080 	call	21808 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2122c:	e037883a 	mov	sp,fp
   21230:	dfc00117 	ldw	ra,4(sp)
   21234:	df000017 	ldw	fp,0(sp)
   21238:	dec00204 	addi	sp,sp,8
   2123c:	f800283a 	ret

00021240 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21240:	defffa04 	addi	sp,sp,-24
   21244:	dfc00515 	stw	ra,20(sp)
   21248:	df000415 	stw	fp,16(sp)
   2124c:	df000404 	addi	fp,sp,16
   21250:	e13ffd15 	stw	r4,-12(fp)
   21254:	e17ffe15 	stw	r5,-8(fp)
   21258:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2125c:	e0bffd17 	ldw	r2,-12(fp)
   21260:	10800017 	ldw	r2,0(r2)
   21264:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   21268:	e0bffc17 	ldw	r2,-16(fp)
   2126c:	10c00a04 	addi	r3,r2,40
   21270:	e0bffd17 	ldw	r2,-12(fp)
   21274:	10800217 	ldw	r2,8(r2)
   21278:	100f883a 	mov	r7,r2
   2127c:	e1bfff17 	ldw	r6,-4(fp)
   21280:	e17ffe17 	ldw	r5,-8(fp)
   21284:	1809883a 	mov	r4,r3
   21288:	0021a240 	call	21a24 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2128c:	e037883a 	mov	sp,fp
   21290:	dfc00117 	ldw	ra,4(sp)
   21294:	df000017 	ldw	fp,0(sp)
   21298:	dec00204 	addi	sp,sp,8
   2129c:	f800283a 	ret

000212a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   212a0:	defffc04 	addi	sp,sp,-16
   212a4:	dfc00315 	stw	ra,12(sp)
   212a8:	df000215 	stw	fp,8(sp)
   212ac:	df000204 	addi	fp,sp,8
   212b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   212b4:	e0bfff17 	ldw	r2,-4(fp)
   212b8:	10800017 	ldw	r2,0(r2)
   212bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   212c0:	e0bffe17 	ldw	r2,-8(fp)
   212c4:	10c00a04 	addi	r3,r2,40
   212c8:	e0bfff17 	ldw	r2,-4(fp)
   212cc:	10800217 	ldw	r2,8(r2)
   212d0:	100b883a 	mov	r5,r2
   212d4:	1809883a 	mov	r4,r3
   212d8:	00216b00 	call	216b0 <altera_avalon_jtag_uart_close>
}
   212dc:	e037883a 	mov	sp,fp
   212e0:	dfc00117 	ldw	ra,4(sp)
   212e4:	df000017 	ldw	fp,0(sp)
   212e8:	dec00204 	addi	sp,sp,8
   212ec:	f800283a 	ret

000212f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   212f0:	defffa04 	addi	sp,sp,-24
   212f4:	dfc00515 	stw	ra,20(sp)
   212f8:	df000415 	stw	fp,16(sp)
   212fc:	df000404 	addi	fp,sp,16
   21300:	e13ffd15 	stw	r4,-12(fp)
   21304:	e17ffe15 	stw	r5,-8(fp)
   21308:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2130c:	e0bffd17 	ldw	r2,-12(fp)
   21310:	10800017 	ldw	r2,0(r2)
   21314:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21318:	e0bffc17 	ldw	r2,-16(fp)
   2131c:	10800a04 	addi	r2,r2,40
   21320:	e1bfff17 	ldw	r6,-4(fp)
   21324:	e17ffe17 	ldw	r5,-8(fp)
   21328:	1009883a 	mov	r4,r2
   2132c:	00217180 	call	21718 <altera_avalon_jtag_uart_ioctl>
}
   21330:	e037883a 	mov	sp,fp
   21334:	dfc00117 	ldw	ra,4(sp)
   21338:	df000017 	ldw	fp,0(sp)
   2133c:	dec00204 	addi	sp,sp,8
   21340:	f800283a 	ret

00021344 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21344:	defffa04 	addi	sp,sp,-24
   21348:	dfc00515 	stw	ra,20(sp)
   2134c:	df000415 	stw	fp,16(sp)
   21350:	df000404 	addi	fp,sp,16
   21354:	e13ffd15 	stw	r4,-12(fp)
   21358:	e17ffe15 	stw	r5,-8(fp)
   2135c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21360:	e0bffd17 	ldw	r2,-12(fp)
   21364:	00c00044 	movi	r3,1
   21368:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2136c:	e0bffd17 	ldw	r2,-12(fp)
   21370:	10800017 	ldw	r2,0(r2)
   21374:	10800104 	addi	r2,r2,4
   21378:	1007883a 	mov	r3,r2
   2137c:	e0bffd17 	ldw	r2,-12(fp)
   21380:	10800817 	ldw	r2,32(r2)
   21384:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   21388:	e0bffe17 	ldw	r2,-8(fp)
   2138c:	e0ffff17 	ldw	r3,-4(fp)
   21390:	d8000015 	stw	zero,0(sp)
   21394:	e1fffd17 	ldw	r7,-12(fp)
   21398:	018000b4 	movhi	r6,2
   2139c:	31850104 	addi	r6,r6,5124
   213a0:	180b883a 	mov	r5,r3
   213a4:	1009883a 	mov	r4,r2
   213a8:	0020cd00 	call	20cd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   213ac:	e0bffd17 	ldw	r2,-12(fp)
   213b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   213b4:	e0bffd17 	ldw	r2,-12(fp)
   213b8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   213bc:	d0e6b017 	ldw	r3,-25920(gp)
   213c0:	e1fffd17 	ldw	r7,-12(fp)
   213c4:	018000b4 	movhi	r6,2
   213c8:	31858404 	addi	r6,r6,5648
   213cc:	180b883a 	mov	r5,r3
   213d0:	1009883a 	mov	r4,r2
   213d4:	0021d3c0 	call	21d3c <alt_alarm_start>
   213d8:	1000040e 	bge	r2,zero,213ec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   213dc:	e0fffd17 	ldw	r3,-12(fp)
   213e0:	00a00034 	movhi	r2,32768
   213e4:	10bfffc4 	addi	r2,r2,-1
   213e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   213ec:	0001883a 	nop
   213f0:	e037883a 	mov	sp,fp
   213f4:	dfc00117 	ldw	ra,4(sp)
   213f8:	df000017 	ldw	fp,0(sp)
   213fc:	dec00204 	addi	sp,sp,8
   21400:	f800283a 	ret

00021404 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21404:	defff804 	addi	sp,sp,-32
   21408:	df000715 	stw	fp,28(sp)
   2140c:	df000704 	addi	fp,sp,28
   21410:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21414:	e0bfff17 	ldw	r2,-4(fp)
   21418:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2141c:	e0bffb17 	ldw	r2,-20(fp)
   21420:	10800017 	ldw	r2,0(r2)
   21424:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21428:	e0bffc17 	ldw	r2,-16(fp)
   2142c:	10800104 	addi	r2,r2,4
   21430:	10800037 	ldwio	r2,0(r2)
   21434:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21438:	e0bffd17 	ldw	r2,-12(fp)
   2143c:	1080c00c 	andi	r2,r2,768
   21440:	10006d26 	beq	r2,zero,215f8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21444:	e0bffd17 	ldw	r2,-12(fp)
   21448:	1080400c 	andi	r2,r2,256
   2144c:	10003526 	beq	r2,zero,21524 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21450:	00800074 	movhi	r2,1
   21454:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21458:	e0bffb17 	ldw	r2,-20(fp)
   2145c:	10800a17 	ldw	r2,40(r2)
   21460:	10800044 	addi	r2,r2,1
   21464:	1081ffcc 	andi	r2,r2,2047
   21468:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2146c:	e0bffb17 	ldw	r2,-20(fp)
   21470:	10c00b17 	ldw	r3,44(r2)
   21474:	e0bffe17 	ldw	r2,-8(fp)
   21478:	18801526 	beq	r3,r2,214d0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2147c:	e0bffc17 	ldw	r2,-16(fp)
   21480:	10800037 	ldwio	r2,0(r2)
   21484:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21488:	e0bff917 	ldw	r2,-28(fp)
   2148c:	10a0000c 	andi	r2,r2,32768
   21490:	10001126 	beq	r2,zero,214d8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21494:	e0bffb17 	ldw	r2,-20(fp)
   21498:	10800a17 	ldw	r2,40(r2)
   2149c:	e0fff917 	ldw	r3,-28(fp)
   214a0:	1809883a 	mov	r4,r3
   214a4:	e0fffb17 	ldw	r3,-20(fp)
   214a8:	1885883a 	add	r2,r3,r2
   214ac:	10800e04 	addi	r2,r2,56
   214b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   214b4:	e0bffb17 	ldw	r2,-20(fp)
   214b8:	10800a17 	ldw	r2,40(r2)
   214bc:	10800044 	addi	r2,r2,1
   214c0:	10c1ffcc 	andi	r3,r2,2047
   214c4:	e0bffb17 	ldw	r2,-20(fp)
   214c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   214cc:	003fe206 	br	21458 <__alt_data_end+0xfffe8458>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   214d0:	0001883a 	nop
   214d4:	00000106 	br	214dc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   214d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   214dc:	e0bff917 	ldw	r2,-28(fp)
   214e0:	10bfffec 	andhi	r2,r2,65535
   214e4:	10000f26 	beq	r2,zero,21524 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   214e8:	e0bffb17 	ldw	r2,-20(fp)
   214ec:	10c00817 	ldw	r3,32(r2)
   214f0:	00bfff84 	movi	r2,-2
   214f4:	1886703a 	and	r3,r3,r2
   214f8:	e0bffb17 	ldw	r2,-20(fp)
   214fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21500:	e0bffc17 	ldw	r2,-16(fp)
   21504:	10800104 	addi	r2,r2,4
   21508:	1007883a 	mov	r3,r2
   2150c:	e0bffb17 	ldw	r2,-20(fp)
   21510:	10800817 	ldw	r2,32(r2)
   21514:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21518:	e0bffc17 	ldw	r2,-16(fp)
   2151c:	10800104 	addi	r2,r2,4
   21520:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21524:	e0bffd17 	ldw	r2,-12(fp)
   21528:	1080800c 	andi	r2,r2,512
   2152c:	103fbe26 	beq	r2,zero,21428 <__alt_data_end+0xfffe8428>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21530:	e0bffd17 	ldw	r2,-12(fp)
   21534:	1004d43a 	srli	r2,r2,16
   21538:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2153c:	00001406 	br	21590 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21540:	e0bffc17 	ldw	r2,-16(fp)
   21544:	e0fffb17 	ldw	r3,-20(fp)
   21548:	18c00d17 	ldw	r3,52(r3)
   2154c:	e13ffb17 	ldw	r4,-20(fp)
   21550:	20c7883a 	add	r3,r4,r3
   21554:	18c20e04 	addi	r3,r3,2104
   21558:	18c00003 	ldbu	r3,0(r3)
   2155c:	18c03fcc 	andi	r3,r3,255
   21560:	18c0201c 	xori	r3,r3,128
   21564:	18ffe004 	addi	r3,r3,-128
   21568:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2156c:	e0bffb17 	ldw	r2,-20(fp)
   21570:	10800d17 	ldw	r2,52(r2)
   21574:	10800044 	addi	r2,r2,1
   21578:	10c1ffcc 	andi	r3,r2,2047
   2157c:	e0bffb17 	ldw	r2,-20(fp)
   21580:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21584:	e0bffa17 	ldw	r2,-24(fp)
   21588:	10bfffc4 	addi	r2,r2,-1
   2158c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21590:	e0bffa17 	ldw	r2,-24(fp)
   21594:	10000526 	beq	r2,zero,215ac <altera_avalon_jtag_uart_irq+0x1a8>
   21598:	e0bffb17 	ldw	r2,-20(fp)
   2159c:	10c00d17 	ldw	r3,52(r2)
   215a0:	e0bffb17 	ldw	r2,-20(fp)
   215a4:	10800c17 	ldw	r2,48(r2)
   215a8:	18bfe51e 	bne	r3,r2,21540 <__alt_data_end+0xfffe8540>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   215ac:	e0bffa17 	ldw	r2,-24(fp)
   215b0:	103f9d26 	beq	r2,zero,21428 <__alt_data_end+0xfffe8428>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   215b4:	e0bffb17 	ldw	r2,-20(fp)
   215b8:	10c00817 	ldw	r3,32(r2)
   215bc:	00bfff44 	movi	r2,-3
   215c0:	1886703a 	and	r3,r3,r2
   215c4:	e0bffb17 	ldw	r2,-20(fp)
   215c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   215cc:	e0bffb17 	ldw	r2,-20(fp)
   215d0:	10800017 	ldw	r2,0(r2)
   215d4:	10800104 	addi	r2,r2,4
   215d8:	1007883a 	mov	r3,r2
   215dc:	e0bffb17 	ldw	r2,-20(fp)
   215e0:	10800817 	ldw	r2,32(r2)
   215e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   215e8:	e0bffc17 	ldw	r2,-16(fp)
   215ec:	10800104 	addi	r2,r2,4
   215f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   215f4:	003f8c06 	br	21428 <__alt_data_end+0xfffe8428>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   215f8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   215fc:	0001883a 	nop
   21600:	e037883a 	mov	sp,fp
   21604:	df000017 	ldw	fp,0(sp)
   21608:	dec00104 	addi	sp,sp,4
   2160c:	f800283a 	ret

00021610 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21610:	defff804 	addi	sp,sp,-32
   21614:	df000715 	stw	fp,28(sp)
   21618:	df000704 	addi	fp,sp,28
   2161c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21620:	e0bffb17 	ldw	r2,-20(fp)
   21624:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21628:	e0bff917 	ldw	r2,-28(fp)
   2162c:	10800017 	ldw	r2,0(r2)
   21630:	10800104 	addi	r2,r2,4
   21634:	10800037 	ldwio	r2,0(r2)
   21638:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2163c:	e0bffa17 	ldw	r2,-24(fp)
   21640:	1081000c 	andi	r2,r2,1024
   21644:	10000b26 	beq	r2,zero,21674 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21648:	e0bff917 	ldw	r2,-28(fp)
   2164c:	10800017 	ldw	r2,0(r2)
   21650:	10800104 	addi	r2,r2,4
   21654:	1007883a 	mov	r3,r2
   21658:	e0bff917 	ldw	r2,-28(fp)
   2165c:	10800817 	ldw	r2,32(r2)
   21660:	10810014 	ori	r2,r2,1024
   21664:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21668:	e0bff917 	ldw	r2,-28(fp)
   2166c:	10000915 	stw	zero,36(r2)
   21670:	00000a06 	br	2169c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21674:	e0bff917 	ldw	r2,-28(fp)
   21678:	10c00917 	ldw	r3,36(r2)
   2167c:	00a00034 	movhi	r2,32768
   21680:	10bfff04 	addi	r2,r2,-4
   21684:	10c00536 	bltu	r2,r3,2169c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21688:	e0bff917 	ldw	r2,-28(fp)
   2168c:	10800917 	ldw	r2,36(r2)
   21690:	10c00044 	addi	r3,r2,1
   21694:	e0bff917 	ldw	r2,-28(fp)
   21698:	10c00915 	stw	r3,36(r2)
   2169c:	d0a6b017 	ldw	r2,-25920(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   216a0:	e037883a 	mov	sp,fp
   216a4:	df000017 	ldw	fp,0(sp)
   216a8:	dec00104 	addi	sp,sp,4
   216ac:	f800283a 	ret

000216b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   216b0:	defffd04 	addi	sp,sp,-12
   216b4:	df000215 	stw	fp,8(sp)
   216b8:	df000204 	addi	fp,sp,8
   216bc:	e13ffe15 	stw	r4,-8(fp)
   216c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   216c4:	00000506 	br	216dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   216c8:	e0bfff17 	ldw	r2,-4(fp)
   216cc:	1090000c 	andi	r2,r2,16384
   216d0:	10000226 	beq	r2,zero,216dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   216d4:	00bffd44 	movi	r2,-11
   216d8:	00000b06 	br	21708 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   216dc:	e0bffe17 	ldw	r2,-8(fp)
   216e0:	10c00d17 	ldw	r3,52(r2)
   216e4:	e0bffe17 	ldw	r2,-8(fp)
   216e8:	10800c17 	ldw	r2,48(r2)
   216ec:	18800526 	beq	r3,r2,21704 <altera_avalon_jtag_uart_close+0x54>
   216f0:	e0bffe17 	ldw	r2,-8(fp)
   216f4:	10c00917 	ldw	r3,36(r2)
   216f8:	e0bffe17 	ldw	r2,-8(fp)
   216fc:	10800117 	ldw	r2,4(r2)
   21700:	18bff136 	bltu	r3,r2,216c8 <__alt_data_end+0xfffe86c8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21704:	0005883a 	mov	r2,zero
}
   21708:	e037883a 	mov	sp,fp
   2170c:	df000017 	ldw	fp,0(sp)
   21710:	dec00104 	addi	sp,sp,4
   21714:	f800283a 	ret

00021718 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21718:	defffa04 	addi	sp,sp,-24
   2171c:	df000515 	stw	fp,20(sp)
   21720:	df000504 	addi	fp,sp,20
   21724:	e13ffd15 	stw	r4,-12(fp)
   21728:	e17ffe15 	stw	r5,-8(fp)
   2172c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21730:	00bff9c4 	movi	r2,-25
   21734:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21738:	e0bffe17 	ldw	r2,-8(fp)
   2173c:	10da8060 	cmpeqi	r3,r2,27137
   21740:	1800031e 	bne	r3,zero,21750 <altera_avalon_jtag_uart_ioctl+0x38>
   21744:	109a80a0 	cmpeqi	r2,r2,27138
   21748:	1000181e 	bne	r2,zero,217ac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2174c:	00002906 	br	217f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21750:	e0bffd17 	ldw	r2,-12(fp)
   21754:	10c00117 	ldw	r3,4(r2)
   21758:	00a00034 	movhi	r2,32768
   2175c:	10bfffc4 	addi	r2,r2,-1
   21760:	18802126 	beq	r3,r2,217e8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   21764:	e0bfff17 	ldw	r2,-4(fp)
   21768:	10800017 	ldw	r2,0(r2)
   2176c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21770:	e0bffc17 	ldw	r2,-16(fp)
   21774:	10800090 	cmplti	r2,r2,2
   21778:	1000061e 	bne	r2,zero,21794 <altera_avalon_jtag_uart_ioctl+0x7c>
   2177c:	e0fffc17 	ldw	r3,-16(fp)
   21780:	00a00034 	movhi	r2,32768
   21784:	10bfffc4 	addi	r2,r2,-1
   21788:	18800226 	beq	r3,r2,21794 <altera_avalon_jtag_uart_ioctl+0x7c>
   2178c:	e0bffc17 	ldw	r2,-16(fp)
   21790:	00000206 	br	2179c <altera_avalon_jtag_uart_ioctl+0x84>
   21794:	00a00034 	movhi	r2,32768
   21798:	10bfff84 	addi	r2,r2,-2
   2179c:	e0fffd17 	ldw	r3,-12(fp)
   217a0:	18800115 	stw	r2,4(r3)
      rc = 0;
   217a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   217a8:	00000f06 	br	217e8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   217ac:	e0bffd17 	ldw	r2,-12(fp)
   217b0:	10c00117 	ldw	r3,4(r2)
   217b4:	00a00034 	movhi	r2,32768
   217b8:	10bfffc4 	addi	r2,r2,-1
   217bc:	18800c26 	beq	r3,r2,217f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   217c0:	e0bffd17 	ldw	r2,-12(fp)
   217c4:	10c00917 	ldw	r3,36(r2)
   217c8:	e0bffd17 	ldw	r2,-12(fp)
   217cc:	10800117 	ldw	r2,4(r2)
   217d0:	1885803a 	cmpltu	r2,r3,r2
   217d4:	10c03fcc 	andi	r3,r2,255
   217d8:	e0bfff17 	ldw	r2,-4(fp)
   217dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   217e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   217e4:	00000206 	br	217f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   217e8:	0001883a 	nop
   217ec:	00000106 	br	217f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   217f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   217f4:	e0bffb17 	ldw	r2,-20(fp)
}
   217f8:	e037883a 	mov	sp,fp
   217fc:	df000017 	ldw	fp,0(sp)
   21800:	dec00104 	addi	sp,sp,4
   21804:	f800283a 	ret

00021808 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21808:	defff304 	addi	sp,sp,-52
   2180c:	dfc00c15 	stw	ra,48(sp)
   21810:	df000b15 	stw	fp,44(sp)
   21814:	df000b04 	addi	fp,sp,44
   21818:	e13ffc15 	stw	r4,-16(fp)
   2181c:	e17ffd15 	stw	r5,-12(fp)
   21820:	e1bffe15 	stw	r6,-8(fp)
   21824:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21828:	e0bffd17 	ldw	r2,-12(fp)
   2182c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21830:	00004706 	br	21950 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21834:	e0bffc17 	ldw	r2,-16(fp)
   21838:	10800a17 	ldw	r2,40(r2)
   2183c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21840:	e0bffc17 	ldw	r2,-16(fp)
   21844:	10800b17 	ldw	r2,44(r2)
   21848:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2184c:	e0fff717 	ldw	r3,-36(fp)
   21850:	e0bff817 	ldw	r2,-32(fp)
   21854:	18800536 	bltu	r3,r2,2186c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   21858:	e0fff717 	ldw	r3,-36(fp)
   2185c:	e0bff817 	ldw	r2,-32(fp)
   21860:	1885c83a 	sub	r2,r3,r2
   21864:	e0bff615 	stw	r2,-40(fp)
   21868:	00000406 	br	2187c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2186c:	00c20004 	movi	r3,2048
   21870:	e0bff817 	ldw	r2,-32(fp)
   21874:	1885c83a 	sub	r2,r3,r2
   21878:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2187c:	e0bff617 	ldw	r2,-40(fp)
   21880:	10001e26 	beq	r2,zero,218fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21884:	e0fffe17 	ldw	r3,-8(fp)
   21888:	e0bff617 	ldw	r2,-40(fp)
   2188c:	1880022e 	bgeu	r3,r2,21898 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21890:	e0bffe17 	ldw	r2,-8(fp)
   21894:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   21898:	e0bffc17 	ldw	r2,-16(fp)
   2189c:	10c00e04 	addi	r3,r2,56
   218a0:	e0bff817 	ldw	r2,-32(fp)
   218a4:	1885883a 	add	r2,r3,r2
   218a8:	e1bff617 	ldw	r6,-40(fp)
   218ac:	100b883a 	mov	r5,r2
   218b0:	e13ff517 	ldw	r4,-44(fp)
   218b4:	00239e40 	call	239e4 <memcpy>
      ptr   += n;
   218b8:	e0fff517 	ldw	r3,-44(fp)
   218bc:	e0bff617 	ldw	r2,-40(fp)
   218c0:	1885883a 	add	r2,r3,r2
   218c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   218c8:	e0fffe17 	ldw	r3,-8(fp)
   218cc:	e0bff617 	ldw	r2,-40(fp)
   218d0:	1885c83a 	sub	r2,r3,r2
   218d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   218d8:	e0fff817 	ldw	r3,-32(fp)
   218dc:	e0bff617 	ldw	r2,-40(fp)
   218e0:	1885883a 	add	r2,r3,r2
   218e4:	10c1ffcc 	andi	r3,r2,2047
   218e8:	e0bffc17 	ldw	r2,-16(fp)
   218ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   218f0:	e0bffe17 	ldw	r2,-8(fp)
   218f4:	00bfcf16 	blt	zero,r2,21834 <__alt_data_end+0xfffe8834>
   218f8:	00000106 	br	21900 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   218fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21900:	e0fff517 	ldw	r3,-44(fp)
   21904:	e0bffd17 	ldw	r2,-12(fp)
   21908:	1880141e 	bne	r3,r2,2195c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2190c:	e0bfff17 	ldw	r2,-4(fp)
   21910:	1090000c 	andi	r2,r2,16384
   21914:	1000131e 	bne	r2,zero,21964 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21918:	0001883a 	nop
   2191c:	e0bffc17 	ldw	r2,-16(fp)
   21920:	10c00a17 	ldw	r3,40(r2)
   21924:	e0bff717 	ldw	r2,-36(fp)
   21928:	1880051e 	bne	r3,r2,21940 <altera_avalon_jtag_uart_read+0x138>
   2192c:	e0bffc17 	ldw	r2,-16(fp)
   21930:	10c00917 	ldw	r3,36(r2)
   21934:	e0bffc17 	ldw	r2,-16(fp)
   21938:	10800117 	ldw	r2,4(r2)
   2193c:	18bff736 	bltu	r3,r2,2191c <__alt_data_end+0xfffe891c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21940:	e0bffc17 	ldw	r2,-16(fp)
   21944:	10c00a17 	ldw	r3,40(r2)
   21948:	e0bff717 	ldw	r2,-36(fp)
   2194c:	18800726 	beq	r3,r2,2196c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21950:	e0bffe17 	ldw	r2,-8(fp)
   21954:	00bfb716 	blt	zero,r2,21834 <__alt_data_end+0xfffe8834>
   21958:	00000506 	br	21970 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2195c:	0001883a 	nop
   21960:	00000306 	br	21970 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   21964:	0001883a 	nop
   21968:	00000106 	br	21970 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2196c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21970:	e0fff517 	ldw	r3,-44(fp)
   21974:	e0bffd17 	ldw	r2,-12(fp)
   21978:	18801826 	beq	r3,r2,219dc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2197c:	0005303a 	rdctl	r2,status
   21980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21984:	e0fffb17 	ldw	r3,-20(fp)
   21988:	00bfff84 	movi	r2,-2
   2198c:	1884703a 	and	r2,r3,r2
   21990:	1001703a 	wrctl	status,r2
  
  return context;
   21994:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   21998:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2199c:	e0bffc17 	ldw	r2,-16(fp)
   219a0:	10800817 	ldw	r2,32(r2)
   219a4:	10c00054 	ori	r3,r2,1
   219a8:	e0bffc17 	ldw	r2,-16(fp)
   219ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   219b0:	e0bffc17 	ldw	r2,-16(fp)
   219b4:	10800017 	ldw	r2,0(r2)
   219b8:	10800104 	addi	r2,r2,4
   219bc:	1007883a 	mov	r3,r2
   219c0:	e0bffc17 	ldw	r2,-16(fp)
   219c4:	10800817 	ldw	r2,32(r2)
   219c8:	18800035 	stwio	r2,0(r3)
   219cc:	e0bffa17 	ldw	r2,-24(fp)
   219d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   219d4:	e0bff917 	ldw	r2,-28(fp)
   219d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   219dc:	e0fff517 	ldw	r3,-44(fp)
   219e0:	e0bffd17 	ldw	r2,-12(fp)
   219e4:	18800426 	beq	r3,r2,219f8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   219e8:	e0fff517 	ldw	r3,-44(fp)
   219ec:	e0bffd17 	ldw	r2,-12(fp)
   219f0:	1885c83a 	sub	r2,r3,r2
   219f4:	00000606 	br	21a10 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   219f8:	e0bfff17 	ldw	r2,-4(fp)
   219fc:	1090000c 	andi	r2,r2,16384
   21a00:	10000226 	beq	r2,zero,21a0c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   21a04:	00bffd44 	movi	r2,-11
   21a08:	00000106 	br	21a10 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   21a0c:	00bffec4 	movi	r2,-5
}
   21a10:	e037883a 	mov	sp,fp
   21a14:	dfc00117 	ldw	ra,4(sp)
   21a18:	df000017 	ldw	fp,0(sp)
   21a1c:	dec00204 	addi	sp,sp,8
   21a20:	f800283a 	ret

00021a24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21a24:	defff304 	addi	sp,sp,-52
   21a28:	dfc00c15 	stw	ra,48(sp)
   21a2c:	df000b15 	stw	fp,44(sp)
   21a30:	df000b04 	addi	fp,sp,44
   21a34:	e13ffc15 	stw	r4,-16(fp)
   21a38:	e17ffd15 	stw	r5,-12(fp)
   21a3c:	e1bffe15 	stw	r6,-8(fp)
   21a40:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21a44:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21a48:	e0bffd17 	ldw	r2,-12(fp)
   21a4c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21a50:	00003706 	br	21b30 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21a54:	e0bffc17 	ldw	r2,-16(fp)
   21a58:	10800c17 	ldw	r2,48(r2)
   21a5c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   21a60:	e0bffc17 	ldw	r2,-16(fp)
   21a64:	10800d17 	ldw	r2,52(r2)
   21a68:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   21a6c:	e0fff917 	ldw	r3,-28(fp)
   21a70:	e0bff517 	ldw	r2,-44(fp)
   21a74:	1880062e 	bgeu	r3,r2,21a90 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21a78:	e0fff517 	ldw	r3,-44(fp)
   21a7c:	e0bff917 	ldw	r2,-28(fp)
   21a80:	1885c83a 	sub	r2,r3,r2
   21a84:	10bfffc4 	addi	r2,r2,-1
   21a88:	e0bff615 	stw	r2,-40(fp)
   21a8c:	00000b06 	br	21abc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21a90:	e0bff517 	ldw	r2,-44(fp)
   21a94:	10000526 	beq	r2,zero,21aac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21a98:	00c20004 	movi	r3,2048
   21a9c:	e0bff917 	ldw	r2,-28(fp)
   21aa0:	1885c83a 	sub	r2,r3,r2
   21aa4:	e0bff615 	stw	r2,-40(fp)
   21aa8:	00000406 	br	21abc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   21aac:	00c1ffc4 	movi	r3,2047
   21ab0:	e0bff917 	ldw	r2,-28(fp)
   21ab4:	1885c83a 	sub	r2,r3,r2
   21ab8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21abc:	e0bff617 	ldw	r2,-40(fp)
   21ac0:	10001e26 	beq	r2,zero,21b3c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21ac4:	e0fffe17 	ldw	r3,-8(fp)
   21ac8:	e0bff617 	ldw	r2,-40(fp)
   21acc:	1880022e 	bgeu	r3,r2,21ad8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21ad0:	e0bffe17 	ldw	r2,-8(fp)
   21ad4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21ad8:	e0bffc17 	ldw	r2,-16(fp)
   21adc:	10c20e04 	addi	r3,r2,2104
   21ae0:	e0bff917 	ldw	r2,-28(fp)
   21ae4:	1885883a 	add	r2,r3,r2
   21ae8:	e1bff617 	ldw	r6,-40(fp)
   21aec:	e17ffd17 	ldw	r5,-12(fp)
   21af0:	1009883a 	mov	r4,r2
   21af4:	00239e40 	call	239e4 <memcpy>
      ptr   += n;
   21af8:	e0fffd17 	ldw	r3,-12(fp)
   21afc:	e0bff617 	ldw	r2,-40(fp)
   21b00:	1885883a 	add	r2,r3,r2
   21b04:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21b08:	e0fffe17 	ldw	r3,-8(fp)
   21b0c:	e0bff617 	ldw	r2,-40(fp)
   21b10:	1885c83a 	sub	r2,r3,r2
   21b14:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21b18:	e0fff917 	ldw	r3,-28(fp)
   21b1c:	e0bff617 	ldw	r2,-40(fp)
   21b20:	1885883a 	add	r2,r3,r2
   21b24:	10c1ffcc 	andi	r3,r2,2047
   21b28:	e0bffc17 	ldw	r2,-16(fp)
   21b2c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21b30:	e0bffe17 	ldw	r2,-8(fp)
   21b34:	00bfc716 	blt	zero,r2,21a54 <__alt_data_end+0xfffe8a54>
   21b38:	00000106 	br	21b40 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   21b3c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b40:	0005303a 	rdctl	r2,status
   21b44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b48:	e0fffb17 	ldw	r3,-20(fp)
   21b4c:	00bfff84 	movi	r2,-2
   21b50:	1884703a 	and	r2,r3,r2
   21b54:	1001703a 	wrctl	status,r2
  
  return context;
   21b58:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21b5c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21b60:	e0bffc17 	ldw	r2,-16(fp)
   21b64:	10800817 	ldw	r2,32(r2)
   21b68:	10c00094 	ori	r3,r2,2
   21b6c:	e0bffc17 	ldw	r2,-16(fp)
   21b70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21b74:	e0bffc17 	ldw	r2,-16(fp)
   21b78:	10800017 	ldw	r2,0(r2)
   21b7c:	10800104 	addi	r2,r2,4
   21b80:	1007883a 	mov	r3,r2
   21b84:	e0bffc17 	ldw	r2,-16(fp)
   21b88:	10800817 	ldw	r2,32(r2)
   21b8c:	18800035 	stwio	r2,0(r3)
   21b90:	e0bffa17 	ldw	r2,-24(fp)
   21b94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b98:	e0bff817 	ldw	r2,-32(fp)
   21b9c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   21ba0:	e0bffe17 	ldw	r2,-8(fp)
   21ba4:	0080100e 	bge	zero,r2,21be8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21ba8:	e0bfff17 	ldw	r2,-4(fp)
   21bac:	1090000c 	andi	r2,r2,16384
   21bb0:	1000101e 	bne	r2,zero,21bf4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21bb4:	0001883a 	nop
   21bb8:	e0bffc17 	ldw	r2,-16(fp)
   21bbc:	10c00d17 	ldw	r3,52(r2)
   21bc0:	e0bff517 	ldw	r2,-44(fp)
   21bc4:	1880051e 	bne	r3,r2,21bdc <altera_avalon_jtag_uart_write+0x1b8>
   21bc8:	e0bffc17 	ldw	r2,-16(fp)
   21bcc:	10c00917 	ldw	r3,36(r2)
   21bd0:	e0bffc17 	ldw	r2,-16(fp)
   21bd4:	10800117 	ldw	r2,4(r2)
   21bd8:	18bff736 	bltu	r3,r2,21bb8 <__alt_data_end+0xfffe8bb8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21bdc:	e0bffc17 	ldw	r2,-16(fp)
   21be0:	10800917 	ldw	r2,36(r2)
   21be4:	1000051e 	bne	r2,zero,21bfc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   21be8:	e0bffe17 	ldw	r2,-8(fp)
   21bec:	00bfd016 	blt	zero,r2,21b30 <__alt_data_end+0xfffe8b30>
   21bf0:	00000306 	br	21c00 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   21bf4:	0001883a 	nop
   21bf8:	00000106 	br	21c00 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21bfc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21c00:	e0fffd17 	ldw	r3,-12(fp)
   21c04:	e0bff717 	ldw	r2,-36(fp)
   21c08:	18800426 	beq	r3,r2,21c1c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21c0c:	e0fffd17 	ldw	r3,-12(fp)
   21c10:	e0bff717 	ldw	r2,-36(fp)
   21c14:	1885c83a 	sub	r2,r3,r2
   21c18:	00000606 	br	21c34 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   21c1c:	e0bfff17 	ldw	r2,-4(fp)
   21c20:	1090000c 	andi	r2,r2,16384
   21c24:	10000226 	beq	r2,zero,21c30 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   21c28:	00bffd44 	movi	r2,-11
   21c2c:	00000106 	br	21c34 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21c30:	00bffec4 	movi	r2,-5
}
   21c34:	e037883a 	mov	sp,fp
   21c38:	dfc00117 	ldw	ra,4(sp)
   21c3c:	df000017 	ldw	fp,0(sp)
   21c40:	dec00204 	addi	sp,sp,8
   21c44:	f800283a 	ret

00021c48 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21c48:	defffa04 	addi	sp,sp,-24
   21c4c:	dfc00515 	stw	ra,20(sp)
   21c50:	df000415 	stw	fp,16(sp)
   21c54:	df000404 	addi	fp,sp,16
   21c58:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21c5c:	0007883a 	mov	r3,zero
   21c60:	e0bfff17 	ldw	r2,-4(fp)
   21c64:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21c68:	e0bfff17 	ldw	r2,-4(fp)
   21c6c:	10800104 	addi	r2,r2,4
   21c70:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c74:	0005303a 	rdctl	r2,status
   21c78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c7c:	e0fffd17 	ldw	r3,-12(fp)
   21c80:	00bfff84 	movi	r2,-2
   21c84:	1884703a 	and	r2,r3,r2
   21c88:	1001703a 	wrctl	status,r2
  
  return context;
   21c8c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21c90:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   21c94:	00227280 	call	22728 <alt_tick>
   21c98:	e0bffc17 	ldw	r2,-16(fp)
   21c9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ca0:	e0bffe17 	ldw	r2,-8(fp)
   21ca4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   21ca8:	0001883a 	nop
   21cac:	e037883a 	mov	sp,fp
   21cb0:	dfc00117 	ldw	ra,4(sp)
   21cb4:	df000017 	ldw	fp,0(sp)
   21cb8:	dec00204 	addi	sp,sp,8
   21cbc:	f800283a 	ret

00021cc0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   21cc0:	defff804 	addi	sp,sp,-32
   21cc4:	dfc00715 	stw	ra,28(sp)
   21cc8:	df000615 	stw	fp,24(sp)
   21ccc:	df000604 	addi	fp,sp,24
   21cd0:	e13ffc15 	stw	r4,-16(fp)
   21cd4:	e17ffd15 	stw	r5,-12(fp)
   21cd8:	e1bffe15 	stw	r6,-8(fp)
   21cdc:	e1ffff15 	stw	r7,-4(fp)
   21ce0:	e0bfff17 	ldw	r2,-4(fp)
   21ce4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   21ce8:	d0a6b017 	ldw	r2,-25920(gp)
   21cec:	1000021e 	bne	r2,zero,21cf8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   21cf0:	e0bffb17 	ldw	r2,-20(fp)
   21cf4:	d0a6b015 	stw	r2,-25920(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   21cf8:	e0bffc17 	ldw	r2,-16(fp)
   21cfc:	10800104 	addi	r2,r2,4
   21d00:	00c001c4 	movi	r3,7
   21d04:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21d08:	d8000015 	stw	zero,0(sp)
   21d0c:	e1fffc17 	ldw	r7,-16(fp)
   21d10:	018000b4 	movhi	r6,2
   21d14:	31871204 	addi	r6,r6,7240
   21d18:	e17ffe17 	ldw	r5,-8(fp)
   21d1c:	e13ffd17 	ldw	r4,-12(fp)
   21d20:	0020cd00 	call	20cd0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21d24:	0001883a 	nop
   21d28:	e037883a 	mov	sp,fp
   21d2c:	dfc00117 	ldw	ra,4(sp)
   21d30:	df000017 	ldw	fp,0(sp)
   21d34:	dec00204 	addi	sp,sp,8
   21d38:	f800283a 	ret

00021d3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21d3c:	defff504 	addi	sp,sp,-44
   21d40:	df000a15 	stw	fp,40(sp)
   21d44:	df000a04 	addi	fp,sp,40
   21d48:	e13ffc15 	stw	r4,-16(fp)
   21d4c:	e17ffd15 	stw	r5,-12(fp)
   21d50:	e1bffe15 	stw	r6,-8(fp)
   21d54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21d58:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21d5c:	d0a6b017 	ldw	r2,-25920(gp)
  
  if (alt_ticks_per_second ())
   21d60:	10003c26 	beq	r2,zero,21e54 <alt_alarm_start+0x118>
  {
    if (alarm)
   21d64:	e0bffc17 	ldw	r2,-16(fp)
   21d68:	10003826 	beq	r2,zero,21e4c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21d6c:	e0bffc17 	ldw	r2,-16(fp)
   21d70:	e0fffe17 	ldw	r3,-8(fp)
   21d74:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21d78:	e0bffc17 	ldw	r2,-16(fp)
   21d7c:	e0ffff17 	ldw	r3,-4(fp)
   21d80:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21d84:	0005303a 	rdctl	r2,status
   21d88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21d8c:	e0fff917 	ldw	r3,-28(fp)
   21d90:	00bfff84 	movi	r2,-2
   21d94:	1884703a 	and	r2,r3,r2
   21d98:	1001703a 	wrctl	status,r2
  
  return context;
   21d9c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   21da0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21da4:	d0a6b117 	ldw	r2,-25916(gp)
      
      current_nticks = alt_nticks();
   21da8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21dac:	e0fffd17 	ldw	r3,-12(fp)
   21db0:	e0bff617 	ldw	r2,-40(fp)
   21db4:	1885883a 	add	r2,r3,r2
   21db8:	10c00044 	addi	r3,r2,1
   21dbc:	e0bffc17 	ldw	r2,-16(fp)
   21dc0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   21dc4:	e0bffc17 	ldw	r2,-16(fp)
   21dc8:	10c00217 	ldw	r3,8(r2)
   21dcc:	e0bff617 	ldw	r2,-40(fp)
   21dd0:	1880042e 	bgeu	r3,r2,21de4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   21dd4:	e0bffc17 	ldw	r2,-16(fp)
   21dd8:	00c00044 	movi	r3,1
   21ddc:	10c00405 	stb	r3,16(r2)
   21de0:	00000206 	br	21dec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   21de4:	e0bffc17 	ldw	r2,-16(fp)
   21de8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21dec:	e0bffc17 	ldw	r2,-16(fp)
   21df0:	d0e00804 	addi	r3,gp,-32736
   21df4:	e0fffa15 	stw	r3,-24(fp)
   21df8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21dfc:	e0bffb17 	ldw	r2,-20(fp)
   21e00:	e0fffa17 	ldw	r3,-24(fp)
   21e04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21e08:	e0bffa17 	ldw	r2,-24(fp)
   21e0c:	10c00017 	ldw	r3,0(r2)
   21e10:	e0bffb17 	ldw	r2,-20(fp)
   21e14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21e18:	e0bffa17 	ldw	r2,-24(fp)
   21e1c:	10800017 	ldw	r2,0(r2)
   21e20:	e0fffb17 	ldw	r3,-20(fp)
   21e24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21e28:	e0bffa17 	ldw	r2,-24(fp)
   21e2c:	e0fffb17 	ldw	r3,-20(fp)
   21e30:	10c00015 	stw	r3,0(r2)
   21e34:	e0bff817 	ldw	r2,-32(fp)
   21e38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e3c:	e0bff717 	ldw	r2,-36(fp)
   21e40:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   21e44:	0005883a 	mov	r2,zero
   21e48:	00000306 	br	21e58 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   21e4c:	00bffa84 	movi	r2,-22
   21e50:	00000106 	br	21e58 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   21e54:	00bfde84 	movi	r2,-134
  }
}
   21e58:	e037883a 	mov	sp,fp
   21e5c:	df000017 	ldw	fp,0(sp)
   21e60:	dec00104 	addi	sp,sp,4
   21e64:	f800283a 	ret

00021e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21e68:	defffe04 	addi	sp,sp,-8
   21e6c:	dfc00115 	stw	ra,4(sp)
   21e70:	df000015 	stw	fp,0(sp)
   21e74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21e78:	d0a00717 	ldw	r2,-32740(gp)
   21e7c:	10000326 	beq	r2,zero,21e8c <alt_get_errno+0x24>
   21e80:	d0a00717 	ldw	r2,-32740(gp)
   21e84:	103ee83a 	callr	r2
   21e88:	00000106 	br	21e90 <alt_get_errno+0x28>
   21e8c:	d0a6b204 	addi	r2,gp,-25912
}
   21e90:	e037883a 	mov	sp,fp
   21e94:	dfc00117 	ldw	ra,4(sp)
   21e98:	df000017 	ldw	fp,0(sp)
   21e9c:	dec00204 	addi	sp,sp,8
   21ea0:	f800283a 	ret

00021ea4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   21ea4:	defffb04 	addi	sp,sp,-20
   21ea8:	dfc00415 	stw	ra,16(sp)
   21eac:	df000315 	stw	fp,12(sp)
   21eb0:	df000304 	addi	fp,sp,12
   21eb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   21eb8:	e0bfff17 	ldw	r2,-4(fp)
   21ebc:	10000816 	blt	r2,zero,21ee0 <close+0x3c>
   21ec0:	01400304 	movi	r5,12
   21ec4:	e13fff17 	ldw	r4,-4(fp)
   21ec8:	0020ca80 	call	20ca8 <__mulsi3>
   21ecc:	1007883a 	mov	r3,r2
   21ed0:	008000b4 	movhi	r2,2
   21ed4:	109c7304 	addi	r2,r2,29132
   21ed8:	1885883a 	add	r2,r3,r2
   21edc:	00000106 	br	21ee4 <close+0x40>
   21ee0:	0005883a 	mov	r2,zero
   21ee4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   21ee8:	e0bffd17 	ldw	r2,-12(fp)
   21eec:	10001926 	beq	r2,zero,21f54 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   21ef0:	e0bffd17 	ldw	r2,-12(fp)
   21ef4:	10800017 	ldw	r2,0(r2)
   21ef8:	10800417 	ldw	r2,16(r2)
   21efc:	10000626 	beq	r2,zero,21f18 <close+0x74>
   21f00:	e0bffd17 	ldw	r2,-12(fp)
   21f04:	10800017 	ldw	r2,0(r2)
   21f08:	10800417 	ldw	r2,16(r2)
   21f0c:	e13ffd17 	ldw	r4,-12(fp)
   21f10:	103ee83a 	callr	r2
   21f14:	00000106 	br	21f1c <close+0x78>
   21f18:	0005883a 	mov	r2,zero
   21f1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21f20:	e13fff17 	ldw	r4,-4(fp)
   21f24:	00226080 	call	22608 <alt_release_fd>
    if (rval < 0)
   21f28:	e0bffe17 	ldw	r2,-8(fp)
   21f2c:	1000070e 	bge	r2,zero,21f4c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   21f30:	0021e680 	call	21e68 <alt_get_errno>
   21f34:	1007883a 	mov	r3,r2
   21f38:	e0bffe17 	ldw	r2,-8(fp)
   21f3c:	0085c83a 	sub	r2,zero,r2
   21f40:	18800015 	stw	r2,0(r3)
      return -1;
   21f44:	00bfffc4 	movi	r2,-1
   21f48:	00000706 	br	21f68 <close+0xc4>
    }
    return 0;
   21f4c:	0005883a 	mov	r2,zero
   21f50:	00000506 	br	21f68 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21f54:	0021e680 	call	21e68 <alt_get_errno>
   21f58:	1007883a 	mov	r3,r2
   21f5c:	00801444 	movi	r2,81
   21f60:	18800015 	stw	r2,0(r3)
    return -1;
   21f64:	00bfffc4 	movi	r2,-1
  }
}
   21f68:	e037883a 	mov	sp,fp
   21f6c:	dfc00117 	ldw	ra,4(sp)
   21f70:	df000017 	ldw	fp,0(sp)
   21f74:	dec00204 	addi	sp,sp,8
   21f78:	f800283a 	ret

00021f7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21f7c:	deffff04 	addi	sp,sp,-4
   21f80:	df000015 	stw	fp,0(sp)
   21f84:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21f88:	0001883a 	nop
   21f8c:	e037883a 	mov	sp,fp
   21f90:	df000017 	ldw	fp,0(sp)
   21f94:	dec00104 	addi	sp,sp,4
   21f98:	f800283a 	ret

00021f9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   21f9c:	defffc04 	addi	sp,sp,-16
   21fa0:	df000315 	stw	fp,12(sp)
   21fa4:	df000304 	addi	fp,sp,12
   21fa8:	e13ffd15 	stw	r4,-12(fp)
   21fac:	e17ffe15 	stw	r5,-8(fp)
   21fb0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   21fb4:	e0bfff17 	ldw	r2,-4(fp)
}
   21fb8:	e037883a 	mov	sp,fp
   21fbc:	df000017 	ldw	fp,0(sp)
   21fc0:	dec00104 	addi	sp,sp,4
   21fc4:	f800283a 	ret

00021fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21fc8:	defffe04 	addi	sp,sp,-8
   21fcc:	dfc00115 	stw	ra,4(sp)
   21fd0:	df000015 	stw	fp,0(sp)
   21fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21fd8:	d0a00717 	ldw	r2,-32740(gp)
   21fdc:	10000326 	beq	r2,zero,21fec <alt_get_errno+0x24>
   21fe0:	d0a00717 	ldw	r2,-32740(gp)
   21fe4:	103ee83a 	callr	r2
   21fe8:	00000106 	br	21ff0 <alt_get_errno+0x28>
   21fec:	d0a6b204 	addi	r2,gp,-25912
}
   21ff0:	e037883a 	mov	sp,fp
   21ff4:	dfc00117 	ldw	ra,4(sp)
   21ff8:	df000017 	ldw	fp,0(sp)
   21ffc:	dec00204 	addi	sp,sp,8
   22000:	f800283a 	ret

00022004 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22004:	defffa04 	addi	sp,sp,-24
   22008:	dfc00515 	stw	ra,20(sp)
   2200c:	df000415 	stw	fp,16(sp)
   22010:	df000404 	addi	fp,sp,16
   22014:	e13ffe15 	stw	r4,-8(fp)
   22018:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2201c:	e0bffe17 	ldw	r2,-8(fp)
   22020:	10000326 	beq	r2,zero,22030 <alt_dev_llist_insert+0x2c>
   22024:	e0bffe17 	ldw	r2,-8(fp)
   22028:	10800217 	ldw	r2,8(r2)
   2202c:	1000061e 	bne	r2,zero,22048 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22030:	0021fc80 	call	21fc8 <alt_get_errno>
   22034:	1007883a 	mov	r3,r2
   22038:	00800584 	movi	r2,22
   2203c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22040:	00bffa84 	movi	r2,-22
   22044:	00001306 	br	22094 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22048:	e0bffe17 	ldw	r2,-8(fp)
   2204c:	e0ffff17 	ldw	r3,-4(fp)
   22050:	e0fffc15 	stw	r3,-16(fp)
   22054:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22058:	e0bffd17 	ldw	r2,-12(fp)
   2205c:	e0fffc17 	ldw	r3,-16(fp)
   22060:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22064:	e0bffc17 	ldw	r2,-16(fp)
   22068:	10c00017 	ldw	r3,0(r2)
   2206c:	e0bffd17 	ldw	r2,-12(fp)
   22070:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22074:	e0bffc17 	ldw	r2,-16(fp)
   22078:	10800017 	ldw	r2,0(r2)
   2207c:	e0fffd17 	ldw	r3,-12(fp)
   22080:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22084:	e0bffc17 	ldw	r2,-16(fp)
   22088:	e0fffd17 	ldw	r3,-12(fp)
   2208c:	10c00015 	stw	r3,0(r2)

  return 0;  
   22090:	0005883a 	mov	r2,zero
}
   22094:	e037883a 	mov	sp,fp
   22098:	dfc00117 	ldw	ra,4(sp)
   2209c:	df000017 	ldw	fp,0(sp)
   220a0:	dec00204 	addi	sp,sp,8
   220a4:	f800283a 	ret

000220a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   220a8:	defffd04 	addi	sp,sp,-12
   220ac:	dfc00215 	stw	ra,8(sp)
   220b0:	df000115 	stw	fp,4(sp)
   220b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   220b8:	008000b4 	movhi	r2,2
   220bc:	10982e04 	addi	r2,r2,24760
   220c0:	e0bfff15 	stw	r2,-4(fp)
   220c4:	00000606 	br	220e0 <_do_ctors+0x38>
        (*ctor) (); 
   220c8:	e0bfff17 	ldw	r2,-4(fp)
   220cc:	10800017 	ldw	r2,0(r2)
   220d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   220d4:	e0bfff17 	ldw	r2,-4(fp)
   220d8:	10bfff04 	addi	r2,r2,-4
   220dc:	e0bfff15 	stw	r2,-4(fp)
   220e0:	e0ffff17 	ldw	r3,-4(fp)
   220e4:	008000b4 	movhi	r2,2
   220e8:	10982f04 	addi	r2,r2,24764
   220ec:	18bff62e 	bgeu	r3,r2,220c8 <__alt_data_end+0xfffe90c8>
        (*ctor) (); 
}
   220f0:	0001883a 	nop
   220f4:	e037883a 	mov	sp,fp
   220f8:	dfc00117 	ldw	ra,4(sp)
   220fc:	df000017 	ldw	fp,0(sp)
   22100:	dec00204 	addi	sp,sp,8
   22104:	f800283a 	ret

00022108 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22108:	defffd04 	addi	sp,sp,-12
   2210c:	dfc00215 	stw	ra,8(sp)
   22110:	df000115 	stw	fp,4(sp)
   22114:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22118:	008000b4 	movhi	r2,2
   2211c:	10982e04 	addi	r2,r2,24760
   22120:	e0bfff15 	stw	r2,-4(fp)
   22124:	00000606 	br	22140 <_do_dtors+0x38>
        (*dtor) (); 
   22128:	e0bfff17 	ldw	r2,-4(fp)
   2212c:	10800017 	ldw	r2,0(r2)
   22130:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22134:	e0bfff17 	ldw	r2,-4(fp)
   22138:	10bfff04 	addi	r2,r2,-4
   2213c:	e0bfff15 	stw	r2,-4(fp)
   22140:	e0ffff17 	ldw	r3,-4(fp)
   22144:	008000b4 	movhi	r2,2
   22148:	10982f04 	addi	r2,r2,24764
   2214c:	18bff62e 	bgeu	r3,r2,22128 <__alt_data_end+0xfffe9128>
        (*dtor) (); 
}
   22150:	0001883a 	nop
   22154:	e037883a 	mov	sp,fp
   22158:	dfc00117 	ldw	ra,4(sp)
   2215c:	df000017 	ldw	fp,0(sp)
   22160:	dec00204 	addi	sp,sp,8
   22164:	f800283a 	ret

00022168 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22168:	deffff04 	addi	sp,sp,-4
   2216c:	df000015 	stw	fp,0(sp)
   22170:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22174:	0001883a 	nop
   22178:	e037883a 	mov	sp,fp
   2217c:	df000017 	ldw	fp,0(sp)
   22180:	dec00104 	addi	sp,sp,4
   22184:	f800283a 	ret

00022188 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   22188:	defffe04 	addi	sp,sp,-8
   2218c:	df000115 	stw	fp,4(sp)
   22190:	df000104 	addi	fp,sp,4
   22194:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   22198:	e0bfff17 	ldw	r2,-4(fp)
   2219c:	10bffe84 	addi	r2,r2,-6
   221a0:	10c00428 	cmpgeui	r3,r2,16
   221a4:	18001a1e 	bne	r3,zero,22210 <alt_exception_cause_generated_bad_addr+0x88>
   221a8:	100690ba 	slli	r3,r2,2
   221ac:	008000b4 	movhi	r2,2
   221b0:	10887004 	addi	r2,r2,8640
   221b4:	1885883a 	add	r2,r3,r2
   221b8:	10800017 	ldw	r2,0(r2)
   221bc:	1000683a 	jmp	r2
   221c0:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
   221c4:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
   221c8:	00022210 	cmplti	zero,zero,2184
   221cc:	00022210 	cmplti	zero,zero,2184
   221d0:	00022210 	cmplti	zero,zero,2184
   221d4:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
   221d8:	00022208 	cmpgei	zero,zero,2184
   221dc:	00022210 	cmplti	zero,zero,2184
   221e0:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
   221e4:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
   221e8:	00022210 	cmplti	zero,zero,2184
   221ec:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
   221f0:	00022208 	cmpgei	zero,zero,2184
   221f4:	00022210 	cmplti	zero,zero,2184
   221f8:	00022210 	cmplti	zero,zero,2184
   221fc:	00022200 	call	2220 <__alt_mem_onchip_ram-0x1dde0>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   22200:	00800044 	movi	r2,1
   22204:	00000306 	br	22214 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22208:	0005883a 	mov	r2,zero
   2220c:	00000106 	br	22214 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   22210:	0005883a 	mov	r2,zero
  }
}
   22214:	e037883a 	mov	sp,fp
   22218:	df000017 	ldw	fp,0(sp)
   2221c:	dec00104 	addi	sp,sp,4
   22220:	f800283a 	ret

00022224 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22224:	defff804 	addi	sp,sp,-32
   22228:	dfc00715 	stw	ra,28(sp)
   2222c:	df000615 	stw	fp,24(sp)
   22230:	dc000515 	stw	r16,20(sp)
   22234:	df000604 	addi	fp,sp,24
   22238:	e13ffb15 	stw	r4,-20(fp)
   2223c:	e17ffc15 	stw	r5,-16(fp)
   22240:	e1bffd15 	stw	r6,-12(fp)
   22244:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   22248:	e1bffe17 	ldw	r6,-8(fp)
   2224c:	e17ffd17 	ldw	r5,-12(fp)
   22250:	e13ffc17 	ldw	r4,-16(fp)
   22254:	00224ac0 	call	224ac <open>
   22258:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2225c:	e0bffa17 	ldw	r2,-24(fp)
   22260:	10002216 	blt	r2,zero,222ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22264:	040000b4 	movhi	r16,2
   22268:	841c7304 	addi	r16,r16,29132
   2226c:	e0bffa17 	ldw	r2,-24(fp)
   22270:	01400304 	movi	r5,12
   22274:	1009883a 	mov	r4,r2
   22278:	0020ca80 	call	20ca8 <__mulsi3>
   2227c:	8085883a 	add	r2,r16,r2
   22280:	10c00017 	ldw	r3,0(r2)
   22284:	e0bffb17 	ldw	r2,-20(fp)
   22288:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2228c:	040000b4 	movhi	r16,2
   22290:	841c7304 	addi	r16,r16,29132
   22294:	e0bffa17 	ldw	r2,-24(fp)
   22298:	01400304 	movi	r5,12
   2229c:	1009883a 	mov	r4,r2
   222a0:	0020ca80 	call	20ca8 <__mulsi3>
   222a4:	8085883a 	add	r2,r16,r2
   222a8:	10800104 	addi	r2,r2,4
   222ac:	10c00017 	ldw	r3,0(r2)
   222b0:	e0bffb17 	ldw	r2,-20(fp)
   222b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   222b8:	040000b4 	movhi	r16,2
   222bc:	841c7304 	addi	r16,r16,29132
   222c0:	e0bffa17 	ldw	r2,-24(fp)
   222c4:	01400304 	movi	r5,12
   222c8:	1009883a 	mov	r4,r2
   222cc:	0020ca80 	call	20ca8 <__mulsi3>
   222d0:	8085883a 	add	r2,r16,r2
   222d4:	10800204 	addi	r2,r2,8
   222d8:	10c00017 	ldw	r3,0(r2)
   222dc:	e0bffb17 	ldw	r2,-20(fp)
   222e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   222e4:	e13ffa17 	ldw	r4,-24(fp)
   222e8:	00226080 	call	22608 <alt_release_fd>
  }
} 
   222ec:	0001883a 	nop
   222f0:	e6ffff04 	addi	sp,fp,-4
   222f4:	dfc00217 	ldw	ra,8(sp)
   222f8:	df000117 	ldw	fp,4(sp)
   222fc:	dc000017 	ldw	r16,0(sp)
   22300:	dec00304 	addi	sp,sp,12
   22304:	f800283a 	ret

00022308 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22308:	defffb04 	addi	sp,sp,-20
   2230c:	dfc00415 	stw	ra,16(sp)
   22310:	df000315 	stw	fp,12(sp)
   22314:	df000304 	addi	fp,sp,12
   22318:	e13ffd15 	stw	r4,-12(fp)
   2231c:	e17ffe15 	stw	r5,-8(fp)
   22320:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22324:	01c07fc4 	movi	r7,511
   22328:	01800044 	movi	r6,1
   2232c:	e17ffd17 	ldw	r5,-12(fp)
   22330:	010000b4 	movhi	r4,2
   22334:	211c7604 	addi	r4,r4,29144
   22338:	00222240 	call	22224 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2233c:	01c07fc4 	movi	r7,511
   22340:	000d883a 	mov	r6,zero
   22344:	e17ffe17 	ldw	r5,-8(fp)
   22348:	010000b4 	movhi	r4,2
   2234c:	211c7304 	addi	r4,r4,29132
   22350:	00222240 	call	22224 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22354:	01c07fc4 	movi	r7,511
   22358:	01800044 	movi	r6,1
   2235c:	e17fff17 	ldw	r5,-4(fp)
   22360:	010000b4 	movhi	r4,2
   22364:	211c7904 	addi	r4,r4,29156
   22368:	00222240 	call	22224 <alt_open_fd>
}  
   2236c:	0001883a 	nop
   22370:	e037883a 	mov	sp,fp
   22374:	dfc00117 	ldw	ra,4(sp)
   22378:	df000017 	ldw	fp,0(sp)
   2237c:	dec00204 	addi	sp,sp,8
   22380:	f800283a 	ret

00022384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22384:	defffe04 	addi	sp,sp,-8
   22388:	dfc00115 	stw	ra,4(sp)
   2238c:	df000015 	stw	fp,0(sp)
   22390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22394:	d0a00717 	ldw	r2,-32740(gp)
   22398:	10000326 	beq	r2,zero,223a8 <alt_get_errno+0x24>
   2239c:	d0a00717 	ldw	r2,-32740(gp)
   223a0:	103ee83a 	callr	r2
   223a4:	00000106 	br	223ac <alt_get_errno+0x28>
   223a8:	d0a6b204 	addi	r2,gp,-25912
}
   223ac:	e037883a 	mov	sp,fp
   223b0:	dfc00117 	ldw	ra,4(sp)
   223b4:	df000017 	ldw	fp,0(sp)
   223b8:	dec00204 	addi	sp,sp,8
   223bc:	f800283a 	ret

000223c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   223c0:	defffb04 	addi	sp,sp,-20
   223c4:	dfc00415 	stw	ra,16(sp)
   223c8:	df000315 	stw	fp,12(sp)
   223cc:	dc000215 	stw	r16,8(sp)
   223d0:	df000304 	addi	fp,sp,12
   223d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   223d8:	e0bffe17 	ldw	r2,-8(fp)
   223dc:	10800217 	ldw	r2,8(r2)
   223e0:	10d00034 	orhi	r3,r2,16384
   223e4:	e0bffe17 	ldw	r2,-8(fp)
   223e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   223ec:	e03ffd15 	stw	zero,-12(fp)
   223f0:	00002306 	br	22480 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   223f4:	040000b4 	movhi	r16,2
   223f8:	841c7304 	addi	r16,r16,29132
   223fc:	e0bffd17 	ldw	r2,-12(fp)
   22400:	01400304 	movi	r5,12
   22404:	1009883a 	mov	r4,r2
   22408:	0020ca80 	call	20ca8 <__mulsi3>
   2240c:	8085883a 	add	r2,r16,r2
   22410:	10c00017 	ldw	r3,0(r2)
   22414:	e0bffe17 	ldw	r2,-8(fp)
   22418:	10800017 	ldw	r2,0(r2)
   2241c:	1880151e 	bne	r3,r2,22474 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22420:	040000b4 	movhi	r16,2
   22424:	841c7304 	addi	r16,r16,29132
   22428:	e0bffd17 	ldw	r2,-12(fp)
   2242c:	01400304 	movi	r5,12
   22430:	1009883a 	mov	r4,r2
   22434:	0020ca80 	call	20ca8 <__mulsi3>
   22438:	8085883a 	add	r2,r16,r2
   2243c:	10800204 	addi	r2,r2,8
   22440:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22444:	10000b0e 	bge	r2,zero,22474 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22448:	01400304 	movi	r5,12
   2244c:	e13ffd17 	ldw	r4,-12(fp)
   22450:	0020ca80 	call	20ca8 <__mulsi3>
   22454:	1007883a 	mov	r3,r2
   22458:	008000b4 	movhi	r2,2
   2245c:	109c7304 	addi	r2,r2,29132
   22460:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22464:	e0bffe17 	ldw	r2,-8(fp)
   22468:	18800226 	beq	r3,r2,22474 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2246c:	00bffcc4 	movi	r2,-13
   22470:	00000806 	br	22494 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22474:	e0bffd17 	ldw	r2,-12(fp)
   22478:	10800044 	addi	r2,r2,1
   2247c:	e0bffd15 	stw	r2,-12(fp)
   22480:	d0a00617 	ldw	r2,-32744(gp)
   22484:	1007883a 	mov	r3,r2
   22488:	e0bffd17 	ldw	r2,-12(fp)
   2248c:	18bfd92e 	bgeu	r3,r2,223f4 <__alt_data_end+0xfffe93f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22490:	0005883a 	mov	r2,zero
}
   22494:	e6ffff04 	addi	sp,fp,-4
   22498:	dfc00217 	ldw	ra,8(sp)
   2249c:	df000117 	ldw	fp,4(sp)
   224a0:	dc000017 	ldw	r16,0(sp)
   224a4:	dec00304 	addi	sp,sp,12
   224a8:	f800283a 	ret

000224ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   224ac:	defff604 	addi	sp,sp,-40
   224b0:	dfc00915 	stw	ra,36(sp)
   224b4:	df000815 	stw	fp,32(sp)
   224b8:	df000804 	addi	fp,sp,32
   224bc:	e13ffd15 	stw	r4,-12(fp)
   224c0:	e17ffe15 	stw	r5,-8(fp)
   224c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   224c8:	00bfffc4 	movi	r2,-1
   224cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   224d0:	00bffb44 	movi	r2,-19
   224d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   224d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   224dc:	d1600404 	addi	r5,gp,-32752
   224e0:	e13ffd17 	ldw	r4,-12(fp)
   224e4:	00228540 	call	22854 <alt_find_dev>
   224e8:	e0bff815 	stw	r2,-32(fp)
   224ec:	e0bff817 	ldw	r2,-32(fp)
   224f0:	1000051e 	bne	r2,zero,22508 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   224f4:	e13ffd17 	ldw	r4,-12(fp)
   224f8:	00228e40 	call	228e4 <alt_find_file>
   224fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22500:	00800044 	movi	r2,1
   22504:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22508:	e0bff817 	ldw	r2,-32(fp)
   2250c:	10002b26 	beq	r2,zero,225bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22510:	e13ff817 	ldw	r4,-32(fp)
   22514:	00229ec0 	call	229ec <alt_get_fd>
   22518:	e0bff915 	stw	r2,-28(fp)
   2251c:	e0bff917 	ldw	r2,-28(fp)
   22520:	1000030e 	bge	r2,zero,22530 <open+0x84>
    {
      status = index;
   22524:	e0bff917 	ldw	r2,-28(fp)
   22528:	e0bffa15 	stw	r2,-24(fp)
   2252c:	00002506 	br	225c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   22530:	01400304 	movi	r5,12
   22534:	e13ff917 	ldw	r4,-28(fp)
   22538:	0020ca80 	call	20ca8 <__mulsi3>
   2253c:	1007883a 	mov	r3,r2
   22540:	008000b4 	movhi	r2,2
   22544:	109c7304 	addi	r2,r2,29132
   22548:	1885883a 	add	r2,r3,r2
   2254c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22550:	e0fffe17 	ldw	r3,-8(fp)
   22554:	00900034 	movhi	r2,16384
   22558:	10bfffc4 	addi	r2,r2,-1
   2255c:	1886703a 	and	r3,r3,r2
   22560:	e0bffc17 	ldw	r2,-16(fp)
   22564:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22568:	e0bffb17 	ldw	r2,-20(fp)
   2256c:	1000051e 	bne	r2,zero,22584 <open+0xd8>
   22570:	e13ffc17 	ldw	r4,-16(fp)
   22574:	00223c00 	call	223c0 <alt_file_locked>
   22578:	e0bffa15 	stw	r2,-24(fp)
   2257c:	e0bffa17 	ldw	r2,-24(fp)
   22580:	10001016 	blt	r2,zero,225c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22584:	e0bff817 	ldw	r2,-32(fp)
   22588:	10800317 	ldw	r2,12(r2)
   2258c:	10000826 	beq	r2,zero,225b0 <open+0x104>
   22590:	e0bff817 	ldw	r2,-32(fp)
   22594:	10800317 	ldw	r2,12(r2)
   22598:	e1ffff17 	ldw	r7,-4(fp)
   2259c:	e1bffe17 	ldw	r6,-8(fp)
   225a0:	e17ffd17 	ldw	r5,-12(fp)
   225a4:	e13ffc17 	ldw	r4,-16(fp)
   225a8:	103ee83a 	callr	r2
   225ac:	00000106 	br	225b4 <open+0x108>
   225b0:	0005883a 	mov	r2,zero
   225b4:	e0bffa15 	stw	r2,-24(fp)
   225b8:	00000206 	br	225c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   225bc:	00bffb44 	movi	r2,-19
   225c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   225c4:	e0bffa17 	ldw	r2,-24(fp)
   225c8:	1000090e 	bge	r2,zero,225f0 <open+0x144>
  {
    alt_release_fd (index);  
   225cc:	e13ff917 	ldw	r4,-28(fp)
   225d0:	00226080 	call	22608 <alt_release_fd>
    ALT_ERRNO = -status;
   225d4:	00223840 	call	22384 <alt_get_errno>
   225d8:	1007883a 	mov	r3,r2
   225dc:	e0bffa17 	ldw	r2,-24(fp)
   225e0:	0085c83a 	sub	r2,zero,r2
   225e4:	18800015 	stw	r2,0(r3)
    return -1;
   225e8:	00bfffc4 	movi	r2,-1
   225ec:	00000106 	br	225f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   225f0:	e0bff917 	ldw	r2,-28(fp)
}
   225f4:	e037883a 	mov	sp,fp
   225f8:	dfc00117 	ldw	ra,4(sp)
   225fc:	df000017 	ldw	fp,0(sp)
   22600:	dec00204 	addi	sp,sp,8
   22604:	f800283a 	ret

00022608 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   22608:	defffc04 	addi	sp,sp,-16
   2260c:	dfc00315 	stw	ra,12(sp)
   22610:	df000215 	stw	fp,8(sp)
   22614:	dc000115 	stw	r16,4(sp)
   22618:	df000204 	addi	fp,sp,8
   2261c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   22620:	e0bffe17 	ldw	r2,-8(fp)
   22624:	108000d0 	cmplti	r2,r2,3
   22628:	1000111e 	bne	r2,zero,22670 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2262c:	040000b4 	movhi	r16,2
   22630:	841c7304 	addi	r16,r16,29132
   22634:	e0bffe17 	ldw	r2,-8(fp)
   22638:	01400304 	movi	r5,12
   2263c:	1009883a 	mov	r4,r2
   22640:	0020ca80 	call	20ca8 <__mulsi3>
   22644:	8085883a 	add	r2,r16,r2
   22648:	10800204 	addi	r2,r2,8
   2264c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   22650:	040000b4 	movhi	r16,2
   22654:	841c7304 	addi	r16,r16,29132
   22658:	e0bffe17 	ldw	r2,-8(fp)
   2265c:	01400304 	movi	r5,12
   22660:	1009883a 	mov	r4,r2
   22664:	0020ca80 	call	20ca8 <__mulsi3>
   22668:	8085883a 	add	r2,r16,r2
   2266c:	10000015 	stw	zero,0(r2)
  }
}
   22670:	0001883a 	nop
   22674:	e6ffff04 	addi	sp,fp,-4
   22678:	dfc00217 	ldw	ra,8(sp)
   2267c:	df000117 	ldw	fp,4(sp)
   22680:	dc000017 	ldw	r16,0(sp)
   22684:	dec00304 	addi	sp,sp,12
   22688:	f800283a 	ret

0002268c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2268c:	defffa04 	addi	sp,sp,-24
   22690:	df000515 	stw	fp,20(sp)
   22694:	df000504 	addi	fp,sp,20
   22698:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2269c:	0005303a 	rdctl	r2,status
   226a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   226a4:	e0fffc17 	ldw	r3,-16(fp)
   226a8:	00bfff84 	movi	r2,-2
   226ac:	1884703a 	and	r2,r3,r2
   226b0:	1001703a 	wrctl	status,r2
  
  return context;
   226b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   226b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   226bc:	e0bfff17 	ldw	r2,-4(fp)
   226c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   226c4:	e0bffd17 	ldw	r2,-12(fp)
   226c8:	10800017 	ldw	r2,0(r2)
   226cc:	e0fffd17 	ldw	r3,-12(fp)
   226d0:	18c00117 	ldw	r3,4(r3)
   226d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   226d8:	e0bffd17 	ldw	r2,-12(fp)
   226dc:	10800117 	ldw	r2,4(r2)
   226e0:	e0fffd17 	ldw	r3,-12(fp)
   226e4:	18c00017 	ldw	r3,0(r3)
   226e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   226ec:	e0bffd17 	ldw	r2,-12(fp)
   226f0:	e0fffd17 	ldw	r3,-12(fp)
   226f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   226f8:	e0bffd17 	ldw	r2,-12(fp)
   226fc:	e0fffd17 	ldw	r3,-12(fp)
   22700:	10c00015 	stw	r3,0(r2)
   22704:	e0bffb17 	ldw	r2,-20(fp)
   22708:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2270c:	e0bffe17 	ldw	r2,-8(fp)
   22710:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   22714:	0001883a 	nop
   22718:	e037883a 	mov	sp,fp
   2271c:	df000017 	ldw	fp,0(sp)
   22720:	dec00104 	addi	sp,sp,4
   22724:	f800283a 	ret

00022728 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   22728:	defffb04 	addi	sp,sp,-20
   2272c:	dfc00415 	stw	ra,16(sp)
   22730:	df000315 	stw	fp,12(sp)
   22734:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   22738:	d0a00817 	ldw	r2,-32736(gp)
   2273c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22740:	d0a6b117 	ldw	r2,-25916(gp)
   22744:	10800044 	addi	r2,r2,1
   22748:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2274c:	00002e06 	br	22808 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22750:	e0bffd17 	ldw	r2,-12(fp)
   22754:	10800017 	ldw	r2,0(r2)
   22758:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2275c:	e0bffd17 	ldw	r2,-12(fp)
   22760:	10800403 	ldbu	r2,16(r2)
   22764:	10803fcc 	andi	r2,r2,255
   22768:	10000426 	beq	r2,zero,2277c <alt_tick+0x54>
   2276c:	d0a6b117 	ldw	r2,-25916(gp)
   22770:	1000021e 	bne	r2,zero,2277c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22774:	e0bffd17 	ldw	r2,-12(fp)
   22778:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2277c:	e0bffd17 	ldw	r2,-12(fp)
   22780:	10800217 	ldw	r2,8(r2)
   22784:	d0e6b117 	ldw	r3,-25916(gp)
   22788:	18801d36 	bltu	r3,r2,22800 <alt_tick+0xd8>
   2278c:	e0bffd17 	ldw	r2,-12(fp)
   22790:	10800403 	ldbu	r2,16(r2)
   22794:	10803fcc 	andi	r2,r2,255
   22798:	1000191e 	bne	r2,zero,22800 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2279c:	e0bffd17 	ldw	r2,-12(fp)
   227a0:	10800317 	ldw	r2,12(r2)
   227a4:	e0fffd17 	ldw	r3,-12(fp)
   227a8:	18c00517 	ldw	r3,20(r3)
   227ac:	1809883a 	mov	r4,r3
   227b0:	103ee83a 	callr	r2
   227b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   227b8:	e0bfff17 	ldw	r2,-4(fp)
   227bc:	1000031e 	bne	r2,zero,227cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   227c0:	e13ffd17 	ldw	r4,-12(fp)
   227c4:	002268c0 	call	2268c <alt_alarm_stop>
   227c8:	00000d06 	br	22800 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   227cc:	e0bffd17 	ldw	r2,-12(fp)
   227d0:	10c00217 	ldw	r3,8(r2)
   227d4:	e0bfff17 	ldw	r2,-4(fp)
   227d8:	1887883a 	add	r3,r3,r2
   227dc:	e0bffd17 	ldw	r2,-12(fp)
   227e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   227e4:	e0bffd17 	ldw	r2,-12(fp)
   227e8:	10c00217 	ldw	r3,8(r2)
   227ec:	d0a6b117 	ldw	r2,-25916(gp)
   227f0:	1880032e 	bgeu	r3,r2,22800 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   227f4:	e0bffd17 	ldw	r2,-12(fp)
   227f8:	00c00044 	movi	r3,1
   227fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   22800:	e0bffe17 	ldw	r2,-8(fp)
   22804:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22808:	e0fffd17 	ldw	r3,-12(fp)
   2280c:	d0a00804 	addi	r2,gp,-32736
   22810:	18bfcf1e 	bne	r3,r2,22750 <__alt_data_end+0xfffe9750>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   22814:	0001883a 	nop
}
   22818:	0001883a 	nop
   2281c:	e037883a 	mov	sp,fp
   22820:	dfc00117 	ldw	ra,4(sp)
   22824:	df000017 	ldw	fp,0(sp)
   22828:	dec00204 	addi	sp,sp,8
   2282c:	f800283a 	ret

00022830 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22830:	deffff04 	addi	sp,sp,-4
   22834:	df000015 	stw	fp,0(sp)
   22838:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2283c:	000170fa 	wrctl	ienable,zero
}
   22840:	0001883a 	nop
   22844:	e037883a 	mov	sp,fp
   22848:	df000017 	ldw	fp,0(sp)
   2284c:	dec00104 	addi	sp,sp,4
   22850:	f800283a 	ret

00022854 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22854:	defffa04 	addi	sp,sp,-24
   22858:	dfc00515 	stw	ra,20(sp)
   2285c:	df000415 	stw	fp,16(sp)
   22860:	df000404 	addi	fp,sp,16
   22864:	e13ffe15 	stw	r4,-8(fp)
   22868:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2286c:	e0bfff17 	ldw	r2,-4(fp)
   22870:	10800017 	ldw	r2,0(r2)
   22874:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22878:	e13ffe17 	ldw	r4,-8(fp)
   2287c:	00242400 	call	24240 <strlen>
   22880:	10800044 	addi	r2,r2,1
   22884:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22888:	00000d06 	br	228c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2288c:	e0bffc17 	ldw	r2,-16(fp)
   22890:	10800217 	ldw	r2,8(r2)
   22894:	e0fffd17 	ldw	r3,-12(fp)
   22898:	180d883a 	mov	r6,r3
   2289c:	e17ffe17 	ldw	r5,-8(fp)
   228a0:	1009883a 	mov	r4,r2
   228a4:	00239680 	call	23968 <memcmp>
   228a8:	1000021e 	bne	r2,zero,228b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   228ac:	e0bffc17 	ldw	r2,-16(fp)
   228b0:	00000706 	br	228d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   228b4:	e0bffc17 	ldw	r2,-16(fp)
   228b8:	10800017 	ldw	r2,0(r2)
   228bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   228c0:	e0fffc17 	ldw	r3,-16(fp)
   228c4:	e0bfff17 	ldw	r2,-4(fp)
   228c8:	18bff01e 	bne	r3,r2,2288c <__alt_data_end+0xfffe988c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   228cc:	0005883a 	mov	r2,zero
}
   228d0:	e037883a 	mov	sp,fp
   228d4:	dfc00117 	ldw	ra,4(sp)
   228d8:	df000017 	ldw	fp,0(sp)
   228dc:	dec00204 	addi	sp,sp,8
   228e0:	f800283a 	ret

000228e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   228e4:	defffb04 	addi	sp,sp,-20
   228e8:	dfc00415 	stw	ra,16(sp)
   228ec:	df000315 	stw	fp,12(sp)
   228f0:	df000304 	addi	fp,sp,12
   228f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   228f8:	d0a00217 	ldw	r2,-32760(gp)
   228fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22900:	00003106 	br	229c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   22904:	e0bffd17 	ldw	r2,-12(fp)
   22908:	10800217 	ldw	r2,8(r2)
   2290c:	1009883a 	mov	r4,r2
   22910:	00242400 	call	24240 <strlen>
   22914:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22918:	e0bffd17 	ldw	r2,-12(fp)
   2291c:	10c00217 	ldw	r3,8(r2)
   22920:	e0bffe17 	ldw	r2,-8(fp)
   22924:	10bfffc4 	addi	r2,r2,-1
   22928:	1885883a 	add	r2,r3,r2
   2292c:	10800003 	ldbu	r2,0(r2)
   22930:	10803fcc 	andi	r2,r2,255
   22934:	1080201c 	xori	r2,r2,128
   22938:	10bfe004 	addi	r2,r2,-128
   2293c:	10800bd8 	cmpnei	r2,r2,47
   22940:	1000031e 	bne	r2,zero,22950 <alt_find_file+0x6c>
    {
      len -= 1;
   22944:	e0bffe17 	ldw	r2,-8(fp)
   22948:	10bfffc4 	addi	r2,r2,-1
   2294c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22950:	e0bffe17 	ldw	r2,-8(fp)
   22954:	e0ffff17 	ldw	r3,-4(fp)
   22958:	1885883a 	add	r2,r3,r2
   2295c:	10800003 	ldbu	r2,0(r2)
   22960:	10803fcc 	andi	r2,r2,255
   22964:	1080201c 	xori	r2,r2,128
   22968:	10bfe004 	addi	r2,r2,-128
   2296c:	10800be0 	cmpeqi	r2,r2,47
   22970:	1000081e 	bne	r2,zero,22994 <alt_find_file+0xb0>
   22974:	e0bffe17 	ldw	r2,-8(fp)
   22978:	e0ffff17 	ldw	r3,-4(fp)
   2297c:	1885883a 	add	r2,r3,r2
   22980:	10800003 	ldbu	r2,0(r2)
   22984:	10803fcc 	andi	r2,r2,255
   22988:	1080201c 	xori	r2,r2,128
   2298c:	10bfe004 	addi	r2,r2,-128
   22990:	10000a1e 	bne	r2,zero,229bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22994:	e0bffd17 	ldw	r2,-12(fp)
   22998:	10800217 	ldw	r2,8(r2)
   2299c:	e0fffe17 	ldw	r3,-8(fp)
   229a0:	180d883a 	mov	r6,r3
   229a4:	e17fff17 	ldw	r5,-4(fp)
   229a8:	1009883a 	mov	r4,r2
   229ac:	00239680 	call	23968 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   229b0:	1000021e 	bne	r2,zero,229bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   229b4:	e0bffd17 	ldw	r2,-12(fp)
   229b8:	00000706 	br	229d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   229bc:	e0bffd17 	ldw	r2,-12(fp)
   229c0:	10800017 	ldw	r2,0(r2)
   229c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   229c8:	e0fffd17 	ldw	r3,-12(fp)
   229cc:	d0a00204 	addi	r2,gp,-32760
   229d0:	18bfcc1e 	bne	r3,r2,22904 <__alt_data_end+0xfffe9904>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   229d4:	0005883a 	mov	r2,zero
}
   229d8:	e037883a 	mov	sp,fp
   229dc:	dfc00117 	ldw	ra,4(sp)
   229e0:	df000017 	ldw	fp,0(sp)
   229e4:	dec00204 	addi	sp,sp,8
   229e8:	f800283a 	ret

000229ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   229ec:	defffa04 	addi	sp,sp,-24
   229f0:	dfc00515 	stw	ra,20(sp)
   229f4:	df000415 	stw	fp,16(sp)
   229f8:	dc000315 	stw	r16,12(sp)
   229fc:	df000404 	addi	fp,sp,16
   22a00:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   22a04:	00bffa04 	movi	r2,-24
   22a08:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22a0c:	e03ffc15 	stw	zero,-16(fp)
   22a10:	00001d06 	br	22a88 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   22a14:	040000b4 	movhi	r16,2
   22a18:	841c7304 	addi	r16,r16,29132
   22a1c:	e0bffc17 	ldw	r2,-16(fp)
   22a20:	01400304 	movi	r5,12
   22a24:	1009883a 	mov	r4,r2
   22a28:	0020ca80 	call	20ca8 <__mulsi3>
   22a2c:	8085883a 	add	r2,r16,r2
   22a30:	10800017 	ldw	r2,0(r2)
   22a34:	1000111e 	bne	r2,zero,22a7c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   22a38:	040000b4 	movhi	r16,2
   22a3c:	841c7304 	addi	r16,r16,29132
   22a40:	e0bffc17 	ldw	r2,-16(fp)
   22a44:	01400304 	movi	r5,12
   22a48:	1009883a 	mov	r4,r2
   22a4c:	0020ca80 	call	20ca8 <__mulsi3>
   22a50:	8085883a 	add	r2,r16,r2
   22a54:	e0fffe17 	ldw	r3,-8(fp)
   22a58:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22a5c:	d0e00617 	ldw	r3,-32744(gp)
   22a60:	e0bffc17 	ldw	r2,-16(fp)
   22a64:	1880020e 	bge	r3,r2,22a70 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   22a68:	e0bffc17 	ldw	r2,-16(fp)
   22a6c:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   22a70:	e0bffc17 	ldw	r2,-16(fp)
   22a74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   22a78:	00000606 	br	22a94 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22a7c:	e0bffc17 	ldw	r2,-16(fp)
   22a80:	10800044 	addi	r2,r2,1
   22a84:	e0bffc15 	stw	r2,-16(fp)
   22a88:	e0bffc17 	ldw	r2,-16(fp)
   22a8c:	10800810 	cmplti	r2,r2,32
   22a90:	103fe01e 	bne	r2,zero,22a14 <__alt_data_end+0xfffe9a14>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22a94:	e0bffd17 	ldw	r2,-12(fp)
}
   22a98:	e6ffff04 	addi	sp,fp,-4
   22a9c:	dfc00217 	ldw	ra,8(sp)
   22aa0:	df000117 	ldw	fp,4(sp)
   22aa4:	dc000017 	ldw	r16,0(sp)
   22aa8:	dec00304 	addi	sp,sp,12
   22aac:	f800283a 	ret

00022ab0 <atexit>:
   22ab0:	200b883a 	mov	r5,r4
   22ab4:	000f883a 	mov	r7,zero
   22ab8:	000d883a 	mov	r6,zero
   22abc:	0009883a 	mov	r4,zero
   22ac0:	002442c1 	jmpi	2442c <__register_exitproc>

00022ac4 <exit>:
   22ac4:	defffe04 	addi	sp,sp,-8
   22ac8:	000b883a 	mov	r5,zero
   22acc:	dc000015 	stw	r16,0(sp)
   22ad0:	dfc00115 	stw	ra,4(sp)
   22ad4:	2021883a 	mov	r16,r4
   22ad8:	00245440 	call	24544 <__call_exitprocs>
   22adc:	008000b4 	movhi	r2,2
   22ae0:	109ee804 	addi	r2,r2,31648
   22ae4:	11000017 	ldw	r4,0(r2)
   22ae8:	20800f17 	ldw	r2,60(r4)
   22aec:	10000126 	beq	r2,zero,22af4 <exit+0x30>
   22af0:	103ee83a 	callr	r2
   22af4:	8009883a 	mov	r4,r16
   22af8:	0025a200 	call	25a20 <_exit>

00022afc <_fputs_r>:
   22afc:	defff804 	addi	sp,sp,-32
   22b00:	dc400615 	stw	r17,24(sp)
   22b04:	2023883a 	mov	r17,r4
   22b08:	2809883a 	mov	r4,r5
   22b0c:	dc000515 	stw	r16,20(sp)
   22b10:	dfc00715 	stw	ra,28(sp)
   22b14:	3021883a 	mov	r16,r6
   22b18:	d9400315 	stw	r5,12(sp)
   22b1c:	00242400 	call	24240 <strlen>
   22b20:	d8800215 	stw	r2,8(sp)
   22b24:	d8800415 	stw	r2,16(sp)
   22b28:	d8800304 	addi	r2,sp,12
   22b2c:	d8800015 	stw	r2,0(sp)
   22b30:	00800044 	movi	r2,1
   22b34:	d8800115 	stw	r2,4(sp)
   22b38:	88000226 	beq	r17,zero,22b44 <_fputs_r+0x48>
   22b3c:	88800e17 	ldw	r2,56(r17)
   22b40:	10001226 	beq	r2,zero,22b8c <_fputs_r+0x90>
   22b44:	8080030b 	ldhu	r2,12(r16)
   22b48:	10c8000c 	andi	r3,r2,8192
   22b4c:	1800061e 	bne	r3,zero,22b68 <_fputs_r+0x6c>
   22b50:	81001917 	ldw	r4,100(r16)
   22b54:	00f7ffc4 	movi	r3,-8193
   22b58:	10880014 	ori	r2,r2,8192
   22b5c:	20c6703a 	and	r3,r4,r3
   22b60:	8080030d 	sth	r2,12(r16)
   22b64:	80c01915 	stw	r3,100(r16)
   22b68:	d80d883a 	mov	r6,sp
   22b6c:	800b883a 	mov	r5,r16
   22b70:	8809883a 	mov	r4,r17
   22b74:	0022bb00 	call	22bb0 <__sfvwrite_r>
   22b78:	dfc00717 	ldw	ra,28(sp)
   22b7c:	dc400617 	ldw	r17,24(sp)
   22b80:	dc000517 	ldw	r16,20(sp)
   22b84:	dec00804 	addi	sp,sp,32
   22b88:	f800283a 	ret
   22b8c:	8809883a 	mov	r4,r17
   22b90:	0024ccc0 	call	24ccc <__sinit>
   22b94:	003feb06 	br	22b44 <__alt_data_end+0xfffe9b44>

00022b98 <fputs>:
   22b98:	008000b4 	movhi	r2,2
   22b9c:	109ee904 	addi	r2,r2,31652
   22ba0:	280d883a 	mov	r6,r5
   22ba4:	200b883a 	mov	r5,r4
   22ba8:	11000017 	ldw	r4,0(r2)
   22bac:	0022afc1 	jmpi	22afc <_fputs_r>

00022bb0 <__sfvwrite_r>:
   22bb0:	30800217 	ldw	r2,8(r6)
   22bb4:	10006726 	beq	r2,zero,22d54 <__sfvwrite_r+0x1a4>
   22bb8:	28c0030b 	ldhu	r3,12(r5)
   22bbc:	defff404 	addi	sp,sp,-48
   22bc0:	dd400715 	stw	r21,28(sp)
   22bc4:	dd000615 	stw	r20,24(sp)
   22bc8:	dc000215 	stw	r16,8(sp)
   22bcc:	dfc00b15 	stw	ra,44(sp)
   22bd0:	df000a15 	stw	fp,40(sp)
   22bd4:	ddc00915 	stw	r23,36(sp)
   22bd8:	dd800815 	stw	r22,32(sp)
   22bdc:	dcc00515 	stw	r19,20(sp)
   22be0:	dc800415 	stw	r18,16(sp)
   22be4:	dc400315 	stw	r17,12(sp)
   22be8:	1880020c 	andi	r2,r3,8
   22bec:	2821883a 	mov	r16,r5
   22bf0:	202b883a 	mov	r21,r4
   22bf4:	3029883a 	mov	r20,r6
   22bf8:	10002726 	beq	r2,zero,22c98 <__sfvwrite_r+0xe8>
   22bfc:	28800417 	ldw	r2,16(r5)
   22c00:	10002526 	beq	r2,zero,22c98 <__sfvwrite_r+0xe8>
   22c04:	1880008c 	andi	r2,r3,2
   22c08:	a4400017 	ldw	r17,0(r20)
   22c0c:	10002a26 	beq	r2,zero,22cb8 <__sfvwrite_r+0x108>
   22c10:	05a00034 	movhi	r22,32768
   22c14:	0027883a 	mov	r19,zero
   22c18:	0025883a 	mov	r18,zero
   22c1c:	b5bf0004 	addi	r22,r22,-1024
   22c20:	980d883a 	mov	r6,r19
   22c24:	a809883a 	mov	r4,r21
   22c28:	90004626 	beq	r18,zero,22d44 <__sfvwrite_r+0x194>
   22c2c:	900f883a 	mov	r7,r18
   22c30:	b480022e 	bgeu	r22,r18,22c3c <__sfvwrite_r+0x8c>
   22c34:	01e00034 	movhi	r7,32768
   22c38:	39ff0004 	addi	r7,r7,-1024
   22c3c:	80800917 	ldw	r2,36(r16)
   22c40:	81400717 	ldw	r5,28(r16)
   22c44:	103ee83a 	callr	r2
   22c48:	00805a0e 	bge	zero,r2,22db4 <__sfvwrite_r+0x204>
   22c4c:	a0c00217 	ldw	r3,8(r20)
   22c50:	98a7883a 	add	r19,r19,r2
   22c54:	90a5c83a 	sub	r18,r18,r2
   22c58:	1885c83a 	sub	r2,r3,r2
   22c5c:	a0800215 	stw	r2,8(r20)
   22c60:	103fef1e 	bne	r2,zero,22c20 <__alt_data_end+0xfffe9c20>
   22c64:	0005883a 	mov	r2,zero
   22c68:	dfc00b17 	ldw	ra,44(sp)
   22c6c:	df000a17 	ldw	fp,40(sp)
   22c70:	ddc00917 	ldw	r23,36(sp)
   22c74:	dd800817 	ldw	r22,32(sp)
   22c78:	dd400717 	ldw	r21,28(sp)
   22c7c:	dd000617 	ldw	r20,24(sp)
   22c80:	dcc00517 	ldw	r19,20(sp)
   22c84:	dc800417 	ldw	r18,16(sp)
   22c88:	dc400317 	ldw	r17,12(sp)
   22c8c:	dc000217 	ldw	r16,8(sp)
   22c90:	dec00c04 	addi	sp,sp,48
   22c94:	f800283a 	ret
   22c98:	800b883a 	mov	r5,r16
   22c9c:	a809883a 	mov	r4,r21
   22ca0:	00242d80 	call	242d8 <__swsetup_r>
   22ca4:	1000ee1e 	bne	r2,zero,23060 <__sfvwrite_r+0x4b0>
   22ca8:	80c0030b 	ldhu	r3,12(r16)
   22cac:	a4400017 	ldw	r17,0(r20)
   22cb0:	1880008c 	andi	r2,r3,2
   22cb4:	103fd61e 	bne	r2,zero,22c10 <__alt_data_end+0xfffe9c10>
   22cb8:	1880004c 	andi	r2,r3,1
   22cbc:	1000421e 	bne	r2,zero,22dc8 <__sfvwrite_r+0x218>
   22cc0:	0039883a 	mov	fp,zero
   22cc4:	0025883a 	mov	r18,zero
   22cc8:	90001a26 	beq	r18,zero,22d34 <__sfvwrite_r+0x184>
   22ccc:	1880800c 	andi	r2,r3,512
   22cd0:	84c00217 	ldw	r19,8(r16)
   22cd4:	10002126 	beq	r2,zero,22d5c <__sfvwrite_r+0x1ac>
   22cd8:	982f883a 	mov	r23,r19
   22cdc:	94c09636 	bltu	r18,r19,22f38 <__sfvwrite_r+0x388>
   22ce0:	1881200c 	andi	r2,r3,1152
   22ce4:	1000a11e 	bne	r2,zero,22f6c <__sfvwrite_r+0x3bc>
   22ce8:	81000017 	ldw	r4,0(r16)
   22cec:	b80d883a 	mov	r6,r23
   22cf0:	e00b883a 	mov	r5,fp
   22cf4:	0023b2c0 	call	23b2c <memmove>
   22cf8:	80c00217 	ldw	r3,8(r16)
   22cfc:	81000017 	ldw	r4,0(r16)
   22d00:	9005883a 	mov	r2,r18
   22d04:	1ce7c83a 	sub	r19,r3,r19
   22d08:	25cf883a 	add	r7,r4,r23
   22d0c:	84c00215 	stw	r19,8(r16)
   22d10:	81c00015 	stw	r7,0(r16)
   22d14:	a0c00217 	ldw	r3,8(r20)
   22d18:	e0b9883a 	add	fp,fp,r2
   22d1c:	90a5c83a 	sub	r18,r18,r2
   22d20:	18a7c83a 	sub	r19,r3,r2
   22d24:	a4c00215 	stw	r19,8(r20)
   22d28:	983fce26 	beq	r19,zero,22c64 <__alt_data_end+0xfffe9c64>
   22d2c:	80c0030b 	ldhu	r3,12(r16)
   22d30:	903fe61e 	bne	r18,zero,22ccc <__alt_data_end+0xfffe9ccc>
   22d34:	8f000017 	ldw	fp,0(r17)
   22d38:	8c800117 	ldw	r18,4(r17)
   22d3c:	8c400204 	addi	r17,r17,8
   22d40:	003fe106 	br	22cc8 <__alt_data_end+0xfffe9cc8>
   22d44:	8cc00017 	ldw	r19,0(r17)
   22d48:	8c800117 	ldw	r18,4(r17)
   22d4c:	8c400204 	addi	r17,r17,8
   22d50:	003fb306 	br	22c20 <__alt_data_end+0xfffe9c20>
   22d54:	0005883a 	mov	r2,zero
   22d58:	f800283a 	ret
   22d5c:	81000017 	ldw	r4,0(r16)
   22d60:	80800417 	ldw	r2,16(r16)
   22d64:	11005a36 	bltu	r2,r4,22ed0 <__sfvwrite_r+0x320>
   22d68:	85c00517 	ldw	r23,20(r16)
   22d6c:	95c05836 	bltu	r18,r23,22ed0 <__sfvwrite_r+0x320>
   22d70:	00a00034 	movhi	r2,32768
   22d74:	10bfffc4 	addi	r2,r2,-1
   22d78:	9009883a 	mov	r4,r18
   22d7c:	1480012e 	bgeu	r2,r18,22d84 <__sfvwrite_r+0x1d4>
   22d80:	1009883a 	mov	r4,r2
   22d84:	b80b883a 	mov	r5,r23
   22d88:	0020af40 	call	20af4 <__divsi3>
   22d8c:	b80b883a 	mov	r5,r23
   22d90:	1009883a 	mov	r4,r2
   22d94:	0020ca80 	call	20ca8 <__mulsi3>
   22d98:	81400717 	ldw	r5,28(r16)
   22d9c:	80c00917 	ldw	r3,36(r16)
   22da0:	100f883a 	mov	r7,r2
   22da4:	e00d883a 	mov	r6,fp
   22da8:	a809883a 	mov	r4,r21
   22dac:	183ee83a 	callr	r3
   22db0:	00bfd816 	blt	zero,r2,22d14 <__alt_data_end+0xfffe9d14>
   22db4:	8080030b 	ldhu	r2,12(r16)
   22db8:	10801014 	ori	r2,r2,64
   22dbc:	8080030d 	sth	r2,12(r16)
   22dc0:	00bfffc4 	movi	r2,-1
   22dc4:	003fa806 	br	22c68 <__alt_data_end+0xfffe9c68>
   22dc8:	0027883a 	mov	r19,zero
   22dcc:	0011883a 	mov	r8,zero
   22dd0:	0039883a 	mov	fp,zero
   22dd4:	0025883a 	mov	r18,zero
   22dd8:	90001f26 	beq	r18,zero,22e58 <__sfvwrite_r+0x2a8>
   22ddc:	40005a26 	beq	r8,zero,22f48 <__sfvwrite_r+0x398>
   22de0:	982d883a 	mov	r22,r19
   22de4:	94c0012e 	bgeu	r18,r19,22dec <__sfvwrite_r+0x23c>
   22de8:	902d883a 	mov	r22,r18
   22dec:	81000017 	ldw	r4,0(r16)
   22df0:	80800417 	ldw	r2,16(r16)
   22df4:	b02f883a 	mov	r23,r22
   22df8:	81c00517 	ldw	r7,20(r16)
   22dfc:	1100032e 	bgeu	r2,r4,22e0c <__sfvwrite_r+0x25c>
   22e00:	80c00217 	ldw	r3,8(r16)
   22e04:	38c7883a 	add	r3,r7,r3
   22e08:	1d801816 	blt	r3,r22,22e6c <__sfvwrite_r+0x2bc>
   22e0c:	b1c03e16 	blt	r22,r7,22f08 <__sfvwrite_r+0x358>
   22e10:	80800917 	ldw	r2,36(r16)
   22e14:	81400717 	ldw	r5,28(r16)
   22e18:	e00d883a 	mov	r6,fp
   22e1c:	da000115 	stw	r8,4(sp)
   22e20:	a809883a 	mov	r4,r21
   22e24:	103ee83a 	callr	r2
   22e28:	102f883a 	mov	r23,r2
   22e2c:	da000117 	ldw	r8,4(sp)
   22e30:	00bfe00e 	bge	zero,r2,22db4 <__alt_data_end+0xfffe9db4>
   22e34:	9de7c83a 	sub	r19,r19,r23
   22e38:	98001f26 	beq	r19,zero,22eb8 <__sfvwrite_r+0x308>
   22e3c:	a0800217 	ldw	r2,8(r20)
   22e40:	e5f9883a 	add	fp,fp,r23
   22e44:	95e5c83a 	sub	r18,r18,r23
   22e48:	15efc83a 	sub	r23,r2,r23
   22e4c:	a5c00215 	stw	r23,8(r20)
   22e50:	b83f8426 	beq	r23,zero,22c64 <__alt_data_end+0xfffe9c64>
   22e54:	903fe11e 	bne	r18,zero,22ddc <__alt_data_end+0xfffe9ddc>
   22e58:	8f000017 	ldw	fp,0(r17)
   22e5c:	8c800117 	ldw	r18,4(r17)
   22e60:	0011883a 	mov	r8,zero
   22e64:	8c400204 	addi	r17,r17,8
   22e68:	003fdb06 	br	22dd8 <__alt_data_end+0xfffe9dd8>
   22e6c:	180d883a 	mov	r6,r3
   22e70:	e00b883a 	mov	r5,fp
   22e74:	da000115 	stw	r8,4(sp)
   22e78:	d8c00015 	stw	r3,0(sp)
   22e7c:	0023b2c0 	call	23b2c <memmove>
   22e80:	d8c00017 	ldw	r3,0(sp)
   22e84:	80800017 	ldw	r2,0(r16)
   22e88:	800b883a 	mov	r5,r16
   22e8c:	a809883a 	mov	r4,r21
   22e90:	10c5883a 	add	r2,r2,r3
   22e94:	80800015 	stw	r2,0(r16)
   22e98:	d8c00015 	stw	r3,0(sp)
   22e9c:	00248e00 	call	248e0 <_fflush_r>
   22ea0:	d8c00017 	ldw	r3,0(sp)
   22ea4:	da000117 	ldw	r8,4(sp)
   22ea8:	103fc21e 	bne	r2,zero,22db4 <__alt_data_end+0xfffe9db4>
   22eac:	182f883a 	mov	r23,r3
   22eb0:	9de7c83a 	sub	r19,r19,r23
   22eb4:	983fe11e 	bne	r19,zero,22e3c <__alt_data_end+0xfffe9e3c>
   22eb8:	800b883a 	mov	r5,r16
   22ebc:	a809883a 	mov	r4,r21
   22ec0:	00248e00 	call	248e0 <_fflush_r>
   22ec4:	103fbb1e 	bne	r2,zero,22db4 <__alt_data_end+0xfffe9db4>
   22ec8:	0011883a 	mov	r8,zero
   22ecc:	003fdb06 	br	22e3c <__alt_data_end+0xfffe9e3c>
   22ed0:	94c0012e 	bgeu	r18,r19,22ed8 <__sfvwrite_r+0x328>
   22ed4:	9027883a 	mov	r19,r18
   22ed8:	980d883a 	mov	r6,r19
   22edc:	e00b883a 	mov	r5,fp
   22ee0:	0023b2c0 	call	23b2c <memmove>
   22ee4:	80800217 	ldw	r2,8(r16)
   22ee8:	80c00017 	ldw	r3,0(r16)
   22eec:	14c5c83a 	sub	r2,r2,r19
   22ef0:	1cc7883a 	add	r3,r3,r19
   22ef4:	80800215 	stw	r2,8(r16)
   22ef8:	80c00015 	stw	r3,0(r16)
   22efc:	10004326 	beq	r2,zero,2300c <__sfvwrite_r+0x45c>
   22f00:	9805883a 	mov	r2,r19
   22f04:	003f8306 	br	22d14 <__alt_data_end+0xfffe9d14>
   22f08:	b00d883a 	mov	r6,r22
   22f0c:	e00b883a 	mov	r5,fp
   22f10:	da000115 	stw	r8,4(sp)
   22f14:	0023b2c0 	call	23b2c <memmove>
   22f18:	80800217 	ldw	r2,8(r16)
   22f1c:	80c00017 	ldw	r3,0(r16)
   22f20:	da000117 	ldw	r8,4(sp)
   22f24:	1585c83a 	sub	r2,r2,r22
   22f28:	1dad883a 	add	r22,r3,r22
   22f2c:	80800215 	stw	r2,8(r16)
   22f30:	85800015 	stw	r22,0(r16)
   22f34:	003fbf06 	br	22e34 <__alt_data_end+0xfffe9e34>
   22f38:	81000017 	ldw	r4,0(r16)
   22f3c:	9027883a 	mov	r19,r18
   22f40:	902f883a 	mov	r23,r18
   22f44:	003f6906 	br	22cec <__alt_data_end+0xfffe9cec>
   22f48:	900d883a 	mov	r6,r18
   22f4c:	01400284 	movi	r5,10
   22f50:	e009883a 	mov	r4,fp
   22f54:	00238840 	call	23884 <memchr>
   22f58:	10003e26 	beq	r2,zero,23054 <__sfvwrite_r+0x4a4>
   22f5c:	10800044 	addi	r2,r2,1
   22f60:	1727c83a 	sub	r19,r2,fp
   22f64:	02000044 	movi	r8,1
   22f68:	003f9d06 	br	22de0 <__alt_data_end+0xfffe9de0>
   22f6c:	80800517 	ldw	r2,20(r16)
   22f70:	81400417 	ldw	r5,16(r16)
   22f74:	81c00017 	ldw	r7,0(r16)
   22f78:	10a7883a 	add	r19,r2,r2
   22f7c:	9885883a 	add	r2,r19,r2
   22f80:	1026d7fa 	srli	r19,r2,31
   22f84:	396dc83a 	sub	r22,r7,r5
   22f88:	b1000044 	addi	r4,r22,1
   22f8c:	9885883a 	add	r2,r19,r2
   22f90:	1027d07a 	srai	r19,r2,1
   22f94:	2485883a 	add	r2,r4,r18
   22f98:	980d883a 	mov	r6,r19
   22f9c:	9880022e 	bgeu	r19,r2,22fa8 <__sfvwrite_r+0x3f8>
   22fa0:	1027883a 	mov	r19,r2
   22fa4:	100d883a 	mov	r6,r2
   22fa8:	18c1000c 	andi	r3,r3,1024
   22fac:	18001c26 	beq	r3,zero,23020 <__sfvwrite_r+0x470>
   22fb0:	300b883a 	mov	r5,r6
   22fb4:	a809883a 	mov	r4,r21
   22fb8:	00230780 	call	23078 <_malloc_r>
   22fbc:	102f883a 	mov	r23,r2
   22fc0:	10002926 	beq	r2,zero,23068 <__sfvwrite_r+0x4b8>
   22fc4:	81400417 	ldw	r5,16(r16)
   22fc8:	b00d883a 	mov	r6,r22
   22fcc:	1009883a 	mov	r4,r2
   22fd0:	00239e40 	call	239e4 <memcpy>
   22fd4:	8080030b 	ldhu	r2,12(r16)
   22fd8:	00fedfc4 	movi	r3,-1153
   22fdc:	10c4703a 	and	r2,r2,r3
   22fe0:	10802014 	ori	r2,r2,128
   22fe4:	8080030d 	sth	r2,12(r16)
   22fe8:	bd89883a 	add	r4,r23,r22
   22fec:	9d8fc83a 	sub	r7,r19,r22
   22ff0:	85c00415 	stw	r23,16(r16)
   22ff4:	84c00515 	stw	r19,20(r16)
   22ff8:	81000015 	stw	r4,0(r16)
   22ffc:	9027883a 	mov	r19,r18
   23000:	81c00215 	stw	r7,8(r16)
   23004:	902f883a 	mov	r23,r18
   23008:	003f3806 	br	22cec <__alt_data_end+0xfffe9cec>
   2300c:	800b883a 	mov	r5,r16
   23010:	a809883a 	mov	r4,r21
   23014:	00248e00 	call	248e0 <_fflush_r>
   23018:	103fb926 	beq	r2,zero,22f00 <__alt_data_end+0xfffe9f00>
   2301c:	003f6506 	br	22db4 <__alt_data_end+0xfffe9db4>
   23020:	a809883a 	mov	r4,r21
   23024:	0023c880 	call	23c88 <_realloc_r>
   23028:	102f883a 	mov	r23,r2
   2302c:	103fee1e 	bne	r2,zero,22fe8 <__alt_data_end+0xfffe9fe8>
   23030:	81400417 	ldw	r5,16(r16)
   23034:	a809883a 	mov	r4,r21
   23038:	0024e400 	call	24e40 <_free_r>
   2303c:	8080030b 	ldhu	r2,12(r16)
   23040:	00ffdfc4 	movi	r3,-129
   23044:	1884703a 	and	r2,r3,r2
   23048:	00c00304 	movi	r3,12
   2304c:	a8c00015 	stw	r3,0(r21)
   23050:	003f5906 	br	22db8 <__alt_data_end+0xfffe9db8>
   23054:	94c00044 	addi	r19,r18,1
   23058:	02000044 	movi	r8,1
   2305c:	003f6006 	br	22de0 <__alt_data_end+0xfffe9de0>
   23060:	00bfffc4 	movi	r2,-1
   23064:	003f0006 	br	22c68 <__alt_data_end+0xfffe9c68>
   23068:	00800304 	movi	r2,12
   2306c:	a8800015 	stw	r2,0(r21)
   23070:	8080030b 	ldhu	r2,12(r16)
   23074:	003f5006 	br	22db8 <__alt_data_end+0xfffe9db8>

00023078 <_malloc_r>:
   23078:	defff504 	addi	sp,sp,-44
   2307c:	dc800315 	stw	r18,12(sp)
   23080:	dfc00a15 	stw	ra,40(sp)
   23084:	df000915 	stw	fp,36(sp)
   23088:	ddc00815 	stw	r23,32(sp)
   2308c:	dd800715 	stw	r22,28(sp)
   23090:	dd400615 	stw	r21,24(sp)
   23094:	dd000515 	stw	r20,20(sp)
   23098:	dcc00415 	stw	r19,16(sp)
   2309c:	dc400215 	stw	r17,8(sp)
   230a0:	dc000115 	stw	r16,4(sp)
   230a4:	288002c4 	addi	r2,r5,11
   230a8:	00c00584 	movi	r3,22
   230ac:	2025883a 	mov	r18,r4
   230b0:	18807f2e 	bgeu	r3,r2,232b0 <_malloc_r+0x238>
   230b4:	047ffe04 	movi	r17,-8
   230b8:	1462703a 	and	r17,r2,r17
   230bc:	8800a316 	blt	r17,zero,2334c <_malloc_r+0x2d4>
   230c0:	8940a236 	bltu	r17,r5,2334c <_malloc_r+0x2d4>
   230c4:	0025d480 	call	25d48 <__malloc_lock>
   230c8:	00807dc4 	movi	r2,503
   230cc:	1441e92e 	bgeu	r2,r17,23874 <_malloc_r+0x7fc>
   230d0:	8804d27a 	srli	r2,r17,9
   230d4:	1000a126 	beq	r2,zero,2335c <_malloc_r+0x2e4>
   230d8:	00c00104 	movi	r3,4
   230dc:	18811e36 	bltu	r3,r2,23558 <_malloc_r+0x4e0>
   230e0:	8804d1ba 	srli	r2,r17,6
   230e4:	12000e44 	addi	r8,r2,57
   230e8:	11c00e04 	addi	r7,r2,56
   230ec:	4209883a 	add	r4,r8,r8
   230f0:	04c000b4 	movhi	r19,2
   230f4:	2109883a 	add	r4,r4,r4
   230f8:	9cdddc04 	addi	r19,r19,30576
   230fc:	2109883a 	add	r4,r4,r4
   23100:	9909883a 	add	r4,r19,r4
   23104:	24000117 	ldw	r16,4(r4)
   23108:	213ffe04 	addi	r4,r4,-8
   2310c:	24009726 	beq	r4,r16,2336c <_malloc_r+0x2f4>
   23110:	80800117 	ldw	r2,4(r16)
   23114:	01bfff04 	movi	r6,-4
   23118:	014003c4 	movi	r5,15
   2311c:	1184703a 	and	r2,r2,r6
   23120:	1447c83a 	sub	r3,r2,r17
   23124:	28c00716 	blt	r5,r3,23144 <_malloc_r+0xcc>
   23128:	1800920e 	bge	r3,zero,23374 <_malloc_r+0x2fc>
   2312c:	84000317 	ldw	r16,12(r16)
   23130:	24008e26 	beq	r4,r16,2336c <_malloc_r+0x2f4>
   23134:	80800117 	ldw	r2,4(r16)
   23138:	1184703a 	and	r2,r2,r6
   2313c:	1447c83a 	sub	r3,r2,r17
   23140:	28fff90e 	bge	r5,r3,23128 <__alt_data_end+0xfffea128>
   23144:	3809883a 	mov	r4,r7
   23148:	018000b4 	movhi	r6,2
   2314c:	9c000417 	ldw	r16,16(r19)
   23150:	319ddc04 	addi	r6,r6,30576
   23154:	32000204 	addi	r8,r6,8
   23158:	82013426 	beq	r16,r8,2362c <_malloc_r+0x5b4>
   2315c:	80c00117 	ldw	r3,4(r16)
   23160:	00bfff04 	movi	r2,-4
   23164:	188e703a 	and	r7,r3,r2
   23168:	3c45c83a 	sub	r2,r7,r17
   2316c:	00c003c4 	movi	r3,15
   23170:	18811f16 	blt	r3,r2,235f0 <_malloc_r+0x578>
   23174:	32000515 	stw	r8,20(r6)
   23178:	32000415 	stw	r8,16(r6)
   2317c:	10007f0e 	bge	r2,zero,2337c <_malloc_r+0x304>
   23180:	00807fc4 	movi	r2,511
   23184:	11c0fd36 	bltu	r2,r7,2357c <_malloc_r+0x504>
   23188:	3806d0fa 	srli	r3,r7,3
   2318c:	01c00044 	movi	r7,1
   23190:	30800117 	ldw	r2,4(r6)
   23194:	19400044 	addi	r5,r3,1
   23198:	294b883a 	add	r5,r5,r5
   2319c:	1807d0ba 	srai	r3,r3,2
   231a0:	294b883a 	add	r5,r5,r5
   231a4:	294b883a 	add	r5,r5,r5
   231a8:	298b883a 	add	r5,r5,r6
   231ac:	38c6983a 	sll	r3,r7,r3
   231b0:	29c00017 	ldw	r7,0(r5)
   231b4:	2a7ffe04 	addi	r9,r5,-8
   231b8:	1886b03a 	or	r3,r3,r2
   231bc:	82400315 	stw	r9,12(r16)
   231c0:	81c00215 	stw	r7,8(r16)
   231c4:	30c00115 	stw	r3,4(r6)
   231c8:	2c000015 	stw	r16,0(r5)
   231cc:	3c000315 	stw	r16,12(r7)
   231d0:	2005d0ba 	srai	r2,r4,2
   231d4:	01400044 	movi	r5,1
   231d8:	288a983a 	sll	r5,r5,r2
   231dc:	19406f36 	bltu	r3,r5,2339c <_malloc_r+0x324>
   231e0:	28c4703a 	and	r2,r5,r3
   231e4:	10000a1e 	bne	r2,zero,23210 <_malloc_r+0x198>
   231e8:	00bfff04 	movi	r2,-4
   231ec:	294b883a 	add	r5,r5,r5
   231f0:	2088703a 	and	r4,r4,r2
   231f4:	28c4703a 	and	r2,r5,r3
   231f8:	21000104 	addi	r4,r4,4
   231fc:	1000041e 	bne	r2,zero,23210 <_malloc_r+0x198>
   23200:	294b883a 	add	r5,r5,r5
   23204:	28c4703a 	and	r2,r5,r3
   23208:	21000104 	addi	r4,r4,4
   2320c:	103ffc26 	beq	r2,zero,23200 <__alt_data_end+0xfffea200>
   23210:	02bfff04 	movi	r10,-4
   23214:	024003c4 	movi	r9,15
   23218:	21800044 	addi	r6,r4,1
   2321c:	318d883a 	add	r6,r6,r6
   23220:	318d883a 	add	r6,r6,r6
   23224:	318d883a 	add	r6,r6,r6
   23228:	998d883a 	add	r6,r19,r6
   2322c:	333ffe04 	addi	r12,r6,-8
   23230:	2017883a 	mov	r11,r4
   23234:	31800104 	addi	r6,r6,4
   23238:	34000017 	ldw	r16,0(r6)
   2323c:	31fffd04 	addi	r7,r6,-12
   23240:	81c0041e 	bne	r16,r7,23254 <_malloc_r+0x1dc>
   23244:	0000fb06 	br	23634 <_malloc_r+0x5bc>
   23248:	1801030e 	bge	r3,zero,23658 <_malloc_r+0x5e0>
   2324c:	84000317 	ldw	r16,12(r16)
   23250:	81c0f826 	beq	r16,r7,23634 <_malloc_r+0x5bc>
   23254:	80800117 	ldw	r2,4(r16)
   23258:	1284703a 	and	r2,r2,r10
   2325c:	1447c83a 	sub	r3,r2,r17
   23260:	48fff90e 	bge	r9,r3,23248 <__alt_data_end+0xfffea248>
   23264:	80800317 	ldw	r2,12(r16)
   23268:	81000217 	ldw	r4,8(r16)
   2326c:	89400054 	ori	r5,r17,1
   23270:	81400115 	stw	r5,4(r16)
   23274:	20800315 	stw	r2,12(r4)
   23278:	11000215 	stw	r4,8(r2)
   2327c:	8463883a 	add	r17,r16,r17
   23280:	9c400515 	stw	r17,20(r19)
   23284:	9c400415 	stw	r17,16(r19)
   23288:	18800054 	ori	r2,r3,1
   2328c:	88800115 	stw	r2,4(r17)
   23290:	8a000315 	stw	r8,12(r17)
   23294:	8a000215 	stw	r8,8(r17)
   23298:	88e3883a 	add	r17,r17,r3
   2329c:	88c00015 	stw	r3,0(r17)
   232a0:	9009883a 	mov	r4,r18
   232a4:	0025d6c0 	call	25d6c <__malloc_unlock>
   232a8:	80800204 	addi	r2,r16,8
   232ac:	00001b06 	br	2331c <_malloc_r+0x2a4>
   232b0:	04400404 	movi	r17,16
   232b4:	89402536 	bltu	r17,r5,2334c <_malloc_r+0x2d4>
   232b8:	0025d480 	call	25d48 <__malloc_lock>
   232bc:	00800184 	movi	r2,6
   232c0:	01000084 	movi	r4,2
   232c4:	04c000b4 	movhi	r19,2
   232c8:	1085883a 	add	r2,r2,r2
   232cc:	9cdddc04 	addi	r19,r19,30576
   232d0:	1085883a 	add	r2,r2,r2
   232d4:	9885883a 	add	r2,r19,r2
   232d8:	14000117 	ldw	r16,4(r2)
   232dc:	10fffe04 	addi	r3,r2,-8
   232e0:	80c0d926 	beq	r16,r3,23648 <_malloc_r+0x5d0>
   232e4:	80c00117 	ldw	r3,4(r16)
   232e8:	81000317 	ldw	r4,12(r16)
   232ec:	00bfff04 	movi	r2,-4
   232f0:	1884703a 	and	r2,r3,r2
   232f4:	81400217 	ldw	r5,8(r16)
   232f8:	8085883a 	add	r2,r16,r2
   232fc:	10c00117 	ldw	r3,4(r2)
   23300:	29000315 	stw	r4,12(r5)
   23304:	21400215 	stw	r5,8(r4)
   23308:	18c00054 	ori	r3,r3,1
   2330c:	10c00115 	stw	r3,4(r2)
   23310:	9009883a 	mov	r4,r18
   23314:	0025d6c0 	call	25d6c <__malloc_unlock>
   23318:	80800204 	addi	r2,r16,8
   2331c:	dfc00a17 	ldw	ra,40(sp)
   23320:	df000917 	ldw	fp,36(sp)
   23324:	ddc00817 	ldw	r23,32(sp)
   23328:	dd800717 	ldw	r22,28(sp)
   2332c:	dd400617 	ldw	r21,24(sp)
   23330:	dd000517 	ldw	r20,20(sp)
   23334:	dcc00417 	ldw	r19,16(sp)
   23338:	dc800317 	ldw	r18,12(sp)
   2333c:	dc400217 	ldw	r17,8(sp)
   23340:	dc000117 	ldw	r16,4(sp)
   23344:	dec00b04 	addi	sp,sp,44
   23348:	f800283a 	ret
   2334c:	00800304 	movi	r2,12
   23350:	90800015 	stw	r2,0(r18)
   23354:	0005883a 	mov	r2,zero
   23358:	003ff006 	br	2331c <__alt_data_end+0xfffea31c>
   2335c:	01002004 	movi	r4,128
   23360:	02001004 	movi	r8,64
   23364:	01c00fc4 	movi	r7,63
   23368:	003f6106 	br	230f0 <__alt_data_end+0xfffea0f0>
   2336c:	4009883a 	mov	r4,r8
   23370:	003f7506 	br	23148 <__alt_data_end+0xfffea148>
   23374:	81000317 	ldw	r4,12(r16)
   23378:	003fde06 	br	232f4 <__alt_data_end+0xfffea2f4>
   2337c:	81c5883a 	add	r2,r16,r7
   23380:	11400117 	ldw	r5,4(r2)
   23384:	9009883a 	mov	r4,r18
   23388:	29400054 	ori	r5,r5,1
   2338c:	11400115 	stw	r5,4(r2)
   23390:	0025d6c0 	call	25d6c <__malloc_unlock>
   23394:	80800204 	addi	r2,r16,8
   23398:	003fe006 	br	2331c <__alt_data_end+0xfffea31c>
   2339c:	9c000217 	ldw	r16,8(r19)
   233a0:	00bfff04 	movi	r2,-4
   233a4:	85800117 	ldw	r22,4(r16)
   233a8:	b0ac703a 	and	r22,r22,r2
   233ac:	b4400336 	bltu	r22,r17,233bc <_malloc_r+0x344>
   233b0:	b445c83a 	sub	r2,r22,r17
   233b4:	00c003c4 	movi	r3,15
   233b8:	18805d16 	blt	r3,r2,23530 <_malloc_r+0x4b8>
   233bc:	05c000b4 	movhi	r23,2
   233c0:	008000f4 	movhi	r2,3
   233c4:	10a59304 	addi	r2,r2,-27060
   233c8:	bddeea04 	addi	r23,r23,31656
   233cc:	15400017 	ldw	r21,0(r2)
   233d0:	b8c00017 	ldw	r3,0(r23)
   233d4:	00bfffc4 	movi	r2,-1
   233d8:	858d883a 	add	r6,r16,r22
   233dc:	8d6b883a 	add	r21,r17,r21
   233e0:	1880ea26 	beq	r3,r2,2378c <_malloc_r+0x714>
   233e4:	ad4403c4 	addi	r21,r21,4111
   233e8:	00bc0004 	movi	r2,-4096
   233ec:	a8aa703a 	and	r21,r21,r2
   233f0:	a80b883a 	mov	r5,r21
   233f4:	9009883a 	mov	r4,r18
   233f8:	d9800015 	stw	r6,0(sp)
   233fc:	00241ec0 	call	241ec <_sbrk_r>
   23400:	1029883a 	mov	r20,r2
   23404:	00bfffc4 	movi	r2,-1
   23408:	d9800017 	ldw	r6,0(sp)
   2340c:	a080e826 	beq	r20,r2,237b0 <_malloc_r+0x738>
   23410:	a180a636 	bltu	r20,r6,236ac <_malloc_r+0x634>
   23414:	070000f4 	movhi	fp,3
   23418:	e7259404 	addi	fp,fp,-27056
   2341c:	e0800017 	ldw	r2,0(fp)
   23420:	a887883a 	add	r3,r21,r2
   23424:	e0c00015 	stw	r3,0(fp)
   23428:	3500e626 	beq	r6,r20,237c4 <_malloc_r+0x74c>
   2342c:	b9000017 	ldw	r4,0(r23)
   23430:	00bfffc4 	movi	r2,-1
   23434:	2080ee26 	beq	r4,r2,237f0 <_malloc_r+0x778>
   23438:	a185c83a 	sub	r2,r20,r6
   2343c:	10c5883a 	add	r2,r2,r3
   23440:	e0800015 	stw	r2,0(fp)
   23444:	a0c001cc 	andi	r3,r20,7
   23448:	1800bc26 	beq	r3,zero,2373c <_malloc_r+0x6c4>
   2344c:	a0e9c83a 	sub	r20,r20,r3
   23450:	00840204 	movi	r2,4104
   23454:	a5000204 	addi	r20,r20,8
   23458:	10c7c83a 	sub	r3,r2,r3
   2345c:	a545883a 	add	r2,r20,r21
   23460:	1083ffcc 	andi	r2,r2,4095
   23464:	18abc83a 	sub	r21,r3,r2
   23468:	a80b883a 	mov	r5,r21
   2346c:	9009883a 	mov	r4,r18
   23470:	00241ec0 	call	241ec <_sbrk_r>
   23474:	00ffffc4 	movi	r3,-1
   23478:	10c0e126 	beq	r2,r3,23800 <_malloc_r+0x788>
   2347c:	1505c83a 	sub	r2,r2,r20
   23480:	1545883a 	add	r2,r2,r21
   23484:	10800054 	ori	r2,r2,1
   23488:	e0c00017 	ldw	r3,0(fp)
   2348c:	9d000215 	stw	r20,8(r19)
   23490:	a0800115 	stw	r2,4(r20)
   23494:	a8c7883a 	add	r3,r21,r3
   23498:	e0c00015 	stw	r3,0(fp)
   2349c:	84c00e26 	beq	r16,r19,234d8 <_malloc_r+0x460>
   234a0:	018003c4 	movi	r6,15
   234a4:	3580a72e 	bgeu	r6,r22,23744 <_malloc_r+0x6cc>
   234a8:	81400117 	ldw	r5,4(r16)
   234ac:	013ffe04 	movi	r4,-8
   234b0:	b0bffd04 	addi	r2,r22,-12
   234b4:	1104703a 	and	r2,r2,r4
   234b8:	2900004c 	andi	r4,r5,1
   234bc:	2088b03a 	or	r4,r4,r2
   234c0:	81000115 	stw	r4,4(r16)
   234c4:	01400144 	movi	r5,5
   234c8:	8089883a 	add	r4,r16,r2
   234cc:	21400115 	stw	r5,4(r4)
   234d0:	21400215 	stw	r5,8(r4)
   234d4:	3080cd36 	bltu	r6,r2,2380c <_malloc_r+0x794>
   234d8:	008000f4 	movhi	r2,3
   234dc:	10a59204 	addi	r2,r2,-27064
   234e0:	11000017 	ldw	r4,0(r2)
   234e4:	20c0012e 	bgeu	r4,r3,234ec <_malloc_r+0x474>
   234e8:	10c00015 	stw	r3,0(r2)
   234ec:	008000f4 	movhi	r2,3
   234f0:	10a59104 	addi	r2,r2,-27068
   234f4:	11000017 	ldw	r4,0(r2)
   234f8:	9c000217 	ldw	r16,8(r19)
   234fc:	20c0012e 	bgeu	r4,r3,23504 <_malloc_r+0x48c>
   23500:	10c00015 	stw	r3,0(r2)
   23504:	80c00117 	ldw	r3,4(r16)
   23508:	00bfff04 	movi	r2,-4
   2350c:	1886703a 	and	r3,r3,r2
   23510:	1c45c83a 	sub	r2,r3,r17
   23514:	1c400236 	bltu	r3,r17,23520 <_malloc_r+0x4a8>
   23518:	00c003c4 	movi	r3,15
   2351c:	18800416 	blt	r3,r2,23530 <_malloc_r+0x4b8>
   23520:	9009883a 	mov	r4,r18
   23524:	0025d6c0 	call	25d6c <__malloc_unlock>
   23528:	0005883a 	mov	r2,zero
   2352c:	003f7b06 	br	2331c <__alt_data_end+0xfffea31c>
   23530:	88c00054 	ori	r3,r17,1
   23534:	80c00115 	stw	r3,4(r16)
   23538:	8463883a 	add	r17,r16,r17
   2353c:	10800054 	ori	r2,r2,1
   23540:	9c400215 	stw	r17,8(r19)
   23544:	88800115 	stw	r2,4(r17)
   23548:	9009883a 	mov	r4,r18
   2354c:	0025d6c0 	call	25d6c <__malloc_unlock>
   23550:	80800204 	addi	r2,r16,8
   23554:	003f7106 	br	2331c <__alt_data_end+0xfffea31c>
   23558:	00c00504 	movi	r3,20
   2355c:	18804a2e 	bgeu	r3,r2,23688 <_malloc_r+0x610>
   23560:	00c01504 	movi	r3,84
   23564:	18806e36 	bltu	r3,r2,23720 <_malloc_r+0x6a8>
   23568:	8804d33a 	srli	r2,r17,12
   2356c:	12001bc4 	addi	r8,r2,111
   23570:	11c01b84 	addi	r7,r2,110
   23574:	4209883a 	add	r4,r8,r8
   23578:	003edd06 	br	230f0 <__alt_data_end+0xfffea0f0>
   2357c:	3804d27a 	srli	r2,r7,9
   23580:	00c00104 	movi	r3,4
   23584:	1880442e 	bgeu	r3,r2,23698 <_malloc_r+0x620>
   23588:	00c00504 	movi	r3,20
   2358c:	18808136 	bltu	r3,r2,23794 <_malloc_r+0x71c>
   23590:	11401704 	addi	r5,r2,92
   23594:	10c016c4 	addi	r3,r2,91
   23598:	294b883a 	add	r5,r5,r5
   2359c:	294b883a 	add	r5,r5,r5
   235a0:	294b883a 	add	r5,r5,r5
   235a4:	994b883a 	add	r5,r19,r5
   235a8:	28800017 	ldw	r2,0(r5)
   235ac:	018000b4 	movhi	r6,2
   235b0:	297ffe04 	addi	r5,r5,-8
   235b4:	319ddc04 	addi	r6,r6,30576
   235b8:	28806526 	beq	r5,r2,23750 <_malloc_r+0x6d8>
   235bc:	01bfff04 	movi	r6,-4
   235c0:	10c00117 	ldw	r3,4(r2)
   235c4:	1986703a 	and	r3,r3,r6
   235c8:	38c0022e 	bgeu	r7,r3,235d4 <_malloc_r+0x55c>
   235cc:	10800217 	ldw	r2,8(r2)
   235d0:	28bffb1e 	bne	r5,r2,235c0 <__alt_data_end+0xfffea5c0>
   235d4:	11400317 	ldw	r5,12(r2)
   235d8:	98c00117 	ldw	r3,4(r19)
   235dc:	81400315 	stw	r5,12(r16)
   235e0:	80800215 	stw	r2,8(r16)
   235e4:	2c000215 	stw	r16,8(r5)
   235e8:	14000315 	stw	r16,12(r2)
   235ec:	003ef806 	br	231d0 <__alt_data_end+0xfffea1d0>
   235f0:	88c00054 	ori	r3,r17,1
   235f4:	80c00115 	stw	r3,4(r16)
   235f8:	8463883a 	add	r17,r16,r17
   235fc:	34400515 	stw	r17,20(r6)
   23600:	34400415 	stw	r17,16(r6)
   23604:	10c00054 	ori	r3,r2,1
   23608:	8a000315 	stw	r8,12(r17)
   2360c:	8a000215 	stw	r8,8(r17)
   23610:	88c00115 	stw	r3,4(r17)
   23614:	88a3883a 	add	r17,r17,r2
   23618:	88800015 	stw	r2,0(r17)
   2361c:	9009883a 	mov	r4,r18
   23620:	0025d6c0 	call	25d6c <__malloc_unlock>
   23624:	80800204 	addi	r2,r16,8
   23628:	003f3c06 	br	2331c <__alt_data_end+0xfffea31c>
   2362c:	30c00117 	ldw	r3,4(r6)
   23630:	003ee706 	br	231d0 <__alt_data_end+0xfffea1d0>
   23634:	5ac00044 	addi	r11,r11,1
   23638:	588000cc 	andi	r2,r11,3
   2363c:	31800204 	addi	r6,r6,8
   23640:	103efd1e 	bne	r2,zero,23238 <__alt_data_end+0xfffea238>
   23644:	00002406 	br	236d8 <_malloc_r+0x660>
   23648:	14000317 	ldw	r16,12(r2)
   2364c:	143f251e 	bne	r2,r16,232e4 <__alt_data_end+0xfffea2e4>
   23650:	21000084 	addi	r4,r4,2
   23654:	003ebc06 	br	23148 <__alt_data_end+0xfffea148>
   23658:	8085883a 	add	r2,r16,r2
   2365c:	10c00117 	ldw	r3,4(r2)
   23660:	81000317 	ldw	r4,12(r16)
   23664:	81400217 	ldw	r5,8(r16)
   23668:	18c00054 	ori	r3,r3,1
   2366c:	10c00115 	stw	r3,4(r2)
   23670:	29000315 	stw	r4,12(r5)
   23674:	21400215 	stw	r5,8(r4)
   23678:	9009883a 	mov	r4,r18
   2367c:	0025d6c0 	call	25d6c <__malloc_unlock>
   23680:	80800204 	addi	r2,r16,8
   23684:	003f2506 	br	2331c <__alt_data_end+0xfffea31c>
   23688:	12001704 	addi	r8,r2,92
   2368c:	11c016c4 	addi	r7,r2,91
   23690:	4209883a 	add	r4,r8,r8
   23694:	003e9606 	br	230f0 <__alt_data_end+0xfffea0f0>
   23698:	3804d1ba 	srli	r2,r7,6
   2369c:	11400e44 	addi	r5,r2,57
   236a0:	10c00e04 	addi	r3,r2,56
   236a4:	294b883a 	add	r5,r5,r5
   236a8:	003fbc06 	br	2359c <__alt_data_end+0xfffea59c>
   236ac:	84ff5926 	beq	r16,r19,23414 <__alt_data_end+0xfffea414>
   236b0:	008000b4 	movhi	r2,2
   236b4:	109ddc04 	addi	r2,r2,30576
   236b8:	14000217 	ldw	r16,8(r2)
   236bc:	00bfff04 	movi	r2,-4
   236c0:	80c00117 	ldw	r3,4(r16)
   236c4:	1886703a 	and	r3,r3,r2
   236c8:	003f9106 	br	23510 <__alt_data_end+0xfffea510>
   236cc:	60800217 	ldw	r2,8(r12)
   236d0:	213fffc4 	addi	r4,r4,-1
   236d4:	1300651e 	bne	r2,r12,2386c <_malloc_r+0x7f4>
   236d8:	208000cc 	andi	r2,r4,3
   236dc:	633ffe04 	addi	r12,r12,-8
   236e0:	103ffa1e 	bne	r2,zero,236cc <__alt_data_end+0xfffea6cc>
   236e4:	98800117 	ldw	r2,4(r19)
   236e8:	0146303a 	nor	r3,zero,r5
   236ec:	1884703a 	and	r2,r3,r2
   236f0:	98800115 	stw	r2,4(r19)
   236f4:	294b883a 	add	r5,r5,r5
   236f8:	117f2836 	bltu	r2,r5,2339c <__alt_data_end+0xfffea39c>
   236fc:	283f2726 	beq	r5,zero,2339c <__alt_data_end+0xfffea39c>
   23700:	2886703a 	and	r3,r5,r2
   23704:	5809883a 	mov	r4,r11
   23708:	183ec31e 	bne	r3,zero,23218 <__alt_data_end+0xfffea218>
   2370c:	294b883a 	add	r5,r5,r5
   23710:	2886703a 	and	r3,r5,r2
   23714:	21000104 	addi	r4,r4,4
   23718:	183ffc26 	beq	r3,zero,2370c <__alt_data_end+0xfffea70c>
   2371c:	003ebe06 	br	23218 <__alt_data_end+0xfffea218>
   23720:	00c05504 	movi	r3,340
   23724:	18801236 	bltu	r3,r2,23770 <_malloc_r+0x6f8>
   23728:	8804d3fa 	srli	r2,r17,15
   2372c:	12001e04 	addi	r8,r2,120
   23730:	11c01dc4 	addi	r7,r2,119
   23734:	4209883a 	add	r4,r8,r8
   23738:	003e6d06 	br	230f0 <__alt_data_end+0xfffea0f0>
   2373c:	00c40004 	movi	r3,4096
   23740:	003f4606 	br	2345c <__alt_data_end+0xfffea45c>
   23744:	00800044 	movi	r2,1
   23748:	a0800115 	stw	r2,4(r20)
   2374c:	003f7406 	br	23520 <__alt_data_end+0xfffea520>
   23750:	1805d0ba 	srai	r2,r3,2
   23754:	01c00044 	movi	r7,1
   23758:	30c00117 	ldw	r3,4(r6)
   2375c:	388e983a 	sll	r7,r7,r2
   23760:	2805883a 	mov	r2,r5
   23764:	38c6b03a 	or	r3,r7,r3
   23768:	30c00115 	stw	r3,4(r6)
   2376c:	003f9b06 	br	235dc <__alt_data_end+0xfffea5dc>
   23770:	00c15504 	movi	r3,1364
   23774:	18801a36 	bltu	r3,r2,237e0 <_malloc_r+0x768>
   23778:	8804d4ba 	srli	r2,r17,18
   2377c:	12001f44 	addi	r8,r2,125
   23780:	11c01f04 	addi	r7,r2,124
   23784:	4209883a 	add	r4,r8,r8
   23788:	003e5906 	br	230f0 <__alt_data_end+0xfffea0f0>
   2378c:	ad400404 	addi	r21,r21,16
   23790:	003f1706 	br	233f0 <__alt_data_end+0xfffea3f0>
   23794:	00c01504 	movi	r3,84
   23798:	18802336 	bltu	r3,r2,23828 <_malloc_r+0x7b0>
   2379c:	3804d33a 	srli	r2,r7,12
   237a0:	11401bc4 	addi	r5,r2,111
   237a4:	10c01b84 	addi	r3,r2,110
   237a8:	294b883a 	add	r5,r5,r5
   237ac:	003f7b06 	br	2359c <__alt_data_end+0xfffea59c>
   237b0:	9c000217 	ldw	r16,8(r19)
   237b4:	00bfff04 	movi	r2,-4
   237b8:	80c00117 	ldw	r3,4(r16)
   237bc:	1886703a 	and	r3,r3,r2
   237c0:	003f5306 	br	23510 <__alt_data_end+0xfffea510>
   237c4:	3083ffcc 	andi	r2,r6,4095
   237c8:	103f181e 	bne	r2,zero,2342c <__alt_data_end+0xfffea42c>
   237cc:	99000217 	ldw	r4,8(r19)
   237d0:	b545883a 	add	r2,r22,r21
   237d4:	10800054 	ori	r2,r2,1
   237d8:	20800115 	stw	r2,4(r4)
   237dc:	003f3e06 	br	234d8 <__alt_data_end+0xfffea4d8>
   237e0:	01003f84 	movi	r4,254
   237e4:	02001fc4 	movi	r8,127
   237e8:	01c01f84 	movi	r7,126
   237ec:	003e4006 	br	230f0 <__alt_data_end+0xfffea0f0>
   237f0:	008000b4 	movhi	r2,2
   237f4:	109eea04 	addi	r2,r2,31656
   237f8:	15000015 	stw	r20,0(r2)
   237fc:	003f1106 	br	23444 <__alt_data_end+0xfffea444>
   23800:	00800044 	movi	r2,1
   23804:	002b883a 	mov	r21,zero
   23808:	003f1f06 	br	23488 <__alt_data_end+0xfffea488>
   2380c:	81400204 	addi	r5,r16,8
   23810:	9009883a 	mov	r4,r18
   23814:	0024e400 	call	24e40 <_free_r>
   23818:	008000f4 	movhi	r2,3
   2381c:	10a59404 	addi	r2,r2,-27056
   23820:	10c00017 	ldw	r3,0(r2)
   23824:	003f2c06 	br	234d8 <__alt_data_end+0xfffea4d8>
   23828:	00c05504 	movi	r3,340
   2382c:	18800536 	bltu	r3,r2,23844 <_malloc_r+0x7cc>
   23830:	3804d3fa 	srli	r2,r7,15
   23834:	11401e04 	addi	r5,r2,120
   23838:	10c01dc4 	addi	r3,r2,119
   2383c:	294b883a 	add	r5,r5,r5
   23840:	003f5606 	br	2359c <__alt_data_end+0xfffea59c>
   23844:	00c15504 	movi	r3,1364
   23848:	18800536 	bltu	r3,r2,23860 <_malloc_r+0x7e8>
   2384c:	3804d4ba 	srli	r2,r7,18
   23850:	11401f44 	addi	r5,r2,125
   23854:	10c01f04 	addi	r3,r2,124
   23858:	294b883a 	add	r5,r5,r5
   2385c:	003f4f06 	br	2359c <__alt_data_end+0xfffea59c>
   23860:	01403f84 	movi	r5,254
   23864:	00c01f84 	movi	r3,126
   23868:	003f4c06 	br	2359c <__alt_data_end+0xfffea59c>
   2386c:	98800117 	ldw	r2,4(r19)
   23870:	003fa006 	br	236f4 <__alt_data_end+0xfffea6f4>
   23874:	8808d0fa 	srli	r4,r17,3
   23878:	20800044 	addi	r2,r4,1
   2387c:	1085883a 	add	r2,r2,r2
   23880:	003e9006 	br	232c4 <__alt_data_end+0xfffea2c4>

00023884 <memchr>:
   23884:	208000cc 	andi	r2,r4,3
   23888:	280f883a 	mov	r7,r5
   2388c:	10003426 	beq	r2,zero,23960 <memchr+0xdc>
   23890:	30bfffc4 	addi	r2,r6,-1
   23894:	30001a26 	beq	r6,zero,23900 <memchr+0x7c>
   23898:	20c00003 	ldbu	r3,0(r4)
   2389c:	29803fcc 	andi	r6,r5,255
   238a0:	30c0051e 	bne	r6,r3,238b8 <memchr+0x34>
   238a4:	00001806 	br	23908 <memchr+0x84>
   238a8:	10001526 	beq	r2,zero,23900 <memchr+0x7c>
   238ac:	20c00003 	ldbu	r3,0(r4)
   238b0:	10bfffc4 	addi	r2,r2,-1
   238b4:	30c01426 	beq	r6,r3,23908 <memchr+0x84>
   238b8:	21000044 	addi	r4,r4,1
   238bc:	20c000cc 	andi	r3,r4,3
   238c0:	183ff91e 	bne	r3,zero,238a8 <__alt_data_end+0xfffea8a8>
   238c4:	020000c4 	movi	r8,3
   238c8:	40801136 	bltu	r8,r2,23910 <memchr+0x8c>
   238cc:	10000c26 	beq	r2,zero,23900 <memchr+0x7c>
   238d0:	20c00003 	ldbu	r3,0(r4)
   238d4:	29403fcc 	andi	r5,r5,255
   238d8:	28c00b26 	beq	r5,r3,23908 <memchr+0x84>
   238dc:	20c00044 	addi	r3,r4,1
   238e0:	39803fcc 	andi	r6,r7,255
   238e4:	2089883a 	add	r4,r4,r2
   238e8:	00000306 	br	238f8 <memchr+0x74>
   238ec:	18c00044 	addi	r3,r3,1
   238f0:	197fffc3 	ldbu	r5,-1(r3)
   238f4:	31400526 	beq	r6,r5,2390c <memchr+0x88>
   238f8:	1805883a 	mov	r2,r3
   238fc:	20fffb1e 	bne	r4,r3,238ec <__alt_data_end+0xfffea8ec>
   23900:	0005883a 	mov	r2,zero
   23904:	f800283a 	ret
   23908:	2005883a 	mov	r2,r4
   2390c:	f800283a 	ret
   23910:	28c03fcc 	andi	r3,r5,255
   23914:	1812923a 	slli	r9,r3,8
   23918:	02ffbff4 	movhi	r11,65279
   2391c:	02a02074 	movhi	r10,32897
   23920:	48d2b03a 	or	r9,r9,r3
   23924:	4806943a 	slli	r3,r9,16
   23928:	5affbfc4 	addi	r11,r11,-257
   2392c:	52a02004 	addi	r10,r10,-32640
   23930:	48d2b03a 	or	r9,r9,r3
   23934:	20c00017 	ldw	r3,0(r4)
   23938:	48c6f03a 	xor	r3,r9,r3
   2393c:	1acd883a 	add	r6,r3,r11
   23940:	00c6303a 	nor	r3,zero,r3
   23944:	30c6703a 	and	r3,r6,r3
   23948:	1a86703a 	and	r3,r3,r10
   2394c:	183fe01e 	bne	r3,zero,238d0 <__alt_data_end+0xfffea8d0>
   23950:	10bfff04 	addi	r2,r2,-4
   23954:	21000104 	addi	r4,r4,4
   23958:	40bff636 	bltu	r8,r2,23934 <__alt_data_end+0xfffea934>
   2395c:	003fdb06 	br	238cc <__alt_data_end+0xfffea8cc>
   23960:	3005883a 	mov	r2,r6
   23964:	003fd706 	br	238c4 <__alt_data_end+0xfffea8c4>

00023968 <memcmp>:
   23968:	01c000c4 	movi	r7,3
   2396c:	3980192e 	bgeu	r7,r6,239d4 <memcmp+0x6c>
   23970:	2144b03a 	or	r2,r4,r5
   23974:	11c4703a 	and	r2,r2,r7
   23978:	10000f26 	beq	r2,zero,239b8 <memcmp+0x50>
   2397c:	20800003 	ldbu	r2,0(r4)
   23980:	28c00003 	ldbu	r3,0(r5)
   23984:	10c0151e 	bne	r2,r3,239dc <memcmp+0x74>
   23988:	31bfff84 	addi	r6,r6,-2
   2398c:	01ffffc4 	movi	r7,-1
   23990:	00000406 	br	239a4 <memcmp+0x3c>
   23994:	20800003 	ldbu	r2,0(r4)
   23998:	28c00003 	ldbu	r3,0(r5)
   2399c:	31bfffc4 	addi	r6,r6,-1
   239a0:	10c00e1e 	bne	r2,r3,239dc <memcmp+0x74>
   239a4:	21000044 	addi	r4,r4,1
   239a8:	29400044 	addi	r5,r5,1
   239ac:	31fff91e 	bne	r6,r7,23994 <__alt_data_end+0xfffea994>
   239b0:	0005883a 	mov	r2,zero
   239b4:	f800283a 	ret
   239b8:	20c00017 	ldw	r3,0(r4)
   239bc:	28800017 	ldw	r2,0(r5)
   239c0:	18bfee1e 	bne	r3,r2,2397c <__alt_data_end+0xfffea97c>
   239c4:	31bfff04 	addi	r6,r6,-4
   239c8:	21000104 	addi	r4,r4,4
   239cc:	29400104 	addi	r5,r5,4
   239d0:	39bff936 	bltu	r7,r6,239b8 <__alt_data_end+0xfffea9b8>
   239d4:	303fe91e 	bne	r6,zero,2397c <__alt_data_end+0xfffea97c>
   239d8:	003ff506 	br	239b0 <__alt_data_end+0xfffea9b0>
   239dc:	10c5c83a 	sub	r2,r2,r3
   239e0:	f800283a 	ret

000239e4 <memcpy>:
   239e4:	defffd04 	addi	sp,sp,-12
   239e8:	dfc00215 	stw	ra,8(sp)
   239ec:	dc400115 	stw	r17,4(sp)
   239f0:	dc000015 	stw	r16,0(sp)
   239f4:	00c003c4 	movi	r3,15
   239f8:	2005883a 	mov	r2,r4
   239fc:	1980452e 	bgeu	r3,r6,23b14 <memcpy+0x130>
   23a00:	2906b03a 	or	r3,r5,r4
   23a04:	18c000cc 	andi	r3,r3,3
   23a08:	1800441e 	bne	r3,zero,23b1c <memcpy+0x138>
   23a0c:	347ffc04 	addi	r17,r6,-16
   23a10:	8822d13a 	srli	r17,r17,4
   23a14:	28c00104 	addi	r3,r5,4
   23a18:	23400104 	addi	r13,r4,4
   23a1c:	8820913a 	slli	r16,r17,4
   23a20:	2b000204 	addi	r12,r5,8
   23a24:	22c00204 	addi	r11,r4,8
   23a28:	84000504 	addi	r16,r16,20
   23a2c:	2a800304 	addi	r10,r5,12
   23a30:	22400304 	addi	r9,r4,12
   23a34:	2c21883a 	add	r16,r5,r16
   23a38:	2811883a 	mov	r8,r5
   23a3c:	200f883a 	mov	r7,r4
   23a40:	41000017 	ldw	r4,0(r8)
   23a44:	1fc00017 	ldw	ra,0(r3)
   23a48:	63c00017 	ldw	r15,0(r12)
   23a4c:	39000015 	stw	r4,0(r7)
   23a50:	53800017 	ldw	r14,0(r10)
   23a54:	6fc00015 	stw	ra,0(r13)
   23a58:	5bc00015 	stw	r15,0(r11)
   23a5c:	4b800015 	stw	r14,0(r9)
   23a60:	18c00404 	addi	r3,r3,16
   23a64:	39c00404 	addi	r7,r7,16
   23a68:	42000404 	addi	r8,r8,16
   23a6c:	6b400404 	addi	r13,r13,16
   23a70:	63000404 	addi	r12,r12,16
   23a74:	5ac00404 	addi	r11,r11,16
   23a78:	52800404 	addi	r10,r10,16
   23a7c:	4a400404 	addi	r9,r9,16
   23a80:	1c3fef1e 	bne	r3,r16,23a40 <__alt_data_end+0xfffeaa40>
   23a84:	89c00044 	addi	r7,r17,1
   23a88:	380e913a 	slli	r7,r7,4
   23a8c:	310003cc 	andi	r4,r6,15
   23a90:	02c000c4 	movi	r11,3
   23a94:	11c7883a 	add	r3,r2,r7
   23a98:	29cb883a 	add	r5,r5,r7
   23a9c:	5900212e 	bgeu	r11,r4,23b24 <memcpy+0x140>
   23aa0:	1813883a 	mov	r9,r3
   23aa4:	2811883a 	mov	r8,r5
   23aa8:	200f883a 	mov	r7,r4
   23aac:	42800017 	ldw	r10,0(r8)
   23ab0:	4a400104 	addi	r9,r9,4
   23ab4:	39ffff04 	addi	r7,r7,-4
   23ab8:	4abfff15 	stw	r10,-4(r9)
   23abc:	42000104 	addi	r8,r8,4
   23ac0:	59fffa36 	bltu	r11,r7,23aac <__alt_data_end+0xfffeaaac>
   23ac4:	213fff04 	addi	r4,r4,-4
   23ac8:	2008d0ba 	srli	r4,r4,2
   23acc:	318000cc 	andi	r6,r6,3
   23ad0:	21000044 	addi	r4,r4,1
   23ad4:	2109883a 	add	r4,r4,r4
   23ad8:	2109883a 	add	r4,r4,r4
   23adc:	1907883a 	add	r3,r3,r4
   23ae0:	290b883a 	add	r5,r5,r4
   23ae4:	30000626 	beq	r6,zero,23b00 <memcpy+0x11c>
   23ae8:	198d883a 	add	r6,r3,r6
   23aec:	29c00003 	ldbu	r7,0(r5)
   23af0:	18c00044 	addi	r3,r3,1
   23af4:	29400044 	addi	r5,r5,1
   23af8:	19ffffc5 	stb	r7,-1(r3)
   23afc:	19bffb1e 	bne	r3,r6,23aec <__alt_data_end+0xfffeaaec>
   23b00:	dfc00217 	ldw	ra,8(sp)
   23b04:	dc400117 	ldw	r17,4(sp)
   23b08:	dc000017 	ldw	r16,0(sp)
   23b0c:	dec00304 	addi	sp,sp,12
   23b10:	f800283a 	ret
   23b14:	2007883a 	mov	r3,r4
   23b18:	003ff206 	br	23ae4 <__alt_data_end+0xfffeaae4>
   23b1c:	2007883a 	mov	r3,r4
   23b20:	003ff106 	br	23ae8 <__alt_data_end+0xfffeaae8>
   23b24:	200d883a 	mov	r6,r4
   23b28:	003fee06 	br	23ae4 <__alt_data_end+0xfffeaae4>

00023b2c <memmove>:
   23b2c:	2005883a 	mov	r2,r4
   23b30:	29000b2e 	bgeu	r5,r4,23b60 <memmove+0x34>
   23b34:	298f883a 	add	r7,r5,r6
   23b38:	21c0092e 	bgeu	r4,r7,23b60 <memmove+0x34>
   23b3c:	2187883a 	add	r3,r4,r6
   23b40:	198bc83a 	sub	r5,r3,r6
   23b44:	30004826 	beq	r6,zero,23c68 <memmove+0x13c>
   23b48:	39ffffc4 	addi	r7,r7,-1
   23b4c:	39000003 	ldbu	r4,0(r7)
   23b50:	18ffffc4 	addi	r3,r3,-1
   23b54:	19000005 	stb	r4,0(r3)
   23b58:	28fffb1e 	bne	r5,r3,23b48 <__alt_data_end+0xfffeab48>
   23b5c:	f800283a 	ret
   23b60:	00c003c4 	movi	r3,15
   23b64:	1980412e 	bgeu	r3,r6,23c6c <memmove+0x140>
   23b68:	2886b03a 	or	r3,r5,r2
   23b6c:	18c000cc 	andi	r3,r3,3
   23b70:	1800401e 	bne	r3,zero,23c74 <memmove+0x148>
   23b74:	33fffc04 	addi	r15,r6,-16
   23b78:	781ed13a 	srli	r15,r15,4
   23b7c:	28c00104 	addi	r3,r5,4
   23b80:	13400104 	addi	r13,r2,4
   23b84:	781c913a 	slli	r14,r15,4
   23b88:	2b000204 	addi	r12,r5,8
   23b8c:	12c00204 	addi	r11,r2,8
   23b90:	73800504 	addi	r14,r14,20
   23b94:	2a800304 	addi	r10,r5,12
   23b98:	12400304 	addi	r9,r2,12
   23b9c:	2b9d883a 	add	r14,r5,r14
   23ba0:	2811883a 	mov	r8,r5
   23ba4:	100f883a 	mov	r7,r2
   23ba8:	41000017 	ldw	r4,0(r8)
   23bac:	39c00404 	addi	r7,r7,16
   23bb0:	18c00404 	addi	r3,r3,16
   23bb4:	393ffc15 	stw	r4,-16(r7)
   23bb8:	193ffc17 	ldw	r4,-16(r3)
   23bbc:	6b400404 	addi	r13,r13,16
   23bc0:	5ac00404 	addi	r11,r11,16
   23bc4:	693ffc15 	stw	r4,-16(r13)
   23bc8:	61000017 	ldw	r4,0(r12)
   23bcc:	4a400404 	addi	r9,r9,16
   23bd0:	42000404 	addi	r8,r8,16
   23bd4:	593ffc15 	stw	r4,-16(r11)
   23bd8:	51000017 	ldw	r4,0(r10)
   23bdc:	63000404 	addi	r12,r12,16
   23be0:	52800404 	addi	r10,r10,16
   23be4:	493ffc15 	stw	r4,-16(r9)
   23be8:	1bbfef1e 	bne	r3,r14,23ba8 <__alt_data_end+0xfffeaba8>
   23bec:	79000044 	addi	r4,r15,1
   23bf0:	2008913a 	slli	r4,r4,4
   23bf4:	328003cc 	andi	r10,r6,15
   23bf8:	02c000c4 	movi	r11,3
   23bfc:	1107883a 	add	r3,r2,r4
   23c00:	290b883a 	add	r5,r5,r4
   23c04:	5a801e2e 	bgeu	r11,r10,23c80 <memmove+0x154>
   23c08:	1813883a 	mov	r9,r3
   23c0c:	2811883a 	mov	r8,r5
   23c10:	500f883a 	mov	r7,r10
   23c14:	41000017 	ldw	r4,0(r8)
   23c18:	4a400104 	addi	r9,r9,4
   23c1c:	39ffff04 	addi	r7,r7,-4
   23c20:	493fff15 	stw	r4,-4(r9)
   23c24:	42000104 	addi	r8,r8,4
   23c28:	59fffa36 	bltu	r11,r7,23c14 <__alt_data_end+0xfffeac14>
   23c2c:	513fff04 	addi	r4,r10,-4
   23c30:	2008d0ba 	srli	r4,r4,2
   23c34:	318000cc 	andi	r6,r6,3
   23c38:	21000044 	addi	r4,r4,1
   23c3c:	2109883a 	add	r4,r4,r4
   23c40:	2109883a 	add	r4,r4,r4
   23c44:	1907883a 	add	r3,r3,r4
   23c48:	290b883a 	add	r5,r5,r4
   23c4c:	30000b26 	beq	r6,zero,23c7c <memmove+0x150>
   23c50:	198d883a 	add	r6,r3,r6
   23c54:	29c00003 	ldbu	r7,0(r5)
   23c58:	18c00044 	addi	r3,r3,1
   23c5c:	29400044 	addi	r5,r5,1
   23c60:	19ffffc5 	stb	r7,-1(r3)
   23c64:	19bffb1e 	bne	r3,r6,23c54 <__alt_data_end+0xfffeac54>
   23c68:	f800283a 	ret
   23c6c:	1007883a 	mov	r3,r2
   23c70:	003ff606 	br	23c4c <__alt_data_end+0xfffeac4c>
   23c74:	1007883a 	mov	r3,r2
   23c78:	003ff506 	br	23c50 <__alt_data_end+0xfffeac50>
   23c7c:	f800283a 	ret
   23c80:	500d883a 	mov	r6,r10
   23c84:	003ff106 	br	23c4c <__alt_data_end+0xfffeac4c>

00023c88 <_realloc_r>:
   23c88:	defff604 	addi	sp,sp,-40
   23c8c:	dc800215 	stw	r18,8(sp)
   23c90:	dfc00915 	stw	ra,36(sp)
   23c94:	df000815 	stw	fp,32(sp)
   23c98:	ddc00715 	stw	r23,28(sp)
   23c9c:	dd800615 	stw	r22,24(sp)
   23ca0:	dd400515 	stw	r21,20(sp)
   23ca4:	dd000415 	stw	r20,16(sp)
   23ca8:	dcc00315 	stw	r19,12(sp)
   23cac:	dc400115 	stw	r17,4(sp)
   23cb0:	dc000015 	stw	r16,0(sp)
   23cb4:	3025883a 	mov	r18,r6
   23cb8:	2800b726 	beq	r5,zero,23f98 <_realloc_r+0x310>
   23cbc:	282b883a 	mov	r21,r5
   23cc0:	2029883a 	mov	r20,r4
   23cc4:	0025d480 	call	25d48 <__malloc_lock>
   23cc8:	a8bfff17 	ldw	r2,-4(r21)
   23ccc:	043fff04 	movi	r16,-4
   23cd0:	90c002c4 	addi	r3,r18,11
   23cd4:	01000584 	movi	r4,22
   23cd8:	acfffe04 	addi	r19,r21,-8
   23cdc:	1420703a 	and	r16,r2,r16
   23ce0:	20c0332e 	bgeu	r4,r3,23db0 <_realloc_r+0x128>
   23ce4:	047ffe04 	movi	r17,-8
   23ce8:	1c62703a 	and	r17,r3,r17
   23cec:	8807883a 	mov	r3,r17
   23cf0:	88005816 	blt	r17,zero,23e54 <_realloc_r+0x1cc>
   23cf4:	8c805736 	bltu	r17,r18,23e54 <_realloc_r+0x1cc>
   23cf8:	80c0300e 	bge	r16,r3,23dbc <_realloc_r+0x134>
   23cfc:	070000b4 	movhi	fp,2
   23d00:	e71ddc04 	addi	fp,fp,30576
   23d04:	e1c00217 	ldw	r7,8(fp)
   23d08:	9c09883a 	add	r4,r19,r16
   23d0c:	22000117 	ldw	r8,4(r4)
   23d10:	21c06326 	beq	r4,r7,23ea0 <_realloc_r+0x218>
   23d14:	017fff84 	movi	r5,-2
   23d18:	414a703a 	and	r5,r8,r5
   23d1c:	214b883a 	add	r5,r4,r5
   23d20:	29800117 	ldw	r6,4(r5)
   23d24:	3180004c 	andi	r6,r6,1
   23d28:	30003f26 	beq	r6,zero,23e28 <_realloc_r+0x1a0>
   23d2c:	1080004c 	andi	r2,r2,1
   23d30:	10008326 	beq	r2,zero,23f40 <_realloc_r+0x2b8>
   23d34:	900b883a 	mov	r5,r18
   23d38:	a009883a 	mov	r4,r20
   23d3c:	00230780 	call	23078 <_malloc_r>
   23d40:	1025883a 	mov	r18,r2
   23d44:	10011e26 	beq	r2,zero,241c0 <_realloc_r+0x538>
   23d48:	a93fff17 	ldw	r4,-4(r21)
   23d4c:	10fffe04 	addi	r3,r2,-8
   23d50:	00bfff84 	movi	r2,-2
   23d54:	2084703a 	and	r2,r4,r2
   23d58:	9885883a 	add	r2,r19,r2
   23d5c:	1880ee26 	beq	r3,r2,24118 <_realloc_r+0x490>
   23d60:	81bfff04 	addi	r6,r16,-4
   23d64:	00800904 	movi	r2,36
   23d68:	1180b836 	bltu	r2,r6,2404c <_realloc_r+0x3c4>
   23d6c:	00c004c4 	movi	r3,19
   23d70:	19809636 	bltu	r3,r6,23fcc <_realloc_r+0x344>
   23d74:	9005883a 	mov	r2,r18
   23d78:	a807883a 	mov	r3,r21
   23d7c:	19000017 	ldw	r4,0(r3)
   23d80:	11000015 	stw	r4,0(r2)
   23d84:	19000117 	ldw	r4,4(r3)
   23d88:	11000115 	stw	r4,4(r2)
   23d8c:	18c00217 	ldw	r3,8(r3)
   23d90:	10c00215 	stw	r3,8(r2)
   23d94:	a80b883a 	mov	r5,r21
   23d98:	a009883a 	mov	r4,r20
   23d9c:	0024e400 	call	24e40 <_free_r>
   23da0:	a009883a 	mov	r4,r20
   23da4:	0025d6c0 	call	25d6c <__malloc_unlock>
   23da8:	9005883a 	mov	r2,r18
   23dac:	00001206 	br	23df8 <_realloc_r+0x170>
   23db0:	00c00404 	movi	r3,16
   23db4:	1823883a 	mov	r17,r3
   23db8:	003fce06 	br	23cf4 <__alt_data_end+0xfffeacf4>
   23dbc:	a825883a 	mov	r18,r21
   23dc0:	8445c83a 	sub	r2,r16,r17
   23dc4:	00c003c4 	movi	r3,15
   23dc8:	18802636 	bltu	r3,r2,23e64 <_realloc_r+0x1dc>
   23dcc:	99800117 	ldw	r6,4(r19)
   23dd0:	9c07883a 	add	r3,r19,r16
   23dd4:	3180004c 	andi	r6,r6,1
   23dd8:	3420b03a 	or	r16,r6,r16
   23ddc:	9c000115 	stw	r16,4(r19)
   23de0:	18800117 	ldw	r2,4(r3)
   23de4:	10800054 	ori	r2,r2,1
   23de8:	18800115 	stw	r2,4(r3)
   23dec:	a009883a 	mov	r4,r20
   23df0:	0025d6c0 	call	25d6c <__malloc_unlock>
   23df4:	9005883a 	mov	r2,r18
   23df8:	dfc00917 	ldw	ra,36(sp)
   23dfc:	df000817 	ldw	fp,32(sp)
   23e00:	ddc00717 	ldw	r23,28(sp)
   23e04:	dd800617 	ldw	r22,24(sp)
   23e08:	dd400517 	ldw	r21,20(sp)
   23e0c:	dd000417 	ldw	r20,16(sp)
   23e10:	dcc00317 	ldw	r19,12(sp)
   23e14:	dc800217 	ldw	r18,8(sp)
   23e18:	dc400117 	ldw	r17,4(sp)
   23e1c:	dc000017 	ldw	r16,0(sp)
   23e20:	dec00a04 	addi	sp,sp,40
   23e24:	f800283a 	ret
   23e28:	017fff04 	movi	r5,-4
   23e2c:	414a703a 	and	r5,r8,r5
   23e30:	814d883a 	add	r6,r16,r5
   23e34:	30c01f16 	blt	r6,r3,23eb4 <_realloc_r+0x22c>
   23e38:	20800317 	ldw	r2,12(r4)
   23e3c:	20c00217 	ldw	r3,8(r4)
   23e40:	a825883a 	mov	r18,r21
   23e44:	3021883a 	mov	r16,r6
   23e48:	18800315 	stw	r2,12(r3)
   23e4c:	10c00215 	stw	r3,8(r2)
   23e50:	003fdb06 	br	23dc0 <__alt_data_end+0xfffeadc0>
   23e54:	00800304 	movi	r2,12
   23e58:	a0800015 	stw	r2,0(r20)
   23e5c:	0005883a 	mov	r2,zero
   23e60:	003fe506 	br	23df8 <__alt_data_end+0xfffeadf8>
   23e64:	98c00117 	ldw	r3,4(r19)
   23e68:	9c4b883a 	add	r5,r19,r17
   23e6c:	11000054 	ori	r4,r2,1
   23e70:	18c0004c 	andi	r3,r3,1
   23e74:	1c62b03a 	or	r17,r3,r17
   23e78:	9c400115 	stw	r17,4(r19)
   23e7c:	29000115 	stw	r4,4(r5)
   23e80:	2885883a 	add	r2,r5,r2
   23e84:	10c00117 	ldw	r3,4(r2)
   23e88:	29400204 	addi	r5,r5,8
   23e8c:	a009883a 	mov	r4,r20
   23e90:	18c00054 	ori	r3,r3,1
   23e94:	10c00115 	stw	r3,4(r2)
   23e98:	0024e400 	call	24e40 <_free_r>
   23e9c:	003fd306 	br	23dec <__alt_data_end+0xfffeadec>
   23ea0:	017fff04 	movi	r5,-4
   23ea4:	414a703a 	and	r5,r8,r5
   23ea8:	89800404 	addi	r6,r17,16
   23eac:	8151883a 	add	r8,r16,r5
   23eb0:	4180590e 	bge	r8,r6,24018 <_realloc_r+0x390>
   23eb4:	1080004c 	andi	r2,r2,1
   23eb8:	103f9e1e 	bne	r2,zero,23d34 <__alt_data_end+0xfffead34>
   23ebc:	adbffe17 	ldw	r22,-8(r21)
   23ec0:	00bfff04 	movi	r2,-4
   23ec4:	9dadc83a 	sub	r22,r19,r22
   23ec8:	b1800117 	ldw	r6,4(r22)
   23ecc:	3084703a 	and	r2,r6,r2
   23ed0:	20002026 	beq	r4,zero,23f54 <_realloc_r+0x2cc>
   23ed4:	80af883a 	add	r23,r16,r2
   23ed8:	b96f883a 	add	r23,r23,r5
   23edc:	21c05f26 	beq	r4,r7,2405c <_realloc_r+0x3d4>
   23ee0:	b8c01c16 	blt	r23,r3,23f54 <_realloc_r+0x2cc>
   23ee4:	20800317 	ldw	r2,12(r4)
   23ee8:	20c00217 	ldw	r3,8(r4)
   23eec:	81bfff04 	addi	r6,r16,-4
   23ef0:	01000904 	movi	r4,36
   23ef4:	18800315 	stw	r2,12(r3)
   23ef8:	10c00215 	stw	r3,8(r2)
   23efc:	b0c00217 	ldw	r3,8(r22)
   23f00:	b0800317 	ldw	r2,12(r22)
   23f04:	b4800204 	addi	r18,r22,8
   23f08:	18800315 	stw	r2,12(r3)
   23f0c:	10c00215 	stw	r3,8(r2)
   23f10:	21801b36 	bltu	r4,r6,23f80 <_realloc_r+0x2f8>
   23f14:	008004c4 	movi	r2,19
   23f18:	1180352e 	bgeu	r2,r6,23ff0 <_realloc_r+0x368>
   23f1c:	a8800017 	ldw	r2,0(r21)
   23f20:	b0800215 	stw	r2,8(r22)
   23f24:	a8800117 	ldw	r2,4(r21)
   23f28:	b0800315 	stw	r2,12(r22)
   23f2c:	008006c4 	movi	r2,27
   23f30:	11807f36 	bltu	r2,r6,24130 <_realloc_r+0x4a8>
   23f34:	b0800404 	addi	r2,r22,16
   23f38:	ad400204 	addi	r21,r21,8
   23f3c:	00002d06 	br	23ff4 <_realloc_r+0x36c>
   23f40:	adbffe17 	ldw	r22,-8(r21)
   23f44:	00bfff04 	movi	r2,-4
   23f48:	9dadc83a 	sub	r22,r19,r22
   23f4c:	b1000117 	ldw	r4,4(r22)
   23f50:	2084703a 	and	r2,r4,r2
   23f54:	b03f7726 	beq	r22,zero,23d34 <__alt_data_end+0xfffead34>
   23f58:	80af883a 	add	r23,r16,r2
   23f5c:	b8ff7516 	blt	r23,r3,23d34 <__alt_data_end+0xfffead34>
   23f60:	b0800317 	ldw	r2,12(r22)
   23f64:	b0c00217 	ldw	r3,8(r22)
   23f68:	81bfff04 	addi	r6,r16,-4
   23f6c:	01000904 	movi	r4,36
   23f70:	18800315 	stw	r2,12(r3)
   23f74:	10c00215 	stw	r3,8(r2)
   23f78:	b4800204 	addi	r18,r22,8
   23f7c:	21bfe52e 	bgeu	r4,r6,23f14 <__alt_data_end+0xfffeaf14>
   23f80:	a80b883a 	mov	r5,r21
   23f84:	9009883a 	mov	r4,r18
   23f88:	0023b2c0 	call	23b2c <memmove>
   23f8c:	b821883a 	mov	r16,r23
   23f90:	b027883a 	mov	r19,r22
   23f94:	003f8a06 	br	23dc0 <__alt_data_end+0xfffeadc0>
   23f98:	300b883a 	mov	r5,r6
   23f9c:	dfc00917 	ldw	ra,36(sp)
   23fa0:	df000817 	ldw	fp,32(sp)
   23fa4:	ddc00717 	ldw	r23,28(sp)
   23fa8:	dd800617 	ldw	r22,24(sp)
   23fac:	dd400517 	ldw	r21,20(sp)
   23fb0:	dd000417 	ldw	r20,16(sp)
   23fb4:	dcc00317 	ldw	r19,12(sp)
   23fb8:	dc800217 	ldw	r18,8(sp)
   23fbc:	dc400117 	ldw	r17,4(sp)
   23fc0:	dc000017 	ldw	r16,0(sp)
   23fc4:	dec00a04 	addi	sp,sp,40
   23fc8:	00230781 	jmpi	23078 <_malloc_r>
   23fcc:	a8c00017 	ldw	r3,0(r21)
   23fd0:	90c00015 	stw	r3,0(r18)
   23fd4:	a8c00117 	ldw	r3,4(r21)
   23fd8:	90c00115 	stw	r3,4(r18)
   23fdc:	00c006c4 	movi	r3,27
   23fe0:	19804536 	bltu	r3,r6,240f8 <_realloc_r+0x470>
   23fe4:	90800204 	addi	r2,r18,8
   23fe8:	a8c00204 	addi	r3,r21,8
   23fec:	003f6306 	br	23d7c <__alt_data_end+0xfffead7c>
   23ff0:	9005883a 	mov	r2,r18
   23ff4:	a8c00017 	ldw	r3,0(r21)
   23ff8:	b821883a 	mov	r16,r23
   23ffc:	b027883a 	mov	r19,r22
   24000:	10c00015 	stw	r3,0(r2)
   24004:	a8c00117 	ldw	r3,4(r21)
   24008:	10c00115 	stw	r3,4(r2)
   2400c:	a8c00217 	ldw	r3,8(r21)
   24010:	10c00215 	stw	r3,8(r2)
   24014:	003f6a06 	br	23dc0 <__alt_data_end+0xfffeadc0>
   24018:	9c67883a 	add	r19,r19,r17
   2401c:	4445c83a 	sub	r2,r8,r17
   24020:	e4c00215 	stw	r19,8(fp)
   24024:	10800054 	ori	r2,r2,1
   24028:	98800115 	stw	r2,4(r19)
   2402c:	a8bfff17 	ldw	r2,-4(r21)
   24030:	a009883a 	mov	r4,r20
   24034:	1080004c 	andi	r2,r2,1
   24038:	1462b03a 	or	r17,r2,r17
   2403c:	ac7fff15 	stw	r17,-4(r21)
   24040:	0025d6c0 	call	25d6c <__malloc_unlock>
   24044:	a805883a 	mov	r2,r21
   24048:	003f6b06 	br	23df8 <__alt_data_end+0xfffeadf8>
   2404c:	a80b883a 	mov	r5,r21
   24050:	9009883a 	mov	r4,r18
   24054:	0023b2c0 	call	23b2c <memmove>
   24058:	003f4e06 	br	23d94 <__alt_data_end+0xfffead94>
   2405c:	89000404 	addi	r4,r17,16
   24060:	b93fbc16 	blt	r23,r4,23f54 <__alt_data_end+0xfffeaf54>
   24064:	b0800317 	ldw	r2,12(r22)
   24068:	b0c00217 	ldw	r3,8(r22)
   2406c:	81bfff04 	addi	r6,r16,-4
   24070:	01000904 	movi	r4,36
   24074:	18800315 	stw	r2,12(r3)
   24078:	10c00215 	stw	r3,8(r2)
   2407c:	b4800204 	addi	r18,r22,8
   24080:	21804336 	bltu	r4,r6,24190 <_realloc_r+0x508>
   24084:	008004c4 	movi	r2,19
   24088:	11803f2e 	bgeu	r2,r6,24188 <_realloc_r+0x500>
   2408c:	a8800017 	ldw	r2,0(r21)
   24090:	b0800215 	stw	r2,8(r22)
   24094:	a8800117 	ldw	r2,4(r21)
   24098:	b0800315 	stw	r2,12(r22)
   2409c:	008006c4 	movi	r2,27
   240a0:	11803f36 	bltu	r2,r6,241a0 <_realloc_r+0x518>
   240a4:	b0800404 	addi	r2,r22,16
   240a8:	ad400204 	addi	r21,r21,8
   240ac:	a8c00017 	ldw	r3,0(r21)
   240b0:	10c00015 	stw	r3,0(r2)
   240b4:	a8c00117 	ldw	r3,4(r21)
   240b8:	10c00115 	stw	r3,4(r2)
   240bc:	a8c00217 	ldw	r3,8(r21)
   240c0:	10c00215 	stw	r3,8(r2)
   240c4:	b447883a 	add	r3,r22,r17
   240c8:	bc45c83a 	sub	r2,r23,r17
   240cc:	e0c00215 	stw	r3,8(fp)
   240d0:	10800054 	ori	r2,r2,1
   240d4:	18800115 	stw	r2,4(r3)
   240d8:	b0800117 	ldw	r2,4(r22)
   240dc:	a009883a 	mov	r4,r20
   240e0:	1080004c 	andi	r2,r2,1
   240e4:	1462b03a 	or	r17,r2,r17
   240e8:	b4400115 	stw	r17,4(r22)
   240ec:	0025d6c0 	call	25d6c <__malloc_unlock>
   240f0:	9005883a 	mov	r2,r18
   240f4:	003f4006 	br	23df8 <__alt_data_end+0xfffeadf8>
   240f8:	a8c00217 	ldw	r3,8(r21)
   240fc:	90c00215 	stw	r3,8(r18)
   24100:	a8c00317 	ldw	r3,12(r21)
   24104:	90c00315 	stw	r3,12(r18)
   24108:	30801126 	beq	r6,r2,24150 <_realloc_r+0x4c8>
   2410c:	90800404 	addi	r2,r18,16
   24110:	a8c00404 	addi	r3,r21,16
   24114:	003f1906 	br	23d7c <__alt_data_end+0xfffead7c>
   24118:	90ffff17 	ldw	r3,-4(r18)
   2411c:	00bfff04 	movi	r2,-4
   24120:	a825883a 	mov	r18,r21
   24124:	1884703a 	and	r2,r3,r2
   24128:	80a1883a 	add	r16,r16,r2
   2412c:	003f2406 	br	23dc0 <__alt_data_end+0xfffeadc0>
   24130:	a8800217 	ldw	r2,8(r21)
   24134:	b0800415 	stw	r2,16(r22)
   24138:	a8800317 	ldw	r2,12(r21)
   2413c:	b0800515 	stw	r2,20(r22)
   24140:	31000a26 	beq	r6,r4,2416c <_realloc_r+0x4e4>
   24144:	b0800604 	addi	r2,r22,24
   24148:	ad400404 	addi	r21,r21,16
   2414c:	003fa906 	br	23ff4 <__alt_data_end+0xfffeaff4>
   24150:	a9000417 	ldw	r4,16(r21)
   24154:	90800604 	addi	r2,r18,24
   24158:	a8c00604 	addi	r3,r21,24
   2415c:	91000415 	stw	r4,16(r18)
   24160:	a9000517 	ldw	r4,20(r21)
   24164:	91000515 	stw	r4,20(r18)
   24168:	003f0406 	br	23d7c <__alt_data_end+0xfffead7c>
   2416c:	a8c00417 	ldw	r3,16(r21)
   24170:	ad400604 	addi	r21,r21,24
   24174:	b0800804 	addi	r2,r22,32
   24178:	b0c00615 	stw	r3,24(r22)
   2417c:	a8ffff17 	ldw	r3,-4(r21)
   24180:	b0c00715 	stw	r3,28(r22)
   24184:	003f9b06 	br	23ff4 <__alt_data_end+0xfffeaff4>
   24188:	9005883a 	mov	r2,r18
   2418c:	003fc706 	br	240ac <__alt_data_end+0xfffeb0ac>
   24190:	a80b883a 	mov	r5,r21
   24194:	9009883a 	mov	r4,r18
   24198:	0023b2c0 	call	23b2c <memmove>
   2419c:	003fc906 	br	240c4 <__alt_data_end+0xfffeb0c4>
   241a0:	a8800217 	ldw	r2,8(r21)
   241a4:	b0800415 	stw	r2,16(r22)
   241a8:	a8800317 	ldw	r2,12(r21)
   241ac:	b0800515 	stw	r2,20(r22)
   241b0:	31000726 	beq	r6,r4,241d0 <_realloc_r+0x548>
   241b4:	b0800604 	addi	r2,r22,24
   241b8:	ad400404 	addi	r21,r21,16
   241bc:	003fbb06 	br	240ac <__alt_data_end+0xfffeb0ac>
   241c0:	a009883a 	mov	r4,r20
   241c4:	0025d6c0 	call	25d6c <__malloc_unlock>
   241c8:	0005883a 	mov	r2,zero
   241cc:	003f0a06 	br	23df8 <__alt_data_end+0xfffeadf8>
   241d0:	a8c00417 	ldw	r3,16(r21)
   241d4:	ad400604 	addi	r21,r21,24
   241d8:	b0800804 	addi	r2,r22,32
   241dc:	b0c00615 	stw	r3,24(r22)
   241e0:	a8ffff17 	ldw	r3,-4(r21)
   241e4:	b0c00715 	stw	r3,28(r22)
   241e8:	003fb006 	br	240ac <__alt_data_end+0xfffeb0ac>

000241ec <_sbrk_r>:
   241ec:	defffd04 	addi	sp,sp,-12
   241f0:	dc000015 	stw	r16,0(sp)
   241f4:	040000f4 	movhi	r16,3
   241f8:	dc400115 	stw	r17,4(sp)
   241fc:	84259004 	addi	r16,r16,-27072
   24200:	2023883a 	mov	r17,r4
   24204:	2809883a 	mov	r4,r5
   24208:	dfc00215 	stw	ra,8(sp)
   2420c:	80000015 	stw	zero,0(r16)
   24210:	0025ed00 	call	25ed0 <sbrk>
   24214:	00ffffc4 	movi	r3,-1
   24218:	10c00526 	beq	r2,r3,24230 <_sbrk_r+0x44>
   2421c:	dfc00217 	ldw	ra,8(sp)
   24220:	dc400117 	ldw	r17,4(sp)
   24224:	dc000017 	ldw	r16,0(sp)
   24228:	dec00304 	addi	sp,sp,12
   2422c:	f800283a 	ret
   24230:	80c00017 	ldw	r3,0(r16)
   24234:	183ff926 	beq	r3,zero,2421c <__alt_data_end+0xfffeb21c>
   24238:	88c00015 	stw	r3,0(r17)
   2423c:	003ff706 	br	2421c <__alt_data_end+0xfffeb21c>

00024240 <strlen>:
   24240:	208000cc 	andi	r2,r4,3
   24244:	10002026 	beq	r2,zero,242c8 <strlen+0x88>
   24248:	20800007 	ldb	r2,0(r4)
   2424c:	10002026 	beq	r2,zero,242d0 <strlen+0x90>
   24250:	2005883a 	mov	r2,r4
   24254:	00000206 	br	24260 <strlen+0x20>
   24258:	10c00007 	ldb	r3,0(r2)
   2425c:	18001826 	beq	r3,zero,242c0 <strlen+0x80>
   24260:	10800044 	addi	r2,r2,1
   24264:	10c000cc 	andi	r3,r2,3
   24268:	183ffb1e 	bne	r3,zero,24258 <__alt_data_end+0xfffeb258>
   2426c:	10c00017 	ldw	r3,0(r2)
   24270:	01ffbff4 	movhi	r7,65279
   24274:	39ffbfc4 	addi	r7,r7,-257
   24278:	00ca303a 	nor	r5,zero,r3
   2427c:	01a02074 	movhi	r6,32897
   24280:	19c7883a 	add	r3,r3,r7
   24284:	31a02004 	addi	r6,r6,-32640
   24288:	1946703a 	and	r3,r3,r5
   2428c:	1986703a 	and	r3,r3,r6
   24290:	1800091e 	bne	r3,zero,242b8 <strlen+0x78>
   24294:	10800104 	addi	r2,r2,4
   24298:	10c00017 	ldw	r3,0(r2)
   2429c:	19cb883a 	add	r5,r3,r7
   242a0:	00c6303a 	nor	r3,zero,r3
   242a4:	28c6703a 	and	r3,r5,r3
   242a8:	1986703a 	and	r3,r3,r6
   242ac:	183ff926 	beq	r3,zero,24294 <__alt_data_end+0xfffeb294>
   242b0:	00000106 	br	242b8 <strlen+0x78>
   242b4:	10800044 	addi	r2,r2,1
   242b8:	10c00007 	ldb	r3,0(r2)
   242bc:	183ffd1e 	bne	r3,zero,242b4 <__alt_data_end+0xfffeb2b4>
   242c0:	1105c83a 	sub	r2,r2,r4
   242c4:	f800283a 	ret
   242c8:	2005883a 	mov	r2,r4
   242cc:	003fe706 	br	2426c <__alt_data_end+0xfffeb26c>
   242d0:	0005883a 	mov	r2,zero
   242d4:	f800283a 	ret

000242d8 <__swsetup_r>:
   242d8:	008000b4 	movhi	r2,2
   242dc:	defffd04 	addi	sp,sp,-12
   242e0:	109ee904 	addi	r2,r2,31652
   242e4:	dc400115 	stw	r17,4(sp)
   242e8:	2023883a 	mov	r17,r4
   242ec:	11000017 	ldw	r4,0(r2)
   242f0:	dc000015 	stw	r16,0(sp)
   242f4:	dfc00215 	stw	ra,8(sp)
   242f8:	2821883a 	mov	r16,r5
   242fc:	20000226 	beq	r4,zero,24308 <__swsetup_r+0x30>
   24300:	20800e17 	ldw	r2,56(r4)
   24304:	10003126 	beq	r2,zero,243cc <__swsetup_r+0xf4>
   24308:	8080030b 	ldhu	r2,12(r16)
   2430c:	10c0020c 	andi	r3,r2,8
   24310:	1009883a 	mov	r4,r2
   24314:	18000f26 	beq	r3,zero,24354 <__swsetup_r+0x7c>
   24318:	80c00417 	ldw	r3,16(r16)
   2431c:	18001526 	beq	r3,zero,24374 <__swsetup_r+0x9c>
   24320:	1100004c 	andi	r4,r2,1
   24324:	20001c1e 	bne	r4,zero,24398 <__swsetup_r+0xc0>
   24328:	1080008c 	andi	r2,r2,2
   2432c:	1000291e 	bne	r2,zero,243d4 <__swsetup_r+0xfc>
   24330:	80800517 	ldw	r2,20(r16)
   24334:	80800215 	stw	r2,8(r16)
   24338:	18001c26 	beq	r3,zero,243ac <__swsetup_r+0xd4>
   2433c:	0005883a 	mov	r2,zero
   24340:	dfc00217 	ldw	ra,8(sp)
   24344:	dc400117 	ldw	r17,4(sp)
   24348:	dc000017 	ldw	r16,0(sp)
   2434c:	dec00304 	addi	sp,sp,12
   24350:	f800283a 	ret
   24354:	2080040c 	andi	r2,r4,16
   24358:	10002e26 	beq	r2,zero,24414 <__swsetup_r+0x13c>
   2435c:	2080010c 	andi	r2,r4,4
   24360:	10001e1e 	bne	r2,zero,243dc <__swsetup_r+0x104>
   24364:	80c00417 	ldw	r3,16(r16)
   24368:	20800214 	ori	r2,r4,8
   2436c:	8080030d 	sth	r2,12(r16)
   24370:	183feb1e 	bne	r3,zero,24320 <__alt_data_end+0xfffeb320>
   24374:	1100a00c 	andi	r4,r2,640
   24378:	01408004 	movi	r5,512
   2437c:	217fe826 	beq	r4,r5,24320 <__alt_data_end+0xfffeb320>
   24380:	800b883a 	mov	r5,r16
   24384:	8809883a 	mov	r4,r17
   24388:	00252d80 	call	252d8 <__smakebuf_r>
   2438c:	8080030b 	ldhu	r2,12(r16)
   24390:	80c00417 	ldw	r3,16(r16)
   24394:	003fe206 	br	24320 <__alt_data_end+0xfffeb320>
   24398:	80800517 	ldw	r2,20(r16)
   2439c:	80000215 	stw	zero,8(r16)
   243a0:	0085c83a 	sub	r2,zero,r2
   243a4:	80800615 	stw	r2,24(r16)
   243a8:	183fe41e 	bne	r3,zero,2433c <__alt_data_end+0xfffeb33c>
   243ac:	80c0030b 	ldhu	r3,12(r16)
   243b0:	0005883a 	mov	r2,zero
   243b4:	1900200c 	andi	r4,r3,128
   243b8:	203fe126 	beq	r4,zero,24340 <__alt_data_end+0xfffeb340>
   243bc:	18c01014 	ori	r3,r3,64
   243c0:	80c0030d 	sth	r3,12(r16)
   243c4:	00bfffc4 	movi	r2,-1
   243c8:	003fdd06 	br	24340 <__alt_data_end+0xfffeb340>
   243cc:	0024ccc0 	call	24ccc <__sinit>
   243d0:	003fcd06 	br	24308 <__alt_data_end+0xfffeb308>
   243d4:	0005883a 	mov	r2,zero
   243d8:	003fd606 	br	24334 <__alt_data_end+0xfffeb334>
   243dc:	81400c17 	ldw	r5,48(r16)
   243e0:	28000626 	beq	r5,zero,243fc <__swsetup_r+0x124>
   243e4:	80801004 	addi	r2,r16,64
   243e8:	28800326 	beq	r5,r2,243f8 <__swsetup_r+0x120>
   243ec:	8809883a 	mov	r4,r17
   243f0:	0024e400 	call	24e40 <_free_r>
   243f4:	8100030b 	ldhu	r4,12(r16)
   243f8:	80000c15 	stw	zero,48(r16)
   243fc:	80c00417 	ldw	r3,16(r16)
   24400:	00bff6c4 	movi	r2,-37
   24404:	1108703a 	and	r4,r2,r4
   24408:	80000115 	stw	zero,4(r16)
   2440c:	80c00015 	stw	r3,0(r16)
   24410:	003fd506 	br	24368 <__alt_data_end+0xfffeb368>
   24414:	00800244 	movi	r2,9
   24418:	88800015 	stw	r2,0(r17)
   2441c:	20801014 	ori	r2,r4,64
   24420:	8080030d 	sth	r2,12(r16)
   24424:	00bfffc4 	movi	r2,-1
   24428:	003fc506 	br	24340 <__alt_data_end+0xfffeb340>

0002442c <__register_exitproc>:
   2442c:	defffa04 	addi	sp,sp,-24
   24430:	dc000315 	stw	r16,12(sp)
   24434:	040000b4 	movhi	r16,2
   24438:	841ee804 	addi	r16,r16,31648
   2443c:	80c00017 	ldw	r3,0(r16)
   24440:	dc400415 	stw	r17,16(sp)
   24444:	dfc00515 	stw	ra,20(sp)
   24448:	18805217 	ldw	r2,328(r3)
   2444c:	2023883a 	mov	r17,r4
   24450:	10003726 	beq	r2,zero,24530 <__register_exitproc+0x104>
   24454:	10c00117 	ldw	r3,4(r2)
   24458:	010007c4 	movi	r4,31
   2445c:	20c00e16 	blt	r4,r3,24498 <__register_exitproc+0x6c>
   24460:	1a000044 	addi	r8,r3,1
   24464:	8800221e 	bne	r17,zero,244f0 <__register_exitproc+0xc4>
   24468:	18c00084 	addi	r3,r3,2
   2446c:	18c7883a 	add	r3,r3,r3
   24470:	18c7883a 	add	r3,r3,r3
   24474:	12000115 	stw	r8,4(r2)
   24478:	10c7883a 	add	r3,r2,r3
   2447c:	19400015 	stw	r5,0(r3)
   24480:	0005883a 	mov	r2,zero
   24484:	dfc00517 	ldw	ra,20(sp)
   24488:	dc400417 	ldw	r17,16(sp)
   2448c:	dc000317 	ldw	r16,12(sp)
   24490:	dec00604 	addi	sp,sp,24
   24494:	f800283a 	ret
   24498:	00800034 	movhi	r2,0
   2449c:	10800004 	addi	r2,r2,0
   244a0:	10002626 	beq	r2,zero,2453c <__register_exitproc+0x110>
   244a4:	01006404 	movi	r4,400
   244a8:	d9400015 	stw	r5,0(sp)
   244ac:	d9800115 	stw	r6,4(sp)
   244b0:	d9c00215 	stw	r7,8(sp)
   244b4:	00000000 	call	0 <__alt_mem_onchip_ram-0x20000>
   244b8:	d9400017 	ldw	r5,0(sp)
   244bc:	d9800117 	ldw	r6,4(sp)
   244c0:	d9c00217 	ldw	r7,8(sp)
   244c4:	10001d26 	beq	r2,zero,2453c <__register_exitproc+0x110>
   244c8:	81000017 	ldw	r4,0(r16)
   244cc:	10000115 	stw	zero,4(r2)
   244d0:	02000044 	movi	r8,1
   244d4:	22405217 	ldw	r9,328(r4)
   244d8:	0007883a 	mov	r3,zero
   244dc:	12400015 	stw	r9,0(r2)
   244e0:	20805215 	stw	r2,328(r4)
   244e4:	10006215 	stw	zero,392(r2)
   244e8:	10006315 	stw	zero,396(r2)
   244ec:	883fde26 	beq	r17,zero,24468 <__alt_data_end+0xfffeb468>
   244f0:	18c9883a 	add	r4,r3,r3
   244f4:	2109883a 	add	r4,r4,r4
   244f8:	1109883a 	add	r4,r2,r4
   244fc:	21802215 	stw	r6,136(r4)
   24500:	01800044 	movi	r6,1
   24504:	12406217 	ldw	r9,392(r2)
   24508:	30cc983a 	sll	r6,r6,r3
   2450c:	4992b03a 	or	r9,r9,r6
   24510:	12406215 	stw	r9,392(r2)
   24514:	21c04215 	stw	r7,264(r4)
   24518:	01000084 	movi	r4,2
   2451c:	893fd21e 	bne	r17,r4,24468 <__alt_data_end+0xfffeb468>
   24520:	11006317 	ldw	r4,396(r2)
   24524:	218cb03a 	or	r6,r4,r6
   24528:	11806315 	stw	r6,396(r2)
   2452c:	003fce06 	br	24468 <__alt_data_end+0xfffeb468>
   24530:	18805304 	addi	r2,r3,332
   24534:	18805215 	stw	r2,328(r3)
   24538:	003fc606 	br	24454 <__alt_data_end+0xfffeb454>
   2453c:	00bfffc4 	movi	r2,-1
   24540:	003fd006 	br	24484 <__alt_data_end+0xfffeb484>

00024544 <__call_exitprocs>:
   24544:	defff504 	addi	sp,sp,-44
   24548:	df000915 	stw	fp,36(sp)
   2454c:	dd400615 	stw	r21,24(sp)
   24550:	dc800315 	stw	r18,12(sp)
   24554:	dfc00a15 	stw	ra,40(sp)
   24558:	ddc00815 	stw	r23,32(sp)
   2455c:	dd800715 	stw	r22,28(sp)
   24560:	dd000515 	stw	r20,20(sp)
   24564:	dcc00415 	stw	r19,16(sp)
   24568:	dc400215 	stw	r17,8(sp)
   2456c:	dc000115 	stw	r16,4(sp)
   24570:	d9000015 	stw	r4,0(sp)
   24574:	2839883a 	mov	fp,r5
   24578:	04800044 	movi	r18,1
   2457c:	057fffc4 	movi	r21,-1
   24580:	008000b4 	movhi	r2,2
   24584:	109ee804 	addi	r2,r2,31648
   24588:	12000017 	ldw	r8,0(r2)
   2458c:	45005217 	ldw	r20,328(r8)
   24590:	44c05204 	addi	r19,r8,328
   24594:	a0001c26 	beq	r20,zero,24608 <__call_exitprocs+0xc4>
   24598:	a0800117 	ldw	r2,4(r20)
   2459c:	15ffffc4 	addi	r23,r2,-1
   245a0:	b8000d16 	blt	r23,zero,245d8 <__call_exitprocs+0x94>
   245a4:	14000044 	addi	r16,r2,1
   245a8:	8421883a 	add	r16,r16,r16
   245ac:	8421883a 	add	r16,r16,r16
   245b0:	84402004 	addi	r17,r16,128
   245b4:	a463883a 	add	r17,r20,r17
   245b8:	a421883a 	add	r16,r20,r16
   245bc:	e0001e26 	beq	fp,zero,24638 <__call_exitprocs+0xf4>
   245c0:	80804017 	ldw	r2,256(r16)
   245c4:	e0801c26 	beq	fp,r2,24638 <__call_exitprocs+0xf4>
   245c8:	bdffffc4 	addi	r23,r23,-1
   245cc:	843fff04 	addi	r16,r16,-4
   245d0:	8c7fff04 	addi	r17,r17,-4
   245d4:	bd7ff91e 	bne	r23,r21,245bc <__alt_data_end+0xfffeb5bc>
   245d8:	00800034 	movhi	r2,0
   245dc:	10800004 	addi	r2,r2,0
   245e0:	10000926 	beq	r2,zero,24608 <__call_exitprocs+0xc4>
   245e4:	a0800117 	ldw	r2,4(r20)
   245e8:	1000301e 	bne	r2,zero,246ac <__call_exitprocs+0x168>
   245ec:	a0800017 	ldw	r2,0(r20)
   245f0:	10003226 	beq	r2,zero,246bc <__call_exitprocs+0x178>
   245f4:	a009883a 	mov	r4,r20
   245f8:	98800015 	stw	r2,0(r19)
   245fc:	00000000 	call	0 <__alt_mem_onchip_ram-0x20000>
   24600:	9d000017 	ldw	r20,0(r19)
   24604:	a03fe41e 	bne	r20,zero,24598 <__alt_data_end+0xfffeb598>
   24608:	dfc00a17 	ldw	ra,40(sp)
   2460c:	df000917 	ldw	fp,36(sp)
   24610:	ddc00817 	ldw	r23,32(sp)
   24614:	dd800717 	ldw	r22,28(sp)
   24618:	dd400617 	ldw	r21,24(sp)
   2461c:	dd000517 	ldw	r20,20(sp)
   24620:	dcc00417 	ldw	r19,16(sp)
   24624:	dc800317 	ldw	r18,12(sp)
   24628:	dc400217 	ldw	r17,8(sp)
   2462c:	dc000117 	ldw	r16,4(sp)
   24630:	dec00b04 	addi	sp,sp,44
   24634:	f800283a 	ret
   24638:	a0800117 	ldw	r2,4(r20)
   2463c:	80c00017 	ldw	r3,0(r16)
   24640:	10bfffc4 	addi	r2,r2,-1
   24644:	15c01426 	beq	r2,r23,24698 <__call_exitprocs+0x154>
   24648:	80000015 	stw	zero,0(r16)
   2464c:	183fde26 	beq	r3,zero,245c8 <__alt_data_end+0xfffeb5c8>
   24650:	95c8983a 	sll	r4,r18,r23
   24654:	a0806217 	ldw	r2,392(r20)
   24658:	a5800117 	ldw	r22,4(r20)
   2465c:	2084703a 	and	r2,r4,r2
   24660:	10000b26 	beq	r2,zero,24690 <__call_exitprocs+0x14c>
   24664:	a0806317 	ldw	r2,396(r20)
   24668:	2088703a 	and	r4,r4,r2
   2466c:	20000c1e 	bne	r4,zero,246a0 <__call_exitprocs+0x15c>
   24670:	89400017 	ldw	r5,0(r17)
   24674:	d9000017 	ldw	r4,0(sp)
   24678:	183ee83a 	callr	r3
   2467c:	a0800117 	ldw	r2,4(r20)
   24680:	15bfbf1e 	bne	r2,r22,24580 <__alt_data_end+0xfffeb580>
   24684:	98800017 	ldw	r2,0(r19)
   24688:	153fcf26 	beq	r2,r20,245c8 <__alt_data_end+0xfffeb5c8>
   2468c:	003fbc06 	br	24580 <__alt_data_end+0xfffeb580>
   24690:	183ee83a 	callr	r3
   24694:	003ff906 	br	2467c <__alt_data_end+0xfffeb67c>
   24698:	a5c00115 	stw	r23,4(r20)
   2469c:	003feb06 	br	2464c <__alt_data_end+0xfffeb64c>
   246a0:	89000017 	ldw	r4,0(r17)
   246a4:	183ee83a 	callr	r3
   246a8:	003ff406 	br	2467c <__alt_data_end+0xfffeb67c>
   246ac:	a0800017 	ldw	r2,0(r20)
   246b0:	a027883a 	mov	r19,r20
   246b4:	1029883a 	mov	r20,r2
   246b8:	003fb606 	br	24594 <__alt_data_end+0xfffeb594>
   246bc:	0005883a 	mov	r2,zero
   246c0:	003ffb06 	br	246b0 <__alt_data_end+0xfffeb6b0>

000246c4 <__sflush_r>:
   246c4:	2880030b 	ldhu	r2,12(r5)
   246c8:	defffb04 	addi	sp,sp,-20
   246cc:	dcc00315 	stw	r19,12(sp)
   246d0:	dc400115 	stw	r17,4(sp)
   246d4:	dfc00415 	stw	ra,16(sp)
   246d8:	dc800215 	stw	r18,8(sp)
   246dc:	dc000015 	stw	r16,0(sp)
   246e0:	10c0020c 	andi	r3,r2,8
   246e4:	2823883a 	mov	r17,r5
   246e8:	2027883a 	mov	r19,r4
   246ec:	1800311e 	bne	r3,zero,247b4 <__sflush_r+0xf0>
   246f0:	28c00117 	ldw	r3,4(r5)
   246f4:	10820014 	ori	r2,r2,2048
   246f8:	2880030d 	sth	r2,12(r5)
   246fc:	00c04b0e 	bge	zero,r3,2482c <__sflush_r+0x168>
   24700:	8a000a17 	ldw	r8,40(r17)
   24704:	40002326 	beq	r8,zero,24794 <__sflush_r+0xd0>
   24708:	9c000017 	ldw	r16,0(r19)
   2470c:	10c4000c 	andi	r3,r2,4096
   24710:	98000015 	stw	zero,0(r19)
   24714:	18004826 	beq	r3,zero,24838 <__sflush_r+0x174>
   24718:	89801417 	ldw	r6,80(r17)
   2471c:	10c0010c 	andi	r3,r2,4
   24720:	18000626 	beq	r3,zero,2473c <__sflush_r+0x78>
   24724:	88c00117 	ldw	r3,4(r17)
   24728:	88800c17 	ldw	r2,48(r17)
   2472c:	30cdc83a 	sub	r6,r6,r3
   24730:	10000226 	beq	r2,zero,2473c <__sflush_r+0x78>
   24734:	88800f17 	ldw	r2,60(r17)
   24738:	308dc83a 	sub	r6,r6,r2
   2473c:	89400717 	ldw	r5,28(r17)
   24740:	000f883a 	mov	r7,zero
   24744:	9809883a 	mov	r4,r19
   24748:	403ee83a 	callr	r8
   2474c:	00ffffc4 	movi	r3,-1
   24750:	10c04426 	beq	r2,r3,24864 <__sflush_r+0x1a0>
   24754:	88c0030b 	ldhu	r3,12(r17)
   24758:	89000417 	ldw	r4,16(r17)
   2475c:	88000115 	stw	zero,4(r17)
   24760:	197dffcc 	andi	r5,r3,63487
   24764:	8940030d 	sth	r5,12(r17)
   24768:	89000015 	stw	r4,0(r17)
   2476c:	18c4000c 	andi	r3,r3,4096
   24770:	18002c1e 	bne	r3,zero,24824 <__sflush_r+0x160>
   24774:	89400c17 	ldw	r5,48(r17)
   24778:	9c000015 	stw	r16,0(r19)
   2477c:	28000526 	beq	r5,zero,24794 <__sflush_r+0xd0>
   24780:	88801004 	addi	r2,r17,64
   24784:	28800226 	beq	r5,r2,24790 <__sflush_r+0xcc>
   24788:	9809883a 	mov	r4,r19
   2478c:	0024e400 	call	24e40 <_free_r>
   24790:	88000c15 	stw	zero,48(r17)
   24794:	0005883a 	mov	r2,zero
   24798:	dfc00417 	ldw	ra,16(sp)
   2479c:	dcc00317 	ldw	r19,12(sp)
   247a0:	dc800217 	ldw	r18,8(sp)
   247a4:	dc400117 	ldw	r17,4(sp)
   247a8:	dc000017 	ldw	r16,0(sp)
   247ac:	dec00504 	addi	sp,sp,20
   247b0:	f800283a 	ret
   247b4:	2c800417 	ldw	r18,16(r5)
   247b8:	903ff626 	beq	r18,zero,24794 <__alt_data_end+0xfffeb794>
   247bc:	2c000017 	ldw	r16,0(r5)
   247c0:	108000cc 	andi	r2,r2,3
   247c4:	2c800015 	stw	r18,0(r5)
   247c8:	84a1c83a 	sub	r16,r16,r18
   247cc:	1000131e 	bne	r2,zero,2481c <__sflush_r+0x158>
   247d0:	28800517 	ldw	r2,20(r5)
   247d4:	88800215 	stw	r2,8(r17)
   247d8:	04000316 	blt	zero,r16,247e8 <__sflush_r+0x124>
   247dc:	003fed06 	br	24794 <__alt_data_end+0xfffeb794>
   247e0:	90a5883a 	add	r18,r18,r2
   247e4:	043feb0e 	bge	zero,r16,24794 <__alt_data_end+0xfffeb794>
   247e8:	88800917 	ldw	r2,36(r17)
   247ec:	89400717 	ldw	r5,28(r17)
   247f0:	800f883a 	mov	r7,r16
   247f4:	900d883a 	mov	r6,r18
   247f8:	9809883a 	mov	r4,r19
   247fc:	103ee83a 	callr	r2
   24800:	80a1c83a 	sub	r16,r16,r2
   24804:	00bff616 	blt	zero,r2,247e0 <__alt_data_end+0xfffeb7e0>
   24808:	88c0030b 	ldhu	r3,12(r17)
   2480c:	00bfffc4 	movi	r2,-1
   24810:	18c01014 	ori	r3,r3,64
   24814:	88c0030d 	sth	r3,12(r17)
   24818:	003fdf06 	br	24798 <__alt_data_end+0xfffeb798>
   2481c:	0005883a 	mov	r2,zero
   24820:	003fec06 	br	247d4 <__alt_data_end+0xfffeb7d4>
   24824:	88801415 	stw	r2,80(r17)
   24828:	003fd206 	br	24774 <__alt_data_end+0xfffeb774>
   2482c:	28c00f17 	ldw	r3,60(r5)
   24830:	00ffb316 	blt	zero,r3,24700 <__alt_data_end+0xfffeb700>
   24834:	003fd706 	br	24794 <__alt_data_end+0xfffeb794>
   24838:	89400717 	ldw	r5,28(r17)
   2483c:	000d883a 	mov	r6,zero
   24840:	01c00044 	movi	r7,1
   24844:	9809883a 	mov	r4,r19
   24848:	403ee83a 	callr	r8
   2484c:	100d883a 	mov	r6,r2
   24850:	00bfffc4 	movi	r2,-1
   24854:	30801426 	beq	r6,r2,248a8 <__sflush_r+0x1e4>
   24858:	8880030b 	ldhu	r2,12(r17)
   2485c:	8a000a17 	ldw	r8,40(r17)
   24860:	003fae06 	br	2471c <__alt_data_end+0xfffeb71c>
   24864:	98c00017 	ldw	r3,0(r19)
   24868:	183fba26 	beq	r3,zero,24754 <__alt_data_end+0xfffeb754>
   2486c:	01000744 	movi	r4,29
   24870:	19000626 	beq	r3,r4,2488c <__sflush_r+0x1c8>
   24874:	01000584 	movi	r4,22
   24878:	19000426 	beq	r3,r4,2488c <__sflush_r+0x1c8>
   2487c:	88c0030b 	ldhu	r3,12(r17)
   24880:	18c01014 	ori	r3,r3,64
   24884:	88c0030d 	sth	r3,12(r17)
   24888:	003fc306 	br	24798 <__alt_data_end+0xfffeb798>
   2488c:	8880030b 	ldhu	r2,12(r17)
   24890:	88c00417 	ldw	r3,16(r17)
   24894:	88000115 	stw	zero,4(r17)
   24898:	10bdffcc 	andi	r2,r2,63487
   2489c:	8880030d 	sth	r2,12(r17)
   248a0:	88c00015 	stw	r3,0(r17)
   248a4:	003fb306 	br	24774 <__alt_data_end+0xfffeb774>
   248a8:	98800017 	ldw	r2,0(r19)
   248ac:	103fea26 	beq	r2,zero,24858 <__alt_data_end+0xfffeb858>
   248b0:	00c00744 	movi	r3,29
   248b4:	10c00226 	beq	r2,r3,248c0 <__sflush_r+0x1fc>
   248b8:	00c00584 	movi	r3,22
   248bc:	10c0031e 	bne	r2,r3,248cc <__sflush_r+0x208>
   248c0:	9c000015 	stw	r16,0(r19)
   248c4:	0005883a 	mov	r2,zero
   248c8:	003fb306 	br	24798 <__alt_data_end+0xfffeb798>
   248cc:	88c0030b 	ldhu	r3,12(r17)
   248d0:	3005883a 	mov	r2,r6
   248d4:	18c01014 	ori	r3,r3,64
   248d8:	88c0030d 	sth	r3,12(r17)
   248dc:	003fae06 	br	24798 <__alt_data_end+0xfffeb798>

000248e0 <_fflush_r>:
   248e0:	defffd04 	addi	sp,sp,-12
   248e4:	dc000115 	stw	r16,4(sp)
   248e8:	dfc00215 	stw	ra,8(sp)
   248ec:	2021883a 	mov	r16,r4
   248f0:	20000226 	beq	r4,zero,248fc <_fflush_r+0x1c>
   248f4:	20800e17 	ldw	r2,56(r4)
   248f8:	10000c26 	beq	r2,zero,2492c <_fflush_r+0x4c>
   248fc:	2880030f 	ldh	r2,12(r5)
   24900:	1000051e 	bne	r2,zero,24918 <_fflush_r+0x38>
   24904:	0005883a 	mov	r2,zero
   24908:	dfc00217 	ldw	ra,8(sp)
   2490c:	dc000117 	ldw	r16,4(sp)
   24910:	dec00304 	addi	sp,sp,12
   24914:	f800283a 	ret
   24918:	8009883a 	mov	r4,r16
   2491c:	dfc00217 	ldw	ra,8(sp)
   24920:	dc000117 	ldw	r16,4(sp)
   24924:	dec00304 	addi	sp,sp,12
   24928:	00246c41 	jmpi	246c4 <__sflush_r>
   2492c:	d9400015 	stw	r5,0(sp)
   24930:	0024ccc0 	call	24ccc <__sinit>
   24934:	d9400017 	ldw	r5,0(sp)
   24938:	003ff006 	br	248fc <__alt_data_end+0xfffeb8fc>

0002493c <fflush>:
   2493c:	20000526 	beq	r4,zero,24954 <fflush+0x18>
   24940:	008000b4 	movhi	r2,2
   24944:	109ee904 	addi	r2,r2,31652
   24948:	200b883a 	mov	r5,r4
   2494c:	11000017 	ldw	r4,0(r2)
   24950:	00248e01 	jmpi	248e0 <_fflush_r>
   24954:	008000b4 	movhi	r2,2
   24958:	109ee804 	addi	r2,r2,31648
   2495c:	11000017 	ldw	r4,0(r2)
   24960:	014000b4 	movhi	r5,2
   24964:	29523804 	addi	r5,r5,18656
   24968:	00252141 	jmpi	25214 <_fwalk_reent>

0002496c <__fp_unlock>:
   2496c:	0005883a 	mov	r2,zero
   24970:	f800283a 	ret

00024974 <_cleanup_r>:
   24974:	014000b4 	movhi	r5,2
   24978:	2955eb04 	addi	r5,r5,22444
   2497c:	00252141 	jmpi	25214 <_fwalk_reent>

00024980 <__sinit.part.1>:
   24980:	defff704 	addi	sp,sp,-36
   24984:	00c000b4 	movhi	r3,2
   24988:	dfc00815 	stw	ra,32(sp)
   2498c:	ddc00715 	stw	r23,28(sp)
   24990:	dd800615 	stw	r22,24(sp)
   24994:	dd400515 	stw	r21,20(sp)
   24998:	dd000415 	stw	r20,16(sp)
   2499c:	dcc00315 	stw	r19,12(sp)
   249a0:	dc800215 	stw	r18,8(sp)
   249a4:	dc400115 	stw	r17,4(sp)
   249a8:	dc000015 	stw	r16,0(sp)
   249ac:	18d25d04 	addi	r3,r3,18804
   249b0:	24000117 	ldw	r16,4(r4)
   249b4:	20c00f15 	stw	r3,60(r4)
   249b8:	2080bb04 	addi	r2,r4,748
   249bc:	00c000c4 	movi	r3,3
   249c0:	20c0b915 	stw	r3,740(r4)
   249c4:	2080ba15 	stw	r2,744(r4)
   249c8:	2000b815 	stw	zero,736(r4)
   249cc:	05c00204 	movi	r23,8
   249d0:	00800104 	movi	r2,4
   249d4:	2025883a 	mov	r18,r4
   249d8:	b80d883a 	mov	r6,r23
   249dc:	81001704 	addi	r4,r16,92
   249e0:	000b883a 	mov	r5,zero
   249e4:	80000015 	stw	zero,0(r16)
   249e8:	80000115 	stw	zero,4(r16)
   249ec:	80000215 	stw	zero,8(r16)
   249f0:	8080030d 	sth	r2,12(r16)
   249f4:	80001915 	stw	zero,100(r16)
   249f8:	8000038d 	sth	zero,14(r16)
   249fc:	80000415 	stw	zero,16(r16)
   24a00:	80000515 	stw	zero,20(r16)
   24a04:	80000615 	stw	zero,24(r16)
   24a08:	00254940 	call	25494 <memset>
   24a0c:	058000b4 	movhi	r22,2
   24a10:	94400217 	ldw	r17,8(r18)
   24a14:	054000b4 	movhi	r21,2
   24a18:	050000b4 	movhi	r20,2
   24a1c:	04c000b4 	movhi	r19,2
   24a20:	b5956f04 	addi	r22,r22,21948
   24a24:	ad558604 	addi	r21,r21,22040
   24a28:	a515a504 	addi	r20,r20,22164
   24a2c:	9cd5bc04 	addi	r19,r19,22256
   24a30:	85800815 	stw	r22,32(r16)
   24a34:	85400915 	stw	r21,36(r16)
   24a38:	85000a15 	stw	r20,40(r16)
   24a3c:	84c00b15 	stw	r19,44(r16)
   24a40:	84000715 	stw	r16,28(r16)
   24a44:	00800284 	movi	r2,10
   24a48:	8880030d 	sth	r2,12(r17)
   24a4c:	00800044 	movi	r2,1
   24a50:	b80d883a 	mov	r6,r23
   24a54:	89001704 	addi	r4,r17,92
   24a58:	000b883a 	mov	r5,zero
   24a5c:	88000015 	stw	zero,0(r17)
   24a60:	88000115 	stw	zero,4(r17)
   24a64:	88000215 	stw	zero,8(r17)
   24a68:	88001915 	stw	zero,100(r17)
   24a6c:	8880038d 	sth	r2,14(r17)
   24a70:	88000415 	stw	zero,16(r17)
   24a74:	88000515 	stw	zero,20(r17)
   24a78:	88000615 	stw	zero,24(r17)
   24a7c:	00254940 	call	25494 <memset>
   24a80:	94000317 	ldw	r16,12(r18)
   24a84:	00800484 	movi	r2,18
   24a88:	8c400715 	stw	r17,28(r17)
   24a8c:	8d800815 	stw	r22,32(r17)
   24a90:	8d400915 	stw	r21,36(r17)
   24a94:	8d000a15 	stw	r20,40(r17)
   24a98:	8cc00b15 	stw	r19,44(r17)
   24a9c:	8080030d 	sth	r2,12(r16)
   24aa0:	00800084 	movi	r2,2
   24aa4:	80000015 	stw	zero,0(r16)
   24aa8:	80000115 	stw	zero,4(r16)
   24aac:	80000215 	stw	zero,8(r16)
   24ab0:	80001915 	stw	zero,100(r16)
   24ab4:	8080038d 	sth	r2,14(r16)
   24ab8:	80000415 	stw	zero,16(r16)
   24abc:	80000515 	stw	zero,20(r16)
   24ac0:	80000615 	stw	zero,24(r16)
   24ac4:	b80d883a 	mov	r6,r23
   24ac8:	000b883a 	mov	r5,zero
   24acc:	81001704 	addi	r4,r16,92
   24ad0:	00254940 	call	25494 <memset>
   24ad4:	00800044 	movi	r2,1
   24ad8:	84000715 	stw	r16,28(r16)
   24adc:	85800815 	stw	r22,32(r16)
   24ae0:	85400915 	stw	r21,36(r16)
   24ae4:	85000a15 	stw	r20,40(r16)
   24ae8:	84c00b15 	stw	r19,44(r16)
   24aec:	90800e15 	stw	r2,56(r18)
   24af0:	dfc00817 	ldw	ra,32(sp)
   24af4:	ddc00717 	ldw	r23,28(sp)
   24af8:	dd800617 	ldw	r22,24(sp)
   24afc:	dd400517 	ldw	r21,20(sp)
   24b00:	dd000417 	ldw	r20,16(sp)
   24b04:	dcc00317 	ldw	r19,12(sp)
   24b08:	dc800217 	ldw	r18,8(sp)
   24b0c:	dc400117 	ldw	r17,4(sp)
   24b10:	dc000017 	ldw	r16,0(sp)
   24b14:	dec00904 	addi	sp,sp,36
   24b18:	f800283a 	ret

00024b1c <__fp_lock>:
   24b1c:	0005883a 	mov	r2,zero
   24b20:	f800283a 	ret

00024b24 <__sfmoreglue>:
   24b24:	defffc04 	addi	sp,sp,-16
   24b28:	dc800215 	stw	r18,8(sp)
   24b2c:	2825883a 	mov	r18,r5
   24b30:	dc000015 	stw	r16,0(sp)
   24b34:	01401a04 	movi	r5,104
   24b38:	2021883a 	mov	r16,r4
   24b3c:	913fffc4 	addi	r4,r18,-1
   24b40:	dfc00315 	stw	ra,12(sp)
   24b44:	dc400115 	stw	r17,4(sp)
   24b48:	0020ca80 	call	20ca8 <__mulsi3>
   24b4c:	8009883a 	mov	r4,r16
   24b50:	11401d04 	addi	r5,r2,116
   24b54:	1023883a 	mov	r17,r2
   24b58:	00230780 	call	23078 <_malloc_r>
   24b5c:	1021883a 	mov	r16,r2
   24b60:	10000726 	beq	r2,zero,24b80 <__sfmoreglue+0x5c>
   24b64:	11000304 	addi	r4,r2,12
   24b68:	10000015 	stw	zero,0(r2)
   24b6c:	14800115 	stw	r18,4(r2)
   24b70:	11000215 	stw	r4,8(r2)
   24b74:	89801a04 	addi	r6,r17,104
   24b78:	000b883a 	mov	r5,zero
   24b7c:	00254940 	call	25494 <memset>
   24b80:	8005883a 	mov	r2,r16
   24b84:	dfc00317 	ldw	ra,12(sp)
   24b88:	dc800217 	ldw	r18,8(sp)
   24b8c:	dc400117 	ldw	r17,4(sp)
   24b90:	dc000017 	ldw	r16,0(sp)
   24b94:	dec00404 	addi	sp,sp,16
   24b98:	f800283a 	ret

00024b9c <__sfp>:
   24b9c:	defffb04 	addi	sp,sp,-20
   24ba0:	dc000015 	stw	r16,0(sp)
   24ba4:	040000b4 	movhi	r16,2
   24ba8:	841ee804 	addi	r16,r16,31648
   24bac:	dcc00315 	stw	r19,12(sp)
   24bb0:	2027883a 	mov	r19,r4
   24bb4:	81000017 	ldw	r4,0(r16)
   24bb8:	dfc00415 	stw	ra,16(sp)
   24bbc:	dc800215 	stw	r18,8(sp)
   24bc0:	20800e17 	ldw	r2,56(r4)
   24bc4:	dc400115 	stw	r17,4(sp)
   24bc8:	1000021e 	bne	r2,zero,24bd4 <__sfp+0x38>
   24bcc:	00249800 	call	24980 <__sinit.part.1>
   24bd0:	81000017 	ldw	r4,0(r16)
   24bd4:	2480b804 	addi	r18,r4,736
   24bd8:	047fffc4 	movi	r17,-1
   24bdc:	91000117 	ldw	r4,4(r18)
   24be0:	94000217 	ldw	r16,8(r18)
   24be4:	213fffc4 	addi	r4,r4,-1
   24be8:	20000a16 	blt	r4,zero,24c14 <__sfp+0x78>
   24bec:	8080030f 	ldh	r2,12(r16)
   24bf0:	10000c26 	beq	r2,zero,24c24 <__sfp+0x88>
   24bf4:	80c01d04 	addi	r3,r16,116
   24bf8:	00000206 	br	24c04 <__sfp+0x68>
   24bfc:	18bfe60f 	ldh	r2,-104(r3)
   24c00:	10000826 	beq	r2,zero,24c24 <__sfp+0x88>
   24c04:	213fffc4 	addi	r4,r4,-1
   24c08:	1c3ffd04 	addi	r16,r3,-12
   24c0c:	18c01a04 	addi	r3,r3,104
   24c10:	247ffa1e 	bne	r4,r17,24bfc <__alt_data_end+0xfffebbfc>
   24c14:	90800017 	ldw	r2,0(r18)
   24c18:	10001d26 	beq	r2,zero,24c90 <__sfp+0xf4>
   24c1c:	1025883a 	mov	r18,r2
   24c20:	003fee06 	br	24bdc <__alt_data_end+0xfffebbdc>
   24c24:	00bfffc4 	movi	r2,-1
   24c28:	8080038d 	sth	r2,14(r16)
   24c2c:	00800044 	movi	r2,1
   24c30:	8080030d 	sth	r2,12(r16)
   24c34:	80001915 	stw	zero,100(r16)
   24c38:	80000015 	stw	zero,0(r16)
   24c3c:	80000215 	stw	zero,8(r16)
   24c40:	80000115 	stw	zero,4(r16)
   24c44:	80000415 	stw	zero,16(r16)
   24c48:	80000515 	stw	zero,20(r16)
   24c4c:	80000615 	stw	zero,24(r16)
   24c50:	01800204 	movi	r6,8
   24c54:	000b883a 	mov	r5,zero
   24c58:	81001704 	addi	r4,r16,92
   24c5c:	00254940 	call	25494 <memset>
   24c60:	8005883a 	mov	r2,r16
   24c64:	80000c15 	stw	zero,48(r16)
   24c68:	80000d15 	stw	zero,52(r16)
   24c6c:	80001115 	stw	zero,68(r16)
   24c70:	80001215 	stw	zero,72(r16)
   24c74:	dfc00417 	ldw	ra,16(sp)
   24c78:	dcc00317 	ldw	r19,12(sp)
   24c7c:	dc800217 	ldw	r18,8(sp)
   24c80:	dc400117 	ldw	r17,4(sp)
   24c84:	dc000017 	ldw	r16,0(sp)
   24c88:	dec00504 	addi	sp,sp,20
   24c8c:	f800283a 	ret
   24c90:	01400104 	movi	r5,4
   24c94:	9809883a 	mov	r4,r19
   24c98:	0024b240 	call	24b24 <__sfmoreglue>
   24c9c:	90800015 	stw	r2,0(r18)
   24ca0:	103fde1e 	bne	r2,zero,24c1c <__alt_data_end+0xfffebc1c>
   24ca4:	00800304 	movi	r2,12
   24ca8:	98800015 	stw	r2,0(r19)
   24cac:	0005883a 	mov	r2,zero
   24cb0:	003ff006 	br	24c74 <__alt_data_end+0xfffebc74>

00024cb4 <_cleanup>:
   24cb4:	008000b4 	movhi	r2,2
   24cb8:	109ee804 	addi	r2,r2,31648
   24cbc:	11000017 	ldw	r4,0(r2)
   24cc0:	014000b4 	movhi	r5,2
   24cc4:	2955eb04 	addi	r5,r5,22444
   24cc8:	00252141 	jmpi	25214 <_fwalk_reent>

00024ccc <__sinit>:
   24ccc:	20800e17 	ldw	r2,56(r4)
   24cd0:	10000126 	beq	r2,zero,24cd8 <__sinit+0xc>
   24cd4:	f800283a 	ret
   24cd8:	00249801 	jmpi	24980 <__sinit.part.1>

00024cdc <__sfp_lock_acquire>:
   24cdc:	f800283a 	ret

00024ce0 <__sfp_lock_release>:
   24ce0:	f800283a 	ret

00024ce4 <__sinit_lock_acquire>:
   24ce4:	f800283a 	ret

00024ce8 <__sinit_lock_release>:
   24ce8:	f800283a 	ret

00024cec <__fp_lock_all>:
   24cec:	008000b4 	movhi	r2,2
   24cf0:	109ee904 	addi	r2,r2,31652
   24cf4:	11000017 	ldw	r4,0(r2)
   24cf8:	014000b4 	movhi	r5,2
   24cfc:	2952c704 	addi	r5,r5,19228
   24d00:	00251501 	jmpi	25150 <_fwalk>

00024d04 <__fp_unlock_all>:
   24d04:	008000b4 	movhi	r2,2
   24d08:	109ee904 	addi	r2,r2,31652
   24d0c:	11000017 	ldw	r4,0(r2)
   24d10:	014000b4 	movhi	r5,2
   24d14:	29525b04 	addi	r5,r5,18796
   24d18:	00251501 	jmpi	25150 <_fwalk>

00024d1c <_malloc_trim_r>:
   24d1c:	defffb04 	addi	sp,sp,-20
   24d20:	dcc00315 	stw	r19,12(sp)
   24d24:	04c000b4 	movhi	r19,2
   24d28:	dc800215 	stw	r18,8(sp)
   24d2c:	dc400115 	stw	r17,4(sp)
   24d30:	dc000015 	stw	r16,0(sp)
   24d34:	dfc00415 	stw	ra,16(sp)
   24d38:	2821883a 	mov	r16,r5
   24d3c:	9cdddc04 	addi	r19,r19,30576
   24d40:	2025883a 	mov	r18,r4
   24d44:	0025d480 	call	25d48 <__malloc_lock>
   24d48:	98800217 	ldw	r2,8(r19)
   24d4c:	14400117 	ldw	r17,4(r2)
   24d50:	00bfff04 	movi	r2,-4
   24d54:	88a2703a 	and	r17,r17,r2
   24d58:	8c21c83a 	sub	r16,r17,r16
   24d5c:	8403fbc4 	addi	r16,r16,4079
   24d60:	8020d33a 	srli	r16,r16,12
   24d64:	0083ffc4 	movi	r2,4095
   24d68:	843fffc4 	addi	r16,r16,-1
   24d6c:	8020933a 	slli	r16,r16,12
   24d70:	1400060e 	bge	r2,r16,24d8c <_malloc_trim_r+0x70>
   24d74:	000b883a 	mov	r5,zero
   24d78:	9009883a 	mov	r4,r18
   24d7c:	00241ec0 	call	241ec <_sbrk_r>
   24d80:	98c00217 	ldw	r3,8(r19)
   24d84:	1c47883a 	add	r3,r3,r17
   24d88:	10c00a26 	beq	r2,r3,24db4 <_malloc_trim_r+0x98>
   24d8c:	9009883a 	mov	r4,r18
   24d90:	0025d6c0 	call	25d6c <__malloc_unlock>
   24d94:	0005883a 	mov	r2,zero
   24d98:	dfc00417 	ldw	ra,16(sp)
   24d9c:	dcc00317 	ldw	r19,12(sp)
   24da0:	dc800217 	ldw	r18,8(sp)
   24da4:	dc400117 	ldw	r17,4(sp)
   24da8:	dc000017 	ldw	r16,0(sp)
   24dac:	dec00504 	addi	sp,sp,20
   24db0:	f800283a 	ret
   24db4:	040bc83a 	sub	r5,zero,r16
   24db8:	9009883a 	mov	r4,r18
   24dbc:	00241ec0 	call	241ec <_sbrk_r>
   24dc0:	00ffffc4 	movi	r3,-1
   24dc4:	10c00d26 	beq	r2,r3,24dfc <_malloc_trim_r+0xe0>
   24dc8:	00c000f4 	movhi	r3,3
   24dcc:	18e59404 	addi	r3,r3,-27056
   24dd0:	18800017 	ldw	r2,0(r3)
   24dd4:	99000217 	ldw	r4,8(r19)
   24dd8:	8c23c83a 	sub	r17,r17,r16
   24ddc:	8c400054 	ori	r17,r17,1
   24de0:	1421c83a 	sub	r16,r2,r16
   24de4:	24400115 	stw	r17,4(r4)
   24de8:	9009883a 	mov	r4,r18
   24dec:	1c000015 	stw	r16,0(r3)
   24df0:	0025d6c0 	call	25d6c <__malloc_unlock>
   24df4:	00800044 	movi	r2,1
   24df8:	003fe706 	br	24d98 <__alt_data_end+0xfffebd98>
   24dfc:	000b883a 	mov	r5,zero
   24e00:	9009883a 	mov	r4,r18
   24e04:	00241ec0 	call	241ec <_sbrk_r>
   24e08:	99000217 	ldw	r4,8(r19)
   24e0c:	014003c4 	movi	r5,15
   24e10:	1107c83a 	sub	r3,r2,r4
   24e14:	28ffdd0e 	bge	r5,r3,24d8c <__alt_data_end+0xfffebd8c>
   24e18:	014000b4 	movhi	r5,2
   24e1c:	295eea04 	addi	r5,r5,31656
   24e20:	29400017 	ldw	r5,0(r5)
   24e24:	18c00054 	ori	r3,r3,1
   24e28:	20c00115 	stw	r3,4(r4)
   24e2c:	00c000f4 	movhi	r3,3
   24e30:	1145c83a 	sub	r2,r2,r5
   24e34:	18e59404 	addi	r3,r3,-27056
   24e38:	18800015 	stw	r2,0(r3)
   24e3c:	003fd306 	br	24d8c <__alt_data_end+0xfffebd8c>

00024e40 <_free_r>:
   24e40:	28004126 	beq	r5,zero,24f48 <_free_r+0x108>
   24e44:	defffd04 	addi	sp,sp,-12
   24e48:	dc400115 	stw	r17,4(sp)
   24e4c:	dc000015 	stw	r16,0(sp)
   24e50:	2023883a 	mov	r17,r4
   24e54:	2821883a 	mov	r16,r5
   24e58:	dfc00215 	stw	ra,8(sp)
   24e5c:	0025d480 	call	25d48 <__malloc_lock>
   24e60:	81ffff17 	ldw	r7,-4(r16)
   24e64:	00bfff84 	movi	r2,-2
   24e68:	010000b4 	movhi	r4,2
   24e6c:	81bffe04 	addi	r6,r16,-8
   24e70:	3884703a 	and	r2,r7,r2
   24e74:	211ddc04 	addi	r4,r4,30576
   24e78:	308b883a 	add	r5,r6,r2
   24e7c:	2a400117 	ldw	r9,4(r5)
   24e80:	22000217 	ldw	r8,8(r4)
   24e84:	00ffff04 	movi	r3,-4
   24e88:	48c6703a 	and	r3,r9,r3
   24e8c:	2a005726 	beq	r5,r8,24fec <_free_r+0x1ac>
   24e90:	28c00115 	stw	r3,4(r5)
   24e94:	39c0004c 	andi	r7,r7,1
   24e98:	3800091e 	bne	r7,zero,24ec0 <_free_r+0x80>
   24e9c:	823ffe17 	ldw	r8,-8(r16)
   24ea0:	22400204 	addi	r9,r4,8
   24ea4:	320dc83a 	sub	r6,r6,r8
   24ea8:	31c00217 	ldw	r7,8(r6)
   24eac:	1205883a 	add	r2,r2,r8
   24eb0:	3a406526 	beq	r7,r9,25048 <_free_r+0x208>
   24eb4:	32000317 	ldw	r8,12(r6)
   24eb8:	3a000315 	stw	r8,12(r7)
   24ebc:	41c00215 	stw	r7,8(r8)
   24ec0:	28cf883a 	add	r7,r5,r3
   24ec4:	39c00117 	ldw	r7,4(r7)
   24ec8:	39c0004c 	andi	r7,r7,1
   24ecc:	38003a26 	beq	r7,zero,24fb8 <_free_r+0x178>
   24ed0:	10c00054 	ori	r3,r2,1
   24ed4:	30c00115 	stw	r3,4(r6)
   24ed8:	3087883a 	add	r3,r6,r2
   24edc:	18800015 	stw	r2,0(r3)
   24ee0:	00c07fc4 	movi	r3,511
   24ee4:	18801936 	bltu	r3,r2,24f4c <_free_r+0x10c>
   24ee8:	1004d0fa 	srli	r2,r2,3
   24eec:	01c00044 	movi	r7,1
   24ef0:	21400117 	ldw	r5,4(r4)
   24ef4:	10c00044 	addi	r3,r2,1
   24ef8:	18c7883a 	add	r3,r3,r3
   24efc:	1005d0ba 	srai	r2,r2,2
   24f00:	18c7883a 	add	r3,r3,r3
   24f04:	18c7883a 	add	r3,r3,r3
   24f08:	1907883a 	add	r3,r3,r4
   24f0c:	3884983a 	sll	r2,r7,r2
   24f10:	19c00017 	ldw	r7,0(r3)
   24f14:	1a3ffe04 	addi	r8,r3,-8
   24f18:	1144b03a 	or	r2,r2,r5
   24f1c:	32000315 	stw	r8,12(r6)
   24f20:	31c00215 	stw	r7,8(r6)
   24f24:	20800115 	stw	r2,4(r4)
   24f28:	19800015 	stw	r6,0(r3)
   24f2c:	39800315 	stw	r6,12(r7)
   24f30:	8809883a 	mov	r4,r17
   24f34:	dfc00217 	ldw	ra,8(sp)
   24f38:	dc400117 	ldw	r17,4(sp)
   24f3c:	dc000017 	ldw	r16,0(sp)
   24f40:	dec00304 	addi	sp,sp,12
   24f44:	0025d6c1 	jmpi	25d6c <__malloc_unlock>
   24f48:	f800283a 	ret
   24f4c:	100ad27a 	srli	r5,r2,9
   24f50:	00c00104 	movi	r3,4
   24f54:	19404a36 	bltu	r3,r5,25080 <_free_r+0x240>
   24f58:	100ad1ba 	srli	r5,r2,6
   24f5c:	28c00e44 	addi	r3,r5,57
   24f60:	18c7883a 	add	r3,r3,r3
   24f64:	29400e04 	addi	r5,r5,56
   24f68:	18c7883a 	add	r3,r3,r3
   24f6c:	18c7883a 	add	r3,r3,r3
   24f70:	1909883a 	add	r4,r3,r4
   24f74:	20c00017 	ldw	r3,0(r4)
   24f78:	01c000b4 	movhi	r7,2
   24f7c:	213ffe04 	addi	r4,r4,-8
   24f80:	39dddc04 	addi	r7,r7,30576
   24f84:	20c04426 	beq	r4,r3,25098 <_free_r+0x258>
   24f88:	01ffff04 	movi	r7,-4
   24f8c:	19400117 	ldw	r5,4(r3)
   24f90:	29ca703a 	and	r5,r5,r7
   24f94:	1140022e 	bgeu	r2,r5,24fa0 <_free_r+0x160>
   24f98:	18c00217 	ldw	r3,8(r3)
   24f9c:	20fffb1e 	bne	r4,r3,24f8c <__alt_data_end+0xfffebf8c>
   24fa0:	19000317 	ldw	r4,12(r3)
   24fa4:	31000315 	stw	r4,12(r6)
   24fa8:	30c00215 	stw	r3,8(r6)
   24fac:	21800215 	stw	r6,8(r4)
   24fb0:	19800315 	stw	r6,12(r3)
   24fb4:	003fde06 	br	24f30 <__alt_data_end+0xfffebf30>
   24fb8:	29c00217 	ldw	r7,8(r5)
   24fbc:	10c5883a 	add	r2,r2,r3
   24fc0:	00c000b4 	movhi	r3,2
   24fc4:	18ddde04 	addi	r3,r3,30584
   24fc8:	38c03b26 	beq	r7,r3,250b8 <_free_r+0x278>
   24fcc:	2a000317 	ldw	r8,12(r5)
   24fd0:	11400054 	ori	r5,r2,1
   24fd4:	3087883a 	add	r3,r6,r2
   24fd8:	3a000315 	stw	r8,12(r7)
   24fdc:	41c00215 	stw	r7,8(r8)
   24fe0:	31400115 	stw	r5,4(r6)
   24fe4:	18800015 	stw	r2,0(r3)
   24fe8:	003fbd06 	br	24ee0 <__alt_data_end+0xfffebee0>
   24fec:	39c0004c 	andi	r7,r7,1
   24ff0:	10c5883a 	add	r2,r2,r3
   24ff4:	3800071e 	bne	r7,zero,25014 <_free_r+0x1d4>
   24ff8:	81fffe17 	ldw	r7,-8(r16)
   24ffc:	31cdc83a 	sub	r6,r6,r7
   25000:	30c00317 	ldw	r3,12(r6)
   25004:	31400217 	ldw	r5,8(r6)
   25008:	11c5883a 	add	r2,r2,r7
   2500c:	28c00315 	stw	r3,12(r5)
   25010:	19400215 	stw	r5,8(r3)
   25014:	10c00054 	ori	r3,r2,1
   25018:	30c00115 	stw	r3,4(r6)
   2501c:	00c000b4 	movhi	r3,2
   25020:	18deeb04 	addi	r3,r3,31660
   25024:	18c00017 	ldw	r3,0(r3)
   25028:	21800215 	stw	r6,8(r4)
   2502c:	10ffc036 	bltu	r2,r3,24f30 <__alt_data_end+0xfffebf30>
   25030:	008000f4 	movhi	r2,3
   25034:	10a59304 	addi	r2,r2,-27060
   25038:	11400017 	ldw	r5,0(r2)
   2503c:	8809883a 	mov	r4,r17
   25040:	0024d1c0 	call	24d1c <_malloc_trim_r>
   25044:	003fba06 	br	24f30 <__alt_data_end+0xfffebf30>
   25048:	28c9883a 	add	r4,r5,r3
   2504c:	21000117 	ldw	r4,4(r4)
   25050:	2100004c 	andi	r4,r4,1
   25054:	2000391e 	bne	r4,zero,2513c <_free_r+0x2fc>
   25058:	29c00217 	ldw	r7,8(r5)
   2505c:	29000317 	ldw	r4,12(r5)
   25060:	1885883a 	add	r2,r3,r2
   25064:	10c00054 	ori	r3,r2,1
   25068:	39000315 	stw	r4,12(r7)
   2506c:	21c00215 	stw	r7,8(r4)
   25070:	30c00115 	stw	r3,4(r6)
   25074:	308d883a 	add	r6,r6,r2
   25078:	30800015 	stw	r2,0(r6)
   2507c:	003fac06 	br	24f30 <__alt_data_end+0xfffebf30>
   25080:	00c00504 	movi	r3,20
   25084:	19401536 	bltu	r3,r5,250dc <_free_r+0x29c>
   25088:	28c01704 	addi	r3,r5,92
   2508c:	18c7883a 	add	r3,r3,r3
   25090:	294016c4 	addi	r5,r5,91
   25094:	003fb406 	br	24f68 <__alt_data_end+0xfffebf68>
   25098:	280bd0ba 	srai	r5,r5,2
   2509c:	00c00044 	movi	r3,1
   250a0:	38800117 	ldw	r2,4(r7)
   250a4:	194a983a 	sll	r5,r3,r5
   250a8:	2007883a 	mov	r3,r4
   250ac:	2884b03a 	or	r2,r5,r2
   250b0:	38800115 	stw	r2,4(r7)
   250b4:	003fbb06 	br	24fa4 <__alt_data_end+0xfffebfa4>
   250b8:	21800515 	stw	r6,20(r4)
   250bc:	21800415 	stw	r6,16(r4)
   250c0:	10c00054 	ori	r3,r2,1
   250c4:	31c00315 	stw	r7,12(r6)
   250c8:	31c00215 	stw	r7,8(r6)
   250cc:	30c00115 	stw	r3,4(r6)
   250d0:	308d883a 	add	r6,r6,r2
   250d4:	30800015 	stw	r2,0(r6)
   250d8:	003f9506 	br	24f30 <__alt_data_end+0xfffebf30>
   250dc:	00c01504 	movi	r3,84
   250e0:	19400536 	bltu	r3,r5,250f8 <_free_r+0x2b8>
   250e4:	100ad33a 	srli	r5,r2,12
   250e8:	28c01bc4 	addi	r3,r5,111
   250ec:	18c7883a 	add	r3,r3,r3
   250f0:	29401b84 	addi	r5,r5,110
   250f4:	003f9c06 	br	24f68 <__alt_data_end+0xfffebf68>
   250f8:	00c05504 	movi	r3,340
   250fc:	19400536 	bltu	r3,r5,25114 <_free_r+0x2d4>
   25100:	100ad3fa 	srli	r5,r2,15
   25104:	28c01e04 	addi	r3,r5,120
   25108:	18c7883a 	add	r3,r3,r3
   2510c:	29401dc4 	addi	r5,r5,119
   25110:	003f9506 	br	24f68 <__alt_data_end+0xfffebf68>
   25114:	00c15504 	movi	r3,1364
   25118:	19400536 	bltu	r3,r5,25130 <_free_r+0x2f0>
   2511c:	100ad4ba 	srli	r5,r2,18
   25120:	28c01f44 	addi	r3,r5,125
   25124:	18c7883a 	add	r3,r3,r3
   25128:	29401f04 	addi	r5,r5,124
   2512c:	003f8e06 	br	24f68 <__alt_data_end+0xfffebf68>
   25130:	00c03f84 	movi	r3,254
   25134:	01401f84 	movi	r5,126
   25138:	003f8b06 	br	24f68 <__alt_data_end+0xfffebf68>
   2513c:	10c00054 	ori	r3,r2,1
   25140:	30c00115 	stw	r3,4(r6)
   25144:	308d883a 	add	r6,r6,r2
   25148:	30800015 	stw	r2,0(r6)
   2514c:	003f7806 	br	24f30 <__alt_data_end+0xfffebf30>

00025150 <_fwalk>:
   25150:	defff704 	addi	sp,sp,-36
   25154:	dd000415 	stw	r20,16(sp)
   25158:	dfc00815 	stw	ra,32(sp)
   2515c:	ddc00715 	stw	r23,28(sp)
   25160:	dd800615 	stw	r22,24(sp)
   25164:	dd400515 	stw	r21,20(sp)
   25168:	dcc00315 	stw	r19,12(sp)
   2516c:	dc800215 	stw	r18,8(sp)
   25170:	dc400115 	stw	r17,4(sp)
   25174:	dc000015 	stw	r16,0(sp)
   25178:	2500b804 	addi	r20,r4,736
   2517c:	a0002326 	beq	r20,zero,2520c <_fwalk+0xbc>
   25180:	282b883a 	mov	r21,r5
   25184:	002f883a 	mov	r23,zero
   25188:	05800044 	movi	r22,1
   2518c:	04ffffc4 	movi	r19,-1
   25190:	a4400117 	ldw	r17,4(r20)
   25194:	a4800217 	ldw	r18,8(r20)
   25198:	8c7fffc4 	addi	r17,r17,-1
   2519c:	88000d16 	blt	r17,zero,251d4 <_fwalk+0x84>
   251a0:	94000304 	addi	r16,r18,12
   251a4:	94800384 	addi	r18,r18,14
   251a8:	8080000b 	ldhu	r2,0(r16)
   251ac:	8c7fffc4 	addi	r17,r17,-1
   251b0:	813ffd04 	addi	r4,r16,-12
   251b4:	b080042e 	bgeu	r22,r2,251c8 <_fwalk+0x78>
   251b8:	9080000f 	ldh	r2,0(r18)
   251bc:	14c00226 	beq	r2,r19,251c8 <_fwalk+0x78>
   251c0:	a83ee83a 	callr	r21
   251c4:	b8aeb03a 	or	r23,r23,r2
   251c8:	84001a04 	addi	r16,r16,104
   251cc:	94801a04 	addi	r18,r18,104
   251d0:	8cfff51e 	bne	r17,r19,251a8 <__alt_data_end+0xfffec1a8>
   251d4:	a5000017 	ldw	r20,0(r20)
   251d8:	a03fed1e 	bne	r20,zero,25190 <__alt_data_end+0xfffec190>
   251dc:	b805883a 	mov	r2,r23
   251e0:	dfc00817 	ldw	ra,32(sp)
   251e4:	ddc00717 	ldw	r23,28(sp)
   251e8:	dd800617 	ldw	r22,24(sp)
   251ec:	dd400517 	ldw	r21,20(sp)
   251f0:	dd000417 	ldw	r20,16(sp)
   251f4:	dcc00317 	ldw	r19,12(sp)
   251f8:	dc800217 	ldw	r18,8(sp)
   251fc:	dc400117 	ldw	r17,4(sp)
   25200:	dc000017 	ldw	r16,0(sp)
   25204:	dec00904 	addi	sp,sp,36
   25208:	f800283a 	ret
   2520c:	002f883a 	mov	r23,zero
   25210:	003ff206 	br	251dc <__alt_data_end+0xfffec1dc>

00025214 <_fwalk_reent>:
   25214:	defff704 	addi	sp,sp,-36
   25218:	dd000415 	stw	r20,16(sp)
   2521c:	dfc00815 	stw	ra,32(sp)
   25220:	ddc00715 	stw	r23,28(sp)
   25224:	dd800615 	stw	r22,24(sp)
   25228:	dd400515 	stw	r21,20(sp)
   2522c:	dcc00315 	stw	r19,12(sp)
   25230:	dc800215 	stw	r18,8(sp)
   25234:	dc400115 	stw	r17,4(sp)
   25238:	dc000015 	stw	r16,0(sp)
   2523c:	2500b804 	addi	r20,r4,736
   25240:	a0002326 	beq	r20,zero,252d0 <_fwalk_reent+0xbc>
   25244:	282b883a 	mov	r21,r5
   25248:	2027883a 	mov	r19,r4
   2524c:	002f883a 	mov	r23,zero
   25250:	05800044 	movi	r22,1
   25254:	04bfffc4 	movi	r18,-1
   25258:	a4400117 	ldw	r17,4(r20)
   2525c:	a4000217 	ldw	r16,8(r20)
   25260:	8c7fffc4 	addi	r17,r17,-1
   25264:	88000c16 	blt	r17,zero,25298 <_fwalk_reent+0x84>
   25268:	84000304 	addi	r16,r16,12
   2526c:	8080000b 	ldhu	r2,0(r16)
   25270:	8c7fffc4 	addi	r17,r17,-1
   25274:	817ffd04 	addi	r5,r16,-12
   25278:	b080052e 	bgeu	r22,r2,25290 <_fwalk_reent+0x7c>
   2527c:	8080008f 	ldh	r2,2(r16)
   25280:	9809883a 	mov	r4,r19
   25284:	14800226 	beq	r2,r18,25290 <_fwalk_reent+0x7c>
   25288:	a83ee83a 	callr	r21
   2528c:	b8aeb03a 	or	r23,r23,r2
   25290:	84001a04 	addi	r16,r16,104
   25294:	8cbff51e 	bne	r17,r18,2526c <__alt_data_end+0xfffec26c>
   25298:	a5000017 	ldw	r20,0(r20)
   2529c:	a03fee1e 	bne	r20,zero,25258 <__alt_data_end+0xfffec258>
   252a0:	b805883a 	mov	r2,r23
   252a4:	dfc00817 	ldw	ra,32(sp)
   252a8:	ddc00717 	ldw	r23,28(sp)
   252ac:	dd800617 	ldw	r22,24(sp)
   252b0:	dd400517 	ldw	r21,20(sp)
   252b4:	dd000417 	ldw	r20,16(sp)
   252b8:	dcc00317 	ldw	r19,12(sp)
   252bc:	dc800217 	ldw	r18,8(sp)
   252c0:	dc400117 	ldw	r17,4(sp)
   252c4:	dc000017 	ldw	r16,0(sp)
   252c8:	dec00904 	addi	sp,sp,36
   252cc:	f800283a 	ret
   252d0:	002f883a 	mov	r23,zero
   252d4:	003ff206 	br	252a0 <__alt_data_end+0xfffec2a0>

000252d8 <__smakebuf_r>:
   252d8:	2880030b 	ldhu	r2,12(r5)
   252dc:	10c0008c 	andi	r3,r2,2
   252e0:	1800411e 	bne	r3,zero,253e8 <__smakebuf_r+0x110>
   252e4:	deffec04 	addi	sp,sp,-80
   252e8:	dc000f15 	stw	r16,60(sp)
   252ec:	2821883a 	mov	r16,r5
   252f0:	2940038f 	ldh	r5,14(r5)
   252f4:	dc401015 	stw	r17,64(sp)
   252f8:	dfc01315 	stw	ra,76(sp)
   252fc:	dcc01215 	stw	r19,72(sp)
   25300:	dc801115 	stw	r18,68(sp)
   25304:	2023883a 	mov	r17,r4
   25308:	28001c16 	blt	r5,zero,2537c <__smakebuf_r+0xa4>
   2530c:	d80d883a 	mov	r6,sp
   25310:	00258b00 	call	258b0 <_fstat_r>
   25314:	10001816 	blt	r2,zero,25378 <__smakebuf_r+0xa0>
   25318:	d8800117 	ldw	r2,4(sp)
   2531c:	00e00014 	movui	r3,32768
   25320:	10bc000c 	andi	r2,r2,61440
   25324:	14c80020 	cmpeqi	r19,r2,8192
   25328:	10c03726 	beq	r2,r3,25408 <__smakebuf_r+0x130>
   2532c:	80c0030b 	ldhu	r3,12(r16)
   25330:	18c20014 	ori	r3,r3,2048
   25334:	80c0030d 	sth	r3,12(r16)
   25338:	00c80004 	movi	r3,8192
   2533c:	10c0521e 	bne	r2,r3,25488 <__smakebuf_r+0x1b0>
   25340:	8140038f 	ldh	r5,14(r16)
   25344:	8809883a 	mov	r4,r17
   25348:	002590c0 	call	2590c <_isatty_r>
   2534c:	10004c26 	beq	r2,zero,25480 <__smakebuf_r+0x1a8>
   25350:	8080030b 	ldhu	r2,12(r16)
   25354:	80c010c4 	addi	r3,r16,67
   25358:	80c00015 	stw	r3,0(r16)
   2535c:	10800054 	ori	r2,r2,1
   25360:	8080030d 	sth	r2,12(r16)
   25364:	00800044 	movi	r2,1
   25368:	80c00415 	stw	r3,16(r16)
   2536c:	80800515 	stw	r2,20(r16)
   25370:	04810004 	movi	r18,1024
   25374:	00000706 	br	25394 <__smakebuf_r+0xbc>
   25378:	8080030b 	ldhu	r2,12(r16)
   2537c:	10c0200c 	andi	r3,r2,128
   25380:	18001f1e 	bne	r3,zero,25400 <__smakebuf_r+0x128>
   25384:	04810004 	movi	r18,1024
   25388:	10820014 	ori	r2,r2,2048
   2538c:	8080030d 	sth	r2,12(r16)
   25390:	0027883a 	mov	r19,zero
   25394:	900b883a 	mov	r5,r18
   25398:	8809883a 	mov	r4,r17
   2539c:	00230780 	call	23078 <_malloc_r>
   253a0:	10002c26 	beq	r2,zero,25454 <__smakebuf_r+0x17c>
   253a4:	80c0030b 	ldhu	r3,12(r16)
   253a8:	010000b4 	movhi	r4,2
   253ac:	21125d04 	addi	r4,r4,18804
   253b0:	89000f15 	stw	r4,60(r17)
   253b4:	18c02014 	ori	r3,r3,128
   253b8:	80c0030d 	sth	r3,12(r16)
   253bc:	80800015 	stw	r2,0(r16)
   253c0:	80800415 	stw	r2,16(r16)
   253c4:	84800515 	stw	r18,20(r16)
   253c8:	98001a1e 	bne	r19,zero,25434 <__smakebuf_r+0x15c>
   253cc:	dfc01317 	ldw	ra,76(sp)
   253d0:	dcc01217 	ldw	r19,72(sp)
   253d4:	dc801117 	ldw	r18,68(sp)
   253d8:	dc401017 	ldw	r17,64(sp)
   253dc:	dc000f17 	ldw	r16,60(sp)
   253e0:	dec01404 	addi	sp,sp,80
   253e4:	f800283a 	ret
   253e8:	288010c4 	addi	r2,r5,67
   253ec:	28800015 	stw	r2,0(r5)
   253f0:	28800415 	stw	r2,16(r5)
   253f4:	00800044 	movi	r2,1
   253f8:	28800515 	stw	r2,20(r5)
   253fc:	f800283a 	ret
   25400:	04801004 	movi	r18,64
   25404:	003fe006 	br	25388 <__alt_data_end+0xfffec388>
   25408:	81000a17 	ldw	r4,40(r16)
   2540c:	00c000b4 	movhi	r3,2
   25410:	18d5a504 	addi	r3,r3,22164
   25414:	20ffc51e 	bne	r4,r3,2532c <__alt_data_end+0xfffec32c>
   25418:	8080030b 	ldhu	r2,12(r16)
   2541c:	04810004 	movi	r18,1024
   25420:	84801315 	stw	r18,76(r16)
   25424:	1484b03a 	or	r2,r2,r18
   25428:	8080030d 	sth	r2,12(r16)
   2542c:	0027883a 	mov	r19,zero
   25430:	003fd806 	br	25394 <__alt_data_end+0xfffec394>
   25434:	8140038f 	ldh	r5,14(r16)
   25438:	8809883a 	mov	r4,r17
   2543c:	002590c0 	call	2590c <_isatty_r>
   25440:	103fe226 	beq	r2,zero,253cc <__alt_data_end+0xfffec3cc>
   25444:	8080030b 	ldhu	r2,12(r16)
   25448:	10800054 	ori	r2,r2,1
   2544c:	8080030d 	sth	r2,12(r16)
   25450:	003fde06 	br	253cc <__alt_data_end+0xfffec3cc>
   25454:	8080030b 	ldhu	r2,12(r16)
   25458:	10c0800c 	andi	r3,r2,512
   2545c:	183fdb1e 	bne	r3,zero,253cc <__alt_data_end+0xfffec3cc>
   25460:	10800094 	ori	r2,r2,2
   25464:	80c010c4 	addi	r3,r16,67
   25468:	8080030d 	sth	r2,12(r16)
   2546c:	00800044 	movi	r2,1
   25470:	80c00015 	stw	r3,0(r16)
   25474:	80c00415 	stw	r3,16(r16)
   25478:	80800515 	stw	r2,20(r16)
   2547c:	003fd306 	br	253cc <__alt_data_end+0xfffec3cc>
   25480:	04810004 	movi	r18,1024
   25484:	003fc306 	br	25394 <__alt_data_end+0xfffec394>
   25488:	0027883a 	mov	r19,zero
   2548c:	04810004 	movi	r18,1024
   25490:	003fc006 	br	25394 <__alt_data_end+0xfffec394>

00025494 <memset>:
   25494:	20c000cc 	andi	r3,r4,3
   25498:	2005883a 	mov	r2,r4
   2549c:	18004426 	beq	r3,zero,255b0 <memset+0x11c>
   254a0:	31ffffc4 	addi	r7,r6,-1
   254a4:	30004026 	beq	r6,zero,255a8 <memset+0x114>
   254a8:	2813883a 	mov	r9,r5
   254ac:	200d883a 	mov	r6,r4
   254b0:	2007883a 	mov	r3,r4
   254b4:	00000406 	br	254c8 <memset+0x34>
   254b8:	3a3fffc4 	addi	r8,r7,-1
   254bc:	31800044 	addi	r6,r6,1
   254c0:	38003926 	beq	r7,zero,255a8 <memset+0x114>
   254c4:	400f883a 	mov	r7,r8
   254c8:	18c00044 	addi	r3,r3,1
   254cc:	32400005 	stb	r9,0(r6)
   254d0:	1a0000cc 	andi	r8,r3,3
   254d4:	403ff81e 	bne	r8,zero,254b8 <__alt_data_end+0xfffec4b8>
   254d8:	010000c4 	movi	r4,3
   254dc:	21c02d2e 	bgeu	r4,r7,25594 <memset+0x100>
   254e0:	29003fcc 	andi	r4,r5,255
   254e4:	200c923a 	slli	r6,r4,8
   254e8:	3108b03a 	or	r4,r6,r4
   254ec:	200c943a 	slli	r6,r4,16
   254f0:	218cb03a 	or	r6,r4,r6
   254f4:	010003c4 	movi	r4,15
   254f8:	21c0182e 	bgeu	r4,r7,2555c <memset+0xc8>
   254fc:	3b3ffc04 	addi	r12,r7,-16
   25500:	6018d13a 	srli	r12,r12,4
   25504:	1a000104 	addi	r8,r3,4
   25508:	1ac00204 	addi	r11,r3,8
   2550c:	6008913a 	slli	r4,r12,4
   25510:	1a800304 	addi	r10,r3,12
   25514:	1813883a 	mov	r9,r3
   25518:	21000504 	addi	r4,r4,20
   2551c:	1909883a 	add	r4,r3,r4
   25520:	49800015 	stw	r6,0(r9)
   25524:	41800015 	stw	r6,0(r8)
   25528:	59800015 	stw	r6,0(r11)
   2552c:	51800015 	stw	r6,0(r10)
   25530:	42000404 	addi	r8,r8,16
   25534:	4a400404 	addi	r9,r9,16
   25538:	5ac00404 	addi	r11,r11,16
   2553c:	52800404 	addi	r10,r10,16
   25540:	413ff71e 	bne	r8,r4,25520 <__alt_data_end+0xfffec520>
   25544:	63000044 	addi	r12,r12,1
   25548:	6018913a 	slli	r12,r12,4
   2554c:	39c003cc 	andi	r7,r7,15
   25550:	010000c4 	movi	r4,3
   25554:	1b07883a 	add	r3,r3,r12
   25558:	21c00e2e 	bgeu	r4,r7,25594 <memset+0x100>
   2555c:	1813883a 	mov	r9,r3
   25560:	3811883a 	mov	r8,r7
   25564:	010000c4 	movi	r4,3
   25568:	49800015 	stw	r6,0(r9)
   2556c:	423fff04 	addi	r8,r8,-4
   25570:	4a400104 	addi	r9,r9,4
   25574:	223ffc36 	bltu	r4,r8,25568 <__alt_data_end+0xfffec568>
   25578:	393fff04 	addi	r4,r7,-4
   2557c:	2008d0ba 	srli	r4,r4,2
   25580:	39c000cc 	andi	r7,r7,3
   25584:	21000044 	addi	r4,r4,1
   25588:	2109883a 	add	r4,r4,r4
   2558c:	2109883a 	add	r4,r4,r4
   25590:	1907883a 	add	r3,r3,r4
   25594:	38000526 	beq	r7,zero,255ac <memset+0x118>
   25598:	19cf883a 	add	r7,r3,r7
   2559c:	19400005 	stb	r5,0(r3)
   255a0:	18c00044 	addi	r3,r3,1
   255a4:	38fffd1e 	bne	r7,r3,2559c <__alt_data_end+0xfffec59c>
   255a8:	f800283a 	ret
   255ac:	f800283a 	ret
   255b0:	2007883a 	mov	r3,r4
   255b4:	300f883a 	mov	r7,r6
   255b8:	003fc706 	br	254d8 <__alt_data_end+0xfffec4d8>

000255bc <__sread>:
   255bc:	defffe04 	addi	sp,sp,-8
   255c0:	dc000015 	stw	r16,0(sp)
   255c4:	2821883a 	mov	r16,r5
   255c8:	2940038f 	ldh	r5,14(r5)
   255cc:	dfc00115 	stw	ra,4(sp)
   255d0:	00259c00 	call	259c0 <_read_r>
   255d4:	10000716 	blt	r2,zero,255f4 <__sread+0x38>
   255d8:	80c01417 	ldw	r3,80(r16)
   255dc:	1887883a 	add	r3,r3,r2
   255e0:	80c01415 	stw	r3,80(r16)
   255e4:	dfc00117 	ldw	ra,4(sp)
   255e8:	dc000017 	ldw	r16,0(sp)
   255ec:	dec00204 	addi	sp,sp,8
   255f0:	f800283a 	ret
   255f4:	80c0030b 	ldhu	r3,12(r16)
   255f8:	18fbffcc 	andi	r3,r3,61439
   255fc:	80c0030d 	sth	r3,12(r16)
   25600:	dfc00117 	ldw	ra,4(sp)
   25604:	dc000017 	ldw	r16,0(sp)
   25608:	dec00204 	addi	sp,sp,8
   2560c:	f800283a 	ret

00025610 <__seofread>:
   25610:	0005883a 	mov	r2,zero
   25614:	f800283a 	ret

00025618 <__swrite>:
   25618:	2880030b 	ldhu	r2,12(r5)
   2561c:	defffb04 	addi	sp,sp,-20
   25620:	dcc00315 	stw	r19,12(sp)
   25624:	dc800215 	stw	r18,8(sp)
   25628:	dc400115 	stw	r17,4(sp)
   2562c:	dc000015 	stw	r16,0(sp)
   25630:	dfc00415 	stw	ra,16(sp)
   25634:	10c0400c 	andi	r3,r2,256
   25638:	2821883a 	mov	r16,r5
   2563c:	2023883a 	mov	r17,r4
   25640:	3025883a 	mov	r18,r6
   25644:	3827883a 	mov	r19,r7
   25648:	18000526 	beq	r3,zero,25660 <__swrite+0x48>
   2564c:	2940038f 	ldh	r5,14(r5)
   25650:	01c00084 	movi	r7,2
   25654:	000d883a 	mov	r6,zero
   25658:	00259600 	call	25960 <_lseek_r>
   2565c:	8080030b 	ldhu	r2,12(r16)
   25660:	8140038f 	ldh	r5,14(r16)
   25664:	10bbffcc 	andi	r2,r2,61439
   25668:	980f883a 	mov	r7,r19
   2566c:	900d883a 	mov	r6,r18
   25670:	8809883a 	mov	r4,r17
   25674:	8080030d 	sth	r2,12(r16)
   25678:	dfc00417 	ldw	ra,16(sp)
   2567c:	dcc00317 	ldw	r19,12(sp)
   25680:	dc800217 	ldw	r18,8(sp)
   25684:	dc400117 	ldw	r17,4(sp)
   25688:	dc000017 	ldw	r16,0(sp)
   2568c:	dec00504 	addi	sp,sp,20
   25690:	00256f81 	jmpi	256f8 <_write_r>

00025694 <__sseek>:
   25694:	defffe04 	addi	sp,sp,-8
   25698:	dc000015 	stw	r16,0(sp)
   2569c:	2821883a 	mov	r16,r5
   256a0:	2940038f 	ldh	r5,14(r5)
   256a4:	dfc00115 	stw	ra,4(sp)
   256a8:	00259600 	call	25960 <_lseek_r>
   256ac:	00ffffc4 	movi	r3,-1
   256b0:	10c00826 	beq	r2,r3,256d4 <__sseek+0x40>
   256b4:	80c0030b 	ldhu	r3,12(r16)
   256b8:	80801415 	stw	r2,80(r16)
   256bc:	18c40014 	ori	r3,r3,4096
   256c0:	80c0030d 	sth	r3,12(r16)
   256c4:	dfc00117 	ldw	ra,4(sp)
   256c8:	dc000017 	ldw	r16,0(sp)
   256cc:	dec00204 	addi	sp,sp,8
   256d0:	f800283a 	ret
   256d4:	80c0030b 	ldhu	r3,12(r16)
   256d8:	18fbffcc 	andi	r3,r3,61439
   256dc:	80c0030d 	sth	r3,12(r16)
   256e0:	dfc00117 	ldw	ra,4(sp)
   256e4:	dc000017 	ldw	r16,0(sp)
   256e8:	dec00204 	addi	sp,sp,8
   256ec:	f800283a 	ret

000256f0 <__sclose>:
   256f0:	2940038f 	ldh	r5,14(r5)
   256f4:	00257581 	jmpi	25758 <_close_r>

000256f8 <_write_r>:
   256f8:	defffd04 	addi	sp,sp,-12
   256fc:	2805883a 	mov	r2,r5
   25700:	dc000015 	stw	r16,0(sp)
   25704:	040000f4 	movhi	r16,3
   25708:	dc400115 	stw	r17,4(sp)
   2570c:	300b883a 	mov	r5,r6
   25710:	84259004 	addi	r16,r16,-27072
   25714:	2023883a 	mov	r17,r4
   25718:	380d883a 	mov	r6,r7
   2571c:	1009883a 	mov	r4,r2
   25720:	dfc00215 	stw	ra,8(sp)
   25724:	80000015 	stw	zero,0(r16)
   25728:	0025fbc0 	call	25fbc <write>
   2572c:	00ffffc4 	movi	r3,-1
   25730:	10c00526 	beq	r2,r3,25748 <_write_r+0x50>
   25734:	dfc00217 	ldw	ra,8(sp)
   25738:	dc400117 	ldw	r17,4(sp)
   2573c:	dc000017 	ldw	r16,0(sp)
   25740:	dec00304 	addi	sp,sp,12
   25744:	f800283a 	ret
   25748:	80c00017 	ldw	r3,0(r16)
   2574c:	183ff926 	beq	r3,zero,25734 <__alt_data_end+0xfffec734>
   25750:	88c00015 	stw	r3,0(r17)
   25754:	003ff706 	br	25734 <__alt_data_end+0xfffec734>

00025758 <_close_r>:
   25758:	defffd04 	addi	sp,sp,-12
   2575c:	dc000015 	stw	r16,0(sp)
   25760:	040000f4 	movhi	r16,3
   25764:	dc400115 	stw	r17,4(sp)
   25768:	84259004 	addi	r16,r16,-27072
   2576c:	2023883a 	mov	r17,r4
   25770:	2809883a 	mov	r4,r5
   25774:	dfc00215 	stw	ra,8(sp)
   25778:	80000015 	stw	zero,0(r16)
   2577c:	0021ea40 	call	21ea4 <close>
   25780:	00ffffc4 	movi	r3,-1
   25784:	10c00526 	beq	r2,r3,2579c <_close_r+0x44>
   25788:	dfc00217 	ldw	ra,8(sp)
   2578c:	dc400117 	ldw	r17,4(sp)
   25790:	dc000017 	ldw	r16,0(sp)
   25794:	dec00304 	addi	sp,sp,12
   25798:	f800283a 	ret
   2579c:	80c00017 	ldw	r3,0(r16)
   257a0:	183ff926 	beq	r3,zero,25788 <__alt_data_end+0xfffec788>
   257a4:	88c00015 	stw	r3,0(r17)
   257a8:	003ff706 	br	25788 <__alt_data_end+0xfffec788>

000257ac <_fclose_r>:
   257ac:	28003926 	beq	r5,zero,25894 <_fclose_r+0xe8>
   257b0:	defffc04 	addi	sp,sp,-16
   257b4:	dc400115 	stw	r17,4(sp)
   257b8:	dc000015 	stw	r16,0(sp)
   257bc:	dfc00315 	stw	ra,12(sp)
   257c0:	dc800215 	stw	r18,8(sp)
   257c4:	2023883a 	mov	r17,r4
   257c8:	2821883a 	mov	r16,r5
   257cc:	20000226 	beq	r4,zero,257d8 <_fclose_r+0x2c>
   257d0:	20800e17 	ldw	r2,56(r4)
   257d4:	10002726 	beq	r2,zero,25874 <_fclose_r+0xc8>
   257d8:	8080030f 	ldh	r2,12(r16)
   257dc:	1000071e 	bne	r2,zero,257fc <_fclose_r+0x50>
   257e0:	0005883a 	mov	r2,zero
   257e4:	dfc00317 	ldw	ra,12(sp)
   257e8:	dc800217 	ldw	r18,8(sp)
   257ec:	dc400117 	ldw	r17,4(sp)
   257f0:	dc000017 	ldw	r16,0(sp)
   257f4:	dec00404 	addi	sp,sp,16
   257f8:	f800283a 	ret
   257fc:	800b883a 	mov	r5,r16
   25800:	8809883a 	mov	r4,r17
   25804:	00246c40 	call	246c4 <__sflush_r>
   25808:	1025883a 	mov	r18,r2
   2580c:	80800b17 	ldw	r2,44(r16)
   25810:	10000426 	beq	r2,zero,25824 <_fclose_r+0x78>
   25814:	81400717 	ldw	r5,28(r16)
   25818:	8809883a 	mov	r4,r17
   2581c:	103ee83a 	callr	r2
   25820:	10001616 	blt	r2,zero,2587c <_fclose_r+0xd0>
   25824:	8080030b 	ldhu	r2,12(r16)
   25828:	1080200c 	andi	r2,r2,128
   2582c:	1000151e 	bne	r2,zero,25884 <_fclose_r+0xd8>
   25830:	81400c17 	ldw	r5,48(r16)
   25834:	28000526 	beq	r5,zero,2584c <_fclose_r+0xa0>
   25838:	80801004 	addi	r2,r16,64
   2583c:	28800226 	beq	r5,r2,25848 <_fclose_r+0x9c>
   25840:	8809883a 	mov	r4,r17
   25844:	0024e400 	call	24e40 <_free_r>
   25848:	80000c15 	stw	zero,48(r16)
   2584c:	81401117 	ldw	r5,68(r16)
   25850:	28000326 	beq	r5,zero,25860 <_fclose_r+0xb4>
   25854:	8809883a 	mov	r4,r17
   25858:	0024e400 	call	24e40 <_free_r>
   2585c:	80001115 	stw	zero,68(r16)
   25860:	0024cdc0 	call	24cdc <__sfp_lock_acquire>
   25864:	8000030d 	sth	zero,12(r16)
   25868:	0024ce00 	call	24ce0 <__sfp_lock_release>
   2586c:	9005883a 	mov	r2,r18
   25870:	003fdc06 	br	257e4 <__alt_data_end+0xfffec7e4>
   25874:	0024ccc0 	call	24ccc <__sinit>
   25878:	003fd706 	br	257d8 <__alt_data_end+0xfffec7d8>
   2587c:	04bfffc4 	movi	r18,-1
   25880:	003fe806 	br	25824 <__alt_data_end+0xfffec824>
   25884:	81400417 	ldw	r5,16(r16)
   25888:	8809883a 	mov	r4,r17
   2588c:	0024e400 	call	24e40 <_free_r>
   25890:	003fe706 	br	25830 <__alt_data_end+0xfffec830>
   25894:	0005883a 	mov	r2,zero
   25898:	f800283a 	ret

0002589c <fclose>:
   2589c:	008000b4 	movhi	r2,2
   258a0:	109ee904 	addi	r2,r2,31652
   258a4:	200b883a 	mov	r5,r4
   258a8:	11000017 	ldw	r4,0(r2)
   258ac:	00257ac1 	jmpi	257ac <_fclose_r>

000258b0 <_fstat_r>:
   258b0:	defffd04 	addi	sp,sp,-12
   258b4:	2805883a 	mov	r2,r5
   258b8:	dc000015 	stw	r16,0(sp)
   258bc:	040000f4 	movhi	r16,3
   258c0:	dc400115 	stw	r17,4(sp)
   258c4:	84259004 	addi	r16,r16,-27072
   258c8:	2023883a 	mov	r17,r4
   258cc:	300b883a 	mov	r5,r6
   258d0:	1009883a 	mov	r4,r2
   258d4:	dfc00215 	stw	ra,8(sp)
   258d8:	80000015 	stw	zero,0(r16)
   258dc:	0025a900 	call	25a90 <fstat>
   258e0:	00ffffc4 	movi	r3,-1
   258e4:	10c00526 	beq	r2,r3,258fc <_fstat_r+0x4c>
   258e8:	dfc00217 	ldw	ra,8(sp)
   258ec:	dc400117 	ldw	r17,4(sp)
   258f0:	dc000017 	ldw	r16,0(sp)
   258f4:	dec00304 	addi	sp,sp,12
   258f8:	f800283a 	ret
   258fc:	80c00017 	ldw	r3,0(r16)
   25900:	183ff926 	beq	r3,zero,258e8 <__alt_data_end+0xfffec8e8>
   25904:	88c00015 	stw	r3,0(r17)
   25908:	003ff706 	br	258e8 <__alt_data_end+0xfffec8e8>

0002590c <_isatty_r>:
   2590c:	defffd04 	addi	sp,sp,-12
   25910:	dc000015 	stw	r16,0(sp)
   25914:	040000f4 	movhi	r16,3
   25918:	dc400115 	stw	r17,4(sp)
   2591c:	84259004 	addi	r16,r16,-27072
   25920:	2023883a 	mov	r17,r4
   25924:	2809883a 	mov	r4,r5
   25928:	dfc00215 	stw	ra,8(sp)
   2592c:	80000015 	stw	zero,0(r16)
   25930:	0025b840 	call	25b84 <isatty>
   25934:	00ffffc4 	movi	r3,-1
   25938:	10c00526 	beq	r2,r3,25950 <_isatty_r+0x44>
   2593c:	dfc00217 	ldw	ra,8(sp)
   25940:	dc400117 	ldw	r17,4(sp)
   25944:	dc000017 	ldw	r16,0(sp)
   25948:	dec00304 	addi	sp,sp,12
   2594c:	f800283a 	ret
   25950:	80c00017 	ldw	r3,0(r16)
   25954:	183ff926 	beq	r3,zero,2593c <__alt_data_end+0xfffec93c>
   25958:	88c00015 	stw	r3,0(r17)
   2595c:	003ff706 	br	2593c <__alt_data_end+0xfffec93c>

00025960 <_lseek_r>:
   25960:	defffd04 	addi	sp,sp,-12
   25964:	2805883a 	mov	r2,r5
   25968:	dc000015 	stw	r16,0(sp)
   2596c:	040000f4 	movhi	r16,3
   25970:	dc400115 	stw	r17,4(sp)
   25974:	300b883a 	mov	r5,r6
   25978:	84259004 	addi	r16,r16,-27072
   2597c:	2023883a 	mov	r17,r4
   25980:	380d883a 	mov	r6,r7
   25984:	1009883a 	mov	r4,r2
   25988:	dfc00215 	stw	ra,8(sp)
   2598c:	80000015 	stw	zero,0(r16)
   25990:	0025c6c0 	call	25c6c <lseek>
   25994:	00ffffc4 	movi	r3,-1
   25998:	10c00526 	beq	r2,r3,259b0 <_lseek_r+0x50>
   2599c:	dfc00217 	ldw	ra,8(sp)
   259a0:	dc400117 	ldw	r17,4(sp)
   259a4:	dc000017 	ldw	r16,0(sp)
   259a8:	dec00304 	addi	sp,sp,12
   259ac:	f800283a 	ret
   259b0:	80c00017 	ldw	r3,0(r16)
   259b4:	183ff926 	beq	r3,zero,2599c <__alt_data_end+0xfffec99c>
   259b8:	88c00015 	stw	r3,0(r17)
   259bc:	003ff706 	br	2599c <__alt_data_end+0xfffec99c>

000259c0 <_read_r>:
   259c0:	defffd04 	addi	sp,sp,-12
   259c4:	2805883a 	mov	r2,r5
   259c8:	dc000015 	stw	r16,0(sp)
   259cc:	040000f4 	movhi	r16,3
   259d0:	dc400115 	stw	r17,4(sp)
   259d4:	300b883a 	mov	r5,r6
   259d8:	84259004 	addi	r16,r16,-27072
   259dc:	2023883a 	mov	r17,r4
   259e0:	380d883a 	mov	r6,r7
   259e4:	1009883a 	mov	r4,r2
   259e8:	dfc00215 	stw	ra,8(sp)
   259ec:	80000015 	stw	zero,0(r16)
   259f0:	0025dcc0 	call	25dcc <read>
   259f4:	00ffffc4 	movi	r3,-1
   259f8:	10c00526 	beq	r2,r3,25a10 <_read_r+0x50>
   259fc:	dfc00217 	ldw	ra,8(sp)
   25a00:	dc400117 	ldw	r17,4(sp)
   25a04:	dc000017 	ldw	r16,0(sp)
   25a08:	dec00304 	addi	sp,sp,12
   25a0c:	f800283a 	ret
   25a10:	80c00017 	ldw	r3,0(r16)
   25a14:	183ff926 	beq	r3,zero,259fc <__alt_data_end+0xfffec9fc>
   25a18:	88c00015 	stw	r3,0(r17)
   25a1c:	003ff706 	br	259fc <__alt_data_end+0xfffec9fc>

00025a20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25a20:	defffd04 	addi	sp,sp,-12
   25a24:	df000215 	stw	fp,8(sp)
   25a28:	df000204 	addi	fp,sp,8
   25a2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25a30:	0001883a 	nop
   25a34:	e0bfff17 	ldw	r2,-4(fp)
   25a38:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25a3c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25a40:	10000226 	beq	r2,zero,25a4c <_exit+0x2c>
    ALT_SIM_FAIL();
   25a44:	002af070 	cmpltui	zero,zero,43969
   25a48:	00000106 	br	25a50 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25a4c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25a50:	003fff06 	br	25a50 <__alt_data_end+0xfffeca50>

00025a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25a54:	defffe04 	addi	sp,sp,-8
   25a58:	dfc00115 	stw	ra,4(sp)
   25a5c:	df000015 	stw	fp,0(sp)
   25a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25a64:	d0a00717 	ldw	r2,-32740(gp)
   25a68:	10000326 	beq	r2,zero,25a78 <alt_get_errno+0x24>
   25a6c:	d0a00717 	ldw	r2,-32740(gp)
   25a70:	103ee83a 	callr	r2
   25a74:	00000106 	br	25a7c <alt_get_errno+0x28>
   25a78:	d0a6b204 	addi	r2,gp,-25912
}
   25a7c:	e037883a 	mov	sp,fp
   25a80:	dfc00117 	ldw	ra,4(sp)
   25a84:	df000017 	ldw	fp,0(sp)
   25a88:	dec00204 	addi	sp,sp,8
   25a8c:	f800283a 	ret

00025a90 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   25a90:	defffb04 	addi	sp,sp,-20
   25a94:	dfc00415 	stw	ra,16(sp)
   25a98:	df000315 	stw	fp,12(sp)
   25a9c:	df000304 	addi	fp,sp,12
   25aa0:	e13ffe15 	stw	r4,-8(fp)
   25aa4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25aa8:	e0bffe17 	ldw	r2,-8(fp)
   25aac:	10000816 	blt	r2,zero,25ad0 <fstat+0x40>
   25ab0:	01400304 	movi	r5,12
   25ab4:	e13ffe17 	ldw	r4,-8(fp)
   25ab8:	0020ca80 	call	20ca8 <__mulsi3>
   25abc:	1007883a 	mov	r3,r2
   25ac0:	008000b4 	movhi	r2,2
   25ac4:	109c7304 	addi	r2,r2,29132
   25ac8:	1885883a 	add	r2,r3,r2
   25acc:	00000106 	br	25ad4 <fstat+0x44>
   25ad0:	0005883a 	mov	r2,zero
   25ad4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   25ad8:	e0bffd17 	ldw	r2,-12(fp)
   25adc:	10001026 	beq	r2,zero,25b20 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   25ae0:	e0bffd17 	ldw	r2,-12(fp)
   25ae4:	10800017 	ldw	r2,0(r2)
   25ae8:	10800817 	ldw	r2,32(r2)
   25aec:	10000726 	beq	r2,zero,25b0c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   25af0:	e0bffd17 	ldw	r2,-12(fp)
   25af4:	10800017 	ldw	r2,0(r2)
   25af8:	10800817 	ldw	r2,32(r2)
   25afc:	e17fff17 	ldw	r5,-4(fp)
   25b00:	e13ffd17 	ldw	r4,-12(fp)
   25b04:	103ee83a 	callr	r2
   25b08:	00000a06 	br	25b34 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   25b0c:	e0bfff17 	ldw	r2,-4(fp)
   25b10:	00c80004 	movi	r3,8192
   25b14:	10c00115 	stw	r3,4(r2)
      return 0;
   25b18:	0005883a 	mov	r2,zero
   25b1c:	00000506 	br	25b34 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25b20:	0025a540 	call	25a54 <alt_get_errno>
   25b24:	1007883a 	mov	r3,r2
   25b28:	00801444 	movi	r2,81
   25b2c:	18800015 	stw	r2,0(r3)
    return -1;
   25b30:	00bfffc4 	movi	r2,-1
  }
}
   25b34:	e037883a 	mov	sp,fp
   25b38:	dfc00117 	ldw	ra,4(sp)
   25b3c:	df000017 	ldw	fp,0(sp)
   25b40:	dec00204 	addi	sp,sp,8
   25b44:	f800283a 	ret

00025b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25b48:	defffe04 	addi	sp,sp,-8
   25b4c:	dfc00115 	stw	ra,4(sp)
   25b50:	df000015 	stw	fp,0(sp)
   25b54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25b58:	d0a00717 	ldw	r2,-32740(gp)
   25b5c:	10000326 	beq	r2,zero,25b6c <alt_get_errno+0x24>
   25b60:	d0a00717 	ldw	r2,-32740(gp)
   25b64:	103ee83a 	callr	r2
   25b68:	00000106 	br	25b70 <alt_get_errno+0x28>
   25b6c:	d0a6b204 	addi	r2,gp,-25912
}
   25b70:	e037883a 	mov	sp,fp
   25b74:	dfc00117 	ldw	ra,4(sp)
   25b78:	df000017 	ldw	fp,0(sp)
   25b7c:	dec00204 	addi	sp,sp,8
   25b80:	f800283a 	ret

00025b84 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   25b84:	deffed04 	addi	sp,sp,-76
   25b88:	dfc01215 	stw	ra,72(sp)
   25b8c:	df001115 	stw	fp,68(sp)
   25b90:	df001104 	addi	fp,sp,68
   25b94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25b98:	e0bfff17 	ldw	r2,-4(fp)
   25b9c:	10000816 	blt	r2,zero,25bc0 <isatty+0x3c>
   25ba0:	01400304 	movi	r5,12
   25ba4:	e13fff17 	ldw	r4,-4(fp)
   25ba8:	0020ca80 	call	20ca8 <__mulsi3>
   25bac:	1007883a 	mov	r3,r2
   25bb0:	008000b4 	movhi	r2,2
   25bb4:	109c7304 	addi	r2,r2,29132
   25bb8:	1885883a 	add	r2,r3,r2
   25bbc:	00000106 	br	25bc4 <isatty+0x40>
   25bc0:	0005883a 	mov	r2,zero
   25bc4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   25bc8:	e0bfef17 	ldw	r2,-68(fp)
   25bcc:	10000e26 	beq	r2,zero,25c08 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   25bd0:	e0bfef17 	ldw	r2,-68(fp)
   25bd4:	10800017 	ldw	r2,0(r2)
   25bd8:	10800817 	ldw	r2,32(r2)
   25bdc:	1000021e 	bne	r2,zero,25be8 <isatty+0x64>
    {
      return 1;
   25be0:	00800044 	movi	r2,1
   25be4:	00000d06 	br	25c1c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   25be8:	e0bff004 	addi	r2,fp,-64
   25bec:	100b883a 	mov	r5,r2
   25bf0:	e13fff17 	ldw	r4,-4(fp)
   25bf4:	0025a900 	call	25a90 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   25bf8:	e0bff117 	ldw	r2,-60(fp)
   25bfc:	10880020 	cmpeqi	r2,r2,8192
   25c00:	10803fcc 	andi	r2,r2,255
   25c04:	00000506 	br	25c1c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25c08:	0025b480 	call	25b48 <alt_get_errno>
   25c0c:	1007883a 	mov	r3,r2
   25c10:	00801444 	movi	r2,81
   25c14:	18800015 	stw	r2,0(r3)
    return 0;
   25c18:	0005883a 	mov	r2,zero
  }
}
   25c1c:	e037883a 	mov	sp,fp
   25c20:	dfc00117 	ldw	ra,4(sp)
   25c24:	df000017 	ldw	fp,0(sp)
   25c28:	dec00204 	addi	sp,sp,8
   25c2c:	f800283a 	ret

00025c30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25c30:	defffe04 	addi	sp,sp,-8
   25c34:	dfc00115 	stw	ra,4(sp)
   25c38:	df000015 	stw	fp,0(sp)
   25c3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c40:	d0a00717 	ldw	r2,-32740(gp)
   25c44:	10000326 	beq	r2,zero,25c54 <alt_get_errno+0x24>
   25c48:	d0a00717 	ldw	r2,-32740(gp)
   25c4c:	103ee83a 	callr	r2
   25c50:	00000106 	br	25c58 <alt_get_errno+0x28>
   25c54:	d0a6b204 	addi	r2,gp,-25912
}
   25c58:	e037883a 	mov	sp,fp
   25c5c:	dfc00117 	ldw	ra,4(sp)
   25c60:	df000017 	ldw	fp,0(sp)
   25c64:	dec00204 	addi	sp,sp,8
   25c68:	f800283a 	ret

00025c6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   25c6c:	defff904 	addi	sp,sp,-28
   25c70:	dfc00615 	stw	ra,24(sp)
   25c74:	df000515 	stw	fp,20(sp)
   25c78:	df000504 	addi	fp,sp,20
   25c7c:	e13ffd15 	stw	r4,-12(fp)
   25c80:	e17ffe15 	stw	r5,-8(fp)
   25c84:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   25c88:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25c8c:	e0bffd17 	ldw	r2,-12(fp)
   25c90:	10000816 	blt	r2,zero,25cb4 <lseek+0x48>
   25c94:	01400304 	movi	r5,12
   25c98:	e13ffd17 	ldw	r4,-12(fp)
   25c9c:	0020ca80 	call	20ca8 <__mulsi3>
   25ca0:	1007883a 	mov	r3,r2
   25ca4:	008000b4 	movhi	r2,2
   25ca8:	109c7304 	addi	r2,r2,29132
   25cac:	1885883a 	add	r2,r3,r2
   25cb0:	00000106 	br	25cb8 <lseek+0x4c>
   25cb4:	0005883a 	mov	r2,zero
   25cb8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   25cbc:	e0bffc17 	ldw	r2,-16(fp)
   25cc0:	10001026 	beq	r2,zero,25d04 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   25cc4:	e0bffc17 	ldw	r2,-16(fp)
   25cc8:	10800017 	ldw	r2,0(r2)
   25ccc:	10800717 	ldw	r2,28(r2)
   25cd0:	10000926 	beq	r2,zero,25cf8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   25cd4:	e0bffc17 	ldw	r2,-16(fp)
   25cd8:	10800017 	ldw	r2,0(r2)
   25cdc:	10800717 	ldw	r2,28(r2)
   25ce0:	e1bfff17 	ldw	r6,-4(fp)
   25ce4:	e17ffe17 	ldw	r5,-8(fp)
   25ce8:	e13ffc17 	ldw	r4,-16(fp)
   25cec:	103ee83a 	callr	r2
   25cf0:	e0bffb15 	stw	r2,-20(fp)
   25cf4:	00000506 	br	25d0c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   25cf8:	00bfde84 	movi	r2,-134
   25cfc:	e0bffb15 	stw	r2,-20(fp)
   25d00:	00000206 	br	25d0c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   25d04:	00bfebc4 	movi	r2,-81
   25d08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   25d0c:	e0bffb17 	ldw	r2,-20(fp)
   25d10:	1000070e 	bge	r2,zero,25d30 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   25d14:	0025c300 	call	25c30 <alt_get_errno>
   25d18:	1007883a 	mov	r3,r2
   25d1c:	e0bffb17 	ldw	r2,-20(fp)
   25d20:	0085c83a 	sub	r2,zero,r2
   25d24:	18800015 	stw	r2,0(r3)
    rc = -1;
   25d28:	00bfffc4 	movi	r2,-1
   25d2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   25d30:	e0bffb17 	ldw	r2,-20(fp)
}
   25d34:	e037883a 	mov	sp,fp
   25d38:	dfc00117 	ldw	ra,4(sp)
   25d3c:	df000017 	ldw	fp,0(sp)
   25d40:	dec00204 	addi	sp,sp,8
   25d44:	f800283a 	ret

00025d48 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   25d48:	defffe04 	addi	sp,sp,-8
   25d4c:	df000115 	stw	fp,4(sp)
   25d50:	df000104 	addi	fp,sp,4
   25d54:	e13fff15 	stw	r4,-4(fp)
}
   25d58:	0001883a 	nop
   25d5c:	e037883a 	mov	sp,fp
   25d60:	df000017 	ldw	fp,0(sp)
   25d64:	dec00104 	addi	sp,sp,4
   25d68:	f800283a 	ret

00025d6c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   25d6c:	defffe04 	addi	sp,sp,-8
   25d70:	df000115 	stw	fp,4(sp)
   25d74:	df000104 	addi	fp,sp,4
   25d78:	e13fff15 	stw	r4,-4(fp)
}
   25d7c:	0001883a 	nop
   25d80:	e037883a 	mov	sp,fp
   25d84:	df000017 	ldw	fp,0(sp)
   25d88:	dec00104 	addi	sp,sp,4
   25d8c:	f800283a 	ret

00025d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25d90:	defffe04 	addi	sp,sp,-8
   25d94:	dfc00115 	stw	ra,4(sp)
   25d98:	df000015 	stw	fp,0(sp)
   25d9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25da0:	d0a00717 	ldw	r2,-32740(gp)
   25da4:	10000326 	beq	r2,zero,25db4 <alt_get_errno+0x24>
   25da8:	d0a00717 	ldw	r2,-32740(gp)
   25dac:	103ee83a 	callr	r2
   25db0:	00000106 	br	25db8 <alt_get_errno+0x28>
   25db4:	d0a6b204 	addi	r2,gp,-25912
}
   25db8:	e037883a 	mov	sp,fp
   25dbc:	dfc00117 	ldw	ra,4(sp)
   25dc0:	df000017 	ldw	fp,0(sp)
   25dc4:	dec00204 	addi	sp,sp,8
   25dc8:	f800283a 	ret

00025dcc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   25dcc:	defff904 	addi	sp,sp,-28
   25dd0:	dfc00615 	stw	ra,24(sp)
   25dd4:	df000515 	stw	fp,20(sp)
   25dd8:	df000504 	addi	fp,sp,20
   25ddc:	e13ffd15 	stw	r4,-12(fp)
   25de0:	e17ffe15 	stw	r5,-8(fp)
   25de4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25de8:	e0bffd17 	ldw	r2,-12(fp)
   25dec:	10000816 	blt	r2,zero,25e10 <read+0x44>
   25df0:	01400304 	movi	r5,12
   25df4:	e13ffd17 	ldw	r4,-12(fp)
   25df8:	0020ca80 	call	20ca8 <__mulsi3>
   25dfc:	1007883a 	mov	r3,r2
   25e00:	008000b4 	movhi	r2,2
   25e04:	109c7304 	addi	r2,r2,29132
   25e08:	1885883a 	add	r2,r3,r2
   25e0c:	00000106 	br	25e14 <read+0x48>
   25e10:	0005883a 	mov	r2,zero
   25e14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   25e18:	e0bffb17 	ldw	r2,-20(fp)
   25e1c:	10002226 	beq	r2,zero,25ea8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   25e20:	e0bffb17 	ldw	r2,-20(fp)
   25e24:	10800217 	ldw	r2,8(r2)
   25e28:	108000cc 	andi	r2,r2,3
   25e2c:	10800060 	cmpeqi	r2,r2,1
   25e30:	1000181e 	bne	r2,zero,25e94 <read+0xc8>
        (fd->dev->read))
   25e34:	e0bffb17 	ldw	r2,-20(fp)
   25e38:	10800017 	ldw	r2,0(r2)
   25e3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   25e40:	10001426 	beq	r2,zero,25e94 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   25e44:	e0bffb17 	ldw	r2,-20(fp)
   25e48:	10800017 	ldw	r2,0(r2)
   25e4c:	10800517 	ldw	r2,20(r2)
   25e50:	e0ffff17 	ldw	r3,-4(fp)
   25e54:	180d883a 	mov	r6,r3
   25e58:	e17ffe17 	ldw	r5,-8(fp)
   25e5c:	e13ffb17 	ldw	r4,-20(fp)
   25e60:	103ee83a 	callr	r2
   25e64:	e0bffc15 	stw	r2,-16(fp)
   25e68:	e0bffc17 	ldw	r2,-16(fp)
   25e6c:	1000070e 	bge	r2,zero,25e8c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   25e70:	0025d900 	call	25d90 <alt_get_errno>
   25e74:	1007883a 	mov	r3,r2
   25e78:	e0bffc17 	ldw	r2,-16(fp)
   25e7c:	0085c83a 	sub	r2,zero,r2
   25e80:	18800015 	stw	r2,0(r3)
          return -1;
   25e84:	00bfffc4 	movi	r2,-1
   25e88:	00000c06 	br	25ebc <read+0xf0>
        }
        return rval;
   25e8c:	e0bffc17 	ldw	r2,-16(fp)
   25e90:	00000a06 	br	25ebc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   25e94:	0025d900 	call	25d90 <alt_get_errno>
   25e98:	1007883a 	mov	r3,r2
   25e9c:	00800344 	movi	r2,13
   25ea0:	18800015 	stw	r2,0(r3)
   25ea4:	00000406 	br	25eb8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   25ea8:	0025d900 	call	25d90 <alt_get_errno>
   25eac:	1007883a 	mov	r3,r2
   25eb0:	00801444 	movi	r2,81
   25eb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   25eb8:	00bfffc4 	movi	r2,-1
}
   25ebc:	e037883a 	mov	sp,fp
   25ec0:	dfc00117 	ldw	ra,4(sp)
   25ec4:	df000017 	ldw	fp,0(sp)
   25ec8:	dec00204 	addi	sp,sp,8
   25ecc:	f800283a 	ret

00025ed0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   25ed0:	defff904 	addi	sp,sp,-28
   25ed4:	df000615 	stw	fp,24(sp)
   25ed8:	df000604 	addi	fp,sp,24
   25edc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25ee0:	0005303a 	rdctl	r2,status
   25ee4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25ee8:	e0fffe17 	ldw	r3,-8(fp)
   25eec:	00bfff84 	movi	r2,-2
   25ef0:	1884703a 	and	r2,r3,r2
   25ef4:	1001703a 	wrctl	status,r2
  
  return context;
   25ef8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   25efc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   25f00:	d0a00e17 	ldw	r2,-32712(gp)
   25f04:	10c000c4 	addi	r3,r2,3
   25f08:	00bfff04 	movi	r2,-4
   25f0c:	1884703a 	and	r2,r3,r2
   25f10:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   25f14:	d0e00e17 	ldw	r3,-32712(gp)
   25f18:	e0bfff17 	ldw	r2,-4(fp)
   25f1c:	1887883a 	add	r3,r3,r2
   25f20:	00800134 	movhi	r2,4
   25f24:	10a40004 	addi	r2,r2,-28672
   25f28:	10c0062e 	bgeu	r2,r3,25f44 <sbrk+0x74>
   25f2c:	e0bffb17 	ldw	r2,-20(fp)
   25f30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f34:	e0bffa17 	ldw	r2,-24(fp)
   25f38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   25f3c:	00bfffc4 	movi	r2,-1
   25f40:	00000b06 	br	25f70 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   25f44:	d0a00e17 	ldw	r2,-32712(gp)
   25f48:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   25f4c:	d0e00e17 	ldw	r3,-32712(gp)
   25f50:	e0bfff17 	ldw	r2,-4(fp)
   25f54:	1885883a 	add	r2,r3,r2
   25f58:	d0a00e15 	stw	r2,-32712(gp)
   25f5c:	e0bffb17 	ldw	r2,-20(fp)
   25f60:	e0bffc15 	stw	r2,-16(fp)
   25f64:	e0bffc17 	ldw	r2,-16(fp)
   25f68:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   25f6c:	e0bffd17 	ldw	r2,-12(fp)
} 
   25f70:	e037883a 	mov	sp,fp
   25f74:	df000017 	ldw	fp,0(sp)
   25f78:	dec00104 	addi	sp,sp,4
   25f7c:	f800283a 	ret

00025f80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25f80:	defffe04 	addi	sp,sp,-8
   25f84:	dfc00115 	stw	ra,4(sp)
   25f88:	df000015 	stw	fp,0(sp)
   25f8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25f90:	d0a00717 	ldw	r2,-32740(gp)
   25f94:	10000326 	beq	r2,zero,25fa4 <alt_get_errno+0x24>
   25f98:	d0a00717 	ldw	r2,-32740(gp)
   25f9c:	103ee83a 	callr	r2
   25fa0:	00000106 	br	25fa8 <alt_get_errno+0x28>
   25fa4:	d0a6b204 	addi	r2,gp,-25912
}
   25fa8:	e037883a 	mov	sp,fp
   25fac:	dfc00117 	ldw	ra,4(sp)
   25fb0:	df000017 	ldw	fp,0(sp)
   25fb4:	dec00204 	addi	sp,sp,8
   25fb8:	f800283a 	ret

00025fbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   25fbc:	defff904 	addi	sp,sp,-28
   25fc0:	dfc00615 	stw	ra,24(sp)
   25fc4:	df000515 	stw	fp,20(sp)
   25fc8:	df000504 	addi	fp,sp,20
   25fcc:	e13ffd15 	stw	r4,-12(fp)
   25fd0:	e17ffe15 	stw	r5,-8(fp)
   25fd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25fd8:	e0bffd17 	ldw	r2,-12(fp)
   25fdc:	10000816 	blt	r2,zero,26000 <write+0x44>
   25fe0:	01400304 	movi	r5,12
   25fe4:	e13ffd17 	ldw	r4,-12(fp)
   25fe8:	0020ca80 	call	20ca8 <__mulsi3>
   25fec:	1007883a 	mov	r3,r2
   25ff0:	008000b4 	movhi	r2,2
   25ff4:	109c7304 	addi	r2,r2,29132
   25ff8:	1885883a 	add	r2,r3,r2
   25ffc:	00000106 	br	26004 <write+0x48>
   26000:	0005883a 	mov	r2,zero
   26004:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26008:	e0bffb17 	ldw	r2,-20(fp)
   2600c:	10002126 	beq	r2,zero,26094 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   26010:	e0bffb17 	ldw	r2,-20(fp)
   26014:	10800217 	ldw	r2,8(r2)
   26018:	108000cc 	andi	r2,r2,3
   2601c:	10001826 	beq	r2,zero,26080 <write+0xc4>
   26020:	e0bffb17 	ldw	r2,-20(fp)
   26024:	10800017 	ldw	r2,0(r2)
   26028:	10800617 	ldw	r2,24(r2)
   2602c:	10001426 	beq	r2,zero,26080 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   26030:	e0bffb17 	ldw	r2,-20(fp)
   26034:	10800017 	ldw	r2,0(r2)
   26038:	10800617 	ldw	r2,24(r2)
   2603c:	e0ffff17 	ldw	r3,-4(fp)
   26040:	180d883a 	mov	r6,r3
   26044:	e17ffe17 	ldw	r5,-8(fp)
   26048:	e13ffb17 	ldw	r4,-20(fp)
   2604c:	103ee83a 	callr	r2
   26050:	e0bffc15 	stw	r2,-16(fp)
   26054:	e0bffc17 	ldw	r2,-16(fp)
   26058:	1000070e 	bge	r2,zero,26078 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2605c:	0025f800 	call	25f80 <alt_get_errno>
   26060:	1007883a 	mov	r3,r2
   26064:	e0bffc17 	ldw	r2,-16(fp)
   26068:	0085c83a 	sub	r2,zero,r2
   2606c:	18800015 	stw	r2,0(r3)
        return -1;
   26070:	00bfffc4 	movi	r2,-1
   26074:	00000c06 	br	260a8 <write+0xec>
      }
      return rval;
   26078:	e0bffc17 	ldw	r2,-16(fp)
   2607c:	00000a06 	br	260a8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   26080:	0025f800 	call	25f80 <alt_get_errno>
   26084:	1007883a 	mov	r3,r2
   26088:	00800344 	movi	r2,13
   2608c:	18800015 	stw	r2,0(r3)
   26090:	00000406 	br	260a4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   26094:	0025f800 	call	25f80 <alt_get_errno>
   26098:	1007883a 	mov	r3,r2
   2609c:	00801444 	movi	r2,81
   260a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   260a4:	00bfffc4 	movi	r2,-1
}
   260a8:	e037883a 	mov	sp,fp
   260ac:	dfc00117 	ldw	ra,4(sp)
   260b0:	df000017 	ldw	fp,0(sp)
   260b4:	dec00204 	addi	sp,sp,8
   260b8:	f800283a 	ret
