
game-sw.elf:     file format elf32-littlenios2
game-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000060dc memsz 0x000060dc flags r-x
    LOAD off    0x000070fc vaddr 0x000260fc paddr 0x00027b6c align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x000095dc vaddr 0x000295dc paddr 0x000295dc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e60  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000006c  00026090  00026090  00007090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  000260fc  00027b6c  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  000295dc  000295dc  000095dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00029730  00029730  00008b6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008b6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008b90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000170f3  00000000  00000000  000095e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000062ea  00000000  00000000  000206d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006be0  00000000  00000000  000269bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001808  00000000  00000000  0002d5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002945  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ae9  00000000  00000000  000316ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000361d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000361e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00038f4e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00038f51  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00038f54  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00038f55  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00038f56  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00038f5f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00038f68  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00038f71  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  00038f75  2**0
                  CONTENTS, READONLY
 26 .jdi          00004230  00000000  00000000  00038fa1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000560d3  00000000  00000000  0003d1d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00026090 l    d  .rodata	00000000 .rodata
000260fc l    d  .rwdata	00000000 .rwdata
000295dc l    d  .bss	00000000 .bss
00029730 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game-sw_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00020f44 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000210e8 l     F .text	00000034 alt_dev_reg
000260fc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000213d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000215e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021c1c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021e3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00021f70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00021f9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000221f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00022358 l     F .text	0000003c alt_get_errno
00022394 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00027304 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024940 l     F .text	00000008 __fp_unlock
00024954 l     F .text	0000019c __sinit.part.1
00024af0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00025a28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00025b1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00025c04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00025d64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027b68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00025f54 l     F .text	0000003c alt_get_errno
000295ec g     O .bss	00000004 alt_instruction_exception_handler
000258e0 g     F .text	00000054 _isatty_r
00021030 g     F .text	0000007c alt_main
00020790 g     F .text	000000e0 lcdSetAddr
00029630 g     O .bss	00000100 alt_irq
00025934 g     F .text	00000060 _lseek_r
00027b6c g       *ABS*	00000000 __flash_rwdata_start
00029730 g       *ABS*	00000000 __alt_heap_start
0002040c g     F .text	0000003c handleGameTimer
00025668 g     F .text	0000005c __sseek
00024ca0 g     F .text	00000010 __sinit
000202a0 g     F .text	00000060 startTimer
00024af8 g     F .text	00000078 __sfmoreglue
00025d40 g     F .text	00000024 __malloc_unlock
00023b00 g     F .text	0000015c memmove
00024c88 g     F .text	00000018 _cleanup
000210ac g     F .text	0000003c alt_putstr
000204e4 g     F .text	00000028 readSwitch
00022804 g     F .text	00000024 altera_nios2_gen2_irq_init
0002050c g     F .text	00000028 readKey
00020000 g     F .entry	0000000c __reset
00020484 g     F .text	00000060 initTimers
00020020 g       *ABS*	00000000 __flash_exceptions_start
00025884 g     F .text	0000005c _fstat_r
000295f8 g     O .bss	00000004 errno
000255e4 g     F .text	00000008 __seofread
00020534 g     F .text	0000003c setLEDs
000295e4 g     O .bss	00000004 alt_argv
0002fb30 g       *ABS*	00000000 _gp
00027184 g     O .rwdata	00000180 alt_fd_list
00022828 g     F .text	00000090 alt_find_dev
000239b8 g     F .text	00000148 memcpy
00024948 g     F .text	0000000c _cleanup_r
00020870 g     F .text	000000c4 lcdWrite
000222dc g     F .text	0000007c alt_io_redirect
00026090 g       *ABS*	00000000 __DTOR_END__
00020570 g     F .text	00000194 setSevenSeg
0002215c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000217dc g     F .text	0000021c altera_avalon_jtag_uart_read
00020bc0 g     F .text	00000064 .hidden __udivsi3
00025b58 g     F .text	000000ac isatty
00029604 g     O .bss	00000004 __malloc_top_pad
00022b84 g     F .text	000004c8 __sfvwrite_r
000241c0 g     F .text	00000054 _sbrk_r
00025994 g     F .text	00000060 _read_r
00027b48 g     O .rwdata	00000004 alt_max_fd
00025780 g     F .text	000000f0 _fclose_r
00024910 g     F .text	00000030 fflush
00029600 g     O .bss	00000004 __malloc_max_sbrked_mem
0002026c g     F .text	00000034 millisToClock
00025c40 g     F .text	000000dc lseek
00027b58 g     O .rwdata	00000004 _global_impure_ptr
00023c5c g     F .text	00000564 _realloc_r
00020448 g     F .text	0000003c handleLCDTimer
00029730 g       *ABS*	00000000 __bss_end
00020e54 g     F .text	000000f0 alt_iic_isr_register
000226fc g     F .text	00000108 alt_tick
00024cc0 g     F .text	00000018 __fp_lock_all
00020e08 g     F .text	0000004c alt_ic_irq_enabled
00022660 g     F .text	0000009c alt_alarm_stop
000295dc g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002715c g     O .rwdata	00000028 alt_dev_null
00021f50 g     F .text	00000020 alt_dcache_flush_all
00027b6c g       *ABS*	00000000 __ram_rwdata_end
00027b40 g     O .rwdata	00000008 alt_dev_list
00025f90 g     F .text	00000100 write
000260fc g       *ABS*	00000000 __ram_rodata_end
00025a64 g     F .text	000000b8 fstat
00020c24 g     F .text	00000058 .hidden __umodsi3
00029730 g       *ABS*	00000000 end
00021318 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00026090 g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00021c94 g     F .text	0000007c alt_avalon_timer_sc_init
000219f8 g     F .text	00000224 altera_avalon_jtag_uart_write
00024cb0 g     F .text	00000004 __sfp_lock_acquire
00023858 g     F .text	000000e4 memchr
00024e14 g     F .text	00000310 _free_r
00020934 g     F .text	00000114 lcdInit
00024518 g     F .text	00000180 __call_exitprocs
00027b60 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
000295f0 g     O .bss	00000004 _alt_tick_rate
000295f4 g     O .bss	00000004 _alt_nticks
00025da0 g     F .text	00000104 read
00021154 g     F .text	00000060 alt_sys_init
00024400 g     F .text	00000118 __register_exitproc
00027b31 g     O .rwdata	00000001 gameSema
00021684 g     F .text	00000068 altera_avalon_jtag_uart_close
00020c7c g     F .text	00000028 .hidden __mulsi3
000260fc g       *ABS*	00000000 __ram_rwdata_start
00026090 g       *ABS*	00000000 __ram_rodata_start
00029608 g     O .bss	00000028 __malloc_current_mallinfo
000211b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000229c0 g     F .text	000000c4 alt_get_fd
0002572c g     F .text	00000054 _close_r
0002393c g     F .text	0000007c memcmp
00021274 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00029730 g       *ABS*	00000000 __alt_stack_base
000212c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000242ac g     F .text	00000154 __swsetup_r
00024b70 g     F .text	00000118 __sfp
00027728 g     O .rwdata	00000408 __malloc_av_
00024cbc g     F .text	00000004 __sinit_lock_release
00025590 g     F .text	00000054 __sread
000228b8 g     F .text	00000108 alt_find_file
00021fd8 g     F .text	000000a4 alt_dev_llist_insert
00025d1c g     F .text	00000024 __malloc_lock
00025ea4 g     F .text	000000b0 sbrk
000248b4 g     F .text	0000005c _fflush_r
000295dc g       *ABS*	00000000 __bss_start
00025468 g     F .text	00000128 memset
00020a48 g     F .text	00000080 main
000295e8 g     O .bss	00000004 alt_envp
000295fc g     O .bss	00000004 __malloc_max_total_mem
00021214 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000256c4 g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
00025870 g     F .text	00000014 fclose
0002304c g     F .text	0000080c _malloc_r
00027b4c g     O .rwdata	00000004 alt_errno
00025124 g     F .text	000000c4 _fwalk
00020ac8 g     F .text	00000084 .hidden __divsi3
00024cf0 g     F .text	00000124 _malloc_trim_r
00026090 g       *ABS*	00000000 __CTOR_END__
00026090 g       *ABS*	00000000 __flash_rodata_start
00026090 g       *ABS*	00000000 __DTOR_LIST__
00020300 g     F .text	00000060 stopTimer
0002111c g     F .text	00000038 alt_irq_init
000225dc g     F .text	00000084 alt_release_fd
00022a84 g     F .text	00000014 atexit
000256cc g     F .text	00000060 _write_r
00027b5c g     O .rwdata	00000004 _impure_ptr
000295e0 g     O .bss	00000004 alt_argc
00024698 g     F .text	0000021c __sflush_r
000220dc g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024cd8 g     F .text	00000018 __fp_unlock_all
00027b38 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020ca4 g     F .text	00000050 alt_ic_isr_register
00027b6c g       *ABS*	00000000 _edata
00026090 g     O .rodata	00000028 HexArray
00029730 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
000216ec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00022ad0 g     F .text	0000009c _fputs_r
00020d7c g     F .text	0000008c alt_ic_irq_disable
000255ec g     F .text	0000007c __swrite
00027b64 g     O .rwdata	00000004 __malloc_trim_threshold
00022a98 g     F .text	00000038 exit
00020360 g     F .text	000000ac setTimer
000251e8 g     F .text	000000c4 _fwalk_reent
00020b4c g     F .text	00000074 .hidden __modsi3
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024cb4 g     F .text	00000004 __sfp_lock_release
00020704 g     F .text	0000008c lcdClear
00020000 g       *ABS*	00000000 __alt_mem_onchip_ram
000259f4 g     F .text	00000034 _exit
00021d10 g     F .text	0000012c alt_alarm_start
000252ac g     F .text	000001bc __smakebuf_r
00024214 g     F .text	00000098 strlen
00022480 g     F .text	0000015c open
0002213c g     F .text	00000020 alt_icache_flush_all
00022b6c g     F .text	00000018 fputs
00027b34 g     O .rwdata	00000004 alt_priority_mask
00027b30 g     O .rwdata	00000001 lcdSema
00020cf4 g     F .text	00000088 alt_ic_irq_enable
00027b50 g     O .rwdata	00000008 alt_alarm_list
0002207c g     F .text	00000060 _do_ctors
00021e78 g     F .text	000000d8 close
00020fac g     F .text	00000084 alt_load
00024cb8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a58c04 	addi	r2,r2,-27088
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a58c04 	addi	r2,r2,-27088
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe712c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6af17 	ldw	r2,-25924(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6af17 	ldw	r2,-25924(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2023c:	d6becc14 	ori	gp,gp,64304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a57714 	ori	r2,r2,38364

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e5cc14 	ori	r3,r3,38704

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	0020fac0 	call	20fac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00210300 	call	21030 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7268>

0002026c <millisToClock>:
void startTimer(uint8_t timerNum);
void stopTimer(uint8_t timerNum);
void setTimer(uint8_t timerNum, uint32_t microsec);


uint32_t millisToClock(uint32_t microsec){
   2026c:	defffd04 	addi	sp,sp,-12
   20270:	dfc00215 	stw	ra,8(sp)
   20274:	df000115 	stw	fp,4(sp)
   20278:	df000104 	addi	fp,sp,4
   2027c:	e13fff15 	stw	r4,-4(fp)
	return CLOCK_FREQ / 1000000 * microsec;
   20280:	01400c84 	movi	r5,50
   20284:	e13fff17 	ldw	r4,-4(fp)
   20288:	0020c7c0 	call	20c7c <__mulsi3>
}
   2028c:	e037883a 	mov	sp,fp
   20290:	dfc00117 	ldw	ra,4(sp)
   20294:	df000017 	ldw	fp,0(sp)
   20298:	dec00204 	addi	sp,sp,8
   2029c:	f800283a 	ret

000202a0 <startTimer>:

void startTimer(uint8_t timerNum){
   202a0:	defffe04 	addi	sp,sp,-8
   202a4:	df000115 	stw	fp,4(sp)
   202a8:	df000104 	addi	fp,sp,4
   202ac:	2005883a 	mov	r2,r4
   202b0:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   202b4:	e0bfff03 	ldbu	r2,-4(fp)
   202b8:	1000051e 	bne	r2,zero,202d0 <startTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
   202bc:	00c001c4 	movi	r3,7
   202c0:	00800134 	movhi	r2,4
   202c4:	10840104 	addi	r2,r2,4100
   202c8:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
}
   202cc:	00000706 	br	202ec <startTimer+0x4c>
}

void startTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
	else if(timerNum == GAME_TIMER)
   202d0:	e0bfff03 	ldbu	r2,-4(fp)
   202d4:	10800058 	cmpnei	r2,r2,1
   202d8:	1000041e 	bne	r2,zero,202ec <startTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x0007);
   202dc:	00c001c4 	movi	r3,7
   202e0:	00800134 	movhi	r2,4
   202e4:	10840904 	addi	r2,r2,4132
   202e8:	10c00035 	stwio	r3,0(r2)
}
   202ec:	0001883a 	nop
   202f0:	e037883a 	mov	sp,fp
   202f4:	df000017 	ldw	fp,0(sp)
   202f8:	dec00104 	addi	sp,sp,4
   202fc:	f800283a 	ret

00020300 <stopTimer>:

void stopTimer(uint8_t timerNum){
   20300:	defffe04 	addi	sp,sp,-8
   20304:	df000115 	stw	fp,4(sp)
   20308:	df000104 	addi	fp,sp,4
   2030c:	2005883a 	mov	r2,r4
   20310:	e0bfff05 	stb	r2,-4(fp)
	if(timerNum == LCD_TIMER)
   20314:	e0bfff03 	ldbu	r2,-4(fp)
   20318:	1000051e 	bne	r2,zero,20330 <stopTimer+0x30>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
   2031c:	00c002c4 	movi	r3,11
   20320:	00800134 	movhi	r2,4
   20324:	10840104 	addi	r2,r2,4100
   20328:	10c00035 	stwio	r3,0(r2)
	else if(timerNum == GAME_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);

}
   2032c:	00000706 	br	2034c <stopTimer+0x4c>
}

void stopTimer(uint8_t timerNum){
	if(timerNum == LCD_TIMER)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
	else if(timerNum == GAME_TIMER)
   20330:	e0bfff03 	ldbu	r2,-4(fp)
   20334:	10800058 	cmpnei	r2,r2,1
   20338:	1000041e 	bne	r2,zero,2034c <stopTimer+0x4c>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_GAME_BASE, 0x000B);
   2033c:	00c002c4 	movi	r3,11
   20340:	00800134 	movhi	r2,4
   20344:	10840904 	addi	r2,r2,4132
   20348:	10c00035 	stwio	r3,0(r2)

}
   2034c:	0001883a 	nop
   20350:	e037883a 	mov	sp,fp
   20354:	df000017 	ldw	fp,0(sp)
   20358:	dec00104 	addi	sp,sp,4
   2035c:	f800283a 	ret

00020360 <setTimer>:

void setTimer(uint8_t timerNum, uint32_t microsec){
   20360:	defffa04 	addi	sp,sp,-24
   20364:	dfc00515 	stw	ra,20(sp)
   20368:	df000415 	stw	fp,16(sp)
   2036c:	df000404 	addi	fp,sp,16
   20370:	2005883a 	mov	r2,r4
   20374:	e17fff15 	stw	r5,-4(fp)
   20378:	e0bffe05 	stb	r2,-8(fp)
	uint32_t cycles = millisToClock(microsec);
   2037c:	e13fff17 	ldw	r4,-4(fp)
   20380:	002026c0 	call	2026c <millisToClock>
   20384:	e0bffc15 	stw	r2,-16(fp)

	uint16_t lower = (uint16_t)(cycles&0x0000FFFF);
   20388:	e0bffc17 	ldw	r2,-16(fp)
   2038c:	e0bffd0d 	sth	r2,-12(fp)
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);
   20390:	e0bffc17 	ldw	r2,-16(fp)
   20394:	1004d43a 	srli	r2,r2,16
   20398:	e0bffd8d 	sth	r2,-10(fp)

	if(timerNum == LCD_TIMER){
   2039c:	e0bffe03 	ldbu	r2,-8(fp)
   203a0:	1000091e 	bne	r2,zero,203c8 <setTimer+0x68>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
   203a4:	e0fffd0b 	ldhu	r3,-12(fp)
   203a8:	00800134 	movhi	r2,4
   203ac:	10840204 	addi	r2,r2,4104
   203b0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
   203b4:	e0fffd8b 	ldhu	r3,-10(fp)
   203b8:	00800134 	movhi	r2,4
   203bc:	10840304 	addi	r2,r2,4108
   203c0:	10c00035 	stwio	r3,0(r2)
	}else if(timerNum == GAME_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
	}
}
   203c4:	00000b06 	br	203f4 <setTimer+0x94>
	uint16_t upper = (uint16_t)((cycles>>16)&0x0000FFFF);

	if(timerNum == LCD_TIMER){
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, lower);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, upper);
	}else if(timerNum == GAME_TIMER){
   203c8:	e0bffe03 	ldbu	r2,-8(fp)
   203cc:	10800058 	cmpnei	r2,r2,1
   203d0:	1000081e 	bne	r2,zero,203f4 <setTimer+0x94>
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_GAME_BASE, lower);
   203d4:	e0fffd0b 	ldhu	r3,-12(fp)
   203d8:	00800134 	movhi	r2,4
   203dc:	10840a04 	addi	r2,r2,4136
   203e0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_GAME_BASE, upper);
   203e4:	e0fffd8b 	ldhu	r3,-10(fp)
   203e8:	00800134 	movhi	r2,4
   203ec:	10840b04 	addi	r2,r2,4140
   203f0:	10c00035 	stwio	r3,0(r2)
	}
}
   203f4:	0001883a 	nop
   203f8:	e037883a 	mov	sp,fp
   203fc:	dfc00117 	ldw	ra,4(sp)
   20400:	df000017 	ldw	fp,0(sp)
   20404:	dec00204 	addi	sp,sp,8
   20408:	f800283a 	ret

0002040c <handleGameTimer>:
uint8_t lcdSema = 1;
uint8_t gameSema = 1;

//typedef void(*handleGameTimer)(void* isr_context);

void handleGameTimer(void* isr_context){
   2040c:	defffe04 	addi	sp,sp,-8
   20410:	df000115 	stw	fp,4(sp)
   20414:	df000104 	addi	fp,sp,4
   20418:	e13fff15 	stw	r4,-4(fp)
	//alt_putstr("Hello from Timer_Game\n");
	gameSema = 1;
   2041c:	00800044 	movi	r2,1
   20420:	d0a00045 	stb	r2,-32767(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_GAME_BASE, 0);
   20424:	0007883a 	mov	r3,zero
   20428:	00800134 	movhi	r2,4
   2042c:	10840804 	addi	r2,r2,4128
   20430:	10c00035 	stwio	r3,0(r2)
}
   20434:	0001883a 	nop
   20438:	e037883a 	mov	sp,fp
   2043c:	df000017 	ldw	fp,0(sp)
   20440:	dec00104 	addi	sp,sp,4
   20444:	f800283a 	ret

00020448 <handleLCDTimer>:


void handleLCDTimer(void* context){
   20448:	defffe04 	addi	sp,sp,-8
   2044c:	df000115 	stw	fp,4(sp)
   20450:	df000104 	addi	fp,sp,4
   20454:	e13fff15 	stw	r4,-4(fp)
	lcdSema = 1;
   20458:	00800044 	movi	r2,1
   2045c:	d0a00005 	stb	r2,-32768(gp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_LCD_BASE, 0);
   20460:	0007883a 	mov	r3,zero
   20464:	00800134 	movhi	r2,4
   20468:	10840004 	addi	r2,r2,4096
   2046c:	10c00035 	stwio	r3,0(r2)
}
   20470:	0001883a 	nop
   20474:	e037883a 	mov	sp,fp
   20478:	df000017 	ldw	fp,0(sp)
   2047c:	dec00104 	addi	sp,sp,4
   20480:	f800283a 	ret

00020484 <initTimers>:

void initTimers(void){
   20484:	defffd04 	addi	sp,sp,-12
   20488:	dfc00215 	stw	ra,8(sp)
   2048c:	df000115 	stw	fp,4(sp)
   20490:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(TIMER_GAME_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_GAME_IRQ, &handleGameTimer, NULL, NULL);
   20494:	d8000015 	stw	zero,0(sp)
   20498:	000f883a 	mov	r7,zero
   2049c:	018000b4 	movhi	r6,2
   204a0:	31810304 	addi	r6,r6,1036
   204a4:	01400044 	movi	r5,1
   204a8:	0009883a 	mov	r4,zero
   204ac:	0020ca40 	call	20ca4 <alt_ic_isr_register>
	alt_ic_isr_register(TIMER_LCD_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_LCD_IRQ, &handleLCDTimer, NULL, NULL);
   204b0:	d8000015 	stw	zero,0(sp)
   204b4:	000f883a 	mov	r7,zero
   204b8:	018000b4 	movhi	r6,2
   204bc:	31811204 	addi	r6,r6,1096
   204c0:	01400084 	movi	r5,2
   204c4:	0009883a 	mov	r4,zero
   204c8:	0020ca40 	call	20ca4 <alt_ic_isr_register>
}
   204cc:	0001883a 	nop
   204d0:	e037883a 	mov	sp,fp
   204d4:	dfc00117 	ldw	ra,4(sp)
   204d8:	df000017 	ldw	fp,0(sp)
   204dc:	dec00204 	addi	sp,sp,8
   204e0:	f800283a 	ret

000204e4 <readSwitch>:

uint8_t readSwitch(void){
   204e4:	deffff04 	addi	sp,sp,-4
   204e8:	df000015 	stw	fp,0(sp)
   204ec:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   204f0:	00800134 	movhi	r2,4
   204f4:	10842004 	addi	r2,r2,4224
   204f8:	10800037 	ldwio	r2,0(r2)
}
   204fc:	e037883a 	mov	sp,fp
   20500:	df000017 	ldw	fp,0(sp)
   20504:	dec00104 	addi	sp,sp,4
   20508:	f800283a 	ret

0002050c <readKey>:

uint8_t readKey(void){
   2050c:	deffff04 	addi	sp,sp,-4
   20510:	df000015 	stw	fp,0(sp)
   20514:	d839883a 	mov	fp,sp
	return (uint8_t)IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
   20518:	00800134 	movhi	r2,4
   2051c:	10841804 	addi	r2,r2,4192
   20520:	10800037 	ldwio	r2,0(r2)
}
   20524:	e037883a 	mov	sp,fp
   20528:	df000017 	ldw	fp,0(sp)
   2052c:	dec00104 	addi	sp,sp,4
   20530:	f800283a 	ret

00020534 <setLEDs>:

void setLEDs(uint8_t led_pattern){
   20534:	defffe04 	addi	sp,sp,-8
   20538:	df000115 	stw	fp,4(sp)
   2053c:	df000104 	addi	fp,sp,4
   20540:	2005883a 	mov	r2,r4
   20544:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (led_pattern&0x0F));
   20548:	e0bfff03 	ldbu	r2,-4(fp)
   2054c:	10c003cc 	andi	r3,r2,15
   20550:	00800134 	movhi	r2,4
   20554:	10841c04 	addi	r2,r2,4208
   20558:	10c00035 	stwio	r3,0(r2)
}
   2055c:	0001883a 	nop
   20560:	e037883a 	mov	sp,fp
   20564:	df000017 	ldw	fp,0(sp)
   20568:	dec00104 	addi	sp,sp,4
   2056c:	f800283a 	ret

00020570 <setSevenSeg>:

void setSevenSeg(uint32_t num){
   20570:	defff804 	addi	sp,sp,-32
   20574:	dfc00715 	stw	ra,28(sp)
   20578:	df000615 	stw	fp,24(sp)
   2057c:	df000604 	addi	fp,sp,24
   20580:	e13fff15 	stw	r4,-4(fp)
	int ones, tens, hundreds, thousands;

	ones = num % 10;
   20584:	e0bfff17 	ldw	r2,-4(fp)
   20588:	01400284 	movi	r5,10
   2058c:	1009883a 	mov	r4,r2
   20590:	0020c240 	call	20c24 <__umodsi3>
   20594:	e0bffb15 	stw	r2,-20(fp)
	tens = (num/10) % 10;
   20598:	e0bfff17 	ldw	r2,-4(fp)
   2059c:	01400284 	movi	r5,10
   205a0:	1009883a 	mov	r4,r2
   205a4:	0020bc00 	call	20bc0 <__udivsi3>
   205a8:	01400284 	movi	r5,10
   205ac:	1009883a 	mov	r4,r2
   205b0:	0020c240 	call	20c24 <__umodsi3>
   205b4:	e0bffc15 	stw	r2,-16(fp)
	hundreds = (num/100) % 10;
   205b8:	e0bfff17 	ldw	r2,-4(fp)
   205bc:	01401904 	movi	r5,100
   205c0:	1009883a 	mov	r4,r2
   205c4:	0020bc00 	call	20bc0 <__udivsi3>
   205c8:	01400284 	movi	r5,10
   205cc:	1009883a 	mov	r4,r2
   205d0:	0020c240 	call	20c24 <__umodsi3>
   205d4:	e0bffd15 	stw	r2,-12(fp)
	thousands = (num/1000) % 10;
   205d8:	e0bfff17 	ldw	r2,-4(fp)
   205dc:	0140fa04 	movi	r5,1000
   205e0:	1009883a 	mov	r4,r2
   205e4:	0020bc00 	call	20bc0 <__udivsi3>
   205e8:	01400284 	movi	r5,10
   205ec:	1009883a 	mov	r4,r2
   205f0:	0020c240 	call	20c24 <__umodsi3>
   205f4:	e0bffe15 	stw	r2,-8(fp)

	uint32_t hex_data = 0xFFFFFFFF;
   205f8:	00bfffc4 	movi	r2,-1
   205fc:	e0bffa15 	stw	r2,-24(fp)
	if(num > 999)
   20600:	e0bfff17 	ldw	r2,-4(fp)
   20604:	1080fa30 	cmpltui	r2,r2,1000
   20608:	10000a1e 	bne	r2,zero,20634 <setSevenSeg+0xc4>
		hex_data &= HexArray[thousands];
   2060c:	008000b4 	movhi	r2,2
   20610:	10982404 	addi	r2,r2,24720
   20614:	e0fffe17 	ldw	r3,-8(fp)
   20618:	18c7883a 	add	r3,r3,r3
   2061c:	18c7883a 	add	r3,r3,r3
   20620:	10c5883a 	add	r2,r2,r3
   20624:	10800017 	ldw	r2,0(r2)
   20628:	e0fffa17 	ldw	r3,-24(fp)
   2062c:	1884703a 	and	r2,r3,r2
   20630:	e0bffa15 	stw	r2,-24(fp)
	if(num > 99)
   20634:	e0bfff17 	ldw	r2,-4(fp)
   20638:	10801930 	cmpltui	r2,r2,100
   2063c:	10000c1e 	bne	r2,zero,20670 <setSevenSeg+0x100>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[hundreds]);
   20640:	e0bffa17 	ldw	r2,-24(fp)
   20644:	100491fa 	slli	r2,r2,7
   20648:	11001fd4 	ori	r4,r2,127
   2064c:	008000b4 	movhi	r2,2
   20650:	10982404 	addi	r2,r2,24720
   20654:	e0fffd17 	ldw	r3,-12(fp)
   20658:	18c7883a 	add	r3,r3,r3
   2065c:	18c7883a 	add	r3,r3,r3
   20660:	10c5883a 	add	r2,r2,r3
   20664:	10800017 	ldw	r2,0(r2)
   20668:	2084703a 	and	r2,r4,r2
   2066c:	e0bffa15 	stw	r2,-24(fp)
	if(num > 9)
   20670:	e0bfff17 	ldw	r2,-4(fp)
   20674:	108002b0 	cmpltui	r2,r2,10
   20678:	10000c1e 	bne	r2,zero,206ac <setSevenSeg+0x13c>
		hex_data = (((hex_data << 7) | 0x7F) & HexArray[tens]);
   2067c:	e0bffa17 	ldw	r2,-24(fp)
   20680:	100491fa 	slli	r2,r2,7
   20684:	11001fd4 	ori	r4,r2,127
   20688:	008000b4 	movhi	r2,2
   2068c:	10982404 	addi	r2,r2,24720
   20690:	e0fffc17 	ldw	r3,-16(fp)
   20694:	18c7883a 	add	r3,r3,r3
   20698:	18c7883a 	add	r3,r3,r3
   2069c:	10c5883a 	add	r2,r2,r3
   206a0:	10800017 	ldw	r2,0(r2)
   206a4:	2084703a 	and	r2,r4,r2
   206a8:	e0bffa15 	stw	r2,-24(fp)

	hex_data = (((hex_data << 7) | 0x7F) & HexArray[ones]);
   206ac:	e0bffa17 	ldw	r2,-24(fp)
   206b0:	100491fa 	slli	r2,r2,7
   206b4:	11001fd4 	ori	r4,r2,127
   206b8:	008000b4 	movhi	r2,2
   206bc:	10982404 	addi	r2,r2,24720
   206c0:	e0fffb17 	ldw	r3,-20(fp)
   206c4:	18c7883a 	add	r3,r3,r3
   206c8:	18c7883a 	add	r3,r3,r3
   206cc:	10c5883a 	add	r2,r2,r3
   206d0:	10800017 	ldw	r2,0(r2)
   206d4:	2084703a 	and	r2,r4,r2
   206d8:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_BASE, hex_data);
   206dc:	e0fffa17 	ldw	r3,-24(fp)
   206e0:	00800134 	movhi	r2,4
   206e4:	10841404 	addi	r2,r2,4176
   206e8:	10c00035 	stwio	r3,0(r2)
}
   206ec:	0001883a 	nop
   206f0:	e037883a 	mov	sp,fp
   206f4:	dfc00117 	ldw	ra,4(sp)
   206f8:	df000017 	ldw	fp,0(sp)
   206fc:	dec00204 	addi	sp,sp,8
   20700:	f800283a 	ret

00020704 <lcdClear>:

void lcdClear(){
   20704:	defffe04 	addi	sp,sp,-8
   20708:	dfc00115 	stw	ra,4(sp)
   2070c:	df000015 	stw	fp,0(sp)
   20710:	d839883a 	mov	fp,sp
	lcdSema = 0;
   20714:	d0200005 	stb	zero,-32768(gp)

	setTimer(LCD_TIMER, 1520);
   20718:	01417c04 	movi	r5,1520
   2071c:	0009883a 	mov	r4,zero
   20720:	00203600 	call	20360 <setTimer>
	startTimer(LCD_TIMER);
   20724:	0009883a 	mov	r4,zero
   20728:	00202a00 	call	202a0 <startTimer>

	while(lcdSema == 0){};
   2072c:	0001883a 	nop
   20730:	d0a00003 	ldbu	r2,-32768(gp)
   20734:	10803fcc 	andi	r2,r2,255
   20738:	103ffd26 	beq	r2,zero,20730 <__alt_data_end+0xfffe7730>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x801);
   2073c:	00c20044 	movi	r3,2049
   20740:	00800134 	movhi	r2,4
   20744:	10841004 	addi	r2,r2,4160
   20748:	10c00035 	stwio	r3,0(r2)

	lcdSema = 0;
   2074c:	d0200005 	stb	zero,-32768(gp)
	while(lcdSema == 0){};
   20750:	0001883a 	nop
   20754:	d0a00003 	ldbu	r2,-32768(gp)
   20758:	10803fcc 	andi	r2,r2,255
   2075c:	103ffd26 	beq	r2,zero,20754 <__alt_data_end+0xfffe7754>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x001);
   20760:	00c00044 	movi	r3,1
   20764:	00800134 	movhi	r2,4
   20768:	10841004 	addi	r2,r2,4160
   2076c:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   20770:	0009883a 	mov	r4,zero
   20774:	00203000 	call	20300 <stopTimer>
}
   20778:	0001883a 	nop
   2077c:	e037883a 	mov	sp,fp
   20780:	dfc00117 	ldw	ra,4(sp)
   20784:	df000017 	ldw	fp,0(sp)
   20788:	dec00204 	addi	sp,sp,8
   2078c:	f800283a 	ret

00020790 <lcdSetAddr>:

void lcdSetAddr(uint8_t row, uint8_t col){
   20790:	defff704 	addi	sp,sp,-36
   20794:	dfc00815 	stw	ra,32(sp)
   20798:	df000715 	stw	fp,28(sp)
   2079c:	df000704 	addi	fp,sp,28
   207a0:	2007883a 	mov	r3,r4
   207a4:	2805883a 	mov	r2,r5
   207a8:	e0fffe05 	stb	r3,-8(fp)
   207ac:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   207b0:	e03ff90d 	sth	zero,-28(fp)
	lcdData = row * 0x40 + col;
   207b4:	e0bffe03 	ldbu	r2,-8(fp)
   207b8:	100491ba 	slli	r2,r2,6
   207bc:	1007883a 	mov	r3,r2
   207c0:	e0bfff03 	ldbu	r2,-4(fp)
   207c4:	1885883a 	add	r2,r3,r2
   207c8:	e0bff90d 	sth	r2,-28(fp)
	lcdData |= 0x80;
   207cc:	e0bff90b 	ldhu	r2,-28(fp)
   207d0:	10802014 	ori	r2,r2,128
   207d4:	e0bff90d 	sth	r2,-28(fp)
	lcdData |= 0x9 << 8;
   207d8:	e0bff90b 	ldhu	r2,-28(fp)
   207dc:	10824014 	ori	r2,r2,2304
   207e0:	e0bff90d 	sth	r2,-28(fp)
	char cData[16];

	lcdSema = 0;
   207e4:	d0200005 	stb	zero,-32768(gp)

	setTimer(LCD_TIMER, 1000);
   207e8:	0140fa04 	movi	r5,1000
   207ec:	0009883a 	mov	r4,zero
   207f0:	00203600 	call	20360 <setTimer>
	startTimer(LCD_TIMER);
   207f4:	0009883a 	mov	r4,zero
   207f8:	00202a00 	call	202a0 <startTimer>
	//alt_putstr("\n");
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	while(lcdSema == 0){};
   207fc:	0001883a 	nop
   20800:	d0a00003 	ldbu	r2,-32768(gp)
   20804:	10803fcc 	andi	r2,r2,255
   20808:	103ffd26 	beq	r2,zero,20800 <__alt_data_end+0xfffe7800>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   2080c:	e0fff90b 	ldhu	r3,-28(fp)
   20810:	00800134 	movhi	r2,4
   20814:	10841004 	addi	r2,r2,4160
   20818:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   2081c:	e0fff90b 	ldhu	r3,-28(fp)
   20820:	00bdffc4 	movi	r2,-2049
   20824:	1884703a 	and	r2,r3,r2
   20828:	e0bff90d 	sth	r2,-28(fp)
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	lcdSema = 0;
   2082c:	d0200005 	stb	zero,-32768(gp)
	while(lcdSema == 0){};
   20830:	0001883a 	nop
   20834:	d0a00003 	ldbu	r2,-32768(gp)
   20838:	10803fcc 	andi	r2,r2,255
   2083c:	103ffd26 	beq	r2,zero,20834 <__alt_data_end+0xfffe7834>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   20840:	e0fff90b 	ldhu	r3,-28(fp)
   20844:	00800134 	movhi	r2,4
   20848:	10841004 	addi	r2,r2,4160
   2084c:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   20850:	0009883a 	mov	r4,zero
   20854:	00203000 	call	20300 <stopTimer>
}
   20858:	0001883a 	nop
   2085c:	e037883a 	mov	sp,fp
   20860:	dfc00117 	ldw	ra,4(sp)
   20864:	df000017 	ldw	fp,0(sp)
   20868:	dec00204 	addi	sp,sp,8
   2086c:	f800283a 	ret

00020870 <lcdWrite>:

void lcdWrite(uint8_t data){
   20870:	defff804 	addi	sp,sp,-32
   20874:	dfc00715 	stw	ra,28(sp)
   20878:	df000615 	stw	fp,24(sp)
   2087c:	df000604 	addi	fp,sp,24
   20880:	2005883a 	mov	r2,r4
   20884:	e0bfff05 	stb	r2,-4(fp)
	// 1, 0, 1, 1, data
	uint16_t lcdData = 0x0000;
   20888:	e03ffa0d 	sth	zero,-24(fp)
	lcdData |= data;
   2088c:	e0ffff03 	ldbu	r3,-4(fp)
   20890:	e0bffa0b 	ldhu	r2,-24(fp)
   20894:	1884b03a 	or	r2,r3,r2
   20898:	e0bffa0d 	sth	r2,-24(fp)
	lcdData |= 0xB << 8;
   2089c:	e0bffa0b 	ldhu	r2,-24(fp)
   208a0:	1082c014 	ori	r2,r2,2816
   208a4:	e0bffa0d 	sth	r2,-24(fp)
	char cData[16];

	lcdSema = 0;
   208a8:	d0200005 	stb	zero,-32768(gp)

	setTimer(LCD_TIMER, 1000);
   208ac:	0140fa04 	movi	r5,1000
   208b0:	0009883a 	mov	r4,zero
   208b4:	00203600 	call	20360 <setTimer>
	startTimer(LCD_TIMER);
   208b8:	0009883a 	mov	r4,zero
   208bc:	00202a00 	call	202a0 <startTimer>
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	while(lcdSema == 0){};
   208c0:	0001883a 	nop
   208c4:	d0a00003 	ldbu	r2,-32768(gp)
   208c8:	10803fcc 	andi	r2,r2,255
   208cc:	103ffd26 	beq	r2,zero,208c4 <__alt_data_end+0xfffe78c4>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   208d0:	e0fffa0b 	ldhu	r3,-24(fp)
   208d4:	00800134 	movhi	r2,4
   208d8:	10841004 	addi	r2,r2,4160
   208dc:	10c00035 	stwio	r3,0(r2)

	lcdData &= ~0x0800;
   208e0:	e0fffa0b 	ldhu	r3,-24(fp)
   208e4:	00bdffc4 	movi	r2,-2049
   208e8:	1884703a 	and	r2,r3,r2
   208ec:	e0bffa0d 	sth	r2,-24(fp)
	//alt_putstr(itoa(lcdData, cData, 2));
	//alt_putstr("\n");
	lcdSema = 0;
   208f0:	d0200005 	stb	zero,-32768(gp)
	while(lcdSema == 0){};
   208f4:	0001883a 	nop
   208f8:	d0a00003 	ldbu	r2,-32768(gp)
   208fc:	10803fcc 	andi	r2,r2,255
   20900:	103ffd26 	beq	r2,zero,208f8 <__alt_data_end+0xfffe78f8>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, lcdData);
   20904:	e0fffa0b 	ldhu	r3,-24(fp)
   20908:	00800134 	movhi	r2,4
   2090c:	10841004 	addi	r2,r2,4160
   20910:	10c00035 	stwio	r3,0(r2)

	stopTimer(LCD_TIMER);
   20914:	0009883a 	mov	r4,zero
   20918:	00203000 	call	20300 <stopTimer>
}
   2091c:	0001883a 	nop
   20920:	e037883a 	mov	sp,fp
   20924:	dfc00117 	ldw	ra,4(sp)
   20928:	df000017 	ldw	fp,0(sp)
   2092c:	dec00204 	addi	sp,sp,8
   20930:	f800283a 	ret

00020934 <lcdInit>:

// LCD_EN, LCD_RW, LCD_RS, LCD_ON, data
void lcdInit(void){
   20934:	defff604 	addi	sp,sp,-40
   20938:	dfc00915 	stw	ra,36(sp)
   2093c:	df000815 	stw	fp,32(sp)
   20940:	df000804 	addi	fp,sp,32

	#define NUM_LCD_SETUP_COMMANDS 14

	//IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_LCD_BASE, 0xD08F);
	//IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_LCD_BASE, 0x0003);
	setTimer(LCD_TIMER,5000);
   20944:	0144e204 	movi	r5,5000
   20948:	0009883a 	mov	r4,zero
   2094c:	00203600 	call	20360 <setTimer>

	//IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x0007);
	startTimer(LCD_TIMER);
   20950:	0009883a 	mov	r4,zero
   20954:	00202a00 	call	202a0 <startTimer>

	uint16_t commands[NUM_LCD_SETUP_COMMANDS] = {
   20958:	00820e04 	movi	r2,2104
   2095c:	e0bff90d 	sth	r2,-28(fp)
   20960:	00800e04 	movi	r2,56
   20964:	e0bff98d 	sth	r2,-26(fp)
   20968:	00820e04 	movi	r2,2104
   2096c:	e0bffa0d 	sth	r2,-24(fp)
   20970:	00800e04 	movi	r2,56
   20974:	e0bffa8d 	sth	r2,-22(fp)
   20978:	00820e04 	movi	r2,2104
   2097c:	e0bffb0d 	sth	r2,-20(fp)
   20980:	00800e04 	movi	r2,56
   20984:	e0bffb8d 	sth	r2,-18(fp)
   20988:	00820e04 	movi	r2,2104
   2098c:	e0bffc0d 	sth	r2,-16(fp)
   20990:	00800e04 	movi	r2,56
   20994:	e0bffc8d 	sth	r2,-14(fp)
   20998:	00820044 	movi	r2,2049
   2099c:	e0bffd0d 	sth	r2,-12(fp)
   209a0:	00800044 	movi	r2,1
   209a4:	e0bffd8d 	sth	r2,-10(fp)
   209a8:	00820304 	movi	r2,2060
   209ac:	e0bffe0d 	sth	r2,-8(fp)
   209b0:	00800304 	movi	r2,12
   209b4:	e0bffe8d 	sth	r2,-6(fp)
   209b8:	00824184 	movi	r2,2310
   209bc:	e0bfff0d 	sth	r2,-4(fp)
   209c0:	00804184 	movi	r2,262
   209c4:	e0bfff8d 	sth	r2,-2(fp)
		0x000C,// 0,0,0,0,00001100
		0x0906,// 1,0,0,1,00000110
		0x0106// 0,0,0,1,00000110
	};

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   209c8:	e03ff815 	stw	zero,-32(fp)
   209cc:	00001306 	br	20a1c <lcdInit+0xe8>
		while(lcdSema == 0){};
   209d0:	0001883a 	nop
   209d4:	d0a00003 	ldbu	r2,-32768(gp)
   209d8:	10803fcc 	andi	r2,r2,255
   209dc:	103ffd26 	beq	r2,zero,209d4 <__alt_data_end+0xfffe79d4>
		lcdSema = 0;
   209e0:	d0200005 	stb	zero,-32768(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
   209e4:	e0bff817 	ldw	r2,-32(fp)
   209e8:	1085883a 	add	r2,r2,r2
   209ec:	e0fff804 	addi	r3,fp,-32
   209f0:	1885883a 	add	r2,r3,r2
   209f4:	10800104 	addi	r2,r2,4
   209f8:	1080000b 	ldhu	r2,0(r2)
   209fc:	10bfffcc 	andi	r2,r2,65535
   20a00:	10c3ffcc 	andi	r3,r2,4095
   20a04:	00800134 	movhi	r2,4
   20a08:	10841004 	addi	r2,r2,4160
   20a0c:	10c00035 	stwio	r3,0(r2)
		0x000C,// 0,0,0,0,00001100
		0x0906,// 1,0,0,1,00000110
		0x0106// 0,0,0,1,00000110
	};

	for(int i = 0; i < NUM_LCD_SETUP_COMMANDS; i++){
   20a10:	e0bff817 	ldw	r2,-32(fp)
   20a14:	10800044 	addi	r2,r2,1
   20a18:	e0bff815 	stw	r2,-32(fp)
   20a1c:	e0bff817 	ldw	r2,-32(fp)
   20a20:	10800390 	cmplti	r2,r2,14
   20a24:	103fea1e 	bne	r2,zero,209d0 <__alt_data_end+0xfffe79d0>
		IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, (commands[i]&0x0FFF));
	}


	//IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_LCD_BASE, 0x000B);
	stopTimer(LCD_TIMER);
   20a28:	0009883a 	mov	r4,zero
   20a2c:	00203000 	call	20300 <stopTimer>
}
   20a30:	0001883a 	nop
   20a34:	e037883a 	mov	sp,fp
   20a38:	dfc00117 	ldw	ra,4(sp)
   20a3c:	df000017 	ldw	fp,0(sp)
   20a40:	dec00204 	addi	sp,sp,8
   20a44:	f800283a 	ret

00020a48 <main>:

int main(){
   20a48:	defffb04 	addi	sp,sp,-20
   20a4c:	dfc00415 	stw	ra,16(sp)
   20a50:	df000315 	stw	fp,12(sp)
   20a54:	df000304 	addi	fp,sp,12
	uint8_t switch_data;
	char data[8];
	initTimers();
   20a58:	00204840 	call	20484 <initTimers>
	lcdInit();
   20a5c:	00209340 	call	20934 <lcdInit>

	alt_putstr("Ciao from Nios II!\n");
   20a60:	010000b4 	movhi	r4,2
   20a64:	21182e04 	addi	r4,r4,24760
   20a68:	00210ac0 	call	210ac <alt_putstr>

	setTimer(GAME_TIMER, 10000);
   20a6c:	0149c404 	movi	r5,10000
   20a70:	01000044 	movi	r4,1
   20a74:	00203600 	call	20360 <setTimer>
	startTimer(GAME_TIMER);
   20a78:	01000044 	movi	r4,1
   20a7c:	00202a00 	call	202a0 <startTimer>

	while(1) {
		gameSema = 0;
   20a80:	d0200045 	stb	zero,-32767(gp)
		while(gameSema == 0){};
   20a84:	0001883a 	nop
   20a88:	d0a00043 	ldbu	r2,-32767(gp)
   20a8c:	10803fcc 	andi	r2,r2,255
   20a90:	103ffd26 	beq	r2,zero,20a88 <__alt_data_end+0xfffe7a88>
		switch_data = readSwitch();
   20a94:	00204e40 	call	204e4 <readSwitch>
   20a98:	e0bffd05 	stb	r2,-12(fp)

		lcdClear();
   20a9c:	00207040 	call	20704 <lcdClear>
		lcdSetAddr((~switch_data) & 0x01, 1);
   20aa0:	e0bffd03 	ldbu	r2,-12(fp)
   20aa4:	1080004c 	andi	r2,r2,1
   20aa8:	1005003a 	cmpeq	r2,r2,zero
   20aac:	10803fcc 	andi	r2,r2,255
   20ab0:	01400044 	movi	r5,1
   20ab4:	1009883a 	mov	r4,r2
   20ab8:	00207900 	call	20790 <lcdSetAddr>
		//alt_putstr(itoa(switch_data, data, 2));
		//alt_putstr("\n");
		lcdWrite(0xF6);
   20abc:	01003d84 	movi	r4,246
   20ac0:	00208700 	call	20870 <lcdWrite>
	}
   20ac4:	003fee06 	br	20a80 <__alt_data_end+0xfffe7a80>

00020ac8 <__divsi3>:
   20ac8:	20001b16 	blt	r4,zero,20b38 <__divsi3+0x70>
   20acc:	000f883a 	mov	r7,zero
   20ad0:	28001616 	blt	r5,zero,20b2c <__divsi3+0x64>
   20ad4:	200d883a 	mov	r6,r4
   20ad8:	29001a2e 	bgeu	r5,r4,20b44 <__divsi3+0x7c>
   20adc:	00800804 	movi	r2,32
   20ae0:	00c00044 	movi	r3,1
   20ae4:	00000106 	br	20aec <__divsi3+0x24>
   20ae8:	10000d26 	beq	r2,zero,20b20 <__divsi3+0x58>
   20aec:	294b883a 	add	r5,r5,r5
   20af0:	10bfffc4 	addi	r2,r2,-1
   20af4:	18c7883a 	add	r3,r3,r3
   20af8:	293ffb36 	bltu	r5,r4,20ae8 <__alt_data_end+0xfffe7ae8>
   20afc:	0005883a 	mov	r2,zero
   20b00:	18000726 	beq	r3,zero,20b20 <__divsi3+0x58>
   20b04:	0005883a 	mov	r2,zero
   20b08:	31400236 	bltu	r6,r5,20b14 <__divsi3+0x4c>
   20b0c:	314dc83a 	sub	r6,r6,r5
   20b10:	10c4b03a 	or	r2,r2,r3
   20b14:	1806d07a 	srli	r3,r3,1
   20b18:	280ad07a 	srli	r5,r5,1
   20b1c:	183ffa1e 	bne	r3,zero,20b08 <__alt_data_end+0xfffe7b08>
   20b20:	38000126 	beq	r7,zero,20b28 <__divsi3+0x60>
   20b24:	0085c83a 	sub	r2,zero,r2
   20b28:	f800283a 	ret
   20b2c:	014bc83a 	sub	r5,zero,r5
   20b30:	39c0005c 	xori	r7,r7,1
   20b34:	003fe706 	br	20ad4 <__alt_data_end+0xfffe7ad4>
   20b38:	0109c83a 	sub	r4,zero,r4
   20b3c:	01c00044 	movi	r7,1
   20b40:	003fe306 	br	20ad0 <__alt_data_end+0xfffe7ad0>
   20b44:	00c00044 	movi	r3,1
   20b48:	003fee06 	br	20b04 <__alt_data_end+0xfffe7b04>

00020b4c <__modsi3>:
   20b4c:	20001716 	blt	r4,zero,20bac <__modsi3+0x60>
   20b50:	000f883a 	mov	r7,zero
   20b54:	2005883a 	mov	r2,r4
   20b58:	28001216 	blt	r5,zero,20ba4 <__modsi3+0x58>
   20b5c:	2900162e 	bgeu	r5,r4,20bb8 <__modsi3+0x6c>
   20b60:	01800804 	movi	r6,32
   20b64:	00c00044 	movi	r3,1
   20b68:	00000106 	br	20b70 <__modsi3+0x24>
   20b6c:	30000a26 	beq	r6,zero,20b98 <__modsi3+0x4c>
   20b70:	294b883a 	add	r5,r5,r5
   20b74:	31bfffc4 	addi	r6,r6,-1
   20b78:	18c7883a 	add	r3,r3,r3
   20b7c:	293ffb36 	bltu	r5,r4,20b6c <__alt_data_end+0xfffe7b6c>
   20b80:	18000526 	beq	r3,zero,20b98 <__modsi3+0x4c>
   20b84:	1806d07a 	srli	r3,r3,1
   20b88:	11400136 	bltu	r2,r5,20b90 <__modsi3+0x44>
   20b8c:	1145c83a 	sub	r2,r2,r5
   20b90:	280ad07a 	srli	r5,r5,1
   20b94:	183ffb1e 	bne	r3,zero,20b84 <__alt_data_end+0xfffe7b84>
   20b98:	38000126 	beq	r7,zero,20ba0 <__modsi3+0x54>
   20b9c:	0085c83a 	sub	r2,zero,r2
   20ba0:	f800283a 	ret
   20ba4:	014bc83a 	sub	r5,zero,r5
   20ba8:	003fec06 	br	20b5c <__alt_data_end+0xfffe7b5c>
   20bac:	0109c83a 	sub	r4,zero,r4
   20bb0:	01c00044 	movi	r7,1
   20bb4:	003fe706 	br	20b54 <__alt_data_end+0xfffe7b54>
   20bb8:	00c00044 	movi	r3,1
   20bbc:	003ff106 	br	20b84 <__alt_data_end+0xfffe7b84>

00020bc0 <__udivsi3>:
   20bc0:	200d883a 	mov	r6,r4
   20bc4:	2900152e 	bgeu	r5,r4,20c1c <__udivsi3+0x5c>
   20bc8:	28001416 	blt	r5,zero,20c1c <__udivsi3+0x5c>
   20bcc:	00800804 	movi	r2,32
   20bd0:	00c00044 	movi	r3,1
   20bd4:	00000206 	br	20be0 <__udivsi3+0x20>
   20bd8:	10000e26 	beq	r2,zero,20c14 <__udivsi3+0x54>
   20bdc:	28000516 	blt	r5,zero,20bf4 <__udivsi3+0x34>
   20be0:	294b883a 	add	r5,r5,r5
   20be4:	10bfffc4 	addi	r2,r2,-1
   20be8:	18c7883a 	add	r3,r3,r3
   20bec:	293ffa36 	bltu	r5,r4,20bd8 <__alt_data_end+0xfffe7bd8>
   20bf0:	18000826 	beq	r3,zero,20c14 <__udivsi3+0x54>
   20bf4:	0005883a 	mov	r2,zero
   20bf8:	31400236 	bltu	r6,r5,20c04 <__udivsi3+0x44>
   20bfc:	314dc83a 	sub	r6,r6,r5
   20c00:	10c4b03a 	or	r2,r2,r3
   20c04:	1806d07a 	srli	r3,r3,1
   20c08:	280ad07a 	srli	r5,r5,1
   20c0c:	183ffa1e 	bne	r3,zero,20bf8 <__alt_data_end+0xfffe7bf8>
   20c10:	f800283a 	ret
   20c14:	0005883a 	mov	r2,zero
   20c18:	f800283a 	ret
   20c1c:	00c00044 	movi	r3,1
   20c20:	003ff406 	br	20bf4 <__alt_data_end+0xfffe7bf4>

00020c24 <__umodsi3>:
   20c24:	2005883a 	mov	r2,r4
   20c28:	2900122e 	bgeu	r5,r4,20c74 <__umodsi3+0x50>
   20c2c:	28001116 	blt	r5,zero,20c74 <__umodsi3+0x50>
   20c30:	01800804 	movi	r6,32
   20c34:	00c00044 	movi	r3,1
   20c38:	00000206 	br	20c44 <__umodsi3+0x20>
   20c3c:	30000c26 	beq	r6,zero,20c70 <__umodsi3+0x4c>
   20c40:	28000516 	blt	r5,zero,20c58 <__umodsi3+0x34>
   20c44:	294b883a 	add	r5,r5,r5
   20c48:	31bfffc4 	addi	r6,r6,-1
   20c4c:	18c7883a 	add	r3,r3,r3
   20c50:	293ffa36 	bltu	r5,r4,20c3c <__alt_data_end+0xfffe7c3c>
   20c54:	18000626 	beq	r3,zero,20c70 <__umodsi3+0x4c>
   20c58:	1806d07a 	srli	r3,r3,1
   20c5c:	11400136 	bltu	r2,r5,20c64 <__umodsi3+0x40>
   20c60:	1145c83a 	sub	r2,r2,r5
   20c64:	280ad07a 	srli	r5,r5,1
   20c68:	183ffb1e 	bne	r3,zero,20c58 <__alt_data_end+0xfffe7c58>
   20c6c:	f800283a 	ret
   20c70:	f800283a 	ret
   20c74:	00c00044 	movi	r3,1
   20c78:	003ff706 	br	20c58 <__alt_data_end+0xfffe7c58>

00020c7c <__mulsi3>:
   20c7c:	0005883a 	mov	r2,zero
   20c80:	20000726 	beq	r4,zero,20ca0 <__mulsi3+0x24>
   20c84:	20c0004c 	andi	r3,r4,1
   20c88:	2008d07a 	srli	r4,r4,1
   20c8c:	18000126 	beq	r3,zero,20c94 <__mulsi3+0x18>
   20c90:	1145883a 	add	r2,r2,r5
   20c94:	294b883a 	add	r5,r5,r5
   20c98:	203ffa1e 	bne	r4,zero,20c84 <__alt_data_end+0xfffe7c84>
   20c9c:	f800283a 	ret
   20ca0:	f800283a 	ret

00020ca4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20ca4:	defff904 	addi	sp,sp,-28
   20ca8:	dfc00615 	stw	ra,24(sp)
   20cac:	df000515 	stw	fp,20(sp)
   20cb0:	df000504 	addi	fp,sp,20
   20cb4:	e13ffc15 	stw	r4,-16(fp)
   20cb8:	e17ffd15 	stw	r5,-12(fp)
   20cbc:	e1bffe15 	stw	r6,-8(fp)
   20cc0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   20cc4:	e0800217 	ldw	r2,8(fp)
   20cc8:	d8800015 	stw	r2,0(sp)
   20ccc:	e1ffff17 	ldw	r7,-4(fp)
   20cd0:	e1bffe17 	ldw	r6,-8(fp)
   20cd4:	e17ffd17 	ldw	r5,-12(fp)
   20cd8:	e13ffc17 	ldw	r4,-16(fp)
   20cdc:	0020e540 	call	20e54 <alt_iic_isr_register>
}  
   20ce0:	e037883a 	mov	sp,fp
   20ce4:	dfc00117 	ldw	ra,4(sp)
   20ce8:	df000017 	ldw	fp,0(sp)
   20cec:	dec00204 	addi	sp,sp,8
   20cf0:	f800283a 	ret

00020cf4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   20cf4:	defff904 	addi	sp,sp,-28
   20cf8:	df000615 	stw	fp,24(sp)
   20cfc:	df000604 	addi	fp,sp,24
   20d00:	e13ffe15 	stw	r4,-8(fp)
   20d04:	e17fff15 	stw	r5,-4(fp)
   20d08:	e0bfff17 	ldw	r2,-4(fp)
   20d0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d10:	0005303a 	rdctl	r2,status
   20d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d18:	e0fffb17 	ldw	r3,-20(fp)
   20d1c:	00bfff84 	movi	r2,-2
   20d20:	1884703a 	and	r2,r3,r2
   20d24:	1001703a 	wrctl	status,r2
  
  return context;
   20d28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20d2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   20d30:	00c00044 	movi	r3,1
   20d34:	e0bffa17 	ldw	r2,-24(fp)
   20d38:	1884983a 	sll	r2,r3,r2
   20d3c:	1007883a 	mov	r3,r2
   20d40:	d0a6ab17 	ldw	r2,-25940(gp)
   20d44:	1884b03a 	or	r2,r3,r2
   20d48:	d0a6ab15 	stw	r2,-25940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20d4c:	d0a6ab17 	ldw	r2,-25940(gp)
   20d50:	100170fa 	wrctl	ienable,r2
   20d54:	e0bffc17 	ldw	r2,-16(fp)
   20d58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20d5c:	e0bffd17 	ldw	r2,-12(fp)
   20d60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20d64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   20d68:	0001883a 	nop
}
   20d6c:	e037883a 	mov	sp,fp
   20d70:	df000017 	ldw	fp,0(sp)
   20d74:	dec00104 	addi	sp,sp,4
   20d78:	f800283a 	ret

00020d7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   20d7c:	defff904 	addi	sp,sp,-28
   20d80:	df000615 	stw	fp,24(sp)
   20d84:	df000604 	addi	fp,sp,24
   20d88:	e13ffe15 	stw	r4,-8(fp)
   20d8c:	e17fff15 	stw	r5,-4(fp)
   20d90:	e0bfff17 	ldw	r2,-4(fp)
   20d94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d98:	0005303a 	rdctl	r2,status
   20d9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20da0:	e0fffb17 	ldw	r3,-20(fp)
   20da4:	00bfff84 	movi	r2,-2
   20da8:	1884703a 	and	r2,r3,r2
   20dac:	1001703a 	wrctl	status,r2
  
  return context;
   20db0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20db4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   20db8:	00c00044 	movi	r3,1
   20dbc:	e0bffa17 	ldw	r2,-24(fp)
   20dc0:	1884983a 	sll	r2,r3,r2
   20dc4:	0084303a 	nor	r2,zero,r2
   20dc8:	1007883a 	mov	r3,r2
   20dcc:	d0a6ab17 	ldw	r2,-25940(gp)
   20dd0:	1884703a 	and	r2,r3,r2
   20dd4:	d0a6ab15 	stw	r2,-25940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20dd8:	d0a6ab17 	ldw	r2,-25940(gp)
   20ddc:	100170fa 	wrctl	ienable,r2
   20de0:	e0bffc17 	ldw	r2,-16(fp)
   20de4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20de8:	e0bffd17 	ldw	r2,-12(fp)
   20dec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20df0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   20df4:	0001883a 	nop
}
   20df8:	e037883a 	mov	sp,fp
   20dfc:	df000017 	ldw	fp,0(sp)
   20e00:	dec00104 	addi	sp,sp,4
   20e04:	f800283a 	ret

00020e08 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   20e08:	defffc04 	addi	sp,sp,-16
   20e0c:	df000315 	stw	fp,12(sp)
   20e10:	df000304 	addi	fp,sp,12
   20e14:	e13ffe15 	stw	r4,-8(fp)
   20e18:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   20e1c:	000530fa 	rdctl	r2,ienable
   20e20:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   20e24:	00c00044 	movi	r3,1
   20e28:	e0bfff17 	ldw	r2,-4(fp)
   20e2c:	1884983a 	sll	r2,r3,r2
   20e30:	1007883a 	mov	r3,r2
   20e34:	e0bffd17 	ldw	r2,-12(fp)
   20e38:	1884703a 	and	r2,r3,r2
   20e3c:	1004c03a 	cmpne	r2,r2,zero
   20e40:	10803fcc 	andi	r2,r2,255
}
   20e44:	e037883a 	mov	sp,fp
   20e48:	df000017 	ldw	fp,0(sp)
   20e4c:	dec00104 	addi	sp,sp,4
   20e50:	f800283a 	ret

00020e54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20e54:	defff504 	addi	sp,sp,-44
   20e58:	dfc00a15 	stw	ra,40(sp)
   20e5c:	df000915 	stw	fp,36(sp)
   20e60:	df000904 	addi	fp,sp,36
   20e64:	e13ffc15 	stw	r4,-16(fp)
   20e68:	e17ffd15 	stw	r5,-12(fp)
   20e6c:	e1bffe15 	stw	r6,-8(fp)
   20e70:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   20e74:	00bffa84 	movi	r2,-22
   20e78:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   20e7c:	e0bffd17 	ldw	r2,-12(fp)
   20e80:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   20e84:	e0bff817 	ldw	r2,-32(fp)
   20e88:	10800808 	cmpgei	r2,r2,32
   20e8c:	1000271e 	bne	r2,zero,20f2c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20e90:	0005303a 	rdctl	r2,status
   20e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20e98:	e0fffb17 	ldw	r3,-20(fp)
   20e9c:	00bfff84 	movi	r2,-2
   20ea0:	1884703a 	and	r2,r3,r2
   20ea4:	1001703a 	wrctl	status,r2
  
  return context;
   20ea8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   20eac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   20eb0:	008000f4 	movhi	r2,3
   20eb4:	10a58c04 	addi	r2,r2,-27088
   20eb8:	e0fff817 	ldw	r3,-32(fp)
   20ebc:	180690fa 	slli	r3,r3,3
   20ec0:	10c5883a 	add	r2,r2,r3
   20ec4:	e0fffe17 	ldw	r3,-8(fp)
   20ec8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   20ecc:	008000f4 	movhi	r2,3
   20ed0:	10a58c04 	addi	r2,r2,-27088
   20ed4:	e0fff817 	ldw	r3,-32(fp)
   20ed8:	180690fa 	slli	r3,r3,3
   20edc:	10c5883a 	add	r2,r2,r3
   20ee0:	10800104 	addi	r2,r2,4
   20ee4:	e0ffff17 	ldw	r3,-4(fp)
   20ee8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   20eec:	e0bffe17 	ldw	r2,-8(fp)
   20ef0:	10000526 	beq	r2,zero,20f08 <alt_iic_isr_register+0xb4>
   20ef4:	e0bff817 	ldw	r2,-32(fp)
   20ef8:	100b883a 	mov	r5,r2
   20efc:	e13ffc17 	ldw	r4,-16(fp)
   20f00:	0020cf40 	call	20cf4 <alt_ic_irq_enable>
   20f04:	00000406 	br	20f18 <alt_iic_isr_register+0xc4>
   20f08:	e0bff817 	ldw	r2,-32(fp)
   20f0c:	100b883a 	mov	r5,r2
   20f10:	e13ffc17 	ldw	r4,-16(fp)
   20f14:	0020d7c0 	call	20d7c <alt_ic_irq_disable>
   20f18:	e0bff715 	stw	r2,-36(fp)
   20f1c:	e0bffa17 	ldw	r2,-24(fp)
   20f20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f24:	e0bff917 	ldw	r2,-28(fp)
   20f28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   20f2c:	e0bff717 	ldw	r2,-36(fp)
}
   20f30:	e037883a 	mov	sp,fp
   20f34:	dfc00117 	ldw	ra,4(sp)
   20f38:	df000017 	ldw	fp,0(sp)
   20f3c:	dec00204 	addi	sp,sp,8
   20f40:	f800283a 	ret

00020f44 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20f44:	defffc04 	addi	sp,sp,-16
   20f48:	df000315 	stw	fp,12(sp)
   20f4c:	df000304 	addi	fp,sp,12
   20f50:	e13ffd15 	stw	r4,-12(fp)
   20f54:	e17ffe15 	stw	r5,-8(fp)
   20f58:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20f5c:	e0fffe17 	ldw	r3,-8(fp)
   20f60:	e0bffd17 	ldw	r2,-12(fp)
   20f64:	18800c26 	beq	r3,r2,20f98 <alt_load_section+0x54>
  {
    while( to != end )
   20f68:	00000806 	br	20f8c <alt_load_section+0x48>
    {
      *to++ = *from++;
   20f6c:	e0bffe17 	ldw	r2,-8(fp)
   20f70:	10c00104 	addi	r3,r2,4
   20f74:	e0fffe15 	stw	r3,-8(fp)
   20f78:	e0fffd17 	ldw	r3,-12(fp)
   20f7c:	19000104 	addi	r4,r3,4
   20f80:	e13ffd15 	stw	r4,-12(fp)
   20f84:	18c00017 	ldw	r3,0(r3)
   20f88:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20f8c:	e0fffe17 	ldw	r3,-8(fp)
   20f90:	e0bfff17 	ldw	r2,-4(fp)
   20f94:	18bff51e 	bne	r3,r2,20f6c <__alt_data_end+0xfffe7f6c>
    {
      *to++ = *from++;
    }
  }
}
   20f98:	0001883a 	nop
   20f9c:	e037883a 	mov	sp,fp
   20fa0:	df000017 	ldw	fp,0(sp)
   20fa4:	dec00104 	addi	sp,sp,4
   20fa8:	f800283a 	ret

00020fac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20fac:	defffe04 	addi	sp,sp,-8
   20fb0:	dfc00115 	stw	ra,4(sp)
   20fb4:	df000015 	stw	fp,0(sp)
   20fb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20fbc:	018000b4 	movhi	r6,2
   20fc0:	319edb04 	addi	r6,r6,31596
   20fc4:	014000b4 	movhi	r5,2
   20fc8:	29583f04 	addi	r5,r5,24828
   20fcc:	010000b4 	movhi	r4,2
   20fd0:	211edb04 	addi	r4,r4,31596
   20fd4:	0020f440 	call	20f44 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20fd8:	018000b4 	movhi	r6,2
   20fdc:	31808c04 	addi	r6,r6,560
   20fe0:	014000b4 	movhi	r5,2
   20fe4:	29400804 	addi	r5,r5,32
   20fe8:	010000b4 	movhi	r4,2
   20fec:	21000804 	addi	r4,r4,32
   20ff0:	0020f440 	call	20f44 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20ff4:	018000b4 	movhi	r6,2
   20ff8:	31983f04 	addi	r6,r6,24828
   20ffc:	014000b4 	movhi	r5,2
   21000:	29582404 	addi	r5,r5,24720
   21004:	010000b4 	movhi	r4,2
   21008:	21182404 	addi	r4,r4,24720
   2100c:	0020f440 	call	20f44 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   21010:	0021f500 	call	21f50 <alt_dcache_flush_all>
  alt_icache_flush_all();
   21014:	002213c0 	call	2213c <alt_icache_flush_all>
}
   21018:	0001883a 	nop
   2101c:	e037883a 	mov	sp,fp
   21020:	dfc00117 	ldw	ra,4(sp)
   21024:	df000017 	ldw	fp,0(sp)
   21028:	dec00204 	addi	sp,sp,8
   2102c:	f800283a 	ret

00021030 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21030:	defffd04 	addi	sp,sp,-12
   21034:	dfc00215 	stw	ra,8(sp)
   21038:	df000115 	stw	fp,4(sp)
   2103c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21040:	0009883a 	mov	r4,zero
   21044:	002111c0 	call	2111c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   21048:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2104c:	00211540 	call	21154 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   21050:	018000b4 	movhi	r6,2
   21054:	31983304 	addi	r6,r6,24780
   21058:	014000b4 	movhi	r5,2
   2105c:	29583304 	addi	r5,r5,24780
   21060:	010000b4 	movhi	r4,2
   21064:	21183304 	addi	r4,r4,24780
   21068:	00222dc0 	call	222dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2106c:	002207c0 	call	2207c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   21070:	010000b4 	movhi	r4,2
   21074:	21083704 	addi	r4,r4,8412
   21078:	0022a840 	call	22a84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2107c:	d0a6ac17 	ldw	r2,-25936(gp)
   21080:	d0e6ad17 	ldw	r3,-25932(gp)
   21084:	d126ae17 	ldw	r4,-25928(gp)
   21088:	200d883a 	mov	r6,r4
   2108c:	180b883a 	mov	r5,r3
   21090:	1009883a 	mov	r4,r2
   21094:	0020a480 	call	20a48 <main>
   21098:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2109c:	01000044 	movi	r4,1
   210a0:	0021e780 	call	21e78 <close>
  exit (result);
   210a4:	e13fff17 	ldw	r4,-4(fp)
   210a8:	0022a980 	call	22a98 <exit>

000210ac <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   210ac:	defffd04 	addi	sp,sp,-12
   210b0:	dfc00215 	stw	ra,8(sp)
   210b4:	df000115 	stw	fp,4(sp)
   210b8:	df000104 	addi	fp,sp,4
   210bc:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   210c0:	d0a00b17 	ldw	r2,-32724(gp)
   210c4:	10800217 	ldw	r2,8(r2)
   210c8:	100b883a 	mov	r5,r2
   210cc:	e13fff17 	ldw	r4,-4(fp)
   210d0:	0022b6c0 	call	22b6c <fputs>
#endif
#endif
}
   210d4:	e037883a 	mov	sp,fp
   210d8:	dfc00117 	ldw	ra,4(sp)
   210dc:	df000017 	ldw	fp,0(sp)
   210e0:	dec00204 	addi	sp,sp,8
   210e4:	f800283a 	ret

000210e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   210e8:	defffd04 	addi	sp,sp,-12
   210ec:	dfc00215 	stw	ra,8(sp)
   210f0:	df000115 	stw	fp,4(sp)
   210f4:	df000104 	addi	fp,sp,4
   210f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   210fc:	d1600404 	addi	r5,gp,-32752
   21100:	e13fff17 	ldw	r4,-4(fp)
   21104:	0021fd80 	call	21fd8 <alt_dev_llist_insert>
}
   21108:	e037883a 	mov	sp,fp
   2110c:	dfc00117 	ldw	ra,4(sp)
   21110:	df000017 	ldw	fp,0(sp)
   21114:	dec00204 	addi	sp,sp,8
   21118:	f800283a 	ret

0002111c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2111c:	defffd04 	addi	sp,sp,-12
   21120:	dfc00215 	stw	ra,8(sp)
   21124:	df000115 	stw	fp,4(sp)
   21128:	df000104 	addi	fp,sp,4
   2112c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   21130:	00228040 	call	22804 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21134:	00800044 	movi	r2,1
   21138:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2113c:	0001883a 	nop
   21140:	e037883a 	mov	sp,fp
   21144:	dfc00117 	ldw	ra,4(sp)
   21148:	df000017 	ldw	fp,0(sp)
   2114c:	dec00204 	addi	sp,sp,8
   21150:	f800283a 	ret

00021154 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21154:	defffe04 	addi	sp,sp,-8
   21158:	dfc00115 	stw	ra,4(sp)
   2115c:	df000015 	stw	fp,0(sp)
   21160:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_GAME, timer_game);
   21164:	01c00284 	movi	r7,10
   21168:	01800044 	movi	r6,1
   2116c:	000b883a 	mov	r5,zero
   21170:	01000134 	movhi	r4,4
   21174:	21040804 	addi	r4,r4,4128
   21178:	0021c940 	call	21c94 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_LCD, timer_lcd);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2117c:	000d883a 	mov	r6,zero
   21180:	000b883a 	mov	r5,zero
   21184:	010000b4 	movhi	r4,2
   21188:	21184904 	addi	r4,r4,24868
   2118c:	00213180 	call	21318 <altera_avalon_jtag_uart_init>
   21190:	010000b4 	movhi	r4,2
   21194:	21183f04 	addi	r4,r4,24828
   21198:	00210e80 	call	210e8 <alt_dev_reg>
}
   2119c:	0001883a 	nop
   211a0:	e037883a 	mov	sp,fp
   211a4:	dfc00117 	ldw	ra,4(sp)
   211a8:	df000017 	ldw	fp,0(sp)
   211ac:	dec00204 	addi	sp,sp,8
   211b0:	f800283a 	ret

000211b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   211b4:	defffa04 	addi	sp,sp,-24
   211b8:	dfc00515 	stw	ra,20(sp)
   211bc:	df000415 	stw	fp,16(sp)
   211c0:	df000404 	addi	fp,sp,16
   211c4:	e13ffd15 	stw	r4,-12(fp)
   211c8:	e17ffe15 	stw	r5,-8(fp)
   211cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   211d0:	e0bffd17 	ldw	r2,-12(fp)
   211d4:	10800017 	ldw	r2,0(r2)
   211d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   211dc:	e0bffc17 	ldw	r2,-16(fp)
   211e0:	10c00a04 	addi	r3,r2,40
   211e4:	e0bffd17 	ldw	r2,-12(fp)
   211e8:	10800217 	ldw	r2,8(r2)
   211ec:	100f883a 	mov	r7,r2
   211f0:	e1bfff17 	ldw	r6,-4(fp)
   211f4:	e17ffe17 	ldw	r5,-8(fp)
   211f8:	1809883a 	mov	r4,r3
   211fc:	00217dc0 	call	217dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21200:	e037883a 	mov	sp,fp
   21204:	dfc00117 	ldw	ra,4(sp)
   21208:	df000017 	ldw	fp,0(sp)
   2120c:	dec00204 	addi	sp,sp,8
   21210:	f800283a 	ret

00021214 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21214:	defffa04 	addi	sp,sp,-24
   21218:	dfc00515 	stw	ra,20(sp)
   2121c:	df000415 	stw	fp,16(sp)
   21220:	df000404 	addi	fp,sp,16
   21224:	e13ffd15 	stw	r4,-12(fp)
   21228:	e17ffe15 	stw	r5,-8(fp)
   2122c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21230:	e0bffd17 	ldw	r2,-12(fp)
   21234:	10800017 	ldw	r2,0(r2)
   21238:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2123c:	e0bffc17 	ldw	r2,-16(fp)
   21240:	10c00a04 	addi	r3,r2,40
   21244:	e0bffd17 	ldw	r2,-12(fp)
   21248:	10800217 	ldw	r2,8(r2)
   2124c:	100f883a 	mov	r7,r2
   21250:	e1bfff17 	ldw	r6,-4(fp)
   21254:	e17ffe17 	ldw	r5,-8(fp)
   21258:	1809883a 	mov	r4,r3
   2125c:	00219f80 	call	219f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   21260:	e037883a 	mov	sp,fp
   21264:	dfc00117 	ldw	ra,4(sp)
   21268:	df000017 	ldw	fp,0(sp)
   2126c:	dec00204 	addi	sp,sp,8
   21270:	f800283a 	ret

00021274 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   21274:	defffc04 	addi	sp,sp,-16
   21278:	dfc00315 	stw	ra,12(sp)
   2127c:	df000215 	stw	fp,8(sp)
   21280:	df000204 	addi	fp,sp,8
   21284:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21288:	e0bfff17 	ldw	r2,-4(fp)
   2128c:	10800017 	ldw	r2,0(r2)
   21290:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21294:	e0bffe17 	ldw	r2,-8(fp)
   21298:	10c00a04 	addi	r3,r2,40
   2129c:	e0bfff17 	ldw	r2,-4(fp)
   212a0:	10800217 	ldw	r2,8(r2)
   212a4:	100b883a 	mov	r5,r2
   212a8:	1809883a 	mov	r4,r3
   212ac:	00216840 	call	21684 <altera_avalon_jtag_uart_close>
}
   212b0:	e037883a 	mov	sp,fp
   212b4:	dfc00117 	ldw	ra,4(sp)
   212b8:	df000017 	ldw	fp,0(sp)
   212bc:	dec00204 	addi	sp,sp,8
   212c0:	f800283a 	ret

000212c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   212c4:	defffa04 	addi	sp,sp,-24
   212c8:	dfc00515 	stw	ra,20(sp)
   212cc:	df000415 	stw	fp,16(sp)
   212d0:	df000404 	addi	fp,sp,16
   212d4:	e13ffd15 	stw	r4,-12(fp)
   212d8:	e17ffe15 	stw	r5,-8(fp)
   212dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   212e0:	e0bffd17 	ldw	r2,-12(fp)
   212e4:	10800017 	ldw	r2,0(r2)
   212e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   212ec:	e0bffc17 	ldw	r2,-16(fp)
   212f0:	10800a04 	addi	r2,r2,40
   212f4:	e1bfff17 	ldw	r6,-4(fp)
   212f8:	e17ffe17 	ldw	r5,-8(fp)
   212fc:	1009883a 	mov	r4,r2
   21300:	00216ec0 	call	216ec <altera_avalon_jtag_uart_ioctl>
}
   21304:	e037883a 	mov	sp,fp
   21308:	dfc00117 	ldw	ra,4(sp)
   2130c:	df000017 	ldw	fp,0(sp)
   21310:	dec00204 	addi	sp,sp,8
   21314:	f800283a 	ret

00021318 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21318:	defffa04 	addi	sp,sp,-24
   2131c:	dfc00515 	stw	ra,20(sp)
   21320:	df000415 	stw	fp,16(sp)
   21324:	df000404 	addi	fp,sp,16
   21328:	e13ffd15 	stw	r4,-12(fp)
   2132c:	e17ffe15 	stw	r5,-8(fp)
   21330:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21334:	e0bffd17 	ldw	r2,-12(fp)
   21338:	00c00044 	movi	r3,1
   2133c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21340:	e0bffd17 	ldw	r2,-12(fp)
   21344:	10800017 	ldw	r2,0(r2)
   21348:	10800104 	addi	r2,r2,4
   2134c:	1007883a 	mov	r3,r2
   21350:	e0bffd17 	ldw	r2,-12(fp)
   21354:	10800817 	ldw	r2,32(r2)
   21358:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2135c:	e0bffe17 	ldw	r2,-8(fp)
   21360:	e0ffff17 	ldw	r3,-4(fp)
   21364:	d8000015 	stw	zero,0(sp)
   21368:	e1fffd17 	ldw	r7,-12(fp)
   2136c:	018000b4 	movhi	r6,2
   21370:	3184f604 	addi	r6,r6,5080
   21374:	180b883a 	mov	r5,r3
   21378:	1009883a 	mov	r4,r2
   2137c:	0020ca40 	call	20ca4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   21380:	e0bffd17 	ldw	r2,-12(fp)
   21384:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21388:	e0bffd17 	ldw	r2,-12(fp)
   2138c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21390:	d0e6b017 	ldw	r3,-25920(gp)
   21394:	e1fffd17 	ldw	r7,-12(fp)
   21398:	018000b4 	movhi	r6,2
   2139c:	31857904 	addi	r6,r6,5604
   213a0:	180b883a 	mov	r5,r3
   213a4:	1009883a 	mov	r4,r2
   213a8:	0021d100 	call	21d10 <alt_alarm_start>
   213ac:	1000040e 	bge	r2,zero,213c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   213b0:	e0fffd17 	ldw	r3,-12(fp)
   213b4:	00a00034 	movhi	r2,32768
   213b8:	10bfffc4 	addi	r2,r2,-1
   213bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   213c0:	0001883a 	nop
   213c4:	e037883a 	mov	sp,fp
   213c8:	dfc00117 	ldw	ra,4(sp)
   213cc:	df000017 	ldw	fp,0(sp)
   213d0:	dec00204 	addi	sp,sp,8
   213d4:	f800283a 	ret

000213d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   213d8:	defff804 	addi	sp,sp,-32
   213dc:	df000715 	stw	fp,28(sp)
   213e0:	df000704 	addi	fp,sp,28
   213e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   213e8:	e0bfff17 	ldw	r2,-4(fp)
   213ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   213f0:	e0bffb17 	ldw	r2,-20(fp)
   213f4:	10800017 	ldw	r2,0(r2)
   213f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   213fc:	e0bffc17 	ldw	r2,-16(fp)
   21400:	10800104 	addi	r2,r2,4
   21404:	10800037 	ldwio	r2,0(r2)
   21408:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2140c:	e0bffd17 	ldw	r2,-12(fp)
   21410:	1080c00c 	andi	r2,r2,768
   21414:	10006d26 	beq	r2,zero,215cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21418:	e0bffd17 	ldw	r2,-12(fp)
   2141c:	1080400c 	andi	r2,r2,256
   21420:	10003526 	beq	r2,zero,214f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21424:	00800074 	movhi	r2,1
   21428:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2142c:	e0bffb17 	ldw	r2,-20(fp)
   21430:	10800a17 	ldw	r2,40(r2)
   21434:	10800044 	addi	r2,r2,1
   21438:	1081ffcc 	andi	r2,r2,2047
   2143c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21440:	e0bffb17 	ldw	r2,-20(fp)
   21444:	10c00b17 	ldw	r3,44(r2)
   21448:	e0bffe17 	ldw	r2,-8(fp)
   2144c:	18801526 	beq	r3,r2,214a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21450:	e0bffc17 	ldw	r2,-16(fp)
   21454:	10800037 	ldwio	r2,0(r2)
   21458:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2145c:	e0bff917 	ldw	r2,-28(fp)
   21460:	10a0000c 	andi	r2,r2,32768
   21464:	10001126 	beq	r2,zero,214ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21468:	e0bffb17 	ldw	r2,-20(fp)
   2146c:	10800a17 	ldw	r2,40(r2)
   21470:	e0fff917 	ldw	r3,-28(fp)
   21474:	1809883a 	mov	r4,r3
   21478:	e0fffb17 	ldw	r3,-20(fp)
   2147c:	1885883a 	add	r2,r3,r2
   21480:	10800e04 	addi	r2,r2,56
   21484:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21488:	e0bffb17 	ldw	r2,-20(fp)
   2148c:	10800a17 	ldw	r2,40(r2)
   21490:	10800044 	addi	r2,r2,1
   21494:	10c1ffcc 	andi	r3,r2,2047
   21498:	e0bffb17 	ldw	r2,-20(fp)
   2149c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   214a0:	003fe206 	br	2142c <__alt_data_end+0xfffe842c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   214a4:	0001883a 	nop
   214a8:	00000106 	br	214b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   214ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   214b0:	e0bff917 	ldw	r2,-28(fp)
   214b4:	10bfffec 	andhi	r2,r2,65535
   214b8:	10000f26 	beq	r2,zero,214f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   214bc:	e0bffb17 	ldw	r2,-20(fp)
   214c0:	10c00817 	ldw	r3,32(r2)
   214c4:	00bfff84 	movi	r2,-2
   214c8:	1886703a 	and	r3,r3,r2
   214cc:	e0bffb17 	ldw	r2,-20(fp)
   214d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   214d4:	e0bffc17 	ldw	r2,-16(fp)
   214d8:	10800104 	addi	r2,r2,4
   214dc:	1007883a 	mov	r3,r2
   214e0:	e0bffb17 	ldw	r2,-20(fp)
   214e4:	10800817 	ldw	r2,32(r2)
   214e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   214ec:	e0bffc17 	ldw	r2,-16(fp)
   214f0:	10800104 	addi	r2,r2,4
   214f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   214f8:	e0bffd17 	ldw	r2,-12(fp)
   214fc:	1080800c 	andi	r2,r2,512
   21500:	103fbe26 	beq	r2,zero,213fc <__alt_data_end+0xfffe83fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21504:	e0bffd17 	ldw	r2,-12(fp)
   21508:	1004d43a 	srli	r2,r2,16
   2150c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21510:	00001406 	br	21564 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21514:	e0bffc17 	ldw	r2,-16(fp)
   21518:	e0fffb17 	ldw	r3,-20(fp)
   2151c:	18c00d17 	ldw	r3,52(r3)
   21520:	e13ffb17 	ldw	r4,-20(fp)
   21524:	20c7883a 	add	r3,r4,r3
   21528:	18c20e04 	addi	r3,r3,2104
   2152c:	18c00003 	ldbu	r3,0(r3)
   21530:	18c03fcc 	andi	r3,r3,255
   21534:	18c0201c 	xori	r3,r3,128
   21538:	18ffe004 	addi	r3,r3,-128
   2153c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21540:	e0bffb17 	ldw	r2,-20(fp)
   21544:	10800d17 	ldw	r2,52(r2)
   21548:	10800044 	addi	r2,r2,1
   2154c:	10c1ffcc 	andi	r3,r2,2047
   21550:	e0bffb17 	ldw	r2,-20(fp)
   21554:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21558:	e0bffa17 	ldw	r2,-24(fp)
   2155c:	10bfffc4 	addi	r2,r2,-1
   21560:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21564:	e0bffa17 	ldw	r2,-24(fp)
   21568:	10000526 	beq	r2,zero,21580 <altera_avalon_jtag_uart_irq+0x1a8>
   2156c:	e0bffb17 	ldw	r2,-20(fp)
   21570:	10c00d17 	ldw	r3,52(r2)
   21574:	e0bffb17 	ldw	r2,-20(fp)
   21578:	10800c17 	ldw	r2,48(r2)
   2157c:	18bfe51e 	bne	r3,r2,21514 <__alt_data_end+0xfffe8514>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21580:	e0bffa17 	ldw	r2,-24(fp)
   21584:	103f9d26 	beq	r2,zero,213fc <__alt_data_end+0xfffe83fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21588:	e0bffb17 	ldw	r2,-20(fp)
   2158c:	10c00817 	ldw	r3,32(r2)
   21590:	00bfff44 	movi	r2,-3
   21594:	1886703a 	and	r3,r3,r2
   21598:	e0bffb17 	ldw	r2,-20(fp)
   2159c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   215a0:	e0bffb17 	ldw	r2,-20(fp)
   215a4:	10800017 	ldw	r2,0(r2)
   215a8:	10800104 	addi	r2,r2,4
   215ac:	1007883a 	mov	r3,r2
   215b0:	e0bffb17 	ldw	r2,-20(fp)
   215b4:	10800817 	ldw	r2,32(r2)
   215b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   215bc:	e0bffc17 	ldw	r2,-16(fp)
   215c0:	10800104 	addi	r2,r2,4
   215c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   215c8:	003f8c06 	br	213fc <__alt_data_end+0xfffe83fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   215cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   215d0:	0001883a 	nop
   215d4:	e037883a 	mov	sp,fp
   215d8:	df000017 	ldw	fp,0(sp)
   215dc:	dec00104 	addi	sp,sp,4
   215e0:	f800283a 	ret

000215e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   215e4:	defff804 	addi	sp,sp,-32
   215e8:	df000715 	stw	fp,28(sp)
   215ec:	df000704 	addi	fp,sp,28
   215f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   215f4:	e0bffb17 	ldw	r2,-20(fp)
   215f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   215fc:	e0bff917 	ldw	r2,-28(fp)
   21600:	10800017 	ldw	r2,0(r2)
   21604:	10800104 	addi	r2,r2,4
   21608:	10800037 	ldwio	r2,0(r2)
   2160c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21610:	e0bffa17 	ldw	r2,-24(fp)
   21614:	1081000c 	andi	r2,r2,1024
   21618:	10000b26 	beq	r2,zero,21648 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2161c:	e0bff917 	ldw	r2,-28(fp)
   21620:	10800017 	ldw	r2,0(r2)
   21624:	10800104 	addi	r2,r2,4
   21628:	1007883a 	mov	r3,r2
   2162c:	e0bff917 	ldw	r2,-28(fp)
   21630:	10800817 	ldw	r2,32(r2)
   21634:	10810014 	ori	r2,r2,1024
   21638:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2163c:	e0bff917 	ldw	r2,-28(fp)
   21640:	10000915 	stw	zero,36(r2)
   21644:	00000a06 	br	21670 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21648:	e0bff917 	ldw	r2,-28(fp)
   2164c:	10c00917 	ldw	r3,36(r2)
   21650:	00a00034 	movhi	r2,32768
   21654:	10bfff04 	addi	r2,r2,-4
   21658:	10c00536 	bltu	r2,r3,21670 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2165c:	e0bff917 	ldw	r2,-28(fp)
   21660:	10800917 	ldw	r2,36(r2)
   21664:	10c00044 	addi	r3,r2,1
   21668:	e0bff917 	ldw	r2,-28(fp)
   2166c:	10c00915 	stw	r3,36(r2)
   21670:	d0a6b017 	ldw	r2,-25920(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21674:	e037883a 	mov	sp,fp
   21678:	df000017 	ldw	fp,0(sp)
   2167c:	dec00104 	addi	sp,sp,4
   21680:	f800283a 	ret

00021684 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21684:	defffd04 	addi	sp,sp,-12
   21688:	df000215 	stw	fp,8(sp)
   2168c:	df000204 	addi	fp,sp,8
   21690:	e13ffe15 	stw	r4,-8(fp)
   21694:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21698:	00000506 	br	216b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2169c:	e0bfff17 	ldw	r2,-4(fp)
   216a0:	1090000c 	andi	r2,r2,16384
   216a4:	10000226 	beq	r2,zero,216b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   216a8:	00bffd44 	movi	r2,-11
   216ac:	00000b06 	br	216dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   216b0:	e0bffe17 	ldw	r2,-8(fp)
   216b4:	10c00d17 	ldw	r3,52(r2)
   216b8:	e0bffe17 	ldw	r2,-8(fp)
   216bc:	10800c17 	ldw	r2,48(r2)
   216c0:	18800526 	beq	r3,r2,216d8 <altera_avalon_jtag_uart_close+0x54>
   216c4:	e0bffe17 	ldw	r2,-8(fp)
   216c8:	10c00917 	ldw	r3,36(r2)
   216cc:	e0bffe17 	ldw	r2,-8(fp)
   216d0:	10800117 	ldw	r2,4(r2)
   216d4:	18bff136 	bltu	r3,r2,2169c <__alt_data_end+0xfffe869c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   216d8:	0005883a 	mov	r2,zero
}
   216dc:	e037883a 	mov	sp,fp
   216e0:	df000017 	ldw	fp,0(sp)
   216e4:	dec00104 	addi	sp,sp,4
   216e8:	f800283a 	ret

000216ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   216ec:	defffa04 	addi	sp,sp,-24
   216f0:	df000515 	stw	fp,20(sp)
   216f4:	df000504 	addi	fp,sp,20
   216f8:	e13ffd15 	stw	r4,-12(fp)
   216fc:	e17ffe15 	stw	r5,-8(fp)
   21700:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21704:	00bff9c4 	movi	r2,-25
   21708:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2170c:	e0bffe17 	ldw	r2,-8(fp)
   21710:	10da8060 	cmpeqi	r3,r2,27137
   21714:	1800031e 	bne	r3,zero,21724 <altera_avalon_jtag_uart_ioctl+0x38>
   21718:	109a80a0 	cmpeqi	r2,r2,27138
   2171c:	1000181e 	bne	r2,zero,21780 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   21720:	00002906 	br	217c8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21724:	e0bffd17 	ldw	r2,-12(fp)
   21728:	10c00117 	ldw	r3,4(r2)
   2172c:	00a00034 	movhi	r2,32768
   21730:	10bfffc4 	addi	r2,r2,-1
   21734:	18802126 	beq	r3,r2,217bc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   21738:	e0bfff17 	ldw	r2,-4(fp)
   2173c:	10800017 	ldw	r2,0(r2)
   21740:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21744:	e0bffc17 	ldw	r2,-16(fp)
   21748:	10800090 	cmplti	r2,r2,2
   2174c:	1000061e 	bne	r2,zero,21768 <altera_avalon_jtag_uart_ioctl+0x7c>
   21750:	e0fffc17 	ldw	r3,-16(fp)
   21754:	00a00034 	movhi	r2,32768
   21758:	10bfffc4 	addi	r2,r2,-1
   2175c:	18800226 	beq	r3,r2,21768 <altera_avalon_jtag_uart_ioctl+0x7c>
   21760:	e0bffc17 	ldw	r2,-16(fp)
   21764:	00000206 	br	21770 <altera_avalon_jtag_uart_ioctl+0x84>
   21768:	00a00034 	movhi	r2,32768
   2176c:	10bfff84 	addi	r2,r2,-2
   21770:	e0fffd17 	ldw	r3,-12(fp)
   21774:	18800115 	stw	r2,4(r3)
      rc = 0;
   21778:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2177c:	00000f06 	br	217bc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   21780:	e0bffd17 	ldw	r2,-12(fp)
   21784:	10c00117 	ldw	r3,4(r2)
   21788:	00a00034 	movhi	r2,32768
   2178c:	10bfffc4 	addi	r2,r2,-1
   21790:	18800c26 	beq	r3,r2,217c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   21794:	e0bffd17 	ldw	r2,-12(fp)
   21798:	10c00917 	ldw	r3,36(r2)
   2179c:	e0bffd17 	ldw	r2,-12(fp)
   217a0:	10800117 	ldw	r2,4(r2)
   217a4:	1885803a 	cmpltu	r2,r3,r2
   217a8:	10c03fcc 	andi	r3,r2,255
   217ac:	e0bfff17 	ldw	r2,-4(fp)
   217b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   217b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   217b8:	00000206 	br	217c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   217bc:	0001883a 	nop
   217c0:	00000106 	br	217c8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   217c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   217c8:	e0bffb17 	ldw	r2,-20(fp)
}
   217cc:	e037883a 	mov	sp,fp
   217d0:	df000017 	ldw	fp,0(sp)
   217d4:	dec00104 	addi	sp,sp,4
   217d8:	f800283a 	ret

000217dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   217dc:	defff304 	addi	sp,sp,-52
   217e0:	dfc00c15 	stw	ra,48(sp)
   217e4:	df000b15 	stw	fp,44(sp)
   217e8:	df000b04 	addi	fp,sp,44
   217ec:	e13ffc15 	stw	r4,-16(fp)
   217f0:	e17ffd15 	stw	r5,-12(fp)
   217f4:	e1bffe15 	stw	r6,-8(fp)
   217f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   217fc:	e0bffd17 	ldw	r2,-12(fp)
   21800:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21804:	00004706 	br	21924 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21808:	e0bffc17 	ldw	r2,-16(fp)
   2180c:	10800a17 	ldw	r2,40(r2)
   21810:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21814:	e0bffc17 	ldw	r2,-16(fp)
   21818:	10800b17 	ldw	r2,44(r2)
   2181c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   21820:	e0fff717 	ldw	r3,-36(fp)
   21824:	e0bff817 	ldw	r2,-32(fp)
   21828:	18800536 	bltu	r3,r2,21840 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2182c:	e0fff717 	ldw	r3,-36(fp)
   21830:	e0bff817 	ldw	r2,-32(fp)
   21834:	1885c83a 	sub	r2,r3,r2
   21838:	e0bff615 	stw	r2,-40(fp)
   2183c:	00000406 	br	21850 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   21840:	00c20004 	movi	r3,2048
   21844:	e0bff817 	ldw	r2,-32(fp)
   21848:	1885c83a 	sub	r2,r3,r2
   2184c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21850:	e0bff617 	ldw	r2,-40(fp)
   21854:	10001e26 	beq	r2,zero,218d0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21858:	e0fffe17 	ldw	r3,-8(fp)
   2185c:	e0bff617 	ldw	r2,-40(fp)
   21860:	1880022e 	bgeu	r3,r2,2186c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21864:	e0bffe17 	ldw	r2,-8(fp)
   21868:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2186c:	e0bffc17 	ldw	r2,-16(fp)
   21870:	10c00e04 	addi	r3,r2,56
   21874:	e0bff817 	ldw	r2,-32(fp)
   21878:	1885883a 	add	r2,r3,r2
   2187c:	e1bff617 	ldw	r6,-40(fp)
   21880:	100b883a 	mov	r5,r2
   21884:	e13ff517 	ldw	r4,-44(fp)
   21888:	00239b80 	call	239b8 <memcpy>
      ptr   += n;
   2188c:	e0fff517 	ldw	r3,-44(fp)
   21890:	e0bff617 	ldw	r2,-40(fp)
   21894:	1885883a 	add	r2,r3,r2
   21898:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2189c:	e0fffe17 	ldw	r3,-8(fp)
   218a0:	e0bff617 	ldw	r2,-40(fp)
   218a4:	1885c83a 	sub	r2,r3,r2
   218a8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   218ac:	e0fff817 	ldw	r3,-32(fp)
   218b0:	e0bff617 	ldw	r2,-40(fp)
   218b4:	1885883a 	add	r2,r3,r2
   218b8:	10c1ffcc 	andi	r3,r2,2047
   218bc:	e0bffc17 	ldw	r2,-16(fp)
   218c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   218c4:	e0bffe17 	ldw	r2,-8(fp)
   218c8:	00bfcf16 	blt	zero,r2,21808 <__alt_data_end+0xfffe8808>
   218cc:	00000106 	br	218d4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   218d0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   218d4:	e0fff517 	ldw	r3,-44(fp)
   218d8:	e0bffd17 	ldw	r2,-12(fp)
   218dc:	1880141e 	bne	r3,r2,21930 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   218e0:	e0bfff17 	ldw	r2,-4(fp)
   218e4:	1090000c 	andi	r2,r2,16384
   218e8:	1000131e 	bne	r2,zero,21938 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   218ec:	0001883a 	nop
   218f0:	e0bffc17 	ldw	r2,-16(fp)
   218f4:	10c00a17 	ldw	r3,40(r2)
   218f8:	e0bff717 	ldw	r2,-36(fp)
   218fc:	1880051e 	bne	r3,r2,21914 <altera_avalon_jtag_uart_read+0x138>
   21900:	e0bffc17 	ldw	r2,-16(fp)
   21904:	10c00917 	ldw	r3,36(r2)
   21908:	e0bffc17 	ldw	r2,-16(fp)
   2190c:	10800117 	ldw	r2,4(r2)
   21910:	18bff736 	bltu	r3,r2,218f0 <__alt_data_end+0xfffe88f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21914:	e0bffc17 	ldw	r2,-16(fp)
   21918:	10c00a17 	ldw	r3,40(r2)
   2191c:	e0bff717 	ldw	r2,-36(fp)
   21920:	18800726 	beq	r3,r2,21940 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21924:	e0bffe17 	ldw	r2,-8(fp)
   21928:	00bfb716 	blt	zero,r2,21808 <__alt_data_end+0xfffe8808>
   2192c:	00000506 	br	21944 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   21930:	0001883a 	nop
   21934:	00000306 	br	21944 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   21938:	0001883a 	nop
   2193c:	00000106 	br	21944 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   21940:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21944:	e0fff517 	ldw	r3,-44(fp)
   21948:	e0bffd17 	ldw	r2,-12(fp)
   2194c:	18801826 	beq	r3,r2,219b0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21950:	0005303a 	rdctl	r2,status
   21954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21958:	e0fffb17 	ldw	r3,-20(fp)
   2195c:	00bfff84 	movi	r2,-2
   21960:	1884703a 	and	r2,r3,r2
   21964:	1001703a 	wrctl	status,r2
  
  return context;
   21968:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2196c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21970:	e0bffc17 	ldw	r2,-16(fp)
   21974:	10800817 	ldw	r2,32(r2)
   21978:	10c00054 	ori	r3,r2,1
   2197c:	e0bffc17 	ldw	r2,-16(fp)
   21980:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21984:	e0bffc17 	ldw	r2,-16(fp)
   21988:	10800017 	ldw	r2,0(r2)
   2198c:	10800104 	addi	r2,r2,4
   21990:	1007883a 	mov	r3,r2
   21994:	e0bffc17 	ldw	r2,-16(fp)
   21998:	10800817 	ldw	r2,32(r2)
   2199c:	18800035 	stwio	r2,0(r3)
   219a0:	e0bffa17 	ldw	r2,-24(fp)
   219a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   219a8:	e0bff917 	ldw	r2,-28(fp)
   219ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   219b0:	e0fff517 	ldw	r3,-44(fp)
   219b4:	e0bffd17 	ldw	r2,-12(fp)
   219b8:	18800426 	beq	r3,r2,219cc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   219bc:	e0fff517 	ldw	r3,-44(fp)
   219c0:	e0bffd17 	ldw	r2,-12(fp)
   219c4:	1885c83a 	sub	r2,r3,r2
   219c8:	00000606 	br	219e4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   219cc:	e0bfff17 	ldw	r2,-4(fp)
   219d0:	1090000c 	andi	r2,r2,16384
   219d4:	10000226 	beq	r2,zero,219e0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   219d8:	00bffd44 	movi	r2,-11
   219dc:	00000106 	br	219e4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   219e0:	00bffec4 	movi	r2,-5
}
   219e4:	e037883a 	mov	sp,fp
   219e8:	dfc00117 	ldw	ra,4(sp)
   219ec:	df000017 	ldw	fp,0(sp)
   219f0:	dec00204 	addi	sp,sp,8
   219f4:	f800283a 	ret

000219f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   219f8:	defff304 	addi	sp,sp,-52
   219fc:	dfc00c15 	stw	ra,48(sp)
   21a00:	df000b15 	stw	fp,44(sp)
   21a04:	df000b04 	addi	fp,sp,44
   21a08:	e13ffc15 	stw	r4,-16(fp)
   21a0c:	e17ffd15 	stw	r5,-12(fp)
   21a10:	e1bffe15 	stw	r6,-8(fp)
   21a14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21a18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21a1c:	e0bffd17 	ldw	r2,-12(fp)
   21a20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21a24:	00003706 	br	21b04 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21a28:	e0bffc17 	ldw	r2,-16(fp)
   21a2c:	10800c17 	ldw	r2,48(r2)
   21a30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   21a34:	e0bffc17 	ldw	r2,-16(fp)
   21a38:	10800d17 	ldw	r2,52(r2)
   21a3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   21a40:	e0fff917 	ldw	r3,-28(fp)
   21a44:	e0bff517 	ldw	r2,-44(fp)
   21a48:	1880062e 	bgeu	r3,r2,21a64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21a4c:	e0fff517 	ldw	r3,-44(fp)
   21a50:	e0bff917 	ldw	r2,-28(fp)
   21a54:	1885c83a 	sub	r2,r3,r2
   21a58:	10bfffc4 	addi	r2,r2,-1
   21a5c:	e0bff615 	stw	r2,-40(fp)
   21a60:	00000b06 	br	21a90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21a64:	e0bff517 	ldw	r2,-44(fp)
   21a68:	10000526 	beq	r2,zero,21a80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21a6c:	00c20004 	movi	r3,2048
   21a70:	e0bff917 	ldw	r2,-28(fp)
   21a74:	1885c83a 	sub	r2,r3,r2
   21a78:	e0bff615 	stw	r2,-40(fp)
   21a7c:	00000406 	br	21a90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   21a80:	00c1ffc4 	movi	r3,2047
   21a84:	e0bff917 	ldw	r2,-28(fp)
   21a88:	1885c83a 	sub	r2,r3,r2
   21a8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21a90:	e0bff617 	ldw	r2,-40(fp)
   21a94:	10001e26 	beq	r2,zero,21b10 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21a98:	e0fffe17 	ldw	r3,-8(fp)
   21a9c:	e0bff617 	ldw	r2,-40(fp)
   21aa0:	1880022e 	bgeu	r3,r2,21aac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21aa4:	e0bffe17 	ldw	r2,-8(fp)
   21aa8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21aac:	e0bffc17 	ldw	r2,-16(fp)
   21ab0:	10c20e04 	addi	r3,r2,2104
   21ab4:	e0bff917 	ldw	r2,-28(fp)
   21ab8:	1885883a 	add	r2,r3,r2
   21abc:	e1bff617 	ldw	r6,-40(fp)
   21ac0:	e17ffd17 	ldw	r5,-12(fp)
   21ac4:	1009883a 	mov	r4,r2
   21ac8:	00239b80 	call	239b8 <memcpy>
      ptr   += n;
   21acc:	e0fffd17 	ldw	r3,-12(fp)
   21ad0:	e0bff617 	ldw	r2,-40(fp)
   21ad4:	1885883a 	add	r2,r3,r2
   21ad8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21adc:	e0fffe17 	ldw	r3,-8(fp)
   21ae0:	e0bff617 	ldw	r2,-40(fp)
   21ae4:	1885c83a 	sub	r2,r3,r2
   21ae8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21aec:	e0fff917 	ldw	r3,-28(fp)
   21af0:	e0bff617 	ldw	r2,-40(fp)
   21af4:	1885883a 	add	r2,r3,r2
   21af8:	10c1ffcc 	andi	r3,r2,2047
   21afc:	e0bffc17 	ldw	r2,-16(fp)
   21b00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21b04:	e0bffe17 	ldw	r2,-8(fp)
   21b08:	00bfc716 	blt	zero,r2,21a28 <__alt_data_end+0xfffe8a28>
   21b0c:	00000106 	br	21b14 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   21b10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b14:	0005303a 	rdctl	r2,status
   21b18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b1c:	e0fffb17 	ldw	r3,-20(fp)
   21b20:	00bfff84 	movi	r2,-2
   21b24:	1884703a 	and	r2,r3,r2
   21b28:	1001703a 	wrctl	status,r2
  
  return context;
   21b2c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21b30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21b34:	e0bffc17 	ldw	r2,-16(fp)
   21b38:	10800817 	ldw	r2,32(r2)
   21b3c:	10c00094 	ori	r3,r2,2
   21b40:	e0bffc17 	ldw	r2,-16(fp)
   21b44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21b48:	e0bffc17 	ldw	r2,-16(fp)
   21b4c:	10800017 	ldw	r2,0(r2)
   21b50:	10800104 	addi	r2,r2,4
   21b54:	1007883a 	mov	r3,r2
   21b58:	e0bffc17 	ldw	r2,-16(fp)
   21b5c:	10800817 	ldw	r2,32(r2)
   21b60:	18800035 	stwio	r2,0(r3)
   21b64:	e0bffa17 	ldw	r2,-24(fp)
   21b68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b6c:	e0bff817 	ldw	r2,-32(fp)
   21b70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   21b74:	e0bffe17 	ldw	r2,-8(fp)
   21b78:	0080100e 	bge	zero,r2,21bbc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21b7c:	e0bfff17 	ldw	r2,-4(fp)
   21b80:	1090000c 	andi	r2,r2,16384
   21b84:	1000101e 	bne	r2,zero,21bc8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21b88:	0001883a 	nop
   21b8c:	e0bffc17 	ldw	r2,-16(fp)
   21b90:	10c00d17 	ldw	r3,52(r2)
   21b94:	e0bff517 	ldw	r2,-44(fp)
   21b98:	1880051e 	bne	r3,r2,21bb0 <altera_avalon_jtag_uart_write+0x1b8>
   21b9c:	e0bffc17 	ldw	r2,-16(fp)
   21ba0:	10c00917 	ldw	r3,36(r2)
   21ba4:	e0bffc17 	ldw	r2,-16(fp)
   21ba8:	10800117 	ldw	r2,4(r2)
   21bac:	18bff736 	bltu	r3,r2,21b8c <__alt_data_end+0xfffe8b8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21bb0:	e0bffc17 	ldw	r2,-16(fp)
   21bb4:	10800917 	ldw	r2,36(r2)
   21bb8:	1000051e 	bne	r2,zero,21bd0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   21bbc:	e0bffe17 	ldw	r2,-8(fp)
   21bc0:	00bfd016 	blt	zero,r2,21b04 <__alt_data_end+0xfffe8b04>
   21bc4:	00000306 	br	21bd4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   21bc8:	0001883a 	nop
   21bcc:	00000106 	br	21bd4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21bd0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21bd4:	e0fffd17 	ldw	r3,-12(fp)
   21bd8:	e0bff717 	ldw	r2,-36(fp)
   21bdc:	18800426 	beq	r3,r2,21bf0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21be0:	e0fffd17 	ldw	r3,-12(fp)
   21be4:	e0bff717 	ldw	r2,-36(fp)
   21be8:	1885c83a 	sub	r2,r3,r2
   21bec:	00000606 	br	21c08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   21bf0:	e0bfff17 	ldw	r2,-4(fp)
   21bf4:	1090000c 	andi	r2,r2,16384
   21bf8:	10000226 	beq	r2,zero,21c04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   21bfc:	00bffd44 	movi	r2,-11
   21c00:	00000106 	br	21c08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21c04:	00bffec4 	movi	r2,-5
}
   21c08:	e037883a 	mov	sp,fp
   21c0c:	dfc00117 	ldw	ra,4(sp)
   21c10:	df000017 	ldw	fp,0(sp)
   21c14:	dec00204 	addi	sp,sp,8
   21c18:	f800283a 	ret

00021c1c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21c1c:	defffa04 	addi	sp,sp,-24
   21c20:	dfc00515 	stw	ra,20(sp)
   21c24:	df000415 	stw	fp,16(sp)
   21c28:	df000404 	addi	fp,sp,16
   21c2c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21c30:	0007883a 	mov	r3,zero
   21c34:	e0bfff17 	ldw	r2,-4(fp)
   21c38:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21c3c:	e0bfff17 	ldw	r2,-4(fp)
   21c40:	10800104 	addi	r2,r2,4
   21c44:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c48:	0005303a 	rdctl	r2,status
   21c4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c50:	e0fffd17 	ldw	r3,-12(fp)
   21c54:	00bfff84 	movi	r2,-2
   21c58:	1884703a 	and	r2,r3,r2
   21c5c:	1001703a 	wrctl	status,r2
  
  return context;
   21c60:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21c64:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   21c68:	00226fc0 	call	226fc <alt_tick>
   21c6c:	e0bffc17 	ldw	r2,-16(fp)
   21c70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21c74:	e0bffe17 	ldw	r2,-8(fp)
   21c78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   21c7c:	0001883a 	nop
   21c80:	e037883a 	mov	sp,fp
   21c84:	dfc00117 	ldw	ra,4(sp)
   21c88:	df000017 	ldw	fp,0(sp)
   21c8c:	dec00204 	addi	sp,sp,8
   21c90:	f800283a 	ret

00021c94 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   21c94:	defff804 	addi	sp,sp,-32
   21c98:	dfc00715 	stw	ra,28(sp)
   21c9c:	df000615 	stw	fp,24(sp)
   21ca0:	df000604 	addi	fp,sp,24
   21ca4:	e13ffc15 	stw	r4,-16(fp)
   21ca8:	e17ffd15 	stw	r5,-12(fp)
   21cac:	e1bffe15 	stw	r6,-8(fp)
   21cb0:	e1ffff15 	stw	r7,-4(fp)
   21cb4:	e0bfff17 	ldw	r2,-4(fp)
   21cb8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   21cbc:	d0a6b017 	ldw	r2,-25920(gp)
   21cc0:	1000021e 	bne	r2,zero,21ccc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   21cc4:	e0bffb17 	ldw	r2,-20(fp)
   21cc8:	d0a6b015 	stw	r2,-25920(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   21ccc:	e0bffc17 	ldw	r2,-16(fp)
   21cd0:	10800104 	addi	r2,r2,4
   21cd4:	00c001c4 	movi	r3,7
   21cd8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21cdc:	d8000015 	stw	zero,0(sp)
   21ce0:	e1fffc17 	ldw	r7,-16(fp)
   21ce4:	018000b4 	movhi	r6,2
   21ce8:	31870704 	addi	r6,r6,7196
   21cec:	e17ffe17 	ldw	r5,-8(fp)
   21cf0:	e13ffd17 	ldw	r4,-12(fp)
   21cf4:	0020ca40 	call	20ca4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21cf8:	0001883a 	nop
   21cfc:	e037883a 	mov	sp,fp
   21d00:	dfc00117 	ldw	ra,4(sp)
   21d04:	df000017 	ldw	fp,0(sp)
   21d08:	dec00204 	addi	sp,sp,8
   21d0c:	f800283a 	ret

00021d10 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21d10:	defff504 	addi	sp,sp,-44
   21d14:	df000a15 	stw	fp,40(sp)
   21d18:	df000a04 	addi	fp,sp,40
   21d1c:	e13ffc15 	stw	r4,-16(fp)
   21d20:	e17ffd15 	stw	r5,-12(fp)
   21d24:	e1bffe15 	stw	r6,-8(fp)
   21d28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21d2c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21d30:	d0a6b017 	ldw	r2,-25920(gp)
  
  if (alt_ticks_per_second ())
   21d34:	10003c26 	beq	r2,zero,21e28 <alt_alarm_start+0x118>
  {
    if (alarm)
   21d38:	e0bffc17 	ldw	r2,-16(fp)
   21d3c:	10003826 	beq	r2,zero,21e20 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21d40:	e0bffc17 	ldw	r2,-16(fp)
   21d44:	e0fffe17 	ldw	r3,-8(fp)
   21d48:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21d4c:	e0bffc17 	ldw	r2,-16(fp)
   21d50:	e0ffff17 	ldw	r3,-4(fp)
   21d54:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21d58:	0005303a 	rdctl	r2,status
   21d5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21d60:	e0fff917 	ldw	r3,-28(fp)
   21d64:	00bfff84 	movi	r2,-2
   21d68:	1884703a 	and	r2,r3,r2
   21d6c:	1001703a 	wrctl	status,r2
  
  return context;
   21d70:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   21d74:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21d78:	d0a6b117 	ldw	r2,-25916(gp)
      
      current_nticks = alt_nticks();
   21d7c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21d80:	e0fffd17 	ldw	r3,-12(fp)
   21d84:	e0bff617 	ldw	r2,-40(fp)
   21d88:	1885883a 	add	r2,r3,r2
   21d8c:	10c00044 	addi	r3,r2,1
   21d90:	e0bffc17 	ldw	r2,-16(fp)
   21d94:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   21d98:	e0bffc17 	ldw	r2,-16(fp)
   21d9c:	10c00217 	ldw	r3,8(r2)
   21da0:	e0bff617 	ldw	r2,-40(fp)
   21da4:	1880042e 	bgeu	r3,r2,21db8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   21da8:	e0bffc17 	ldw	r2,-16(fp)
   21dac:	00c00044 	movi	r3,1
   21db0:	10c00405 	stb	r3,16(r2)
   21db4:	00000206 	br	21dc0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   21db8:	e0bffc17 	ldw	r2,-16(fp)
   21dbc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21dc0:	e0bffc17 	ldw	r2,-16(fp)
   21dc4:	d0e00804 	addi	r3,gp,-32736
   21dc8:	e0fffa15 	stw	r3,-24(fp)
   21dcc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21dd0:	e0bffb17 	ldw	r2,-20(fp)
   21dd4:	e0fffa17 	ldw	r3,-24(fp)
   21dd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21ddc:	e0bffa17 	ldw	r2,-24(fp)
   21de0:	10c00017 	ldw	r3,0(r2)
   21de4:	e0bffb17 	ldw	r2,-20(fp)
   21de8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21dec:	e0bffa17 	ldw	r2,-24(fp)
   21df0:	10800017 	ldw	r2,0(r2)
   21df4:	e0fffb17 	ldw	r3,-20(fp)
   21df8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21dfc:	e0bffa17 	ldw	r2,-24(fp)
   21e00:	e0fffb17 	ldw	r3,-20(fp)
   21e04:	10c00015 	stw	r3,0(r2)
   21e08:	e0bff817 	ldw	r2,-32(fp)
   21e0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e10:	e0bff717 	ldw	r2,-36(fp)
   21e14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   21e18:	0005883a 	mov	r2,zero
   21e1c:	00000306 	br	21e2c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   21e20:	00bffa84 	movi	r2,-22
   21e24:	00000106 	br	21e2c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   21e28:	00bfde84 	movi	r2,-134
  }
}
   21e2c:	e037883a 	mov	sp,fp
   21e30:	df000017 	ldw	fp,0(sp)
   21e34:	dec00104 	addi	sp,sp,4
   21e38:	f800283a 	ret

00021e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21e3c:	defffe04 	addi	sp,sp,-8
   21e40:	dfc00115 	stw	ra,4(sp)
   21e44:	df000015 	stw	fp,0(sp)
   21e48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21e4c:	d0a00717 	ldw	r2,-32740(gp)
   21e50:	10000326 	beq	r2,zero,21e60 <alt_get_errno+0x24>
   21e54:	d0a00717 	ldw	r2,-32740(gp)
   21e58:	103ee83a 	callr	r2
   21e5c:	00000106 	br	21e64 <alt_get_errno+0x28>
   21e60:	d0a6b204 	addi	r2,gp,-25912
}
   21e64:	e037883a 	mov	sp,fp
   21e68:	dfc00117 	ldw	ra,4(sp)
   21e6c:	df000017 	ldw	fp,0(sp)
   21e70:	dec00204 	addi	sp,sp,8
   21e74:	f800283a 	ret

00021e78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   21e78:	defffb04 	addi	sp,sp,-20
   21e7c:	dfc00415 	stw	ra,16(sp)
   21e80:	df000315 	stw	fp,12(sp)
   21e84:	df000304 	addi	fp,sp,12
   21e88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   21e8c:	e0bfff17 	ldw	r2,-4(fp)
   21e90:	10000816 	blt	r2,zero,21eb4 <close+0x3c>
   21e94:	01400304 	movi	r5,12
   21e98:	e13fff17 	ldw	r4,-4(fp)
   21e9c:	0020c7c0 	call	20c7c <__mulsi3>
   21ea0:	1007883a 	mov	r3,r2
   21ea4:	008000b4 	movhi	r2,2
   21ea8:	109c6104 	addi	r2,r2,29060
   21eac:	1885883a 	add	r2,r3,r2
   21eb0:	00000106 	br	21eb8 <close+0x40>
   21eb4:	0005883a 	mov	r2,zero
   21eb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   21ebc:	e0bffd17 	ldw	r2,-12(fp)
   21ec0:	10001926 	beq	r2,zero,21f28 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   21ec4:	e0bffd17 	ldw	r2,-12(fp)
   21ec8:	10800017 	ldw	r2,0(r2)
   21ecc:	10800417 	ldw	r2,16(r2)
   21ed0:	10000626 	beq	r2,zero,21eec <close+0x74>
   21ed4:	e0bffd17 	ldw	r2,-12(fp)
   21ed8:	10800017 	ldw	r2,0(r2)
   21edc:	10800417 	ldw	r2,16(r2)
   21ee0:	e13ffd17 	ldw	r4,-12(fp)
   21ee4:	103ee83a 	callr	r2
   21ee8:	00000106 	br	21ef0 <close+0x78>
   21eec:	0005883a 	mov	r2,zero
   21ef0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21ef4:	e13fff17 	ldw	r4,-4(fp)
   21ef8:	00225dc0 	call	225dc <alt_release_fd>
    if (rval < 0)
   21efc:	e0bffe17 	ldw	r2,-8(fp)
   21f00:	1000070e 	bge	r2,zero,21f20 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   21f04:	0021e3c0 	call	21e3c <alt_get_errno>
   21f08:	1007883a 	mov	r3,r2
   21f0c:	e0bffe17 	ldw	r2,-8(fp)
   21f10:	0085c83a 	sub	r2,zero,r2
   21f14:	18800015 	stw	r2,0(r3)
      return -1;
   21f18:	00bfffc4 	movi	r2,-1
   21f1c:	00000706 	br	21f3c <close+0xc4>
    }
    return 0;
   21f20:	0005883a 	mov	r2,zero
   21f24:	00000506 	br	21f3c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21f28:	0021e3c0 	call	21e3c <alt_get_errno>
   21f2c:	1007883a 	mov	r3,r2
   21f30:	00801444 	movi	r2,81
   21f34:	18800015 	stw	r2,0(r3)
    return -1;
   21f38:	00bfffc4 	movi	r2,-1
  }
}
   21f3c:	e037883a 	mov	sp,fp
   21f40:	dfc00117 	ldw	ra,4(sp)
   21f44:	df000017 	ldw	fp,0(sp)
   21f48:	dec00204 	addi	sp,sp,8
   21f4c:	f800283a 	ret

00021f50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21f50:	deffff04 	addi	sp,sp,-4
   21f54:	df000015 	stw	fp,0(sp)
   21f58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21f5c:	0001883a 	nop
   21f60:	e037883a 	mov	sp,fp
   21f64:	df000017 	ldw	fp,0(sp)
   21f68:	dec00104 	addi	sp,sp,4
   21f6c:	f800283a 	ret

00021f70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   21f70:	defffc04 	addi	sp,sp,-16
   21f74:	df000315 	stw	fp,12(sp)
   21f78:	df000304 	addi	fp,sp,12
   21f7c:	e13ffd15 	stw	r4,-12(fp)
   21f80:	e17ffe15 	stw	r5,-8(fp)
   21f84:	e1bfff15 	stw	r6,-4(fp)
  return len;
   21f88:	e0bfff17 	ldw	r2,-4(fp)
}
   21f8c:	e037883a 	mov	sp,fp
   21f90:	df000017 	ldw	fp,0(sp)
   21f94:	dec00104 	addi	sp,sp,4
   21f98:	f800283a 	ret

00021f9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21f9c:	defffe04 	addi	sp,sp,-8
   21fa0:	dfc00115 	stw	ra,4(sp)
   21fa4:	df000015 	stw	fp,0(sp)
   21fa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21fac:	d0a00717 	ldw	r2,-32740(gp)
   21fb0:	10000326 	beq	r2,zero,21fc0 <alt_get_errno+0x24>
   21fb4:	d0a00717 	ldw	r2,-32740(gp)
   21fb8:	103ee83a 	callr	r2
   21fbc:	00000106 	br	21fc4 <alt_get_errno+0x28>
   21fc0:	d0a6b204 	addi	r2,gp,-25912
}
   21fc4:	e037883a 	mov	sp,fp
   21fc8:	dfc00117 	ldw	ra,4(sp)
   21fcc:	df000017 	ldw	fp,0(sp)
   21fd0:	dec00204 	addi	sp,sp,8
   21fd4:	f800283a 	ret

00021fd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   21fd8:	defffa04 	addi	sp,sp,-24
   21fdc:	dfc00515 	stw	ra,20(sp)
   21fe0:	df000415 	stw	fp,16(sp)
   21fe4:	df000404 	addi	fp,sp,16
   21fe8:	e13ffe15 	stw	r4,-8(fp)
   21fec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21ff0:	e0bffe17 	ldw	r2,-8(fp)
   21ff4:	10000326 	beq	r2,zero,22004 <alt_dev_llist_insert+0x2c>
   21ff8:	e0bffe17 	ldw	r2,-8(fp)
   21ffc:	10800217 	ldw	r2,8(r2)
   22000:	1000061e 	bne	r2,zero,2201c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22004:	0021f9c0 	call	21f9c <alt_get_errno>
   22008:	1007883a 	mov	r3,r2
   2200c:	00800584 	movi	r2,22
   22010:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22014:	00bffa84 	movi	r2,-22
   22018:	00001306 	br	22068 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2201c:	e0bffe17 	ldw	r2,-8(fp)
   22020:	e0ffff17 	ldw	r3,-4(fp)
   22024:	e0fffc15 	stw	r3,-16(fp)
   22028:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2202c:	e0bffd17 	ldw	r2,-12(fp)
   22030:	e0fffc17 	ldw	r3,-16(fp)
   22034:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22038:	e0bffc17 	ldw	r2,-16(fp)
   2203c:	10c00017 	ldw	r3,0(r2)
   22040:	e0bffd17 	ldw	r2,-12(fp)
   22044:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22048:	e0bffc17 	ldw	r2,-16(fp)
   2204c:	10800017 	ldw	r2,0(r2)
   22050:	e0fffd17 	ldw	r3,-12(fp)
   22054:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22058:	e0bffc17 	ldw	r2,-16(fp)
   2205c:	e0fffd17 	ldw	r3,-12(fp)
   22060:	10c00015 	stw	r3,0(r2)

  return 0;  
   22064:	0005883a 	mov	r2,zero
}
   22068:	e037883a 	mov	sp,fp
   2206c:	dfc00117 	ldw	ra,4(sp)
   22070:	df000017 	ldw	fp,0(sp)
   22074:	dec00204 	addi	sp,sp,8
   22078:	f800283a 	ret

0002207c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2207c:	defffd04 	addi	sp,sp,-12
   22080:	dfc00215 	stw	ra,8(sp)
   22084:	df000115 	stw	fp,4(sp)
   22088:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2208c:	008000b4 	movhi	r2,2
   22090:	10982304 	addi	r2,r2,24716
   22094:	e0bfff15 	stw	r2,-4(fp)
   22098:	00000606 	br	220b4 <_do_ctors+0x38>
        (*ctor) (); 
   2209c:	e0bfff17 	ldw	r2,-4(fp)
   220a0:	10800017 	ldw	r2,0(r2)
   220a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   220a8:	e0bfff17 	ldw	r2,-4(fp)
   220ac:	10bfff04 	addi	r2,r2,-4
   220b0:	e0bfff15 	stw	r2,-4(fp)
   220b4:	e0ffff17 	ldw	r3,-4(fp)
   220b8:	008000b4 	movhi	r2,2
   220bc:	10982404 	addi	r2,r2,24720
   220c0:	18bff62e 	bgeu	r3,r2,2209c <__alt_data_end+0xfffe909c>
        (*ctor) (); 
}
   220c4:	0001883a 	nop
   220c8:	e037883a 	mov	sp,fp
   220cc:	dfc00117 	ldw	ra,4(sp)
   220d0:	df000017 	ldw	fp,0(sp)
   220d4:	dec00204 	addi	sp,sp,8
   220d8:	f800283a 	ret

000220dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   220dc:	defffd04 	addi	sp,sp,-12
   220e0:	dfc00215 	stw	ra,8(sp)
   220e4:	df000115 	stw	fp,4(sp)
   220e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   220ec:	008000b4 	movhi	r2,2
   220f0:	10982304 	addi	r2,r2,24716
   220f4:	e0bfff15 	stw	r2,-4(fp)
   220f8:	00000606 	br	22114 <_do_dtors+0x38>
        (*dtor) (); 
   220fc:	e0bfff17 	ldw	r2,-4(fp)
   22100:	10800017 	ldw	r2,0(r2)
   22104:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22108:	e0bfff17 	ldw	r2,-4(fp)
   2210c:	10bfff04 	addi	r2,r2,-4
   22110:	e0bfff15 	stw	r2,-4(fp)
   22114:	e0ffff17 	ldw	r3,-4(fp)
   22118:	008000b4 	movhi	r2,2
   2211c:	10982404 	addi	r2,r2,24720
   22120:	18bff62e 	bgeu	r3,r2,220fc <__alt_data_end+0xfffe90fc>
        (*dtor) (); 
}
   22124:	0001883a 	nop
   22128:	e037883a 	mov	sp,fp
   2212c:	dfc00117 	ldw	ra,4(sp)
   22130:	df000017 	ldw	fp,0(sp)
   22134:	dec00204 	addi	sp,sp,8
   22138:	f800283a 	ret

0002213c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2213c:	deffff04 	addi	sp,sp,-4
   22140:	df000015 	stw	fp,0(sp)
   22144:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22148:	0001883a 	nop
   2214c:	e037883a 	mov	sp,fp
   22150:	df000017 	ldw	fp,0(sp)
   22154:	dec00104 	addi	sp,sp,4
   22158:	f800283a 	ret

0002215c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2215c:	defffe04 	addi	sp,sp,-8
   22160:	df000115 	stw	fp,4(sp)
   22164:	df000104 	addi	fp,sp,4
   22168:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2216c:	e0bfff17 	ldw	r2,-4(fp)
   22170:	10bffe84 	addi	r2,r2,-6
   22174:	10c00428 	cmpgeui	r3,r2,16
   22178:	18001a1e 	bne	r3,zero,221e4 <alt_exception_cause_generated_bad_addr+0x88>
   2217c:	100690ba 	slli	r3,r2,2
   22180:	008000b4 	movhi	r2,2
   22184:	10886504 	addi	r2,r2,8596
   22188:	1885883a 	add	r2,r3,r2
   2218c:	10800017 	ldw	r2,0(r2)
   22190:	1000683a 	jmp	r2
   22194:	000221d4 	movui	zero,2183
   22198:	000221d4 	movui	zero,2183
   2219c:	000221e4 	muli	zero,zero,2183
   221a0:	000221e4 	muli	zero,zero,2183
   221a4:	000221e4 	muli	zero,zero,2183
   221a8:	000221d4 	movui	zero,2183
   221ac:	000221dc 	xori	zero,zero,2183
   221b0:	000221e4 	muli	zero,zero,2183
   221b4:	000221d4 	movui	zero,2183
   221b8:	000221d4 	movui	zero,2183
   221bc:	000221e4 	muli	zero,zero,2183
   221c0:	000221d4 	movui	zero,2183
   221c4:	000221dc 	xori	zero,zero,2183
   221c8:	000221e4 	muli	zero,zero,2183
   221cc:	000221e4 	muli	zero,zero,2183
   221d0:	000221d4 	movui	zero,2183
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   221d4:	00800044 	movi	r2,1
   221d8:	00000306 	br	221e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   221dc:	0005883a 	mov	r2,zero
   221e0:	00000106 	br	221e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   221e4:	0005883a 	mov	r2,zero
  }
}
   221e8:	e037883a 	mov	sp,fp
   221ec:	df000017 	ldw	fp,0(sp)
   221f0:	dec00104 	addi	sp,sp,4
   221f4:	f800283a 	ret

000221f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   221f8:	defff804 	addi	sp,sp,-32
   221fc:	dfc00715 	stw	ra,28(sp)
   22200:	df000615 	stw	fp,24(sp)
   22204:	dc000515 	stw	r16,20(sp)
   22208:	df000604 	addi	fp,sp,24
   2220c:	e13ffb15 	stw	r4,-20(fp)
   22210:	e17ffc15 	stw	r5,-16(fp)
   22214:	e1bffd15 	stw	r6,-12(fp)
   22218:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2221c:	e1bffe17 	ldw	r6,-8(fp)
   22220:	e17ffd17 	ldw	r5,-12(fp)
   22224:	e13ffc17 	ldw	r4,-16(fp)
   22228:	00224800 	call	22480 <open>
   2222c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22230:	e0bffa17 	ldw	r2,-24(fp)
   22234:	10002216 	blt	r2,zero,222c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22238:	040000b4 	movhi	r16,2
   2223c:	841c6104 	addi	r16,r16,29060
   22240:	e0bffa17 	ldw	r2,-24(fp)
   22244:	01400304 	movi	r5,12
   22248:	1009883a 	mov	r4,r2
   2224c:	0020c7c0 	call	20c7c <__mulsi3>
   22250:	8085883a 	add	r2,r16,r2
   22254:	10c00017 	ldw	r3,0(r2)
   22258:	e0bffb17 	ldw	r2,-20(fp)
   2225c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22260:	040000b4 	movhi	r16,2
   22264:	841c6104 	addi	r16,r16,29060
   22268:	e0bffa17 	ldw	r2,-24(fp)
   2226c:	01400304 	movi	r5,12
   22270:	1009883a 	mov	r4,r2
   22274:	0020c7c0 	call	20c7c <__mulsi3>
   22278:	8085883a 	add	r2,r16,r2
   2227c:	10800104 	addi	r2,r2,4
   22280:	10c00017 	ldw	r3,0(r2)
   22284:	e0bffb17 	ldw	r2,-20(fp)
   22288:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2228c:	040000b4 	movhi	r16,2
   22290:	841c6104 	addi	r16,r16,29060
   22294:	e0bffa17 	ldw	r2,-24(fp)
   22298:	01400304 	movi	r5,12
   2229c:	1009883a 	mov	r4,r2
   222a0:	0020c7c0 	call	20c7c <__mulsi3>
   222a4:	8085883a 	add	r2,r16,r2
   222a8:	10800204 	addi	r2,r2,8
   222ac:	10c00017 	ldw	r3,0(r2)
   222b0:	e0bffb17 	ldw	r2,-20(fp)
   222b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   222b8:	e13ffa17 	ldw	r4,-24(fp)
   222bc:	00225dc0 	call	225dc <alt_release_fd>
  }
} 
   222c0:	0001883a 	nop
   222c4:	e6ffff04 	addi	sp,fp,-4
   222c8:	dfc00217 	ldw	ra,8(sp)
   222cc:	df000117 	ldw	fp,4(sp)
   222d0:	dc000017 	ldw	r16,0(sp)
   222d4:	dec00304 	addi	sp,sp,12
   222d8:	f800283a 	ret

000222dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   222dc:	defffb04 	addi	sp,sp,-20
   222e0:	dfc00415 	stw	ra,16(sp)
   222e4:	df000315 	stw	fp,12(sp)
   222e8:	df000304 	addi	fp,sp,12
   222ec:	e13ffd15 	stw	r4,-12(fp)
   222f0:	e17ffe15 	stw	r5,-8(fp)
   222f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   222f8:	01c07fc4 	movi	r7,511
   222fc:	01800044 	movi	r6,1
   22300:	e17ffd17 	ldw	r5,-12(fp)
   22304:	010000b4 	movhi	r4,2
   22308:	211c6404 	addi	r4,r4,29072
   2230c:	00221f80 	call	221f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22310:	01c07fc4 	movi	r7,511
   22314:	000d883a 	mov	r6,zero
   22318:	e17ffe17 	ldw	r5,-8(fp)
   2231c:	010000b4 	movhi	r4,2
   22320:	211c6104 	addi	r4,r4,29060
   22324:	00221f80 	call	221f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22328:	01c07fc4 	movi	r7,511
   2232c:	01800044 	movi	r6,1
   22330:	e17fff17 	ldw	r5,-4(fp)
   22334:	010000b4 	movhi	r4,2
   22338:	211c6704 	addi	r4,r4,29084
   2233c:	00221f80 	call	221f8 <alt_open_fd>
}  
   22340:	0001883a 	nop
   22344:	e037883a 	mov	sp,fp
   22348:	dfc00117 	ldw	ra,4(sp)
   2234c:	df000017 	ldw	fp,0(sp)
   22350:	dec00204 	addi	sp,sp,8
   22354:	f800283a 	ret

00022358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22358:	defffe04 	addi	sp,sp,-8
   2235c:	dfc00115 	stw	ra,4(sp)
   22360:	df000015 	stw	fp,0(sp)
   22364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22368:	d0a00717 	ldw	r2,-32740(gp)
   2236c:	10000326 	beq	r2,zero,2237c <alt_get_errno+0x24>
   22370:	d0a00717 	ldw	r2,-32740(gp)
   22374:	103ee83a 	callr	r2
   22378:	00000106 	br	22380 <alt_get_errno+0x28>
   2237c:	d0a6b204 	addi	r2,gp,-25912
}
   22380:	e037883a 	mov	sp,fp
   22384:	dfc00117 	ldw	ra,4(sp)
   22388:	df000017 	ldw	fp,0(sp)
   2238c:	dec00204 	addi	sp,sp,8
   22390:	f800283a 	ret

00022394 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22394:	defffb04 	addi	sp,sp,-20
   22398:	dfc00415 	stw	ra,16(sp)
   2239c:	df000315 	stw	fp,12(sp)
   223a0:	dc000215 	stw	r16,8(sp)
   223a4:	df000304 	addi	fp,sp,12
   223a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   223ac:	e0bffe17 	ldw	r2,-8(fp)
   223b0:	10800217 	ldw	r2,8(r2)
   223b4:	10d00034 	orhi	r3,r2,16384
   223b8:	e0bffe17 	ldw	r2,-8(fp)
   223bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   223c0:	e03ffd15 	stw	zero,-12(fp)
   223c4:	00002306 	br	22454 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   223c8:	040000b4 	movhi	r16,2
   223cc:	841c6104 	addi	r16,r16,29060
   223d0:	e0bffd17 	ldw	r2,-12(fp)
   223d4:	01400304 	movi	r5,12
   223d8:	1009883a 	mov	r4,r2
   223dc:	0020c7c0 	call	20c7c <__mulsi3>
   223e0:	8085883a 	add	r2,r16,r2
   223e4:	10c00017 	ldw	r3,0(r2)
   223e8:	e0bffe17 	ldw	r2,-8(fp)
   223ec:	10800017 	ldw	r2,0(r2)
   223f0:	1880151e 	bne	r3,r2,22448 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   223f4:	040000b4 	movhi	r16,2
   223f8:	841c6104 	addi	r16,r16,29060
   223fc:	e0bffd17 	ldw	r2,-12(fp)
   22400:	01400304 	movi	r5,12
   22404:	1009883a 	mov	r4,r2
   22408:	0020c7c0 	call	20c7c <__mulsi3>
   2240c:	8085883a 	add	r2,r16,r2
   22410:	10800204 	addi	r2,r2,8
   22414:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22418:	10000b0e 	bge	r2,zero,22448 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2241c:	01400304 	movi	r5,12
   22420:	e13ffd17 	ldw	r4,-12(fp)
   22424:	0020c7c0 	call	20c7c <__mulsi3>
   22428:	1007883a 	mov	r3,r2
   2242c:	008000b4 	movhi	r2,2
   22430:	109c6104 	addi	r2,r2,29060
   22434:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22438:	e0bffe17 	ldw	r2,-8(fp)
   2243c:	18800226 	beq	r3,r2,22448 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22440:	00bffcc4 	movi	r2,-13
   22444:	00000806 	br	22468 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22448:	e0bffd17 	ldw	r2,-12(fp)
   2244c:	10800044 	addi	r2,r2,1
   22450:	e0bffd15 	stw	r2,-12(fp)
   22454:	d0a00617 	ldw	r2,-32744(gp)
   22458:	1007883a 	mov	r3,r2
   2245c:	e0bffd17 	ldw	r2,-12(fp)
   22460:	18bfd92e 	bgeu	r3,r2,223c8 <__alt_data_end+0xfffe93c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22464:	0005883a 	mov	r2,zero
}
   22468:	e6ffff04 	addi	sp,fp,-4
   2246c:	dfc00217 	ldw	ra,8(sp)
   22470:	df000117 	ldw	fp,4(sp)
   22474:	dc000017 	ldw	r16,0(sp)
   22478:	dec00304 	addi	sp,sp,12
   2247c:	f800283a 	ret

00022480 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22480:	defff604 	addi	sp,sp,-40
   22484:	dfc00915 	stw	ra,36(sp)
   22488:	df000815 	stw	fp,32(sp)
   2248c:	df000804 	addi	fp,sp,32
   22490:	e13ffd15 	stw	r4,-12(fp)
   22494:	e17ffe15 	stw	r5,-8(fp)
   22498:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2249c:	00bfffc4 	movi	r2,-1
   224a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   224a4:	00bffb44 	movi	r2,-19
   224a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   224ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   224b0:	d1600404 	addi	r5,gp,-32752
   224b4:	e13ffd17 	ldw	r4,-12(fp)
   224b8:	00228280 	call	22828 <alt_find_dev>
   224bc:	e0bff815 	stw	r2,-32(fp)
   224c0:	e0bff817 	ldw	r2,-32(fp)
   224c4:	1000051e 	bne	r2,zero,224dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   224c8:	e13ffd17 	ldw	r4,-12(fp)
   224cc:	00228b80 	call	228b8 <alt_find_file>
   224d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   224d4:	00800044 	movi	r2,1
   224d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   224dc:	e0bff817 	ldw	r2,-32(fp)
   224e0:	10002b26 	beq	r2,zero,22590 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   224e4:	e13ff817 	ldw	r4,-32(fp)
   224e8:	00229c00 	call	229c0 <alt_get_fd>
   224ec:	e0bff915 	stw	r2,-28(fp)
   224f0:	e0bff917 	ldw	r2,-28(fp)
   224f4:	1000030e 	bge	r2,zero,22504 <open+0x84>
    {
      status = index;
   224f8:	e0bff917 	ldw	r2,-28(fp)
   224fc:	e0bffa15 	stw	r2,-24(fp)
   22500:	00002506 	br	22598 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   22504:	01400304 	movi	r5,12
   22508:	e13ff917 	ldw	r4,-28(fp)
   2250c:	0020c7c0 	call	20c7c <__mulsi3>
   22510:	1007883a 	mov	r3,r2
   22514:	008000b4 	movhi	r2,2
   22518:	109c6104 	addi	r2,r2,29060
   2251c:	1885883a 	add	r2,r3,r2
   22520:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22524:	e0fffe17 	ldw	r3,-8(fp)
   22528:	00900034 	movhi	r2,16384
   2252c:	10bfffc4 	addi	r2,r2,-1
   22530:	1886703a 	and	r3,r3,r2
   22534:	e0bffc17 	ldw	r2,-16(fp)
   22538:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2253c:	e0bffb17 	ldw	r2,-20(fp)
   22540:	1000051e 	bne	r2,zero,22558 <open+0xd8>
   22544:	e13ffc17 	ldw	r4,-16(fp)
   22548:	00223940 	call	22394 <alt_file_locked>
   2254c:	e0bffa15 	stw	r2,-24(fp)
   22550:	e0bffa17 	ldw	r2,-24(fp)
   22554:	10001016 	blt	r2,zero,22598 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22558:	e0bff817 	ldw	r2,-32(fp)
   2255c:	10800317 	ldw	r2,12(r2)
   22560:	10000826 	beq	r2,zero,22584 <open+0x104>
   22564:	e0bff817 	ldw	r2,-32(fp)
   22568:	10800317 	ldw	r2,12(r2)
   2256c:	e1ffff17 	ldw	r7,-4(fp)
   22570:	e1bffe17 	ldw	r6,-8(fp)
   22574:	e17ffd17 	ldw	r5,-12(fp)
   22578:	e13ffc17 	ldw	r4,-16(fp)
   2257c:	103ee83a 	callr	r2
   22580:	00000106 	br	22588 <open+0x108>
   22584:	0005883a 	mov	r2,zero
   22588:	e0bffa15 	stw	r2,-24(fp)
   2258c:	00000206 	br	22598 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22590:	00bffb44 	movi	r2,-19
   22594:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22598:	e0bffa17 	ldw	r2,-24(fp)
   2259c:	1000090e 	bge	r2,zero,225c4 <open+0x144>
  {
    alt_release_fd (index);  
   225a0:	e13ff917 	ldw	r4,-28(fp)
   225a4:	00225dc0 	call	225dc <alt_release_fd>
    ALT_ERRNO = -status;
   225a8:	00223580 	call	22358 <alt_get_errno>
   225ac:	1007883a 	mov	r3,r2
   225b0:	e0bffa17 	ldw	r2,-24(fp)
   225b4:	0085c83a 	sub	r2,zero,r2
   225b8:	18800015 	stw	r2,0(r3)
    return -1;
   225bc:	00bfffc4 	movi	r2,-1
   225c0:	00000106 	br	225c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   225c4:	e0bff917 	ldw	r2,-28(fp)
}
   225c8:	e037883a 	mov	sp,fp
   225cc:	dfc00117 	ldw	ra,4(sp)
   225d0:	df000017 	ldw	fp,0(sp)
   225d4:	dec00204 	addi	sp,sp,8
   225d8:	f800283a 	ret

000225dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   225dc:	defffc04 	addi	sp,sp,-16
   225e0:	dfc00315 	stw	ra,12(sp)
   225e4:	df000215 	stw	fp,8(sp)
   225e8:	dc000115 	stw	r16,4(sp)
   225ec:	df000204 	addi	fp,sp,8
   225f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   225f4:	e0bffe17 	ldw	r2,-8(fp)
   225f8:	108000d0 	cmplti	r2,r2,3
   225fc:	1000111e 	bne	r2,zero,22644 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   22600:	040000b4 	movhi	r16,2
   22604:	841c6104 	addi	r16,r16,29060
   22608:	e0bffe17 	ldw	r2,-8(fp)
   2260c:	01400304 	movi	r5,12
   22610:	1009883a 	mov	r4,r2
   22614:	0020c7c0 	call	20c7c <__mulsi3>
   22618:	8085883a 	add	r2,r16,r2
   2261c:	10800204 	addi	r2,r2,8
   22620:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   22624:	040000b4 	movhi	r16,2
   22628:	841c6104 	addi	r16,r16,29060
   2262c:	e0bffe17 	ldw	r2,-8(fp)
   22630:	01400304 	movi	r5,12
   22634:	1009883a 	mov	r4,r2
   22638:	0020c7c0 	call	20c7c <__mulsi3>
   2263c:	8085883a 	add	r2,r16,r2
   22640:	10000015 	stw	zero,0(r2)
  }
}
   22644:	0001883a 	nop
   22648:	e6ffff04 	addi	sp,fp,-4
   2264c:	dfc00217 	ldw	ra,8(sp)
   22650:	df000117 	ldw	fp,4(sp)
   22654:	dc000017 	ldw	r16,0(sp)
   22658:	dec00304 	addi	sp,sp,12
   2265c:	f800283a 	ret

00022660 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22660:	defffa04 	addi	sp,sp,-24
   22664:	df000515 	stw	fp,20(sp)
   22668:	df000504 	addi	fp,sp,20
   2266c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22670:	0005303a 	rdctl	r2,status
   22674:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22678:	e0fffc17 	ldw	r3,-16(fp)
   2267c:	00bfff84 	movi	r2,-2
   22680:	1884703a 	and	r2,r3,r2
   22684:	1001703a 	wrctl	status,r2
  
  return context;
   22688:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2268c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22690:	e0bfff17 	ldw	r2,-4(fp)
   22694:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22698:	e0bffd17 	ldw	r2,-12(fp)
   2269c:	10800017 	ldw	r2,0(r2)
   226a0:	e0fffd17 	ldw	r3,-12(fp)
   226a4:	18c00117 	ldw	r3,4(r3)
   226a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   226ac:	e0bffd17 	ldw	r2,-12(fp)
   226b0:	10800117 	ldw	r2,4(r2)
   226b4:	e0fffd17 	ldw	r3,-12(fp)
   226b8:	18c00017 	ldw	r3,0(r3)
   226bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   226c0:	e0bffd17 	ldw	r2,-12(fp)
   226c4:	e0fffd17 	ldw	r3,-12(fp)
   226c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   226cc:	e0bffd17 	ldw	r2,-12(fp)
   226d0:	e0fffd17 	ldw	r3,-12(fp)
   226d4:	10c00015 	stw	r3,0(r2)
   226d8:	e0bffb17 	ldw	r2,-20(fp)
   226dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   226e0:	e0bffe17 	ldw	r2,-8(fp)
   226e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   226e8:	0001883a 	nop
   226ec:	e037883a 	mov	sp,fp
   226f0:	df000017 	ldw	fp,0(sp)
   226f4:	dec00104 	addi	sp,sp,4
   226f8:	f800283a 	ret

000226fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   226fc:	defffb04 	addi	sp,sp,-20
   22700:	dfc00415 	stw	ra,16(sp)
   22704:	df000315 	stw	fp,12(sp)
   22708:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2270c:	d0a00817 	ldw	r2,-32736(gp)
   22710:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22714:	d0a6b117 	ldw	r2,-25916(gp)
   22718:	10800044 	addi	r2,r2,1
   2271c:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22720:	00002e06 	br	227dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22724:	e0bffd17 	ldw	r2,-12(fp)
   22728:	10800017 	ldw	r2,0(r2)
   2272c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   22730:	e0bffd17 	ldw	r2,-12(fp)
   22734:	10800403 	ldbu	r2,16(r2)
   22738:	10803fcc 	andi	r2,r2,255
   2273c:	10000426 	beq	r2,zero,22750 <alt_tick+0x54>
   22740:	d0a6b117 	ldw	r2,-25916(gp)
   22744:	1000021e 	bne	r2,zero,22750 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22748:	e0bffd17 	ldw	r2,-12(fp)
   2274c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22750:	e0bffd17 	ldw	r2,-12(fp)
   22754:	10800217 	ldw	r2,8(r2)
   22758:	d0e6b117 	ldw	r3,-25916(gp)
   2275c:	18801d36 	bltu	r3,r2,227d4 <alt_tick+0xd8>
   22760:	e0bffd17 	ldw	r2,-12(fp)
   22764:	10800403 	ldbu	r2,16(r2)
   22768:	10803fcc 	andi	r2,r2,255
   2276c:	1000191e 	bne	r2,zero,227d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   22770:	e0bffd17 	ldw	r2,-12(fp)
   22774:	10800317 	ldw	r2,12(r2)
   22778:	e0fffd17 	ldw	r3,-12(fp)
   2277c:	18c00517 	ldw	r3,20(r3)
   22780:	1809883a 	mov	r4,r3
   22784:	103ee83a 	callr	r2
   22788:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2278c:	e0bfff17 	ldw	r2,-4(fp)
   22790:	1000031e 	bne	r2,zero,227a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22794:	e13ffd17 	ldw	r4,-12(fp)
   22798:	00226600 	call	22660 <alt_alarm_stop>
   2279c:	00000d06 	br	227d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   227a0:	e0bffd17 	ldw	r2,-12(fp)
   227a4:	10c00217 	ldw	r3,8(r2)
   227a8:	e0bfff17 	ldw	r2,-4(fp)
   227ac:	1887883a 	add	r3,r3,r2
   227b0:	e0bffd17 	ldw	r2,-12(fp)
   227b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   227b8:	e0bffd17 	ldw	r2,-12(fp)
   227bc:	10c00217 	ldw	r3,8(r2)
   227c0:	d0a6b117 	ldw	r2,-25916(gp)
   227c4:	1880032e 	bgeu	r3,r2,227d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   227c8:	e0bffd17 	ldw	r2,-12(fp)
   227cc:	00c00044 	movi	r3,1
   227d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   227d4:	e0bffe17 	ldw	r2,-8(fp)
   227d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   227dc:	e0fffd17 	ldw	r3,-12(fp)
   227e0:	d0a00804 	addi	r2,gp,-32736
   227e4:	18bfcf1e 	bne	r3,r2,22724 <__alt_data_end+0xfffe9724>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   227e8:	0001883a 	nop
}
   227ec:	0001883a 	nop
   227f0:	e037883a 	mov	sp,fp
   227f4:	dfc00117 	ldw	ra,4(sp)
   227f8:	df000017 	ldw	fp,0(sp)
   227fc:	dec00204 	addi	sp,sp,8
   22800:	f800283a 	ret

00022804 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22804:	deffff04 	addi	sp,sp,-4
   22808:	df000015 	stw	fp,0(sp)
   2280c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22810:	000170fa 	wrctl	ienable,zero
}
   22814:	0001883a 	nop
   22818:	e037883a 	mov	sp,fp
   2281c:	df000017 	ldw	fp,0(sp)
   22820:	dec00104 	addi	sp,sp,4
   22824:	f800283a 	ret

00022828 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22828:	defffa04 	addi	sp,sp,-24
   2282c:	dfc00515 	stw	ra,20(sp)
   22830:	df000415 	stw	fp,16(sp)
   22834:	df000404 	addi	fp,sp,16
   22838:	e13ffe15 	stw	r4,-8(fp)
   2283c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   22840:	e0bfff17 	ldw	r2,-4(fp)
   22844:	10800017 	ldw	r2,0(r2)
   22848:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2284c:	e13ffe17 	ldw	r4,-8(fp)
   22850:	00242140 	call	24214 <strlen>
   22854:	10800044 	addi	r2,r2,1
   22858:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2285c:	00000d06 	br	22894 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   22860:	e0bffc17 	ldw	r2,-16(fp)
   22864:	10800217 	ldw	r2,8(r2)
   22868:	e0fffd17 	ldw	r3,-12(fp)
   2286c:	180d883a 	mov	r6,r3
   22870:	e17ffe17 	ldw	r5,-8(fp)
   22874:	1009883a 	mov	r4,r2
   22878:	002393c0 	call	2393c <memcmp>
   2287c:	1000021e 	bne	r2,zero,22888 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22880:	e0bffc17 	ldw	r2,-16(fp)
   22884:	00000706 	br	228a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22888:	e0bffc17 	ldw	r2,-16(fp)
   2288c:	10800017 	ldw	r2,0(r2)
   22890:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22894:	e0fffc17 	ldw	r3,-16(fp)
   22898:	e0bfff17 	ldw	r2,-4(fp)
   2289c:	18bff01e 	bne	r3,r2,22860 <__alt_data_end+0xfffe9860>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   228a0:	0005883a 	mov	r2,zero
}
   228a4:	e037883a 	mov	sp,fp
   228a8:	dfc00117 	ldw	ra,4(sp)
   228ac:	df000017 	ldw	fp,0(sp)
   228b0:	dec00204 	addi	sp,sp,8
   228b4:	f800283a 	ret

000228b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   228b8:	defffb04 	addi	sp,sp,-20
   228bc:	dfc00415 	stw	ra,16(sp)
   228c0:	df000315 	stw	fp,12(sp)
   228c4:	df000304 	addi	fp,sp,12
   228c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   228cc:	d0a00217 	ldw	r2,-32760(gp)
   228d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   228d4:	00003106 	br	2299c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   228d8:	e0bffd17 	ldw	r2,-12(fp)
   228dc:	10800217 	ldw	r2,8(r2)
   228e0:	1009883a 	mov	r4,r2
   228e4:	00242140 	call	24214 <strlen>
   228e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   228ec:	e0bffd17 	ldw	r2,-12(fp)
   228f0:	10c00217 	ldw	r3,8(r2)
   228f4:	e0bffe17 	ldw	r2,-8(fp)
   228f8:	10bfffc4 	addi	r2,r2,-1
   228fc:	1885883a 	add	r2,r3,r2
   22900:	10800003 	ldbu	r2,0(r2)
   22904:	10803fcc 	andi	r2,r2,255
   22908:	1080201c 	xori	r2,r2,128
   2290c:	10bfe004 	addi	r2,r2,-128
   22910:	10800bd8 	cmpnei	r2,r2,47
   22914:	1000031e 	bne	r2,zero,22924 <alt_find_file+0x6c>
    {
      len -= 1;
   22918:	e0bffe17 	ldw	r2,-8(fp)
   2291c:	10bfffc4 	addi	r2,r2,-1
   22920:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22924:	e0bffe17 	ldw	r2,-8(fp)
   22928:	e0ffff17 	ldw	r3,-4(fp)
   2292c:	1885883a 	add	r2,r3,r2
   22930:	10800003 	ldbu	r2,0(r2)
   22934:	10803fcc 	andi	r2,r2,255
   22938:	1080201c 	xori	r2,r2,128
   2293c:	10bfe004 	addi	r2,r2,-128
   22940:	10800be0 	cmpeqi	r2,r2,47
   22944:	1000081e 	bne	r2,zero,22968 <alt_find_file+0xb0>
   22948:	e0bffe17 	ldw	r2,-8(fp)
   2294c:	e0ffff17 	ldw	r3,-4(fp)
   22950:	1885883a 	add	r2,r3,r2
   22954:	10800003 	ldbu	r2,0(r2)
   22958:	10803fcc 	andi	r2,r2,255
   2295c:	1080201c 	xori	r2,r2,128
   22960:	10bfe004 	addi	r2,r2,-128
   22964:	10000a1e 	bne	r2,zero,22990 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22968:	e0bffd17 	ldw	r2,-12(fp)
   2296c:	10800217 	ldw	r2,8(r2)
   22970:	e0fffe17 	ldw	r3,-8(fp)
   22974:	180d883a 	mov	r6,r3
   22978:	e17fff17 	ldw	r5,-4(fp)
   2297c:	1009883a 	mov	r4,r2
   22980:	002393c0 	call	2393c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22984:	1000021e 	bne	r2,zero,22990 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22988:	e0bffd17 	ldw	r2,-12(fp)
   2298c:	00000706 	br	229ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   22990:	e0bffd17 	ldw	r2,-12(fp)
   22994:	10800017 	ldw	r2,0(r2)
   22998:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2299c:	e0fffd17 	ldw	r3,-12(fp)
   229a0:	d0a00204 	addi	r2,gp,-32760
   229a4:	18bfcc1e 	bne	r3,r2,228d8 <__alt_data_end+0xfffe98d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   229a8:	0005883a 	mov	r2,zero
}
   229ac:	e037883a 	mov	sp,fp
   229b0:	dfc00117 	ldw	ra,4(sp)
   229b4:	df000017 	ldw	fp,0(sp)
   229b8:	dec00204 	addi	sp,sp,8
   229bc:	f800283a 	ret

000229c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   229c0:	defffa04 	addi	sp,sp,-24
   229c4:	dfc00515 	stw	ra,20(sp)
   229c8:	df000415 	stw	fp,16(sp)
   229cc:	dc000315 	stw	r16,12(sp)
   229d0:	df000404 	addi	fp,sp,16
   229d4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   229d8:	00bffa04 	movi	r2,-24
   229dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   229e0:	e03ffc15 	stw	zero,-16(fp)
   229e4:	00001d06 	br	22a5c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   229e8:	040000b4 	movhi	r16,2
   229ec:	841c6104 	addi	r16,r16,29060
   229f0:	e0bffc17 	ldw	r2,-16(fp)
   229f4:	01400304 	movi	r5,12
   229f8:	1009883a 	mov	r4,r2
   229fc:	0020c7c0 	call	20c7c <__mulsi3>
   22a00:	8085883a 	add	r2,r16,r2
   22a04:	10800017 	ldw	r2,0(r2)
   22a08:	1000111e 	bne	r2,zero,22a50 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   22a0c:	040000b4 	movhi	r16,2
   22a10:	841c6104 	addi	r16,r16,29060
   22a14:	e0bffc17 	ldw	r2,-16(fp)
   22a18:	01400304 	movi	r5,12
   22a1c:	1009883a 	mov	r4,r2
   22a20:	0020c7c0 	call	20c7c <__mulsi3>
   22a24:	8085883a 	add	r2,r16,r2
   22a28:	e0fffe17 	ldw	r3,-8(fp)
   22a2c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22a30:	d0e00617 	ldw	r3,-32744(gp)
   22a34:	e0bffc17 	ldw	r2,-16(fp)
   22a38:	1880020e 	bge	r3,r2,22a44 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   22a3c:	e0bffc17 	ldw	r2,-16(fp)
   22a40:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   22a44:	e0bffc17 	ldw	r2,-16(fp)
   22a48:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   22a4c:	00000606 	br	22a68 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22a50:	e0bffc17 	ldw	r2,-16(fp)
   22a54:	10800044 	addi	r2,r2,1
   22a58:	e0bffc15 	stw	r2,-16(fp)
   22a5c:	e0bffc17 	ldw	r2,-16(fp)
   22a60:	10800810 	cmplti	r2,r2,32
   22a64:	103fe01e 	bne	r2,zero,229e8 <__alt_data_end+0xfffe99e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22a68:	e0bffd17 	ldw	r2,-12(fp)
}
   22a6c:	e6ffff04 	addi	sp,fp,-4
   22a70:	dfc00217 	ldw	ra,8(sp)
   22a74:	df000117 	ldw	fp,4(sp)
   22a78:	dc000017 	ldw	r16,0(sp)
   22a7c:	dec00304 	addi	sp,sp,12
   22a80:	f800283a 	ret

00022a84 <atexit>:
   22a84:	200b883a 	mov	r5,r4
   22a88:	000f883a 	mov	r7,zero
   22a8c:	000d883a 	mov	r6,zero
   22a90:	0009883a 	mov	r4,zero
   22a94:	00244001 	jmpi	24400 <__register_exitproc>

00022a98 <exit>:
   22a98:	defffe04 	addi	sp,sp,-8
   22a9c:	000b883a 	mov	r5,zero
   22aa0:	dc000015 	stw	r16,0(sp)
   22aa4:	dfc00115 	stw	ra,4(sp)
   22aa8:	2021883a 	mov	r16,r4
   22aac:	00245180 	call	24518 <__call_exitprocs>
   22ab0:	008000b4 	movhi	r2,2
   22ab4:	109ed604 	addi	r2,r2,31576
   22ab8:	11000017 	ldw	r4,0(r2)
   22abc:	20800f17 	ldw	r2,60(r4)
   22ac0:	10000126 	beq	r2,zero,22ac8 <exit+0x30>
   22ac4:	103ee83a 	callr	r2
   22ac8:	8009883a 	mov	r4,r16
   22acc:	00259f40 	call	259f4 <_exit>

00022ad0 <_fputs_r>:
   22ad0:	defff804 	addi	sp,sp,-32
   22ad4:	dc400615 	stw	r17,24(sp)
   22ad8:	2023883a 	mov	r17,r4
   22adc:	2809883a 	mov	r4,r5
   22ae0:	dc000515 	stw	r16,20(sp)
   22ae4:	dfc00715 	stw	ra,28(sp)
   22ae8:	3021883a 	mov	r16,r6
   22aec:	d9400315 	stw	r5,12(sp)
   22af0:	00242140 	call	24214 <strlen>
   22af4:	d8800215 	stw	r2,8(sp)
   22af8:	d8800415 	stw	r2,16(sp)
   22afc:	d8800304 	addi	r2,sp,12
   22b00:	d8800015 	stw	r2,0(sp)
   22b04:	00800044 	movi	r2,1
   22b08:	d8800115 	stw	r2,4(sp)
   22b0c:	88000226 	beq	r17,zero,22b18 <_fputs_r+0x48>
   22b10:	88800e17 	ldw	r2,56(r17)
   22b14:	10001226 	beq	r2,zero,22b60 <_fputs_r+0x90>
   22b18:	8080030b 	ldhu	r2,12(r16)
   22b1c:	10c8000c 	andi	r3,r2,8192
   22b20:	1800061e 	bne	r3,zero,22b3c <_fputs_r+0x6c>
   22b24:	81001917 	ldw	r4,100(r16)
   22b28:	00f7ffc4 	movi	r3,-8193
   22b2c:	10880014 	ori	r2,r2,8192
   22b30:	20c6703a 	and	r3,r4,r3
   22b34:	8080030d 	sth	r2,12(r16)
   22b38:	80c01915 	stw	r3,100(r16)
   22b3c:	d80d883a 	mov	r6,sp
   22b40:	800b883a 	mov	r5,r16
   22b44:	8809883a 	mov	r4,r17
   22b48:	0022b840 	call	22b84 <__sfvwrite_r>
   22b4c:	dfc00717 	ldw	ra,28(sp)
   22b50:	dc400617 	ldw	r17,24(sp)
   22b54:	dc000517 	ldw	r16,20(sp)
   22b58:	dec00804 	addi	sp,sp,32
   22b5c:	f800283a 	ret
   22b60:	8809883a 	mov	r4,r17
   22b64:	0024ca00 	call	24ca0 <__sinit>
   22b68:	003feb06 	br	22b18 <__alt_data_end+0xfffe9b18>

00022b6c <fputs>:
   22b6c:	008000b4 	movhi	r2,2
   22b70:	109ed704 	addi	r2,r2,31580
   22b74:	280d883a 	mov	r6,r5
   22b78:	200b883a 	mov	r5,r4
   22b7c:	11000017 	ldw	r4,0(r2)
   22b80:	0022ad01 	jmpi	22ad0 <_fputs_r>

00022b84 <__sfvwrite_r>:
   22b84:	30800217 	ldw	r2,8(r6)
   22b88:	10006726 	beq	r2,zero,22d28 <__sfvwrite_r+0x1a4>
   22b8c:	28c0030b 	ldhu	r3,12(r5)
   22b90:	defff404 	addi	sp,sp,-48
   22b94:	dd400715 	stw	r21,28(sp)
   22b98:	dd000615 	stw	r20,24(sp)
   22b9c:	dc000215 	stw	r16,8(sp)
   22ba0:	dfc00b15 	stw	ra,44(sp)
   22ba4:	df000a15 	stw	fp,40(sp)
   22ba8:	ddc00915 	stw	r23,36(sp)
   22bac:	dd800815 	stw	r22,32(sp)
   22bb0:	dcc00515 	stw	r19,20(sp)
   22bb4:	dc800415 	stw	r18,16(sp)
   22bb8:	dc400315 	stw	r17,12(sp)
   22bbc:	1880020c 	andi	r2,r3,8
   22bc0:	2821883a 	mov	r16,r5
   22bc4:	202b883a 	mov	r21,r4
   22bc8:	3029883a 	mov	r20,r6
   22bcc:	10002726 	beq	r2,zero,22c6c <__sfvwrite_r+0xe8>
   22bd0:	28800417 	ldw	r2,16(r5)
   22bd4:	10002526 	beq	r2,zero,22c6c <__sfvwrite_r+0xe8>
   22bd8:	1880008c 	andi	r2,r3,2
   22bdc:	a4400017 	ldw	r17,0(r20)
   22be0:	10002a26 	beq	r2,zero,22c8c <__sfvwrite_r+0x108>
   22be4:	05a00034 	movhi	r22,32768
   22be8:	0027883a 	mov	r19,zero
   22bec:	0025883a 	mov	r18,zero
   22bf0:	b5bf0004 	addi	r22,r22,-1024
   22bf4:	980d883a 	mov	r6,r19
   22bf8:	a809883a 	mov	r4,r21
   22bfc:	90004626 	beq	r18,zero,22d18 <__sfvwrite_r+0x194>
   22c00:	900f883a 	mov	r7,r18
   22c04:	b480022e 	bgeu	r22,r18,22c10 <__sfvwrite_r+0x8c>
   22c08:	01e00034 	movhi	r7,32768
   22c0c:	39ff0004 	addi	r7,r7,-1024
   22c10:	80800917 	ldw	r2,36(r16)
   22c14:	81400717 	ldw	r5,28(r16)
   22c18:	103ee83a 	callr	r2
   22c1c:	00805a0e 	bge	zero,r2,22d88 <__sfvwrite_r+0x204>
   22c20:	a0c00217 	ldw	r3,8(r20)
   22c24:	98a7883a 	add	r19,r19,r2
   22c28:	90a5c83a 	sub	r18,r18,r2
   22c2c:	1885c83a 	sub	r2,r3,r2
   22c30:	a0800215 	stw	r2,8(r20)
   22c34:	103fef1e 	bne	r2,zero,22bf4 <__alt_data_end+0xfffe9bf4>
   22c38:	0005883a 	mov	r2,zero
   22c3c:	dfc00b17 	ldw	ra,44(sp)
   22c40:	df000a17 	ldw	fp,40(sp)
   22c44:	ddc00917 	ldw	r23,36(sp)
   22c48:	dd800817 	ldw	r22,32(sp)
   22c4c:	dd400717 	ldw	r21,28(sp)
   22c50:	dd000617 	ldw	r20,24(sp)
   22c54:	dcc00517 	ldw	r19,20(sp)
   22c58:	dc800417 	ldw	r18,16(sp)
   22c5c:	dc400317 	ldw	r17,12(sp)
   22c60:	dc000217 	ldw	r16,8(sp)
   22c64:	dec00c04 	addi	sp,sp,48
   22c68:	f800283a 	ret
   22c6c:	800b883a 	mov	r5,r16
   22c70:	a809883a 	mov	r4,r21
   22c74:	00242ac0 	call	242ac <__swsetup_r>
   22c78:	1000ee1e 	bne	r2,zero,23034 <__sfvwrite_r+0x4b0>
   22c7c:	80c0030b 	ldhu	r3,12(r16)
   22c80:	a4400017 	ldw	r17,0(r20)
   22c84:	1880008c 	andi	r2,r3,2
   22c88:	103fd61e 	bne	r2,zero,22be4 <__alt_data_end+0xfffe9be4>
   22c8c:	1880004c 	andi	r2,r3,1
   22c90:	1000421e 	bne	r2,zero,22d9c <__sfvwrite_r+0x218>
   22c94:	0039883a 	mov	fp,zero
   22c98:	0025883a 	mov	r18,zero
   22c9c:	90001a26 	beq	r18,zero,22d08 <__sfvwrite_r+0x184>
   22ca0:	1880800c 	andi	r2,r3,512
   22ca4:	84c00217 	ldw	r19,8(r16)
   22ca8:	10002126 	beq	r2,zero,22d30 <__sfvwrite_r+0x1ac>
   22cac:	982f883a 	mov	r23,r19
   22cb0:	94c09636 	bltu	r18,r19,22f0c <__sfvwrite_r+0x388>
   22cb4:	1881200c 	andi	r2,r3,1152
   22cb8:	1000a11e 	bne	r2,zero,22f40 <__sfvwrite_r+0x3bc>
   22cbc:	81000017 	ldw	r4,0(r16)
   22cc0:	b80d883a 	mov	r6,r23
   22cc4:	e00b883a 	mov	r5,fp
   22cc8:	0023b000 	call	23b00 <memmove>
   22ccc:	80c00217 	ldw	r3,8(r16)
   22cd0:	81000017 	ldw	r4,0(r16)
   22cd4:	9005883a 	mov	r2,r18
   22cd8:	1ce7c83a 	sub	r19,r3,r19
   22cdc:	25cf883a 	add	r7,r4,r23
   22ce0:	84c00215 	stw	r19,8(r16)
   22ce4:	81c00015 	stw	r7,0(r16)
   22ce8:	a0c00217 	ldw	r3,8(r20)
   22cec:	e0b9883a 	add	fp,fp,r2
   22cf0:	90a5c83a 	sub	r18,r18,r2
   22cf4:	18a7c83a 	sub	r19,r3,r2
   22cf8:	a4c00215 	stw	r19,8(r20)
   22cfc:	983fce26 	beq	r19,zero,22c38 <__alt_data_end+0xfffe9c38>
   22d00:	80c0030b 	ldhu	r3,12(r16)
   22d04:	903fe61e 	bne	r18,zero,22ca0 <__alt_data_end+0xfffe9ca0>
   22d08:	8f000017 	ldw	fp,0(r17)
   22d0c:	8c800117 	ldw	r18,4(r17)
   22d10:	8c400204 	addi	r17,r17,8
   22d14:	003fe106 	br	22c9c <__alt_data_end+0xfffe9c9c>
   22d18:	8cc00017 	ldw	r19,0(r17)
   22d1c:	8c800117 	ldw	r18,4(r17)
   22d20:	8c400204 	addi	r17,r17,8
   22d24:	003fb306 	br	22bf4 <__alt_data_end+0xfffe9bf4>
   22d28:	0005883a 	mov	r2,zero
   22d2c:	f800283a 	ret
   22d30:	81000017 	ldw	r4,0(r16)
   22d34:	80800417 	ldw	r2,16(r16)
   22d38:	11005a36 	bltu	r2,r4,22ea4 <__sfvwrite_r+0x320>
   22d3c:	85c00517 	ldw	r23,20(r16)
   22d40:	95c05836 	bltu	r18,r23,22ea4 <__sfvwrite_r+0x320>
   22d44:	00a00034 	movhi	r2,32768
   22d48:	10bfffc4 	addi	r2,r2,-1
   22d4c:	9009883a 	mov	r4,r18
   22d50:	1480012e 	bgeu	r2,r18,22d58 <__sfvwrite_r+0x1d4>
   22d54:	1009883a 	mov	r4,r2
   22d58:	b80b883a 	mov	r5,r23
   22d5c:	0020ac80 	call	20ac8 <__divsi3>
   22d60:	b80b883a 	mov	r5,r23
   22d64:	1009883a 	mov	r4,r2
   22d68:	0020c7c0 	call	20c7c <__mulsi3>
   22d6c:	81400717 	ldw	r5,28(r16)
   22d70:	80c00917 	ldw	r3,36(r16)
   22d74:	100f883a 	mov	r7,r2
   22d78:	e00d883a 	mov	r6,fp
   22d7c:	a809883a 	mov	r4,r21
   22d80:	183ee83a 	callr	r3
   22d84:	00bfd816 	blt	zero,r2,22ce8 <__alt_data_end+0xfffe9ce8>
   22d88:	8080030b 	ldhu	r2,12(r16)
   22d8c:	10801014 	ori	r2,r2,64
   22d90:	8080030d 	sth	r2,12(r16)
   22d94:	00bfffc4 	movi	r2,-1
   22d98:	003fa806 	br	22c3c <__alt_data_end+0xfffe9c3c>
   22d9c:	0027883a 	mov	r19,zero
   22da0:	0011883a 	mov	r8,zero
   22da4:	0039883a 	mov	fp,zero
   22da8:	0025883a 	mov	r18,zero
   22dac:	90001f26 	beq	r18,zero,22e2c <__sfvwrite_r+0x2a8>
   22db0:	40005a26 	beq	r8,zero,22f1c <__sfvwrite_r+0x398>
   22db4:	982d883a 	mov	r22,r19
   22db8:	94c0012e 	bgeu	r18,r19,22dc0 <__sfvwrite_r+0x23c>
   22dbc:	902d883a 	mov	r22,r18
   22dc0:	81000017 	ldw	r4,0(r16)
   22dc4:	80800417 	ldw	r2,16(r16)
   22dc8:	b02f883a 	mov	r23,r22
   22dcc:	81c00517 	ldw	r7,20(r16)
   22dd0:	1100032e 	bgeu	r2,r4,22de0 <__sfvwrite_r+0x25c>
   22dd4:	80c00217 	ldw	r3,8(r16)
   22dd8:	38c7883a 	add	r3,r7,r3
   22ddc:	1d801816 	blt	r3,r22,22e40 <__sfvwrite_r+0x2bc>
   22de0:	b1c03e16 	blt	r22,r7,22edc <__sfvwrite_r+0x358>
   22de4:	80800917 	ldw	r2,36(r16)
   22de8:	81400717 	ldw	r5,28(r16)
   22dec:	e00d883a 	mov	r6,fp
   22df0:	da000115 	stw	r8,4(sp)
   22df4:	a809883a 	mov	r4,r21
   22df8:	103ee83a 	callr	r2
   22dfc:	102f883a 	mov	r23,r2
   22e00:	da000117 	ldw	r8,4(sp)
   22e04:	00bfe00e 	bge	zero,r2,22d88 <__alt_data_end+0xfffe9d88>
   22e08:	9de7c83a 	sub	r19,r19,r23
   22e0c:	98001f26 	beq	r19,zero,22e8c <__sfvwrite_r+0x308>
   22e10:	a0800217 	ldw	r2,8(r20)
   22e14:	e5f9883a 	add	fp,fp,r23
   22e18:	95e5c83a 	sub	r18,r18,r23
   22e1c:	15efc83a 	sub	r23,r2,r23
   22e20:	a5c00215 	stw	r23,8(r20)
   22e24:	b83f8426 	beq	r23,zero,22c38 <__alt_data_end+0xfffe9c38>
   22e28:	903fe11e 	bne	r18,zero,22db0 <__alt_data_end+0xfffe9db0>
   22e2c:	8f000017 	ldw	fp,0(r17)
   22e30:	8c800117 	ldw	r18,4(r17)
   22e34:	0011883a 	mov	r8,zero
   22e38:	8c400204 	addi	r17,r17,8
   22e3c:	003fdb06 	br	22dac <__alt_data_end+0xfffe9dac>
   22e40:	180d883a 	mov	r6,r3
   22e44:	e00b883a 	mov	r5,fp
   22e48:	da000115 	stw	r8,4(sp)
   22e4c:	d8c00015 	stw	r3,0(sp)
   22e50:	0023b000 	call	23b00 <memmove>
   22e54:	d8c00017 	ldw	r3,0(sp)
   22e58:	80800017 	ldw	r2,0(r16)
   22e5c:	800b883a 	mov	r5,r16
   22e60:	a809883a 	mov	r4,r21
   22e64:	10c5883a 	add	r2,r2,r3
   22e68:	80800015 	stw	r2,0(r16)
   22e6c:	d8c00015 	stw	r3,0(sp)
   22e70:	00248b40 	call	248b4 <_fflush_r>
   22e74:	d8c00017 	ldw	r3,0(sp)
   22e78:	da000117 	ldw	r8,4(sp)
   22e7c:	103fc21e 	bne	r2,zero,22d88 <__alt_data_end+0xfffe9d88>
   22e80:	182f883a 	mov	r23,r3
   22e84:	9de7c83a 	sub	r19,r19,r23
   22e88:	983fe11e 	bne	r19,zero,22e10 <__alt_data_end+0xfffe9e10>
   22e8c:	800b883a 	mov	r5,r16
   22e90:	a809883a 	mov	r4,r21
   22e94:	00248b40 	call	248b4 <_fflush_r>
   22e98:	103fbb1e 	bne	r2,zero,22d88 <__alt_data_end+0xfffe9d88>
   22e9c:	0011883a 	mov	r8,zero
   22ea0:	003fdb06 	br	22e10 <__alt_data_end+0xfffe9e10>
   22ea4:	94c0012e 	bgeu	r18,r19,22eac <__sfvwrite_r+0x328>
   22ea8:	9027883a 	mov	r19,r18
   22eac:	980d883a 	mov	r6,r19
   22eb0:	e00b883a 	mov	r5,fp
   22eb4:	0023b000 	call	23b00 <memmove>
   22eb8:	80800217 	ldw	r2,8(r16)
   22ebc:	80c00017 	ldw	r3,0(r16)
   22ec0:	14c5c83a 	sub	r2,r2,r19
   22ec4:	1cc7883a 	add	r3,r3,r19
   22ec8:	80800215 	stw	r2,8(r16)
   22ecc:	80c00015 	stw	r3,0(r16)
   22ed0:	10004326 	beq	r2,zero,22fe0 <__sfvwrite_r+0x45c>
   22ed4:	9805883a 	mov	r2,r19
   22ed8:	003f8306 	br	22ce8 <__alt_data_end+0xfffe9ce8>
   22edc:	b00d883a 	mov	r6,r22
   22ee0:	e00b883a 	mov	r5,fp
   22ee4:	da000115 	stw	r8,4(sp)
   22ee8:	0023b000 	call	23b00 <memmove>
   22eec:	80800217 	ldw	r2,8(r16)
   22ef0:	80c00017 	ldw	r3,0(r16)
   22ef4:	da000117 	ldw	r8,4(sp)
   22ef8:	1585c83a 	sub	r2,r2,r22
   22efc:	1dad883a 	add	r22,r3,r22
   22f00:	80800215 	stw	r2,8(r16)
   22f04:	85800015 	stw	r22,0(r16)
   22f08:	003fbf06 	br	22e08 <__alt_data_end+0xfffe9e08>
   22f0c:	81000017 	ldw	r4,0(r16)
   22f10:	9027883a 	mov	r19,r18
   22f14:	902f883a 	mov	r23,r18
   22f18:	003f6906 	br	22cc0 <__alt_data_end+0xfffe9cc0>
   22f1c:	900d883a 	mov	r6,r18
   22f20:	01400284 	movi	r5,10
   22f24:	e009883a 	mov	r4,fp
   22f28:	00238580 	call	23858 <memchr>
   22f2c:	10003e26 	beq	r2,zero,23028 <__sfvwrite_r+0x4a4>
   22f30:	10800044 	addi	r2,r2,1
   22f34:	1727c83a 	sub	r19,r2,fp
   22f38:	02000044 	movi	r8,1
   22f3c:	003f9d06 	br	22db4 <__alt_data_end+0xfffe9db4>
   22f40:	80800517 	ldw	r2,20(r16)
   22f44:	81400417 	ldw	r5,16(r16)
   22f48:	81c00017 	ldw	r7,0(r16)
   22f4c:	10a7883a 	add	r19,r2,r2
   22f50:	9885883a 	add	r2,r19,r2
   22f54:	1026d7fa 	srli	r19,r2,31
   22f58:	396dc83a 	sub	r22,r7,r5
   22f5c:	b1000044 	addi	r4,r22,1
   22f60:	9885883a 	add	r2,r19,r2
   22f64:	1027d07a 	srai	r19,r2,1
   22f68:	2485883a 	add	r2,r4,r18
   22f6c:	980d883a 	mov	r6,r19
   22f70:	9880022e 	bgeu	r19,r2,22f7c <__sfvwrite_r+0x3f8>
   22f74:	1027883a 	mov	r19,r2
   22f78:	100d883a 	mov	r6,r2
   22f7c:	18c1000c 	andi	r3,r3,1024
   22f80:	18001c26 	beq	r3,zero,22ff4 <__sfvwrite_r+0x470>
   22f84:	300b883a 	mov	r5,r6
   22f88:	a809883a 	mov	r4,r21
   22f8c:	002304c0 	call	2304c <_malloc_r>
   22f90:	102f883a 	mov	r23,r2
   22f94:	10002926 	beq	r2,zero,2303c <__sfvwrite_r+0x4b8>
   22f98:	81400417 	ldw	r5,16(r16)
   22f9c:	b00d883a 	mov	r6,r22
   22fa0:	1009883a 	mov	r4,r2
   22fa4:	00239b80 	call	239b8 <memcpy>
   22fa8:	8080030b 	ldhu	r2,12(r16)
   22fac:	00fedfc4 	movi	r3,-1153
   22fb0:	10c4703a 	and	r2,r2,r3
   22fb4:	10802014 	ori	r2,r2,128
   22fb8:	8080030d 	sth	r2,12(r16)
   22fbc:	bd89883a 	add	r4,r23,r22
   22fc0:	9d8fc83a 	sub	r7,r19,r22
   22fc4:	85c00415 	stw	r23,16(r16)
   22fc8:	84c00515 	stw	r19,20(r16)
   22fcc:	81000015 	stw	r4,0(r16)
   22fd0:	9027883a 	mov	r19,r18
   22fd4:	81c00215 	stw	r7,8(r16)
   22fd8:	902f883a 	mov	r23,r18
   22fdc:	003f3806 	br	22cc0 <__alt_data_end+0xfffe9cc0>
   22fe0:	800b883a 	mov	r5,r16
   22fe4:	a809883a 	mov	r4,r21
   22fe8:	00248b40 	call	248b4 <_fflush_r>
   22fec:	103fb926 	beq	r2,zero,22ed4 <__alt_data_end+0xfffe9ed4>
   22ff0:	003f6506 	br	22d88 <__alt_data_end+0xfffe9d88>
   22ff4:	a809883a 	mov	r4,r21
   22ff8:	0023c5c0 	call	23c5c <_realloc_r>
   22ffc:	102f883a 	mov	r23,r2
   23000:	103fee1e 	bne	r2,zero,22fbc <__alt_data_end+0xfffe9fbc>
   23004:	81400417 	ldw	r5,16(r16)
   23008:	a809883a 	mov	r4,r21
   2300c:	0024e140 	call	24e14 <_free_r>
   23010:	8080030b 	ldhu	r2,12(r16)
   23014:	00ffdfc4 	movi	r3,-129
   23018:	1884703a 	and	r2,r3,r2
   2301c:	00c00304 	movi	r3,12
   23020:	a8c00015 	stw	r3,0(r21)
   23024:	003f5906 	br	22d8c <__alt_data_end+0xfffe9d8c>
   23028:	94c00044 	addi	r19,r18,1
   2302c:	02000044 	movi	r8,1
   23030:	003f6006 	br	22db4 <__alt_data_end+0xfffe9db4>
   23034:	00bfffc4 	movi	r2,-1
   23038:	003f0006 	br	22c3c <__alt_data_end+0xfffe9c3c>
   2303c:	00800304 	movi	r2,12
   23040:	a8800015 	stw	r2,0(r21)
   23044:	8080030b 	ldhu	r2,12(r16)
   23048:	003f5006 	br	22d8c <__alt_data_end+0xfffe9d8c>

0002304c <_malloc_r>:
   2304c:	defff504 	addi	sp,sp,-44
   23050:	dc800315 	stw	r18,12(sp)
   23054:	dfc00a15 	stw	ra,40(sp)
   23058:	df000915 	stw	fp,36(sp)
   2305c:	ddc00815 	stw	r23,32(sp)
   23060:	dd800715 	stw	r22,28(sp)
   23064:	dd400615 	stw	r21,24(sp)
   23068:	dd000515 	stw	r20,20(sp)
   2306c:	dcc00415 	stw	r19,16(sp)
   23070:	dc400215 	stw	r17,8(sp)
   23074:	dc000115 	stw	r16,4(sp)
   23078:	288002c4 	addi	r2,r5,11
   2307c:	00c00584 	movi	r3,22
   23080:	2025883a 	mov	r18,r4
   23084:	18807f2e 	bgeu	r3,r2,23284 <_malloc_r+0x238>
   23088:	047ffe04 	movi	r17,-8
   2308c:	1462703a 	and	r17,r2,r17
   23090:	8800a316 	blt	r17,zero,23320 <_malloc_r+0x2d4>
   23094:	8940a236 	bltu	r17,r5,23320 <_malloc_r+0x2d4>
   23098:	0025d1c0 	call	25d1c <__malloc_lock>
   2309c:	00807dc4 	movi	r2,503
   230a0:	1441e92e 	bgeu	r2,r17,23848 <_malloc_r+0x7fc>
   230a4:	8804d27a 	srli	r2,r17,9
   230a8:	1000a126 	beq	r2,zero,23330 <_malloc_r+0x2e4>
   230ac:	00c00104 	movi	r3,4
   230b0:	18811e36 	bltu	r3,r2,2352c <_malloc_r+0x4e0>
   230b4:	8804d1ba 	srli	r2,r17,6
   230b8:	12000e44 	addi	r8,r2,57
   230bc:	11c00e04 	addi	r7,r2,56
   230c0:	4209883a 	add	r4,r8,r8
   230c4:	04c000b4 	movhi	r19,2
   230c8:	2109883a 	add	r4,r4,r4
   230cc:	9cddca04 	addi	r19,r19,30504
   230d0:	2109883a 	add	r4,r4,r4
   230d4:	9909883a 	add	r4,r19,r4
   230d8:	24000117 	ldw	r16,4(r4)
   230dc:	213ffe04 	addi	r4,r4,-8
   230e0:	24009726 	beq	r4,r16,23340 <_malloc_r+0x2f4>
   230e4:	80800117 	ldw	r2,4(r16)
   230e8:	01bfff04 	movi	r6,-4
   230ec:	014003c4 	movi	r5,15
   230f0:	1184703a 	and	r2,r2,r6
   230f4:	1447c83a 	sub	r3,r2,r17
   230f8:	28c00716 	blt	r5,r3,23118 <_malloc_r+0xcc>
   230fc:	1800920e 	bge	r3,zero,23348 <_malloc_r+0x2fc>
   23100:	84000317 	ldw	r16,12(r16)
   23104:	24008e26 	beq	r4,r16,23340 <_malloc_r+0x2f4>
   23108:	80800117 	ldw	r2,4(r16)
   2310c:	1184703a 	and	r2,r2,r6
   23110:	1447c83a 	sub	r3,r2,r17
   23114:	28fff90e 	bge	r5,r3,230fc <__alt_data_end+0xfffea0fc>
   23118:	3809883a 	mov	r4,r7
   2311c:	018000b4 	movhi	r6,2
   23120:	9c000417 	ldw	r16,16(r19)
   23124:	319dca04 	addi	r6,r6,30504
   23128:	32000204 	addi	r8,r6,8
   2312c:	82013426 	beq	r16,r8,23600 <_malloc_r+0x5b4>
   23130:	80c00117 	ldw	r3,4(r16)
   23134:	00bfff04 	movi	r2,-4
   23138:	188e703a 	and	r7,r3,r2
   2313c:	3c45c83a 	sub	r2,r7,r17
   23140:	00c003c4 	movi	r3,15
   23144:	18811f16 	blt	r3,r2,235c4 <_malloc_r+0x578>
   23148:	32000515 	stw	r8,20(r6)
   2314c:	32000415 	stw	r8,16(r6)
   23150:	10007f0e 	bge	r2,zero,23350 <_malloc_r+0x304>
   23154:	00807fc4 	movi	r2,511
   23158:	11c0fd36 	bltu	r2,r7,23550 <_malloc_r+0x504>
   2315c:	3806d0fa 	srli	r3,r7,3
   23160:	01c00044 	movi	r7,1
   23164:	30800117 	ldw	r2,4(r6)
   23168:	19400044 	addi	r5,r3,1
   2316c:	294b883a 	add	r5,r5,r5
   23170:	1807d0ba 	srai	r3,r3,2
   23174:	294b883a 	add	r5,r5,r5
   23178:	294b883a 	add	r5,r5,r5
   2317c:	298b883a 	add	r5,r5,r6
   23180:	38c6983a 	sll	r3,r7,r3
   23184:	29c00017 	ldw	r7,0(r5)
   23188:	2a7ffe04 	addi	r9,r5,-8
   2318c:	1886b03a 	or	r3,r3,r2
   23190:	82400315 	stw	r9,12(r16)
   23194:	81c00215 	stw	r7,8(r16)
   23198:	30c00115 	stw	r3,4(r6)
   2319c:	2c000015 	stw	r16,0(r5)
   231a0:	3c000315 	stw	r16,12(r7)
   231a4:	2005d0ba 	srai	r2,r4,2
   231a8:	01400044 	movi	r5,1
   231ac:	288a983a 	sll	r5,r5,r2
   231b0:	19406f36 	bltu	r3,r5,23370 <_malloc_r+0x324>
   231b4:	28c4703a 	and	r2,r5,r3
   231b8:	10000a1e 	bne	r2,zero,231e4 <_malloc_r+0x198>
   231bc:	00bfff04 	movi	r2,-4
   231c0:	294b883a 	add	r5,r5,r5
   231c4:	2088703a 	and	r4,r4,r2
   231c8:	28c4703a 	and	r2,r5,r3
   231cc:	21000104 	addi	r4,r4,4
   231d0:	1000041e 	bne	r2,zero,231e4 <_malloc_r+0x198>
   231d4:	294b883a 	add	r5,r5,r5
   231d8:	28c4703a 	and	r2,r5,r3
   231dc:	21000104 	addi	r4,r4,4
   231e0:	103ffc26 	beq	r2,zero,231d4 <__alt_data_end+0xfffea1d4>
   231e4:	02bfff04 	movi	r10,-4
   231e8:	024003c4 	movi	r9,15
   231ec:	21800044 	addi	r6,r4,1
   231f0:	318d883a 	add	r6,r6,r6
   231f4:	318d883a 	add	r6,r6,r6
   231f8:	318d883a 	add	r6,r6,r6
   231fc:	998d883a 	add	r6,r19,r6
   23200:	333ffe04 	addi	r12,r6,-8
   23204:	2017883a 	mov	r11,r4
   23208:	31800104 	addi	r6,r6,4
   2320c:	34000017 	ldw	r16,0(r6)
   23210:	31fffd04 	addi	r7,r6,-12
   23214:	81c0041e 	bne	r16,r7,23228 <_malloc_r+0x1dc>
   23218:	0000fb06 	br	23608 <_malloc_r+0x5bc>
   2321c:	1801030e 	bge	r3,zero,2362c <_malloc_r+0x5e0>
   23220:	84000317 	ldw	r16,12(r16)
   23224:	81c0f826 	beq	r16,r7,23608 <_malloc_r+0x5bc>
   23228:	80800117 	ldw	r2,4(r16)
   2322c:	1284703a 	and	r2,r2,r10
   23230:	1447c83a 	sub	r3,r2,r17
   23234:	48fff90e 	bge	r9,r3,2321c <__alt_data_end+0xfffea21c>
   23238:	80800317 	ldw	r2,12(r16)
   2323c:	81000217 	ldw	r4,8(r16)
   23240:	89400054 	ori	r5,r17,1
   23244:	81400115 	stw	r5,4(r16)
   23248:	20800315 	stw	r2,12(r4)
   2324c:	11000215 	stw	r4,8(r2)
   23250:	8463883a 	add	r17,r16,r17
   23254:	9c400515 	stw	r17,20(r19)
   23258:	9c400415 	stw	r17,16(r19)
   2325c:	18800054 	ori	r2,r3,1
   23260:	88800115 	stw	r2,4(r17)
   23264:	8a000315 	stw	r8,12(r17)
   23268:	8a000215 	stw	r8,8(r17)
   2326c:	88e3883a 	add	r17,r17,r3
   23270:	88c00015 	stw	r3,0(r17)
   23274:	9009883a 	mov	r4,r18
   23278:	0025d400 	call	25d40 <__malloc_unlock>
   2327c:	80800204 	addi	r2,r16,8
   23280:	00001b06 	br	232f0 <_malloc_r+0x2a4>
   23284:	04400404 	movi	r17,16
   23288:	89402536 	bltu	r17,r5,23320 <_malloc_r+0x2d4>
   2328c:	0025d1c0 	call	25d1c <__malloc_lock>
   23290:	00800184 	movi	r2,6
   23294:	01000084 	movi	r4,2
   23298:	04c000b4 	movhi	r19,2
   2329c:	1085883a 	add	r2,r2,r2
   232a0:	9cddca04 	addi	r19,r19,30504
   232a4:	1085883a 	add	r2,r2,r2
   232a8:	9885883a 	add	r2,r19,r2
   232ac:	14000117 	ldw	r16,4(r2)
   232b0:	10fffe04 	addi	r3,r2,-8
   232b4:	80c0d926 	beq	r16,r3,2361c <_malloc_r+0x5d0>
   232b8:	80c00117 	ldw	r3,4(r16)
   232bc:	81000317 	ldw	r4,12(r16)
   232c0:	00bfff04 	movi	r2,-4
   232c4:	1884703a 	and	r2,r3,r2
   232c8:	81400217 	ldw	r5,8(r16)
   232cc:	8085883a 	add	r2,r16,r2
   232d0:	10c00117 	ldw	r3,4(r2)
   232d4:	29000315 	stw	r4,12(r5)
   232d8:	21400215 	stw	r5,8(r4)
   232dc:	18c00054 	ori	r3,r3,1
   232e0:	10c00115 	stw	r3,4(r2)
   232e4:	9009883a 	mov	r4,r18
   232e8:	0025d400 	call	25d40 <__malloc_unlock>
   232ec:	80800204 	addi	r2,r16,8
   232f0:	dfc00a17 	ldw	ra,40(sp)
   232f4:	df000917 	ldw	fp,36(sp)
   232f8:	ddc00817 	ldw	r23,32(sp)
   232fc:	dd800717 	ldw	r22,28(sp)
   23300:	dd400617 	ldw	r21,24(sp)
   23304:	dd000517 	ldw	r20,20(sp)
   23308:	dcc00417 	ldw	r19,16(sp)
   2330c:	dc800317 	ldw	r18,12(sp)
   23310:	dc400217 	ldw	r17,8(sp)
   23314:	dc000117 	ldw	r16,4(sp)
   23318:	dec00b04 	addi	sp,sp,44
   2331c:	f800283a 	ret
   23320:	00800304 	movi	r2,12
   23324:	90800015 	stw	r2,0(r18)
   23328:	0005883a 	mov	r2,zero
   2332c:	003ff006 	br	232f0 <__alt_data_end+0xfffea2f0>
   23330:	01002004 	movi	r4,128
   23334:	02001004 	movi	r8,64
   23338:	01c00fc4 	movi	r7,63
   2333c:	003f6106 	br	230c4 <__alt_data_end+0xfffea0c4>
   23340:	4009883a 	mov	r4,r8
   23344:	003f7506 	br	2311c <__alt_data_end+0xfffea11c>
   23348:	81000317 	ldw	r4,12(r16)
   2334c:	003fde06 	br	232c8 <__alt_data_end+0xfffea2c8>
   23350:	81c5883a 	add	r2,r16,r7
   23354:	11400117 	ldw	r5,4(r2)
   23358:	9009883a 	mov	r4,r18
   2335c:	29400054 	ori	r5,r5,1
   23360:	11400115 	stw	r5,4(r2)
   23364:	0025d400 	call	25d40 <__malloc_unlock>
   23368:	80800204 	addi	r2,r16,8
   2336c:	003fe006 	br	232f0 <__alt_data_end+0xfffea2f0>
   23370:	9c000217 	ldw	r16,8(r19)
   23374:	00bfff04 	movi	r2,-4
   23378:	85800117 	ldw	r22,4(r16)
   2337c:	b0ac703a 	and	r22,r22,r2
   23380:	b4400336 	bltu	r22,r17,23390 <_malloc_r+0x344>
   23384:	b445c83a 	sub	r2,r22,r17
   23388:	00c003c4 	movi	r3,15
   2338c:	18805d16 	blt	r3,r2,23504 <_malloc_r+0x4b8>
   23390:	05c000b4 	movhi	r23,2
   23394:	008000f4 	movhi	r2,3
   23398:	10a58104 	addi	r2,r2,-27132
   2339c:	bdded804 	addi	r23,r23,31584
   233a0:	15400017 	ldw	r21,0(r2)
   233a4:	b8c00017 	ldw	r3,0(r23)
   233a8:	00bfffc4 	movi	r2,-1
   233ac:	858d883a 	add	r6,r16,r22
   233b0:	8d6b883a 	add	r21,r17,r21
   233b4:	1880ea26 	beq	r3,r2,23760 <_malloc_r+0x714>
   233b8:	ad4403c4 	addi	r21,r21,4111
   233bc:	00bc0004 	movi	r2,-4096
   233c0:	a8aa703a 	and	r21,r21,r2
   233c4:	a80b883a 	mov	r5,r21
   233c8:	9009883a 	mov	r4,r18
   233cc:	d9800015 	stw	r6,0(sp)
   233d0:	00241c00 	call	241c0 <_sbrk_r>
   233d4:	1029883a 	mov	r20,r2
   233d8:	00bfffc4 	movi	r2,-1
   233dc:	d9800017 	ldw	r6,0(sp)
   233e0:	a080e826 	beq	r20,r2,23784 <_malloc_r+0x738>
   233e4:	a180a636 	bltu	r20,r6,23680 <_malloc_r+0x634>
   233e8:	070000f4 	movhi	fp,3
   233ec:	e7258204 	addi	fp,fp,-27128
   233f0:	e0800017 	ldw	r2,0(fp)
   233f4:	a887883a 	add	r3,r21,r2
   233f8:	e0c00015 	stw	r3,0(fp)
   233fc:	3500e626 	beq	r6,r20,23798 <_malloc_r+0x74c>
   23400:	b9000017 	ldw	r4,0(r23)
   23404:	00bfffc4 	movi	r2,-1
   23408:	2080ee26 	beq	r4,r2,237c4 <_malloc_r+0x778>
   2340c:	a185c83a 	sub	r2,r20,r6
   23410:	10c5883a 	add	r2,r2,r3
   23414:	e0800015 	stw	r2,0(fp)
   23418:	a0c001cc 	andi	r3,r20,7
   2341c:	1800bc26 	beq	r3,zero,23710 <_malloc_r+0x6c4>
   23420:	a0e9c83a 	sub	r20,r20,r3
   23424:	00840204 	movi	r2,4104
   23428:	a5000204 	addi	r20,r20,8
   2342c:	10c7c83a 	sub	r3,r2,r3
   23430:	a545883a 	add	r2,r20,r21
   23434:	1083ffcc 	andi	r2,r2,4095
   23438:	18abc83a 	sub	r21,r3,r2
   2343c:	a80b883a 	mov	r5,r21
   23440:	9009883a 	mov	r4,r18
   23444:	00241c00 	call	241c0 <_sbrk_r>
   23448:	00ffffc4 	movi	r3,-1
   2344c:	10c0e126 	beq	r2,r3,237d4 <_malloc_r+0x788>
   23450:	1505c83a 	sub	r2,r2,r20
   23454:	1545883a 	add	r2,r2,r21
   23458:	10800054 	ori	r2,r2,1
   2345c:	e0c00017 	ldw	r3,0(fp)
   23460:	9d000215 	stw	r20,8(r19)
   23464:	a0800115 	stw	r2,4(r20)
   23468:	a8c7883a 	add	r3,r21,r3
   2346c:	e0c00015 	stw	r3,0(fp)
   23470:	84c00e26 	beq	r16,r19,234ac <_malloc_r+0x460>
   23474:	018003c4 	movi	r6,15
   23478:	3580a72e 	bgeu	r6,r22,23718 <_malloc_r+0x6cc>
   2347c:	81400117 	ldw	r5,4(r16)
   23480:	013ffe04 	movi	r4,-8
   23484:	b0bffd04 	addi	r2,r22,-12
   23488:	1104703a 	and	r2,r2,r4
   2348c:	2900004c 	andi	r4,r5,1
   23490:	2088b03a 	or	r4,r4,r2
   23494:	81000115 	stw	r4,4(r16)
   23498:	01400144 	movi	r5,5
   2349c:	8089883a 	add	r4,r16,r2
   234a0:	21400115 	stw	r5,4(r4)
   234a4:	21400215 	stw	r5,8(r4)
   234a8:	3080cd36 	bltu	r6,r2,237e0 <_malloc_r+0x794>
   234ac:	008000f4 	movhi	r2,3
   234b0:	10a58004 	addi	r2,r2,-27136
   234b4:	11000017 	ldw	r4,0(r2)
   234b8:	20c0012e 	bgeu	r4,r3,234c0 <_malloc_r+0x474>
   234bc:	10c00015 	stw	r3,0(r2)
   234c0:	008000f4 	movhi	r2,3
   234c4:	10a57f04 	addi	r2,r2,-27140
   234c8:	11000017 	ldw	r4,0(r2)
   234cc:	9c000217 	ldw	r16,8(r19)
   234d0:	20c0012e 	bgeu	r4,r3,234d8 <_malloc_r+0x48c>
   234d4:	10c00015 	stw	r3,0(r2)
   234d8:	80c00117 	ldw	r3,4(r16)
   234dc:	00bfff04 	movi	r2,-4
   234e0:	1886703a 	and	r3,r3,r2
   234e4:	1c45c83a 	sub	r2,r3,r17
   234e8:	1c400236 	bltu	r3,r17,234f4 <_malloc_r+0x4a8>
   234ec:	00c003c4 	movi	r3,15
   234f0:	18800416 	blt	r3,r2,23504 <_malloc_r+0x4b8>
   234f4:	9009883a 	mov	r4,r18
   234f8:	0025d400 	call	25d40 <__malloc_unlock>
   234fc:	0005883a 	mov	r2,zero
   23500:	003f7b06 	br	232f0 <__alt_data_end+0xfffea2f0>
   23504:	88c00054 	ori	r3,r17,1
   23508:	80c00115 	stw	r3,4(r16)
   2350c:	8463883a 	add	r17,r16,r17
   23510:	10800054 	ori	r2,r2,1
   23514:	9c400215 	stw	r17,8(r19)
   23518:	88800115 	stw	r2,4(r17)
   2351c:	9009883a 	mov	r4,r18
   23520:	0025d400 	call	25d40 <__malloc_unlock>
   23524:	80800204 	addi	r2,r16,8
   23528:	003f7106 	br	232f0 <__alt_data_end+0xfffea2f0>
   2352c:	00c00504 	movi	r3,20
   23530:	18804a2e 	bgeu	r3,r2,2365c <_malloc_r+0x610>
   23534:	00c01504 	movi	r3,84
   23538:	18806e36 	bltu	r3,r2,236f4 <_malloc_r+0x6a8>
   2353c:	8804d33a 	srli	r2,r17,12
   23540:	12001bc4 	addi	r8,r2,111
   23544:	11c01b84 	addi	r7,r2,110
   23548:	4209883a 	add	r4,r8,r8
   2354c:	003edd06 	br	230c4 <__alt_data_end+0xfffea0c4>
   23550:	3804d27a 	srli	r2,r7,9
   23554:	00c00104 	movi	r3,4
   23558:	1880442e 	bgeu	r3,r2,2366c <_malloc_r+0x620>
   2355c:	00c00504 	movi	r3,20
   23560:	18808136 	bltu	r3,r2,23768 <_malloc_r+0x71c>
   23564:	11401704 	addi	r5,r2,92
   23568:	10c016c4 	addi	r3,r2,91
   2356c:	294b883a 	add	r5,r5,r5
   23570:	294b883a 	add	r5,r5,r5
   23574:	294b883a 	add	r5,r5,r5
   23578:	994b883a 	add	r5,r19,r5
   2357c:	28800017 	ldw	r2,0(r5)
   23580:	018000b4 	movhi	r6,2
   23584:	297ffe04 	addi	r5,r5,-8
   23588:	319dca04 	addi	r6,r6,30504
   2358c:	28806526 	beq	r5,r2,23724 <_malloc_r+0x6d8>
   23590:	01bfff04 	movi	r6,-4
   23594:	10c00117 	ldw	r3,4(r2)
   23598:	1986703a 	and	r3,r3,r6
   2359c:	38c0022e 	bgeu	r7,r3,235a8 <_malloc_r+0x55c>
   235a0:	10800217 	ldw	r2,8(r2)
   235a4:	28bffb1e 	bne	r5,r2,23594 <__alt_data_end+0xfffea594>
   235a8:	11400317 	ldw	r5,12(r2)
   235ac:	98c00117 	ldw	r3,4(r19)
   235b0:	81400315 	stw	r5,12(r16)
   235b4:	80800215 	stw	r2,8(r16)
   235b8:	2c000215 	stw	r16,8(r5)
   235bc:	14000315 	stw	r16,12(r2)
   235c0:	003ef806 	br	231a4 <__alt_data_end+0xfffea1a4>
   235c4:	88c00054 	ori	r3,r17,1
   235c8:	80c00115 	stw	r3,4(r16)
   235cc:	8463883a 	add	r17,r16,r17
   235d0:	34400515 	stw	r17,20(r6)
   235d4:	34400415 	stw	r17,16(r6)
   235d8:	10c00054 	ori	r3,r2,1
   235dc:	8a000315 	stw	r8,12(r17)
   235e0:	8a000215 	stw	r8,8(r17)
   235e4:	88c00115 	stw	r3,4(r17)
   235e8:	88a3883a 	add	r17,r17,r2
   235ec:	88800015 	stw	r2,0(r17)
   235f0:	9009883a 	mov	r4,r18
   235f4:	0025d400 	call	25d40 <__malloc_unlock>
   235f8:	80800204 	addi	r2,r16,8
   235fc:	003f3c06 	br	232f0 <__alt_data_end+0xfffea2f0>
   23600:	30c00117 	ldw	r3,4(r6)
   23604:	003ee706 	br	231a4 <__alt_data_end+0xfffea1a4>
   23608:	5ac00044 	addi	r11,r11,1
   2360c:	588000cc 	andi	r2,r11,3
   23610:	31800204 	addi	r6,r6,8
   23614:	103efd1e 	bne	r2,zero,2320c <__alt_data_end+0xfffea20c>
   23618:	00002406 	br	236ac <_malloc_r+0x660>
   2361c:	14000317 	ldw	r16,12(r2)
   23620:	143f251e 	bne	r2,r16,232b8 <__alt_data_end+0xfffea2b8>
   23624:	21000084 	addi	r4,r4,2
   23628:	003ebc06 	br	2311c <__alt_data_end+0xfffea11c>
   2362c:	8085883a 	add	r2,r16,r2
   23630:	10c00117 	ldw	r3,4(r2)
   23634:	81000317 	ldw	r4,12(r16)
   23638:	81400217 	ldw	r5,8(r16)
   2363c:	18c00054 	ori	r3,r3,1
   23640:	10c00115 	stw	r3,4(r2)
   23644:	29000315 	stw	r4,12(r5)
   23648:	21400215 	stw	r5,8(r4)
   2364c:	9009883a 	mov	r4,r18
   23650:	0025d400 	call	25d40 <__malloc_unlock>
   23654:	80800204 	addi	r2,r16,8
   23658:	003f2506 	br	232f0 <__alt_data_end+0xfffea2f0>
   2365c:	12001704 	addi	r8,r2,92
   23660:	11c016c4 	addi	r7,r2,91
   23664:	4209883a 	add	r4,r8,r8
   23668:	003e9606 	br	230c4 <__alt_data_end+0xfffea0c4>
   2366c:	3804d1ba 	srli	r2,r7,6
   23670:	11400e44 	addi	r5,r2,57
   23674:	10c00e04 	addi	r3,r2,56
   23678:	294b883a 	add	r5,r5,r5
   2367c:	003fbc06 	br	23570 <__alt_data_end+0xfffea570>
   23680:	84ff5926 	beq	r16,r19,233e8 <__alt_data_end+0xfffea3e8>
   23684:	008000b4 	movhi	r2,2
   23688:	109dca04 	addi	r2,r2,30504
   2368c:	14000217 	ldw	r16,8(r2)
   23690:	00bfff04 	movi	r2,-4
   23694:	80c00117 	ldw	r3,4(r16)
   23698:	1886703a 	and	r3,r3,r2
   2369c:	003f9106 	br	234e4 <__alt_data_end+0xfffea4e4>
   236a0:	60800217 	ldw	r2,8(r12)
   236a4:	213fffc4 	addi	r4,r4,-1
   236a8:	1300651e 	bne	r2,r12,23840 <_malloc_r+0x7f4>
   236ac:	208000cc 	andi	r2,r4,3
   236b0:	633ffe04 	addi	r12,r12,-8
   236b4:	103ffa1e 	bne	r2,zero,236a0 <__alt_data_end+0xfffea6a0>
   236b8:	98800117 	ldw	r2,4(r19)
   236bc:	0146303a 	nor	r3,zero,r5
   236c0:	1884703a 	and	r2,r3,r2
   236c4:	98800115 	stw	r2,4(r19)
   236c8:	294b883a 	add	r5,r5,r5
   236cc:	117f2836 	bltu	r2,r5,23370 <__alt_data_end+0xfffea370>
   236d0:	283f2726 	beq	r5,zero,23370 <__alt_data_end+0xfffea370>
   236d4:	2886703a 	and	r3,r5,r2
   236d8:	5809883a 	mov	r4,r11
   236dc:	183ec31e 	bne	r3,zero,231ec <__alt_data_end+0xfffea1ec>
   236e0:	294b883a 	add	r5,r5,r5
   236e4:	2886703a 	and	r3,r5,r2
   236e8:	21000104 	addi	r4,r4,4
   236ec:	183ffc26 	beq	r3,zero,236e0 <__alt_data_end+0xfffea6e0>
   236f0:	003ebe06 	br	231ec <__alt_data_end+0xfffea1ec>
   236f4:	00c05504 	movi	r3,340
   236f8:	18801236 	bltu	r3,r2,23744 <_malloc_r+0x6f8>
   236fc:	8804d3fa 	srli	r2,r17,15
   23700:	12001e04 	addi	r8,r2,120
   23704:	11c01dc4 	addi	r7,r2,119
   23708:	4209883a 	add	r4,r8,r8
   2370c:	003e6d06 	br	230c4 <__alt_data_end+0xfffea0c4>
   23710:	00c40004 	movi	r3,4096
   23714:	003f4606 	br	23430 <__alt_data_end+0xfffea430>
   23718:	00800044 	movi	r2,1
   2371c:	a0800115 	stw	r2,4(r20)
   23720:	003f7406 	br	234f4 <__alt_data_end+0xfffea4f4>
   23724:	1805d0ba 	srai	r2,r3,2
   23728:	01c00044 	movi	r7,1
   2372c:	30c00117 	ldw	r3,4(r6)
   23730:	388e983a 	sll	r7,r7,r2
   23734:	2805883a 	mov	r2,r5
   23738:	38c6b03a 	or	r3,r7,r3
   2373c:	30c00115 	stw	r3,4(r6)
   23740:	003f9b06 	br	235b0 <__alt_data_end+0xfffea5b0>
   23744:	00c15504 	movi	r3,1364
   23748:	18801a36 	bltu	r3,r2,237b4 <_malloc_r+0x768>
   2374c:	8804d4ba 	srli	r2,r17,18
   23750:	12001f44 	addi	r8,r2,125
   23754:	11c01f04 	addi	r7,r2,124
   23758:	4209883a 	add	r4,r8,r8
   2375c:	003e5906 	br	230c4 <__alt_data_end+0xfffea0c4>
   23760:	ad400404 	addi	r21,r21,16
   23764:	003f1706 	br	233c4 <__alt_data_end+0xfffea3c4>
   23768:	00c01504 	movi	r3,84
   2376c:	18802336 	bltu	r3,r2,237fc <_malloc_r+0x7b0>
   23770:	3804d33a 	srli	r2,r7,12
   23774:	11401bc4 	addi	r5,r2,111
   23778:	10c01b84 	addi	r3,r2,110
   2377c:	294b883a 	add	r5,r5,r5
   23780:	003f7b06 	br	23570 <__alt_data_end+0xfffea570>
   23784:	9c000217 	ldw	r16,8(r19)
   23788:	00bfff04 	movi	r2,-4
   2378c:	80c00117 	ldw	r3,4(r16)
   23790:	1886703a 	and	r3,r3,r2
   23794:	003f5306 	br	234e4 <__alt_data_end+0xfffea4e4>
   23798:	3083ffcc 	andi	r2,r6,4095
   2379c:	103f181e 	bne	r2,zero,23400 <__alt_data_end+0xfffea400>
   237a0:	99000217 	ldw	r4,8(r19)
   237a4:	b545883a 	add	r2,r22,r21
   237a8:	10800054 	ori	r2,r2,1
   237ac:	20800115 	stw	r2,4(r4)
   237b0:	003f3e06 	br	234ac <__alt_data_end+0xfffea4ac>
   237b4:	01003f84 	movi	r4,254
   237b8:	02001fc4 	movi	r8,127
   237bc:	01c01f84 	movi	r7,126
   237c0:	003e4006 	br	230c4 <__alt_data_end+0xfffea0c4>
   237c4:	008000b4 	movhi	r2,2
   237c8:	109ed804 	addi	r2,r2,31584
   237cc:	15000015 	stw	r20,0(r2)
   237d0:	003f1106 	br	23418 <__alt_data_end+0xfffea418>
   237d4:	00800044 	movi	r2,1
   237d8:	002b883a 	mov	r21,zero
   237dc:	003f1f06 	br	2345c <__alt_data_end+0xfffea45c>
   237e0:	81400204 	addi	r5,r16,8
   237e4:	9009883a 	mov	r4,r18
   237e8:	0024e140 	call	24e14 <_free_r>
   237ec:	008000f4 	movhi	r2,3
   237f0:	10a58204 	addi	r2,r2,-27128
   237f4:	10c00017 	ldw	r3,0(r2)
   237f8:	003f2c06 	br	234ac <__alt_data_end+0xfffea4ac>
   237fc:	00c05504 	movi	r3,340
   23800:	18800536 	bltu	r3,r2,23818 <_malloc_r+0x7cc>
   23804:	3804d3fa 	srli	r2,r7,15
   23808:	11401e04 	addi	r5,r2,120
   2380c:	10c01dc4 	addi	r3,r2,119
   23810:	294b883a 	add	r5,r5,r5
   23814:	003f5606 	br	23570 <__alt_data_end+0xfffea570>
   23818:	00c15504 	movi	r3,1364
   2381c:	18800536 	bltu	r3,r2,23834 <_malloc_r+0x7e8>
   23820:	3804d4ba 	srli	r2,r7,18
   23824:	11401f44 	addi	r5,r2,125
   23828:	10c01f04 	addi	r3,r2,124
   2382c:	294b883a 	add	r5,r5,r5
   23830:	003f4f06 	br	23570 <__alt_data_end+0xfffea570>
   23834:	01403f84 	movi	r5,254
   23838:	00c01f84 	movi	r3,126
   2383c:	003f4c06 	br	23570 <__alt_data_end+0xfffea570>
   23840:	98800117 	ldw	r2,4(r19)
   23844:	003fa006 	br	236c8 <__alt_data_end+0xfffea6c8>
   23848:	8808d0fa 	srli	r4,r17,3
   2384c:	20800044 	addi	r2,r4,1
   23850:	1085883a 	add	r2,r2,r2
   23854:	003e9006 	br	23298 <__alt_data_end+0xfffea298>

00023858 <memchr>:
   23858:	208000cc 	andi	r2,r4,3
   2385c:	280f883a 	mov	r7,r5
   23860:	10003426 	beq	r2,zero,23934 <memchr+0xdc>
   23864:	30bfffc4 	addi	r2,r6,-1
   23868:	30001a26 	beq	r6,zero,238d4 <memchr+0x7c>
   2386c:	20c00003 	ldbu	r3,0(r4)
   23870:	29803fcc 	andi	r6,r5,255
   23874:	30c0051e 	bne	r6,r3,2388c <memchr+0x34>
   23878:	00001806 	br	238dc <memchr+0x84>
   2387c:	10001526 	beq	r2,zero,238d4 <memchr+0x7c>
   23880:	20c00003 	ldbu	r3,0(r4)
   23884:	10bfffc4 	addi	r2,r2,-1
   23888:	30c01426 	beq	r6,r3,238dc <memchr+0x84>
   2388c:	21000044 	addi	r4,r4,1
   23890:	20c000cc 	andi	r3,r4,3
   23894:	183ff91e 	bne	r3,zero,2387c <__alt_data_end+0xfffea87c>
   23898:	020000c4 	movi	r8,3
   2389c:	40801136 	bltu	r8,r2,238e4 <memchr+0x8c>
   238a0:	10000c26 	beq	r2,zero,238d4 <memchr+0x7c>
   238a4:	20c00003 	ldbu	r3,0(r4)
   238a8:	29403fcc 	andi	r5,r5,255
   238ac:	28c00b26 	beq	r5,r3,238dc <memchr+0x84>
   238b0:	20c00044 	addi	r3,r4,1
   238b4:	39803fcc 	andi	r6,r7,255
   238b8:	2089883a 	add	r4,r4,r2
   238bc:	00000306 	br	238cc <memchr+0x74>
   238c0:	18c00044 	addi	r3,r3,1
   238c4:	197fffc3 	ldbu	r5,-1(r3)
   238c8:	31400526 	beq	r6,r5,238e0 <memchr+0x88>
   238cc:	1805883a 	mov	r2,r3
   238d0:	20fffb1e 	bne	r4,r3,238c0 <__alt_data_end+0xfffea8c0>
   238d4:	0005883a 	mov	r2,zero
   238d8:	f800283a 	ret
   238dc:	2005883a 	mov	r2,r4
   238e0:	f800283a 	ret
   238e4:	28c03fcc 	andi	r3,r5,255
   238e8:	1812923a 	slli	r9,r3,8
   238ec:	02ffbff4 	movhi	r11,65279
   238f0:	02a02074 	movhi	r10,32897
   238f4:	48d2b03a 	or	r9,r9,r3
   238f8:	4806943a 	slli	r3,r9,16
   238fc:	5affbfc4 	addi	r11,r11,-257
   23900:	52a02004 	addi	r10,r10,-32640
   23904:	48d2b03a 	or	r9,r9,r3
   23908:	20c00017 	ldw	r3,0(r4)
   2390c:	48c6f03a 	xor	r3,r9,r3
   23910:	1acd883a 	add	r6,r3,r11
   23914:	00c6303a 	nor	r3,zero,r3
   23918:	30c6703a 	and	r3,r6,r3
   2391c:	1a86703a 	and	r3,r3,r10
   23920:	183fe01e 	bne	r3,zero,238a4 <__alt_data_end+0xfffea8a4>
   23924:	10bfff04 	addi	r2,r2,-4
   23928:	21000104 	addi	r4,r4,4
   2392c:	40bff636 	bltu	r8,r2,23908 <__alt_data_end+0xfffea908>
   23930:	003fdb06 	br	238a0 <__alt_data_end+0xfffea8a0>
   23934:	3005883a 	mov	r2,r6
   23938:	003fd706 	br	23898 <__alt_data_end+0xfffea898>

0002393c <memcmp>:
   2393c:	01c000c4 	movi	r7,3
   23940:	3980192e 	bgeu	r7,r6,239a8 <memcmp+0x6c>
   23944:	2144b03a 	or	r2,r4,r5
   23948:	11c4703a 	and	r2,r2,r7
   2394c:	10000f26 	beq	r2,zero,2398c <memcmp+0x50>
   23950:	20800003 	ldbu	r2,0(r4)
   23954:	28c00003 	ldbu	r3,0(r5)
   23958:	10c0151e 	bne	r2,r3,239b0 <memcmp+0x74>
   2395c:	31bfff84 	addi	r6,r6,-2
   23960:	01ffffc4 	movi	r7,-1
   23964:	00000406 	br	23978 <memcmp+0x3c>
   23968:	20800003 	ldbu	r2,0(r4)
   2396c:	28c00003 	ldbu	r3,0(r5)
   23970:	31bfffc4 	addi	r6,r6,-1
   23974:	10c00e1e 	bne	r2,r3,239b0 <memcmp+0x74>
   23978:	21000044 	addi	r4,r4,1
   2397c:	29400044 	addi	r5,r5,1
   23980:	31fff91e 	bne	r6,r7,23968 <__alt_data_end+0xfffea968>
   23984:	0005883a 	mov	r2,zero
   23988:	f800283a 	ret
   2398c:	20c00017 	ldw	r3,0(r4)
   23990:	28800017 	ldw	r2,0(r5)
   23994:	18bfee1e 	bne	r3,r2,23950 <__alt_data_end+0xfffea950>
   23998:	31bfff04 	addi	r6,r6,-4
   2399c:	21000104 	addi	r4,r4,4
   239a0:	29400104 	addi	r5,r5,4
   239a4:	39bff936 	bltu	r7,r6,2398c <__alt_data_end+0xfffea98c>
   239a8:	303fe91e 	bne	r6,zero,23950 <__alt_data_end+0xfffea950>
   239ac:	003ff506 	br	23984 <__alt_data_end+0xfffea984>
   239b0:	10c5c83a 	sub	r2,r2,r3
   239b4:	f800283a 	ret

000239b8 <memcpy>:
   239b8:	defffd04 	addi	sp,sp,-12
   239bc:	dfc00215 	stw	ra,8(sp)
   239c0:	dc400115 	stw	r17,4(sp)
   239c4:	dc000015 	stw	r16,0(sp)
   239c8:	00c003c4 	movi	r3,15
   239cc:	2005883a 	mov	r2,r4
   239d0:	1980452e 	bgeu	r3,r6,23ae8 <memcpy+0x130>
   239d4:	2906b03a 	or	r3,r5,r4
   239d8:	18c000cc 	andi	r3,r3,3
   239dc:	1800441e 	bne	r3,zero,23af0 <memcpy+0x138>
   239e0:	347ffc04 	addi	r17,r6,-16
   239e4:	8822d13a 	srli	r17,r17,4
   239e8:	28c00104 	addi	r3,r5,4
   239ec:	23400104 	addi	r13,r4,4
   239f0:	8820913a 	slli	r16,r17,4
   239f4:	2b000204 	addi	r12,r5,8
   239f8:	22c00204 	addi	r11,r4,8
   239fc:	84000504 	addi	r16,r16,20
   23a00:	2a800304 	addi	r10,r5,12
   23a04:	22400304 	addi	r9,r4,12
   23a08:	2c21883a 	add	r16,r5,r16
   23a0c:	2811883a 	mov	r8,r5
   23a10:	200f883a 	mov	r7,r4
   23a14:	41000017 	ldw	r4,0(r8)
   23a18:	1fc00017 	ldw	ra,0(r3)
   23a1c:	63c00017 	ldw	r15,0(r12)
   23a20:	39000015 	stw	r4,0(r7)
   23a24:	53800017 	ldw	r14,0(r10)
   23a28:	6fc00015 	stw	ra,0(r13)
   23a2c:	5bc00015 	stw	r15,0(r11)
   23a30:	4b800015 	stw	r14,0(r9)
   23a34:	18c00404 	addi	r3,r3,16
   23a38:	39c00404 	addi	r7,r7,16
   23a3c:	42000404 	addi	r8,r8,16
   23a40:	6b400404 	addi	r13,r13,16
   23a44:	63000404 	addi	r12,r12,16
   23a48:	5ac00404 	addi	r11,r11,16
   23a4c:	52800404 	addi	r10,r10,16
   23a50:	4a400404 	addi	r9,r9,16
   23a54:	1c3fef1e 	bne	r3,r16,23a14 <__alt_data_end+0xfffeaa14>
   23a58:	89c00044 	addi	r7,r17,1
   23a5c:	380e913a 	slli	r7,r7,4
   23a60:	310003cc 	andi	r4,r6,15
   23a64:	02c000c4 	movi	r11,3
   23a68:	11c7883a 	add	r3,r2,r7
   23a6c:	29cb883a 	add	r5,r5,r7
   23a70:	5900212e 	bgeu	r11,r4,23af8 <memcpy+0x140>
   23a74:	1813883a 	mov	r9,r3
   23a78:	2811883a 	mov	r8,r5
   23a7c:	200f883a 	mov	r7,r4
   23a80:	42800017 	ldw	r10,0(r8)
   23a84:	4a400104 	addi	r9,r9,4
   23a88:	39ffff04 	addi	r7,r7,-4
   23a8c:	4abfff15 	stw	r10,-4(r9)
   23a90:	42000104 	addi	r8,r8,4
   23a94:	59fffa36 	bltu	r11,r7,23a80 <__alt_data_end+0xfffeaa80>
   23a98:	213fff04 	addi	r4,r4,-4
   23a9c:	2008d0ba 	srli	r4,r4,2
   23aa0:	318000cc 	andi	r6,r6,3
   23aa4:	21000044 	addi	r4,r4,1
   23aa8:	2109883a 	add	r4,r4,r4
   23aac:	2109883a 	add	r4,r4,r4
   23ab0:	1907883a 	add	r3,r3,r4
   23ab4:	290b883a 	add	r5,r5,r4
   23ab8:	30000626 	beq	r6,zero,23ad4 <memcpy+0x11c>
   23abc:	198d883a 	add	r6,r3,r6
   23ac0:	29c00003 	ldbu	r7,0(r5)
   23ac4:	18c00044 	addi	r3,r3,1
   23ac8:	29400044 	addi	r5,r5,1
   23acc:	19ffffc5 	stb	r7,-1(r3)
   23ad0:	19bffb1e 	bne	r3,r6,23ac0 <__alt_data_end+0xfffeaac0>
   23ad4:	dfc00217 	ldw	ra,8(sp)
   23ad8:	dc400117 	ldw	r17,4(sp)
   23adc:	dc000017 	ldw	r16,0(sp)
   23ae0:	dec00304 	addi	sp,sp,12
   23ae4:	f800283a 	ret
   23ae8:	2007883a 	mov	r3,r4
   23aec:	003ff206 	br	23ab8 <__alt_data_end+0xfffeaab8>
   23af0:	2007883a 	mov	r3,r4
   23af4:	003ff106 	br	23abc <__alt_data_end+0xfffeaabc>
   23af8:	200d883a 	mov	r6,r4
   23afc:	003fee06 	br	23ab8 <__alt_data_end+0xfffeaab8>

00023b00 <memmove>:
   23b00:	2005883a 	mov	r2,r4
   23b04:	29000b2e 	bgeu	r5,r4,23b34 <memmove+0x34>
   23b08:	298f883a 	add	r7,r5,r6
   23b0c:	21c0092e 	bgeu	r4,r7,23b34 <memmove+0x34>
   23b10:	2187883a 	add	r3,r4,r6
   23b14:	198bc83a 	sub	r5,r3,r6
   23b18:	30004826 	beq	r6,zero,23c3c <memmove+0x13c>
   23b1c:	39ffffc4 	addi	r7,r7,-1
   23b20:	39000003 	ldbu	r4,0(r7)
   23b24:	18ffffc4 	addi	r3,r3,-1
   23b28:	19000005 	stb	r4,0(r3)
   23b2c:	28fffb1e 	bne	r5,r3,23b1c <__alt_data_end+0xfffeab1c>
   23b30:	f800283a 	ret
   23b34:	00c003c4 	movi	r3,15
   23b38:	1980412e 	bgeu	r3,r6,23c40 <memmove+0x140>
   23b3c:	2886b03a 	or	r3,r5,r2
   23b40:	18c000cc 	andi	r3,r3,3
   23b44:	1800401e 	bne	r3,zero,23c48 <memmove+0x148>
   23b48:	33fffc04 	addi	r15,r6,-16
   23b4c:	781ed13a 	srli	r15,r15,4
   23b50:	28c00104 	addi	r3,r5,4
   23b54:	13400104 	addi	r13,r2,4
   23b58:	781c913a 	slli	r14,r15,4
   23b5c:	2b000204 	addi	r12,r5,8
   23b60:	12c00204 	addi	r11,r2,8
   23b64:	73800504 	addi	r14,r14,20
   23b68:	2a800304 	addi	r10,r5,12
   23b6c:	12400304 	addi	r9,r2,12
   23b70:	2b9d883a 	add	r14,r5,r14
   23b74:	2811883a 	mov	r8,r5
   23b78:	100f883a 	mov	r7,r2
   23b7c:	41000017 	ldw	r4,0(r8)
   23b80:	39c00404 	addi	r7,r7,16
   23b84:	18c00404 	addi	r3,r3,16
   23b88:	393ffc15 	stw	r4,-16(r7)
   23b8c:	193ffc17 	ldw	r4,-16(r3)
   23b90:	6b400404 	addi	r13,r13,16
   23b94:	5ac00404 	addi	r11,r11,16
   23b98:	693ffc15 	stw	r4,-16(r13)
   23b9c:	61000017 	ldw	r4,0(r12)
   23ba0:	4a400404 	addi	r9,r9,16
   23ba4:	42000404 	addi	r8,r8,16
   23ba8:	593ffc15 	stw	r4,-16(r11)
   23bac:	51000017 	ldw	r4,0(r10)
   23bb0:	63000404 	addi	r12,r12,16
   23bb4:	52800404 	addi	r10,r10,16
   23bb8:	493ffc15 	stw	r4,-16(r9)
   23bbc:	1bbfef1e 	bne	r3,r14,23b7c <__alt_data_end+0xfffeab7c>
   23bc0:	79000044 	addi	r4,r15,1
   23bc4:	2008913a 	slli	r4,r4,4
   23bc8:	328003cc 	andi	r10,r6,15
   23bcc:	02c000c4 	movi	r11,3
   23bd0:	1107883a 	add	r3,r2,r4
   23bd4:	290b883a 	add	r5,r5,r4
   23bd8:	5a801e2e 	bgeu	r11,r10,23c54 <memmove+0x154>
   23bdc:	1813883a 	mov	r9,r3
   23be0:	2811883a 	mov	r8,r5
   23be4:	500f883a 	mov	r7,r10
   23be8:	41000017 	ldw	r4,0(r8)
   23bec:	4a400104 	addi	r9,r9,4
   23bf0:	39ffff04 	addi	r7,r7,-4
   23bf4:	493fff15 	stw	r4,-4(r9)
   23bf8:	42000104 	addi	r8,r8,4
   23bfc:	59fffa36 	bltu	r11,r7,23be8 <__alt_data_end+0xfffeabe8>
   23c00:	513fff04 	addi	r4,r10,-4
   23c04:	2008d0ba 	srli	r4,r4,2
   23c08:	318000cc 	andi	r6,r6,3
   23c0c:	21000044 	addi	r4,r4,1
   23c10:	2109883a 	add	r4,r4,r4
   23c14:	2109883a 	add	r4,r4,r4
   23c18:	1907883a 	add	r3,r3,r4
   23c1c:	290b883a 	add	r5,r5,r4
   23c20:	30000b26 	beq	r6,zero,23c50 <memmove+0x150>
   23c24:	198d883a 	add	r6,r3,r6
   23c28:	29c00003 	ldbu	r7,0(r5)
   23c2c:	18c00044 	addi	r3,r3,1
   23c30:	29400044 	addi	r5,r5,1
   23c34:	19ffffc5 	stb	r7,-1(r3)
   23c38:	19bffb1e 	bne	r3,r6,23c28 <__alt_data_end+0xfffeac28>
   23c3c:	f800283a 	ret
   23c40:	1007883a 	mov	r3,r2
   23c44:	003ff606 	br	23c20 <__alt_data_end+0xfffeac20>
   23c48:	1007883a 	mov	r3,r2
   23c4c:	003ff506 	br	23c24 <__alt_data_end+0xfffeac24>
   23c50:	f800283a 	ret
   23c54:	500d883a 	mov	r6,r10
   23c58:	003ff106 	br	23c20 <__alt_data_end+0xfffeac20>

00023c5c <_realloc_r>:
   23c5c:	defff604 	addi	sp,sp,-40
   23c60:	dc800215 	stw	r18,8(sp)
   23c64:	dfc00915 	stw	ra,36(sp)
   23c68:	df000815 	stw	fp,32(sp)
   23c6c:	ddc00715 	stw	r23,28(sp)
   23c70:	dd800615 	stw	r22,24(sp)
   23c74:	dd400515 	stw	r21,20(sp)
   23c78:	dd000415 	stw	r20,16(sp)
   23c7c:	dcc00315 	stw	r19,12(sp)
   23c80:	dc400115 	stw	r17,4(sp)
   23c84:	dc000015 	stw	r16,0(sp)
   23c88:	3025883a 	mov	r18,r6
   23c8c:	2800b726 	beq	r5,zero,23f6c <_realloc_r+0x310>
   23c90:	282b883a 	mov	r21,r5
   23c94:	2029883a 	mov	r20,r4
   23c98:	0025d1c0 	call	25d1c <__malloc_lock>
   23c9c:	a8bfff17 	ldw	r2,-4(r21)
   23ca0:	043fff04 	movi	r16,-4
   23ca4:	90c002c4 	addi	r3,r18,11
   23ca8:	01000584 	movi	r4,22
   23cac:	acfffe04 	addi	r19,r21,-8
   23cb0:	1420703a 	and	r16,r2,r16
   23cb4:	20c0332e 	bgeu	r4,r3,23d84 <_realloc_r+0x128>
   23cb8:	047ffe04 	movi	r17,-8
   23cbc:	1c62703a 	and	r17,r3,r17
   23cc0:	8807883a 	mov	r3,r17
   23cc4:	88005816 	blt	r17,zero,23e28 <_realloc_r+0x1cc>
   23cc8:	8c805736 	bltu	r17,r18,23e28 <_realloc_r+0x1cc>
   23ccc:	80c0300e 	bge	r16,r3,23d90 <_realloc_r+0x134>
   23cd0:	070000b4 	movhi	fp,2
   23cd4:	e71dca04 	addi	fp,fp,30504
   23cd8:	e1c00217 	ldw	r7,8(fp)
   23cdc:	9c09883a 	add	r4,r19,r16
   23ce0:	22000117 	ldw	r8,4(r4)
   23ce4:	21c06326 	beq	r4,r7,23e74 <_realloc_r+0x218>
   23ce8:	017fff84 	movi	r5,-2
   23cec:	414a703a 	and	r5,r8,r5
   23cf0:	214b883a 	add	r5,r4,r5
   23cf4:	29800117 	ldw	r6,4(r5)
   23cf8:	3180004c 	andi	r6,r6,1
   23cfc:	30003f26 	beq	r6,zero,23dfc <_realloc_r+0x1a0>
   23d00:	1080004c 	andi	r2,r2,1
   23d04:	10008326 	beq	r2,zero,23f14 <_realloc_r+0x2b8>
   23d08:	900b883a 	mov	r5,r18
   23d0c:	a009883a 	mov	r4,r20
   23d10:	002304c0 	call	2304c <_malloc_r>
   23d14:	1025883a 	mov	r18,r2
   23d18:	10011e26 	beq	r2,zero,24194 <_realloc_r+0x538>
   23d1c:	a93fff17 	ldw	r4,-4(r21)
   23d20:	10fffe04 	addi	r3,r2,-8
   23d24:	00bfff84 	movi	r2,-2
   23d28:	2084703a 	and	r2,r4,r2
   23d2c:	9885883a 	add	r2,r19,r2
   23d30:	1880ee26 	beq	r3,r2,240ec <_realloc_r+0x490>
   23d34:	81bfff04 	addi	r6,r16,-4
   23d38:	00800904 	movi	r2,36
   23d3c:	1180b836 	bltu	r2,r6,24020 <_realloc_r+0x3c4>
   23d40:	00c004c4 	movi	r3,19
   23d44:	19809636 	bltu	r3,r6,23fa0 <_realloc_r+0x344>
   23d48:	9005883a 	mov	r2,r18
   23d4c:	a807883a 	mov	r3,r21
   23d50:	19000017 	ldw	r4,0(r3)
   23d54:	11000015 	stw	r4,0(r2)
   23d58:	19000117 	ldw	r4,4(r3)
   23d5c:	11000115 	stw	r4,4(r2)
   23d60:	18c00217 	ldw	r3,8(r3)
   23d64:	10c00215 	stw	r3,8(r2)
   23d68:	a80b883a 	mov	r5,r21
   23d6c:	a009883a 	mov	r4,r20
   23d70:	0024e140 	call	24e14 <_free_r>
   23d74:	a009883a 	mov	r4,r20
   23d78:	0025d400 	call	25d40 <__malloc_unlock>
   23d7c:	9005883a 	mov	r2,r18
   23d80:	00001206 	br	23dcc <_realloc_r+0x170>
   23d84:	00c00404 	movi	r3,16
   23d88:	1823883a 	mov	r17,r3
   23d8c:	003fce06 	br	23cc8 <__alt_data_end+0xfffeacc8>
   23d90:	a825883a 	mov	r18,r21
   23d94:	8445c83a 	sub	r2,r16,r17
   23d98:	00c003c4 	movi	r3,15
   23d9c:	18802636 	bltu	r3,r2,23e38 <_realloc_r+0x1dc>
   23da0:	99800117 	ldw	r6,4(r19)
   23da4:	9c07883a 	add	r3,r19,r16
   23da8:	3180004c 	andi	r6,r6,1
   23dac:	3420b03a 	or	r16,r6,r16
   23db0:	9c000115 	stw	r16,4(r19)
   23db4:	18800117 	ldw	r2,4(r3)
   23db8:	10800054 	ori	r2,r2,1
   23dbc:	18800115 	stw	r2,4(r3)
   23dc0:	a009883a 	mov	r4,r20
   23dc4:	0025d400 	call	25d40 <__malloc_unlock>
   23dc8:	9005883a 	mov	r2,r18
   23dcc:	dfc00917 	ldw	ra,36(sp)
   23dd0:	df000817 	ldw	fp,32(sp)
   23dd4:	ddc00717 	ldw	r23,28(sp)
   23dd8:	dd800617 	ldw	r22,24(sp)
   23ddc:	dd400517 	ldw	r21,20(sp)
   23de0:	dd000417 	ldw	r20,16(sp)
   23de4:	dcc00317 	ldw	r19,12(sp)
   23de8:	dc800217 	ldw	r18,8(sp)
   23dec:	dc400117 	ldw	r17,4(sp)
   23df0:	dc000017 	ldw	r16,0(sp)
   23df4:	dec00a04 	addi	sp,sp,40
   23df8:	f800283a 	ret
   23dfc:	017fff04 	movi	r5,-4
   23e00:	414a703a 	and	r5,r8,r5
   23e04:	814d883a 	add	r6,r16,r5
   23e08:	30c01f16 	blt	r6,r3,23e88 <_realloc_r+0x22c>
   23e0c:	20800317 	ldw	r2,12(r4)
   23e10:	20c00217 	ldw	r3,8(r4)
   23e14:	a825883a 	mov	r18,r21
   23e18:	3021883a 	mov	r16,r6
   23e1c:	18800315 	stw	r2,12(r3)
   23e20:	10c00215 	stw	r3,8(r2)
   23e24:	003fdb06 	br	23d94 <__alt_data_end+0xfffead94>
   23e28:	00800304 	movi	r2,12
   23e2c:	a0800015 	stw	r2,0(r20)
   23e30:	0005883a 	mov	r2,zero
   23e34:	003fe506 	br	23dcc <__alt_data_end+0xfffeadcc>
   23e38:	98c00117 	ldw	r3,4(r19)
   23e3c:	9c4b883a 	add	r5,r19,r17
   23e40:	11000054 	ori	r4,r2,1
   23e44:	18c0004c 	andi	r3,r3,1
   23e48:	1c62b03a 	or	r17,r3,r17
   23e4c:	9c400115 	stw	r17,4(r19)
   23e50:	29000115 	stw	r4,4(r5)
   23e54:	2885883a 	add	r2,r5,r2
   23e58:	10c00117 	ldw	r3,4(r2)
   23e5c:	29400204 	addi	r5,r5,8
   23e60:	a009883a 	mov	r4,r20
   23e64:	18c00054 	ori	r3,r3,1
   23e68:	10c00115 	stw	r3,4(r2)
   23e6c:	0024e140 	call	24e14 <_free_r>
   23e70:	003fd306 	br	23dc0 <__alt_data_end+0xfffeadc0>
   23e74:	017fff04 	movi	r5,-4
   23e78:	414a703a 	and	r5,r8,r5
   23e7c:	89800404 	addi	r6,r17,16
   23e80:	8151883a 	add	r8,r16,r5
   23e84:	4180590e 	bge	r8,r6,23fec <_realloc_r+0x390>
   23e88:	1080004c 	andi	r2,r2,1
   23e8c:	103f9e1e 	bne	r2,zero,23d08 <__alt_data_end+0xfffead08>
   23e90:	adbffe17 	ldw	r22,-8(r21)
   23e94:	00bfff04 	movi	r2,-4
   23e98:	9dadc83a 	sub	r22,r19,r22
   23e9c:	b1800117 	ldw	r6,4(r22)
   23ea0:	3084703a 	and	r2,r6,r2
   23ea4:	20002026 	beq	r4,zero,23f28 <_realloc_r+0x2cc>
   23ea8:	80af883a 	add	r23,r16,r2
   23eac:	b96f883a 	add	r23,r23,r5
   23eb0:	21c05f26 	beq	r4,r7,24030 <_realloc_r+0x3d4>
   23eb4:	b8c01c16 	blt	r23,r3,23f28 <_realloc_r+0x2cc>
   23eb8:	20800317 	ldw	r2,12(r4)
   23ebc:	20c00217 	ldw	r3,8(r4)
   23ec0:	81bfff04 	addi	r6,r16,-4
   23ec4:	01000904 	movi	r4,36
   23ec8:	18800315 	stw	r2,12(r3)
   23ecc:	10c00215 	stw	r3,8(r2)
   23ed0:	b0c00217 	ldw	r3,8(r22)
   23ed4:	b0800317 	ldw	r2,12(r22)
   23ed8:	b4800204 	addi	r18,r22,8
   23edc:	18800315 	stw	r2,12(r3)
   23ee0:	10c00215 	stw	r3,8(r2)
   23ee4:	21801b36 	bltu	r4,r6,23f54 <_realloc_r+0x2f8>
   23ee8:	008004c4 	movi	r2,19
   23eec:	1180352e 	bgeu	r2,r6,23fc4 <_realloc_r+0x368>
   23ef0:	a8800017 	ldw	r2,0(r21)
   23ef4:	b0800215 	stw	r2,8(r22)
   23ef8:	a8800117 	ldw	r2,4(r21)
   23efc:	b0800315 	stw	r2,12(r22)
   23f00:	008006c4 	movi	r2,27
   23f04:	11807f36 	bltu	r2,r6,24104 <_realloc_r+0x4a8>
   23f08:	b0800404 	addi	r2,r22,16
   23f0c:	ad400204 	addi	r21,r21,8
   23f10:	00002d06 	br	23fc8 <_realloc_r+0x36c>
   23f14:	adbffe17 	ldw	r22,-8(r21)
   23f18:	00bfff04 	movi	r2,-4
   23f1c:	9dadc83a 	sub	r22,r19,r22
   23f20:	b1000117 	ldw	r4,4(r22)
   23f24:	2084703a 	and	r2,r4,r2
   23f28:	b03f7726 	beq	r22,zero,23d08 <__alt_data_end+0xfffead08>
   23f2c:	80af883a 	add	r23,r16,r2
   23f30:	b8ff7516 	blt	r23,r3,23d08 <__alt_data_end+0xfffead08>
   23f34:	b0800317 	ldw	r2,12(r22)
   23f38:	b0c00217 	ldw	r3,8(r22)
   23f3c:	81bfff04 	addi	r6,r16,-4
   23f40:	01000904 	movi	r4,36
   23f44:	18800315 	stw	r2,12(r3)
   23f48:	10c00215 	stw	r3,8(r2)
   23f4c:	b4800204 	addi	r18,r22,8
   23f50:	21bfe52e 	bgeu	r4,r6,23ee8 <__alt_data_end+0xfffeaee8>
   23f54:	a80b883a 	mov	r5,r21
   23f58:	9009883a 	mov	r4,r18
   23f5c:	0023b000 	call	23b00 <memmove>
   23f60:	b821883a 	mov	r16,r23
   23f64:	b027883a 	mov	r19,r22
   23f68:	003f8a06 	br	23d94 <__alt_data_end+0xfffead94>
   23f6c:	300b883a 	mov	r5,r6
   23f70:	dfc00917 	ldw	ra,36(sp)
   23f74:	df000817 	ldw	fp,32(sp)
   23f78:	ddc00717 	ldw	r23,28(sp)
   23f7c:	dd800617 	ldw	r22,24(sp)
   23f80:	dd400517 	ldw	r21,20(sp)
   23f84:	dd000417 	ldw	r20,16(sp)
   23f88:	dcc00317 	ldw	r19,12(sp)
   23f8c:	dc800217 	ldw	r18,8(sp)
   23f90:	dc400117 	ldw	r17,4(sp)
   23f94:	dc000017 	ldw	r16,0(sp)
   23f98:	dec00a04 	addi	sp,sp,40
   23f9c:	002304c1 	jmpi	2304c <_malloc_r>
   23fa0:	a8c00017 	ldw	r3,0(r21)
   23fa4:	90c00015 	stw	r3,0(r18)
   23fa8:	a8c00117 	ldw	r3,4(r21)
   23fac:	90c00115 	stw	r3,4(r18)
   23fb0:	00c006c4 	movi	r3,27
   23fb4:	19804536 	bltu	r3,r6,240cc <_realloc_r+0x470>
   23fb8:	90800204 	addi	r2,r18,8
   23fbc:	a8c00204 	addi	r3,r21,8
   23fc0:	003f6306 	br	23d50 <__alt_data_end+0xfffead50>
   23fc4:	9005883a 	mov	r2,r18
   23fc8:	a8c00017 	ldw	r3,0(r21)
   23fcc:	b821883a 	mov	r16,r23
   23fd0:	b027883a 	mov	r19,r22
   23fd4:	10c00015 	stw	r3,0(r2)
   23fd8:	a8c00117 	ldw	r3,4(r21)
   23fdc:	10c00115 	stw	r3,4(r2)
   23fe0:	a8c00217 	ldw	r3,8(r21)
   23fe4:	10c00215 	stw	r3,8(r2)
   23fe8:	003f6a06 	br	23d94 <__alt_data_end+0xfffead94>
   23fec:	9c67883a 	add	r19,r19,r17
   23ff0:	4445c83a 	sub	r2,r8,r17
   23ff4:	e4c00215 	stw	r19,8(fp)
   23ff8:	10800054 	ori	r2,r2,1
   23ffc:	98800115 	stw	r2,4(r19)
   24000:	a8bfff17 	ldw	r2,-4(r21)
   24004:	a009883a 	mov	r4,r20
   24008:	1080004c 	andi	r2,r2,1
   2400c:	1462b03a 	or	r17,r2,r17
   24010:	ac7fff15 	stw	r17,-4(r21)
   24014:	0025d400 	call	25d40 <__malloc_unlock>
   24018:	a805883a 	mov	r2,r21
   2401c:	003f6b06 	br	23dcc <__alt_data_end+0xfffeadcc>
   24020:	a80b883a 	mov	r5,r21
   24024:	9009883a 	mov	r4,r18
   24028:	0023b000 	call	23b00 <memmove>
   2402c:	003f4e06 	br	23d68 <__alt_data_end+0xfffead68>
   24030:	89000404 	addi	r4,r17,16
   24034:	b93fbc16 	blt	r23,r4,23f28 <__alt_data_end+0xfffeaf28>
   24038:	b0800317 	ldw	r2,12(r22)
   2403c:	b0c00217 	ldw	r3,8(r22)
   24040:	81bfff04 	addi	r6,r16,-4
   24044:	01000904 	movi	r4,36
   24048:	18800315 	stw	r2,12(r3)
   2404c:	10c00215 	stw	r3,8(r2)
   24050:	b4800204 	addi	r18,r22,8
   24054:	21804336 	bltu	r4,r6,24164 <_realloc_r+0x508>
   24058:	008004c4 	movi	r2,19
   2405c:	11803f2e 	bgeu	r2,r6,2415c <_realloc_r+0x500>
   24060:	a8800017 	ldw	r2,0(r21)
   24064:	b0800215 	stw	r2,8(r22)
   24068:	a8800117 	ldw	r2,4(r21)
   2406c:	b0800315 	stw	r2,12(r22)
   24070:	008006c4 	movi	r2,27
   24074:	11803f36 	bltu	r2,r6,24174 <_realloc_r+0x518>
   24078:	b0800404 	addi	r2,r22,16
   2407c:	ad400204 	addi	r21,r21,8
   24080:	a8c00017 	ldw	r3,0(r21)
   24084:	10c00015 	stw	r3,0(r2)
   24088:	a8c00117 	ldw	r3,4(r21)
   2408c:	10c00115 	stw	r3,4(r2)
   24090:	a8c00217 	ldw	r3,8(r21)
   24094:	10c00215 	stw	r3,8(r2)
   24098:	b447883a 	add	r3,r22,r17
   2409c:	bc45c83a 	sub	r2,r23,r17
   240a0:	e0c00215 	stw	r3,8(fp)
   240a4:	10800054 	ori	r2,r2,1
   240a8:	18800115 	stw	r2,4(r3)
   240ac:	b0800117 	ldw	r2,4(r22)
   240b0:	a009883a 	mov	r4,r20
   240b4:	1080004c 	andi	r2,r2,1
   240b8:	1462b03a 	or	r17,r2,r17
   240bc:	b4400115 	stw	r17,4(r22)
   240c0:	0025d400 	call	25d40 <__malloc_unlock>
   240c4:	9005883a 	mov	r2,r18
   240c8:	003f4006 	br	23dcc <__alt_data_end+0xfffeadcc>
   240cc:	a8c00217 	ldw	r3,8(r21)
   240d0:	90c00215 	stw	r3,8(r18)
   240d4:	a8c00317 	ldw	r3,12(r21)
   240d8:	90c00315 	stw	r3,12(r18)
   240dc:	30801126 	beq	r6,r2,24124 <_realloc_r+0x4c8>
   240e0:	90800404 	addi	r2,r18,16
   240e4:	a8c00404 	addi	r3,r21,16
   240e8:	003f1906 	br	23d50 <__alt_data_end+0xfffead50>
   240ec:	90ffff17 	ldw	r3,-4(r18)
   240f0:	00bfff04 	movi	r2,-4
   240f4:	a825883a 	mov	r18,r21
   240f8:	1884703a 	and	r2,r3,r2
   240fc:	80a1883a 	add	r16,r16,r2
   24100:	003f2406 	br	23d94 <__alt_data_end+0xfffead94>
   24104:	a8800217 	ldw	r2,8(r21)
   24108:	b0800415 	stw	r2,16(r22)
   2410c:	a8800317 	ldw	r2,12(r21)
   24110:	b0800515 	stw	r2,20(r22)
   24114:	31000a26 	beq	r6,r4,24140 <_realloc_r+0x4e4>
   24118:	b0800604 	addi	r2,r22,24
   2411c:	ad400404 	addi	r21,r21,16
   24120:	003fa906 	br	23fc8 <__alt_data_end+0xfffeafc8>
   24124:	a9000417 	ldw	r4,16(r21)
   24128:	90800604 	addi	r2,r18,24
   2412c:	a8c00604 	addi	r3,r21,24
   24130:	91000415 	stw	r4,16(r18)
   24134:	a9000517 	ldw	r4,20(r21)
   24138:	91000515 	stw	r4,20(r18)
   2413c:	003f0406 	br	23d50 <__alt_data_end+0xfffead50>
   24140:	a8c00417 	ldw	r3,16(r21)
   24144:	ad400604 	addi	r21,r21,24
   24148:	b0800804 	addi	r2,r22,32
   2414c:	b0c00615 	stw	r3,24(r22)
   24150:	a8ffff17 	ldw	r3,-4(r21)
   24154:	b0c00715 	stw	r3,28(r22)
   24158:	003f9b06 	br	23fc8 <__alt_data_end+0xfffeafc8>
   2415c:	9005883a 	mov	r2,r18
   24160:	003fc706 	br	24080 <__alt_data_end+0xfffeb080>
   24164:	a80b883a 	mov	r5,r21
   24168:	9009883a 	mov	r4,r18
   2416c:	0023b000 	call	23b00 <memmove>
   24170:	003fc906 	br	24098 <__alt_data_end+0xfffeb098>
   24174:	a8800217 	ldw	r2,8(r21)
   24178:	b0800415 	stw	r2,16(r22)
   2417c:	a8800317 	ldw	r2,12(r21)
   24180:	b0800515 	stw	r2,20(r22)
   24184:	31000726 	beq	r6,r4,241a4 <_realloc_r+0x548>
   24188:	b0800604 	addi	r2,r22,24
   2418c:	ad400404 	addi	r21,r21,16
   24190:	003fbb06 	br	24080 <__alt_data_end+0xfffeb080>
   24194:	a009883a 	mov	r4,r20
   24198:	0025d400 	call	25d40 <__malloc_unlock>
   2419c:	0005883a 	mov	r2,zero
   241a0:	003f0a06 	br	23dcc <__alt_data_end+0xfffeadcc>
   241a4:	a8c00417 	ldw	r3,16(r21)
   241a8:	ad400604 	addi	r21,r21,24
   241ac:	b0800804 	addi	r2,r22,32
   241b0:	b0c00615 	stw	r3,24(r22)
   241b4:	a8ffff17 	ldw	r3,-4(r21)
   241b8:	b0c00715 	stw	r3,28(r22)
   241bc:	003fb006 	br	24080 <__alt_data_end+0xfffeb080>

000241c0 <_sbrk_r>:
   241c0:	defffd04 	addi	sp,sp,-12
   241c4:	dc000015 	stw	r16,0(sp)
   241c8:	040000f4 	movhi	r16,3
   241cc:	dc400115 	stw	r17,4(sp)
   241d0:	84257e04 	addi	r16,r16,-27144
   241d4:	2023883a 	mov	r17,r4
   241d8:	2809883a 	mov	r4,r5
   241dc:	dfc00215 	stw	ra,8(sp)
   241e0:	80000015 	stw	zero,0(r16)
   241e4:	0025ea40 	call	25ea4 <sbrk>
   241e8:	00ffffc4 	movi	r3,-1
   241ec:	10c00526 	beq	r2,r3,24204 <_sbrk_r+0x44>
   241f0:	dfc00217 	ldw	ra,8(sp)
   241f4:	dc400117 	ldw	r17,4(sp)
   241f8:	dc000017 	ldw	r16,0(sp)
   241fc:	dec00304 	addi	sp,sp,12
   24200:	f800283a 	ret
   24204:	80c00017 	ldw	r3,0(r16)
   24208:	183ff926 	beq	r3,zero,241f0 <__alt_data_end+0xfffeb1f0>
   2420c:	88c00015 	stw	r3,0(r17)
   24210:	003ff706 	br	241f0 <__alt_data_end+0xfffeb1f0>

00024214 <strlen>:
   24214:	208000cc 	andi	r2,r4,3
   24218:	10002026 	beq	r2,zero,2429c <strlen+0x88>
   2421c:	20800007 	ldb	r2,0(r4)
   24220:	10002026 	beq	r2,zero,242a4 <strlen+0x90>
   24224:	2005883a 	mov	r2,r4
   24228:	00000206 	br	24234 <strlen+0x20>
   2422c:	10c00007 	ldb	r3,0(r2)
   24230:	18001826 	beq	r3,zero,24294 <strlen+0x80>
   24234:	10800044 	addi	r2,r2,1
   24238:	10c000cc 	andi	r3,r2,3
   2423c:	183ffb1e 	bne	r3,zero,2422c <__alt_data_end+0xfffeb22c>
   24240:	10c00017 	ldw	r3,0(r2)
   24244:	01ffbff4 	movhi	r7,65279
   24248:	39ffbfc4 	addi	r7,r7,-257
   2424c:	00ca303a 	nor	r5,zero,r3
   24250:	01a02074 	movhi	r6,32897
   24254:	19c7883a 	add	r3,r3,r7
   24258:	31a02004 	addi	r6,r6,-32640
   2425c:	1946703a 	and	r3,r3,r5
   24260:	1986703a 	and	r3,r3,r6
   24264:	1800091e 	bne	r3,zero,2428c <strlen+0x78>
   24268:	10800104 	addi	r2,r2,4
   2426c:	10c00017 	ldw	r3,0(r2)
   24270:	19cb883a 	add	r5,r3,r7
   24274:	00c6303a 	nor	r3,zero,r3
   24278:	28c6703a 	and	r3,r5,r3
   2427c:	1986703a 	and	r3,r3,r6
   24280:	183ff926 	beq	r3,zero,24268 <__alt_data_end+0xfffeb268>
   24284:	00000106 	br	2428c <strlen+0x78>
   24288:	10800044 	addi	r2,r2,1
   2428c:	10c00007 	ldb	r3,0(r2)
   24290:	183ffd1e 	bne	r3,zero,24288 <__alt_data_end+0xfffeb288>
   24294:	1105c83a 	sub	r2,r2,r4
   24298:	f800283a 	ret
   2429c:	2005883a 	mov	r2,r4
   242a0:	003fe706 	br	24240 <__alt_data_end+0xfffeb240>
   242a4:	0005883a 	mov	r2,zero
   242a8:	f800283a 	ret

000242ac <__swsetup_r>:
   242ac:	008000b4 	movhi	r2,2
   242b0:	defffd04 	addi	sp,sp,-12
   242b4:	109ed704 	addi	r2,r2,31580
   242b8:	dc400115 	stw	r17,4(sp)
   242bc:	2023883a 	mov	r17,r4
   242c0:	11000017 	ldw	r4,0(r2)
   242c4:	dc000015 	stw	r16,0(sp)
   242c8:	dfc00215 	stw	ra,8(sp)
   242cc:	2821883a 	mov	r16,r5
   242d0:	20000226 	beq	r4,zero,242dc <__swsetup_r+0x30>
   242d4:	20800e17 	ldw	r2,56(r4)
   242d8:	10003126 	beq	r2,zero,243a0 <__swsetup_r+0xf4>
   242dc:	8080030b 	ldhu	r2,12(r16)
   242e0:	10c0020c 	andi	r3,r2,8
   242e4:	1009883a 	mov	r4,r2
   242e8:	18000f26 	beq	r3,zero,24328 <__swsetup_r+0x7c>
   242ec:	80c00417 	ldw	r3,16(r16)
   242f0:	18001526 	beq	r3,zero,24348 <__swsetup_r+0x9c>
   242f4:	1100004c 	andi	r4,r2,1
   242f8:	20001c1e 	bne	r4,zero,2436c <__swsetup_r+0xc0>
   242fc:	1080008c 	andi	r2,r2,2
   24300:	1000291e 	bne	r2,zero,243a8 <__swsetup_r+0xfc>
   24304:	80800517 	ldw	r2,20(r16)
   24308:	80800215 	stw	r2,8(r16)
   2430c:	18001c26 	beq	r3,zero,24380 <__swsetup_r+0xd4>
   24310:	0005883a 	mov	r2,zero
   24314:	dfc00217 	ldw	ra,8(sp)
   24318:	dc400117 	ldw	r17,4(sp)
   2431c:	dc000017 	ldw	r16,0(sp)
   24320:	dec00304 	addi	sp,sp,12
   24324:	f800283a 	ret
   24328:	2080040c 	andi	r2,r4,16
   2432c:	10002e26 	beq	r2,zero,243e8 <__swsetup_r+0x13c>
   24330:	2080010c 	andi	r2,r4,4
   24334:	10001e1e 	bne	r2,zero,243b0 <__swsetup_r+0x104>
   24338:	80c00417 	ldw	r3,16(r16)
   2433c:	20800214 	ori	r2,r4,8
   24340:	8080030d 	sth	r2,12(r16)
   24344:	183feb1e 	bne	r3,zero,242f4 <__alt_data_end+0xfffeb2f4>
   24348:	1100a00c 	andi	r4,r2,640
   2434c:	01408004 	movi	r5,512
   24350:	217fe826 	beq	r4,r5,242f4 <__alt_data_end+0xfffeb2f4>
   24354:	800b883a 	mov	r5,r16
   24358:	8809883a 	mov	r4,r17
   2435c:	00252ac0 	call	252ac <__smakebuf_r>
   24360:	8080030b 	ldhu	r2,12(r16)
   24364:	80c00417 	ldw	r3,16(r16)
   24368:	003fe206 	br	242f4 <__alt_data_end+0xfffeb2f4>
   2436c:	80800517 	ldw	r2,20(r16)
   24370:	80000215 	stw	zero,8(r16)
   24374:	0085c83a 	sub	r2,zero,r2
   24378:	80800615 	stw	r2,24(r16)
   2437c:	183fe41e 	bne	r3,zero,24310 <__alt_data_end+0xfffeb310>
   24380:	80c0030b 	ldhu	r3,12(r16)
   24384:	0005883a 	mov	r2,zero
   24388:	1900200c 	andi	r4,r3,128
   2438c:	203fe126 	beq	r4,zero,24314 <__alt_data_end+0xfffeb314>
   24390:	18c01014 	ori	r3,r3,64
   24394:	80c0030d 	sth	r3,12(r16)
   24398:	00bfffc4 	movi	r2,-1
   2439c:	003fdd06 	br	24314 <__alt_data_end+0xfffeb314>
   243a0:	0024ca00 	call	24ca0 <__sinit>
   243a4:	003fcd06 	br	242dc <__alt_data_end+0xfffeb2dc>
   243a8:	0005883a 	mov	r2,zero
   243ac:	003fd606 	br	24308 <__alt_data_end+0xfffeb308>
   243b0:	81400c17 	ldw	r5,48(r16)
   243b4:	28000626 	beq	r5,zero,243d0 <__swsetup_r+0x124>
   243b8:	80801004 	addi	r2,r16,64
   243bc:	28800326 	beq	r5,r2,243cc <__swsetup_r+0x120>
   243c0:	8809883a 	mov	r4,r17
   243c4:	0024e140 	call	24e14 <_free_r>
   243c8:	8100030b 	ldhu	r4,12(r16)
   243cc:	80000c15 	stw	zero,48(r16)
   243d0:	80c00417 	ldw	r3,16(r16)
   243d4:	00bff6c4 	movi	r2,-37
   243d8:	1108703a 	and	r4,r2,r4
   243dc:	80000115 	stw	zero,4(r16)
   243e0:	80c00015 	stw	r3,0(r16)
   243e4:	003fd506 	br	2433c <__alt_data_end+0xfffeb33c>
   243e8:	00800244 	movi	r2,9
   243ec:	88800015 	stw	r2,0(r17)
   243f0:	20801014 	ori	r2,r4,64
   243f4:	8080030d 	sth	r2,12(r16)
   243f8:	00bfffc4 	movi	r2,-1
   243fc:	003fc506 	br	24314 <__alt_data_end+0xfffeb314>

00024400 <__register_exitproc>:
   24400:	defffa04 	addi	sp,sp,-24
   24404:	dc000315 	stw	r16,12(sp)
   24408:	040000b4 	movhi	r16,2
   2440c:	841ed604 	addi	r16,r16,31576
   24410:	80c00017 	ldw	r3,0(r16)
   24414:	dc400415 	stw	r17,16(sp)
   24418:	dfc00515 	stw	ra,20(sp)
   2441c:	18805217 	ldw	r2,328(r3)
   24420:	2023883a 	mov	r17,r4
   24424:	10003726 	beq	r2,zero,24504 <__register_exitproc+0x104>
   24428:	10c00117 	ldw	r3,4(r2)
   2442c:	010007c4 	movi	r4,31
   24430:	20c00e16 	blt	r4,r3,2446c <__register_exitproc+0x6c>
   24434:	1a000044 	addi	r8,r3,1
   24438:	8800221e 	bne	r17,zero,244c4 <__register_exitproc+0xc4>
   2443c:	18c00084 	addi	r3,r3,2
   24440:	18c7883a 	add	r3,r3,r3
   24444:	18c7883a 	add	r3,r3,r3
   24448:	12000115 	stw	r8,4(r2)
   2444c:	10c7883a 	add	r3,r2,r3
   24450:	19400015 	stw	r5,0(r3)
   24454:	0005883a 	mov	r2,zero
   24458:	dfc00517 	ldw	ra,20(sp)
   2445c:	dc400417 	ldw	r17,16(sp)
   24460:	dc000317 	ldw	r16,12(sp)
   24464:	dec00604 	addi	sp,sp,24
   24468:	f800283a 	ret
   2446c:	00800034 	movhi	r2,0
   24470:	10800004 	addi	r2,r2,0
   24474:	10002626 	beq	r2,zero,24510 <__register_exitproc+0x110>
   24478:	01006404 	movi	r4,400
   2447c:	d9400015 	stw	r5,0(sp)
   24480:	d9800115 	stw	r6,4(sp)
   24484:	d9c00215 	stw	r7,8(sp)
   24488:	00000000 	call	0 <__alt_mem_onchip_ram-0x20000>
   2448c:	d9400017 	ldw	r5,0(sp)
   24490:	d9800117 	ldw	r6,4(sp)
   24494:	d9c00217 	ldw	r7,8(sp)
   24498:	10001d26 	beq	r2,zero,24510 <__register_exitproc+0x110>
   2449c:	81000017 	ldw	r4,0(r16)
   244a0:	10000115 	stw	zero,4(r2)
   244a4:	02000044 	movi	r8,1
   244a8:	22405217 	ldw	r9,328(r4)
   244ac:	0007883a 	mov	r3,zero
   244b0:	12400015 	stw	r9,0(r2)
   244b4:	20805215 	stw	r2,328(r4)
   244b8:	10006215 	stw	zero,392(r2)
   244bc:	10006315 	stw	zero,396(r2)
   244c0:	883fde26 	beq	r17,zero,2443c <__alt_data_end+0xfffeb43c>
   244c4:	18c9883a 	add	r4,r3,r3
   244c8:	2109883a 	add	r4,r4,r4
   244cc:	1109883a 	add	r4,r2,r4
   244d0:	21802215 	stw	r6,136(r4)
   244d4:	01800044 	movi	r6,1
   244d8:	12406217 	ldw	r9,392(r2)
   244dc:	30cc983a 	sll	r6,r6,r3
   244e0:	4992b03a 	or	r9,r9,r6
   244e4:	12406215 	stw	r9,392(r2)
   244e8:	21c04215 	stw	r7,264(r4)
   244ec:	01000084 	movi	r4,2
   244f0:	893fd21e 	bne	r17,r4,2443c <__alt_data_end+0xfffeb43c>
   244f4:	11006317 	ldw	r4,396(r2)
   244f8:	218cb03a 	or	r6,r4,r6
   244fc:	11806315 	stw	r6,396(r2)
   24500:	003fce06 	br	2443c <__alt_data_end+0xfffeb43c>
   24504:	18805304 	addi	r2,r3,332
   24508:	18805215 	stw	r2,328(r3)
   2450c:	003fc606 	br	24428 <__alt_data_end+0xfffeb428>
   24510:	00bfffc4 	movi	r2,-1
   24514:	003fd006 	br	24458 <__alt_data_end+0xfffeb458>

00024518 <__call_exitprocs>:
   24518:	defff504 	addi	sp,sp,-44
   2451c:	df000915 	stw	fp,36(sp)
   24520:	dd400615 	stw	r21,24(sp)
   24524:	dc800315 	stw	r18,12(sp)
   24528:	dfc00a15 	stw	ra,40(sp)
   2452c:	ddc00815 	stw	r23,32(sp)
   24530:	dd800715 	stw	r22,28(sp)
   24534:	dd000515 	stw	r20,20(sp)
   24538:	dcc00415 	stw	r19,16(sp)
   2453c:	dc400215 	stw	r17,8(sp)
   24540:	dc000115 	stw	r16,4(sp)
   24544:	d9000015 	stw	r4,0(sp)
   24548:	2839883a 	mov	fp,r5
   2454c:	04800044 	movi	r18,1
   24550:	057fffc4 	movi	r21,-1
   24554:	008000b4 	movhi	r2,2
   24558:	109ed604 	addi	r2,r2,31576
   2455c:	12000017 	ldw	r8,0(r2)
   24560:	45005217 	ldw	r20,328(r8)
   24564:	44c05204 	addi	r19,r8,328
   24568:	a0001c26 	beq	r20,zero,245dc <__call_exitprocs+0xc4>
   2456c:	a0800117 	ldw	r2,4(r20)
   24570:	15ffffc4 	addi	r23,r2,-1
   24574:	b8000d16 	blt	r23,zero,245ac <__call_exitprocs+0x94>
   24578:	14000044 	addi	r16,r2,1
   2457c:	8421883a 	add	r16,r16,r16
   24580:	8421883a 	add	r16,r16,r16
   24584:	84402004 	addi	r17,r16,128
   24588:	a463883a 	add	r17,r20,r17
   2458c:	a421883a 	add	r16,r20,r16
   24590:	e0001e26 	beq	fp,zero,2460c <__call_exitprocs+0xf4>
   24594:	80804017 	ldw	r2,256(r16)
   24598:	e0801c26 	beq	fp,r2,2460c <__call_exitprocs+0xf4>
   2459c:	bdffffc4 	addi	r23,r23,-1
   245a0:	843fff04 	addi	r16,r16,-4
   245a4:	8c7fff04 	addi	r17,r17,-4
   245a8:	bd7ff91e 	bne	r23,r21,24590 <__alt_data_end+0xfffeb590>
   245ac:	00800034 	movhi	r2,0
   245b0:	10800004 	addi	r2,r2,0
   245b4:	10000926 	beq	r2,zero,245dc <__call_exitprocs+0xc4>
   245b8:	a0800117 	ldw	r2,4(r20)
   245bc:	1000301e 	bne	r2,zero,24680 <__call_exitprocs+0x168>
   245c0:	a0800017 	ldw	r2,0(r20)
   245c4:	10003226 	beq	r2,zero,24690 <__call_exitprocs+0x178>
   245c8:	a009883a 	mov	r4,r20
   245cc:	98800015 	stw	r2,0(r19)
   245d0:	00000000 	call	0 <__alt_mem_onchip_ram-0x20000>
   245d4:	9d000017 	ldw	r20,0(r19)
   245d8:	a03fe41e 	bne	r20,zero,2456c <__alt_data_end+0xfffeb56c>
   245dc:	dfc00a17 	ldw	ra,40(sp)
   245e0:	df000917 	ldw	fp,36(sp)
   245e4:	ddc00817 	ldw	r23,32(sp)
   245e8:	dd800717 	ldw	r22,28(sp)
   245ec:	dd400617 	ldw	r21,24(sp)
   245f0:	dd000517 	ldw	r20,20(sp)
   245f4:	dcc00417 	ldw	r19,16(sp)
   245f8:	dc800317 	ldw	r18,12(sp)
   245fc:	dc400217 	ldw	r17,8(sp)
   24600:	dc000117 	ldw	r16,4(sp)
   24604:	dec00b04 	addi	sp,sp,44
   24608:	f800283a 	ret
   2460c:	a0800117 	ldw	r2,4(r20)
   24610:	80c00017 	ldw	r3,0(r16)
   24614:	10bfffc4 	addi	r2,r2,-1
   24618:	15c01426 	beq	r2,r23,2466c <__call_exitprocs+0x154>
   2461c:	80000015 	stw	zero,0(r16)
   24620:	183fde26 	beq	r3,zero,2459c <__alt_data_end+0xfffeb59c>
   24624:	95c8983a 	sll	r4,r18,r23
   24628:	a0806217 	ldw	r2,392(r20)
   2462c:	a5800117 	ldw	r22,4(r20)
   24630:	2084703a 	and	r2,r4,r2
   24634:	10000b26 	beq	r2,zero,24664 <__call_exitprocs+0x14c>
   24638:	a0806317 	ldw	r2,396(r20)
   2463c:	2088703a 	and	r4,r4,r2
   24640:	20000c1e 	bne	r4,zero,24674 <__call_exitprocs+0x15c>
   24644:	89400017 	ldw	r5,0(r17)
   24648:	d9000017 	ldw	r4,0(sp)
   2464c:	183ee83a 	callr	r3
   24650:	a0800117 	ldw	r2,4(r20)
   24654:	15bfbf1e 	bne	r2,r22,24554 <__alt_data_end+0xfffeb554>
   24658:	98800017 	ldw	r2,0(r19)
   2465c:	153fcf26 	beq	r2,r20,2459c <__alt_data_end+0xfffeb59c>
   24660:	003fbc06 	br	24554 <__alt_data_end+0xfffeb554>
   24664:	183ee83a 	callr	r3
   24668:	003ff906 	br	24650 <__alt_data_end+0xfffeb650>
   2466c:	a5c00115 	stw	r23,4(r20)
   24670:	003feb06 	br	24620 <__alt_data_end+0xfffeb620>
   24674:	89000017 	ldw	r4,0(r17)
   24678:	183ee83a 	callr	r3
   2467c:	003ff406 	br	24650 <__alt_data_end+0xfffeb650>
   24680:	a0800017 	ldw	r2,0(r20)
   24684:	a027883a 	mov	r19,r20
   24688:	1029883a 	mov	r20,r2
   2468c:	003fb606 	br	24568 <__alt_data_end+0xfffeb568>
   24690:	0005883a 	mov	r2,zero
   24694:	003ffb06 	br	24684 <__alt_data_end+0xfffeb684>

00024698 <__sflush_r>:
   24698:	2880030b 	ldhu	r2,12(r5)
   2469c:	defffb04 	addi	sp,sp,-20
   246a0:	dcc00315 	stw	r19,12(sp)
   246a4:	dc400115 	stw	r17,4(sp)
   246a8:	dfc00415 	stw	ra,16(sp)
   246ac:	dc800215 	stw	r18,8(sp)
   246b0:	dc000015 	stw	r16,0(sp)
   246b4:	10c0020c 	andi	r3,r2,8
   246b8:	2823883a 	mov	r17,r5
   246bc:	2027883a 	mov	r19,r4
   246c0:	1800311e 	bne	r3,zero,24788 <__sflush_r+0xf0>
   246c4:	28c00117 	ldw	r3,4(r5)
   246c8:	10820014 	ori	r2,r2,2048
   246cc:	2880030d 	sth	r2,12(r5)
   246d0:	00c04b0e 	bge	zero,r3,24800 <__sflush_r+0x168>
   246d4:	8a000a17 	ldw	r8,40(r17)
   246d8:	40002326 	beq	r8,zero,24768 <__sflush_r+0xd0>
   246dc:	9c000017 	ldw	r16,0(r19)
   246e0:	10c4000c 	andi	r3,r2,4096
   246e4:	98000015 	stw	zero,0(r19)
   246e8:	18004826 	beq	r3,zero,2480c <__sflush_r+0x174>
   246ec:	89801417 	ldw	r6,80(r17)
   246f0:	10c0010c 	andi	r3,r2,4
   246f4:	18000626 	beq	r3,zero,24710 <__sflush_r+0x78>
   246f8:	88c00117 	ldw	r3,4(r17)
   246fc:	88800c17 	ldw	r2,48(r17)
   24700:	30cdc83a 	sub	r6,r6,r3
   24704:	10000226 	beq	r2,zero,24710 <__sflush_r+0x78>
   24708:	88800f17 	ldw	r2,60(r17)
   2470c:	308dc83a 	sub	r6,r6,r2
   24710:	89400717 	ldw	r5,28(r17)
   24714:	000f883a 	mov	r7,zero
   24718:	9809883a 	mov	r4,r19
   2471c:	403ee83a 	callr	r8
   24720:	00ffffc4 	movi	r3,-1
   24724:	10c04426 	beq	r2,r3,24838 <__sflush_r+0x1a0>
   24728:	88c0030b 	ldhu	r3,12(r17)
   2472c:	89000417 	ldw	r4,16(r17)
   24730:	88000115 	stw	zero,4(r17)
   24734:	197dffcc 	andi	r5,r3,63487
   24738:	8940030d 	sth	r5,12(r17)
   2473c:	89000015 	stw	r4,0(r17)
   24740:	18c4000c 	andi	r3,r3,4096
   24744:	18002c1e 	bne	r3,zero,247f8 <__sflush_r+0x160>
   24748:	89400c17 	ldw	r5,48(r17)
   2474c:	9c000015 	stw	r16,0(r19)
   24750:	28000526 	beq	r5,zero,24768 <__sflush_r+0xd0>
   24754:	88801004 	addi	r2,r17,64
   24758:	28800226 	beq	r5,r2,24764 <__sflush_r+0xcc>
   2475c:	9809883a 	mov	r4,r19
   24760:	0024e140 	call	24e14 <_free_r>
   24764:	88000c15 	stw	zero,48(r17)
   24768:	0005883a 	mov	r2,zero
   2476c:	dfc00417 	ldw	ra,16(sp)
   24770:	dcc00317 	ldw	r19,12(sp)
   24774:	dc800217 	ldw	r18,8(sp)
   24778:	dc400117 	ldw	r17,4(sp)
   2477c:	dc000017 	ldw	r16,0(sp)
   24780:	dec00504 	addi	sp,sp,20
   24784:	f800283a 	ret
   24788:	2c800417 	ldw	r18,16(r5)
   2478c:	903ff626 	beq	r18,zero,24768 <__alt_data_end+0xfffeb768>
   24790:	2c000017 	ldw	r16,0(r5)
   24794:	108000cc 	andi	r2,r2,3
   24798:	2c800015 	stw	r18,0(r5)
   2479c:	84a1c83a 	sub	r16,r16,r18
   247a0:	1000131e 	bne	r2,zero,247f0 <__sflush_r+0x158>
   247a4:	28800517 	ldw	r2,20(r5)
   247a8:	88800215 	stw	r2,8(r17)
   247ac:	04000316 	blt	zero,r16,247bc <__sflush_r+0x124>
   247b0:	003fed06 	br	24768 <__alt_data_end+0xfffeb768>
   247b4:	90a5883a 	add	r18,r18,r2
   247b8:	043feb0e 	bge	zero,r16,24768 <__alt_data_end+0xfffeb768>
   247bc:	88800917 	ldw	r2,36(r17)
   247c0:	89400717 	ldw	r5,28(r17)
   247c4:	800f883a 	mov	r7,r16
   247c8:	900d883a 	mov	r6,r18
   247cc:	9809883a 	mov	r4,r19
   247d0:	103ee83a 	callr	r2
   247d4:	80a1c83a 	sub	r16,r16,r2
   247d8:	00bff616 	blt	zero,r2,247b4 <__alt_data_end+0xfffeb7b4>
   247dc:	88c0030b 	ldhu	r3,12(r17)
   247e0:	00bfffc4 	movi	r2,-1
   247e4:	18c01014 	ori	r3,r3,64
   247e8:	88c0030d 	sth	r3,12(r17)
   247ec:	003fdf06 	br	2476c <__alt_data_end+0xfffeb76c>
   247f0:	0005883a 	mov	r2,zero
   247f4:	003fec06 	br	247a8 <__alt_data_end+0xfffeb7a8>
   247f8:	88801415 	stw	r2,80(r17)
   247fc:	003fd206 	br	24748 <__alt_data_end+0xfffeb748>
   24800:	28c00f17 	ldw	r3,60(r5)
   24804:	00ffb316 	blt	zero,r3,246d4 <__alt_data_end+0xfffeb6d4>
   24808:	003fd706 	br	24768 <__alt_data_end+0xfffeb768>
   2480c:	89400717 	ldw	r5,28(r17)
   24810:	000d883a 	mov	r6,zero
   24814:	01c00044 	movi	r7,1
   24818:	9809883a 	mov	r4,r19
   2481c:	403ee83a 	callr	r8
   24820:	100d883a 	mov	r6,r2
   24824:	00bfffc4 	movi	r2,-1
   24828:	30801426 	beq	r6,r2,2487c <__sflush_r+0x1e4>
   2482c:	8880030b 	ldhu	r2,12(r17)
   24830:	8a000a17 	ldw	r8,40(r17)
   24834:	003fae06 	br	246f0 <__alt_data_end+0xfffeb6f0>
   24838:	98c00017 	ldw	r3,0(r19)
   2483c:	183fba26 	beq	r3,zero,24728 <__alt_data_end+0xfffeb728>
   24840:	01000744 	movi	r4,29
   24844:	19000626 	beq	r3,r4,24860 <__sflush_r+0x1c8>
   24848:	01000584 	movi	r4,22
   2484c:	19000426 	beq	r3,r4,24860 <__sflush_r+0x1c8>
   24850:	88c0030b 	ldhu	r3,12(r17)
   24854:	18c01014 	ori	r3,r3,64
   24858:	88c0030d 	sth	r3,12(r17)
   2485c:	003fc306 	br	2476c <__alt_data_end+0xfffeb76c>
   24860:	8880030b 	ldhu	r2,12(r17)
   24864:	88c00417 	ldw	r3,16(r17)
   24868:	88000115 	stw	zero,4(r17)
   2486c:	10bdffcc 	andi	r2,r2,63487
   24870:	8880030d 	sth	r2,12(r17)
   24874:	88c00015 	stw	r3,0(r17)
   24878:	003fb306 	br	24748 <__alt_data_end+0xfffeb748>
   2487c:	98800017 	ldw	r2,0(r19)
   24880:	103fea26 	beq	r2,zero,2482c <__alt_data_end+0xfffeb82c>
   24884:	00c00744 	movi	r3,29
   24888:	10c00226 	beq	r2,r3,24894 <__sflush_r+0x1fc>
   2488c:	00c00584 	movi	r3,22
   24890:	10c0031e 	bne	r2,r3,248a0 <__sflush_r+0x208>
   24894:	9c000015 	stw	r16,0(r19)
   24898:	0005883a 	mov	r2,zero
   2489c:	003fb306 	br	2476c <__alt_data_end+0xfffeb76c>
   248a0:	88c0030b 	ldhu	r3,12(r17)
   248a4:	3005883a 	mov	r2,r6
   248a8:	18c01014 	ori	r3,r3,64
   248ac:	88c0030d 	sth	r3,12(r17)
   248b0:	003fae06 	br	2476c <__alt_data_end+0xfffeb76c>

000248b4 <_fflush_r>:
   248b4:	defffd04 	addi	sp,sp,-12
   248b8:	dc000115 	stw	r16,4(sp)
   248bc:	dfc00215 	stw	ra,8(sp)
   248c0:	2021883a 	mov	r16,r4
   248c4:	20000226 	beq	r4,zero,248d0 <_fflush_r+0x1c>
   248c8:	20800e17 	ldw	r2,56(r4)
   248cc:	10000c26 	beq	r2,zero,24900 <_fflush_r+0x4c>
   248d0:	2880030f 	ldh	r2,12(r5)
   248d4:	1000051e 	bne	r2,zero,248ec <_fflush_r+0x38>
   248d8:	0005883a 	mov	r2,zero
   248dc:	dfc00217 	ldw	ra,8(sp)
   248e0:	dc000117 	ldw	r16,4(sp)
   248e4:	dec00304 	addi	sp,sp,12
   248e8:	f800283a 	ret
   248ec:	8009883a 	mov	r4,r16
   248f0:	dfc00217 	ldw	ra,8(sp)
   248f4:	dc000117 	ldw	r16,4(sp)
   248f8:	dec00304 	addi	sp,sp,12
   248fc:	00246981 	jmpi	24698 <__sflush_r>
   24900:	d9400015 	stw	r5,0(sp)
   24904:	0024ca00 	call	24ca0 <__sinit>
   24908:	d9400017 	ldw	r5,0(sp)
   2490c:	003ff006 	br	248d0 <__alt_data_end+0xfffeb8d0>

00024910 <fflush>:
   24910:	20000526 	beq	r4,zero,24928 <fflush+0x18>
   24914:	008000b4 	movhi	r2,2
   24918:	109ed704 	addi	r2,r2,31580
   2491c:	200b883a 	mov	r5,r4
   24920:	11000017 	ldw	r4,0(r2)
   24924:	00248b41 	jmpi	248b4 <_fflush_r>
   24928:	008000b4 	movhi	r2,2
   2492c:	109ed604 	addi	r2,r2,31576
   24930:	11000017 	ldw	r4,0(r2)
   24934:	014000b4 	movhi	r5,2
   24938:	29522d04 	addi	r5,r5,18612
   2493c:	00251e81 	jmpi	251e8 <_fwalk_reent>

00024940 <__fp_unlock>:
   24940:	0005883a 	mov	r2,zero
   24944:	f800283a 	ret

00024948 <_cleanup_r>:
   24948:	014000b4 	movhi	r5,2
   2494c:	2955e004 	addi	r5,r5,22400
   24950:	00251e81 	jmpi	251e8 <_fwalk_reent>

00024954 <__sinit.part.1>:
   24954:	defff704 	addi	sp,sp,-36
   24958:	00c000b4 	movhi	r3,2
   2495c:	dfc00815 	stw	ra,32(sp)
   24960:	ddc00715 	stw	r23,28(sp)
   24964:	dd800615 	stw	r22,24(sp)
   24968:	dd400515 	stw	r21,20(sp)
   2496c:	dd000415 	stw	r20,16(sp)
   24970:	dcc00315 	stw	r19,12(sp)
   24974:	dc800215 	stw	r18,8(sp)
   24978:	dc400115 	stw	r17,4(sp)
   2497c:	dc000015 	stw	r16,0(sp)
   24980:	18d25204 	addi	r3,r3,18760
   24984:	24000117 	ldw	r16,4(r4)
   24988:	20c00f15 	stw	r3,60(r4)
   2498c:	2080bb04 	addi	r2,r4,748
   24990:	00c000c4 	movi	r3,3
   24994:	20c0b915 	stw	r3,740(r4)
   24998:	2080ba15 	stw	r2,744(r4)
   2499c:	2000b815 	stw	zero,736(r4)
   249a0:	05c00204 	movi	r23,8
   249a4:	00800104 	movi	r2,4
   249a8:	2025883a 	mov	r18,r4
   249ac:	b80d883a 	mov	r6,r23
   249b0:	81001704 	addi	r4,r16,92
   249b4:	000b883a 	mov	r5,zero
   249b8:	80000015 	stw	zero,0(r16)
   249bc:	80000115 	stw	zero,4(r16)
   249c0:	80000215 	stw	zero,8(r16)
   249c4:	8080030d 	sth	r2,12(r16)
   249c8:	80001915 	stw	zero,100(r16)
   249cc:	8000038d 	sth	zero,14(r16)
   249d0:	80000415 	stw	zero,16(r16)
   249d4:	80000515 	stw	zero,20(r16)
   249d8:	80000615 	stw	zero,24(r16)
   249dc:	00254680 	call	25468 <memset>
   249e0:	058000b4 	movhi	r22,2
   249e4:	94400217 	ldw	r17,8(r18)
   249e8:	054000b4 	movhi	r21,2
   249ec:	050000b4 	movhi	r20,2
   249f0:	04c000b4 	movhi	r19,2
   249f4:	b5956404 	addi	r22,r22,21904
   249f8:	ad557b04 	addi	r21,r21,21996
   249fc:	a5159a04 	addi	r20,r20,22120
   24a00:	9cd5b104 	addi	r19,r19,22212
   24a04:	85800815 	stw	r22,32(r16)
   24a08:	85400915 	stw	r21,36(r16)
   24a0c:	85000a15 	stw	r20,40(r16)
   24a10:	84c00b15 	stw	r19,44(r16)
   24a14:	84000715 	stw	r16,28(r16)
   24a18:	00800284 	movi	r2,10
   24a1c:	8880030d 	sth	r2,12(r17)
   24a20:	00800044 	movi	r2,1
   24a24:	b80d883a 	mov	r6,r23
   24a28:	89001704 	addi	r4,r17,92
   24a2c:	000b883a 	mov	r5,zero
   24a30:	88000015 	stw	zero,0(r17)
   24a34:	88000115 	stw	zero,4(r17)
   24a38:	88000215 	stw	zero,8(r17)
   24a3c:	88001915 	stw	zero,100(r17)
   24a40:	8880038d 	sth	r2,14(r17)
   24a44:	88000415 	stw	zero,16(r17)
   24a48:	88000515 	stw	zero,20(r17)
   24a4c:	88000615 	stw	zero,24(r17)
   24a50:	00254680 	call	25468 <memset>
   24a54:	94000317 	ldw	r16,12(r18)
   24a58:	00800484 	movi	r2,18
   24a5c:	8c400715 	stw	r17,28(r17)
   24a60:	8d800815 	stw	r22,32(r17)
   24a64:	8d400915 	stw	r21,36(r17)
   24a68:	8d000a15 	stw	r20,40(r17)
   24a6c:	8cc00b15 	stw	r19,44(r17)
   24a70:	8080030d 	sth	r2,12(r16)
   24a74:	00800084 	movi	r2,2
   24a78:	80000015 	stw	zero,0(r16)
   24a7c:	80000115 	stw	zero,4(r16)
   24a80:	80000215 	stw	zero,8(r16)
   24a84:	80001915 	stw	zero,100(r16)
   24a88:	8080038d 	sth	r2,14(r16)
   24a8c:	80000415 	stw	zero,16(r16)
   24a90:	80000515 	stw	zero,20(r16)
   24a94:	80000615 	stw	zero,24(r16)
   24a98:	b80d883a 	mov	r6,r23
   24a9c:	000b883a 	mov	r5,zero
   24aa0:	81001704 	addi	r4,r16,92
   24aa4:	00254680 	call	25468 <memset>
   24aa8:	00800044 	movi	r2,1
   24aac:	84000715 	stw	r16,28(r16)
   24ab0:	85800815 	stw	r22,32(r16)
   24ab4:	85400915 	stw	r21,36(r16)
   24ab8:	85000a15 	stw	r20,40(r16)
   24abc:	84c00b15 	stw	r19,44(r16)
   24ac0:	90800e15 	stw	r2,56(r18)
   24ac4:	dfc00817 	ldw	ra,32(sp)
   24ac8:	ddc00717 	ldw	r23,28(sp)
   24acc:	dd800617 	ldw	r22,24(sp)
   24ad0:	dd400517 	ldw	r21,20(sp)
   24ad4:	dd000417 	ldw	r20,16(sp)
   24ad8:	dcc00317 	ldw	r19,12(sp)
   24adc:	dc800217 	ldw	r18,8(sp)
   24ae0:	dc400117 	ldw	r17,4(sp)
   24ae4:	dc000017 	ldw	r16,0(sp)
   24ae8:	dec00904 	addi	sp,sp,36
   24aec:	f800283a 	ret

00024af0 <__fp_lock>:
   24af0:	0005883a 	mov	r2,zero
   24af4:	f800283a 	ret

00024af8 <__sfmoreglue>:
   24af8:	defffc04 	addi	sp,sp,-16
   24afc:	dc800215 	stw	r18,8(sp)
   24b00:	2825883a 	mov	r18,r5
   24b04:	dc000015 	stw	r16,0(sp)
   24b08:	01401a04 	movi	r5,104
   24b0c:	2021883a 	mov	r16,r4
   24b10:	913fffc4 	addi	r4,r18,-1
   24b14:	dfc00315 	stw	ra,12(sp)
   24b18:	dc400115 	stw	r17,4(sp)
   24b1c:	0020c7c0 	call	20c7c <__mulsi3>
   24b20:	8009883a 	mov	r4,r16
   24b24:	11401d04 	addi	r5,r2,116
   24b28:	1023883a 	mov	r17,r2
   24b2c:	002304c0 	call	2304c <_malloc_r>
   24b30:	1021883a 	mov	r16,r2
   24b34:	10000726 	beq	r2,zero,24b54 <__sfmoreglue+0x5c>
   24b38:	11000304 	addi	r4,r2,12
   24b3c:	10000015 	stw	zero,0(r2)
   24b40:	14800115 	stw	r18,4(r2)
   24b44:	11000215 	stw	r4,8(r2)
   24b48:	89801a04 	addi	r6,r17,104
   24b4c:	000b883a 	mov	r5,zero
   24b50:	00254680 	call	25468 <memset>
   24b54:	8005883a 	mov	r2,r16
   24b58:	dfc00317 	ldw	ra,12(sp)
   24b5c:	dc800217 	ldw	r18,8(sp)
   24b60:	dc400117 	ldw	r17,4(sp)
   24b64:	dc000017 	ldw	r16,0(sp)
   24b68:	dec00404 	addi	sp,sp,16
   24b6c:	f800283a 	ret

00024b70 <__sfp>:
   24b70:	defffb04 	addi	sp,sp,-20
   24b74:	dc000015 	stw	r16,0(sp)
   24b78:	040000b4 	movhi	r16,2
   24b7c:	841ed604 	addi	r16,r16,31576
   24b80:	dcc00315 	stw	r19,12(sp)
   24b84:	2027883a 	mov	r19,r4
   24b88:	81000017 	ldw	r4,0(r16)
   24b8c:	dfc00415 	stw	ra,16(sp)
   24b90:	dc800215 	stw	r18,8(sp)
   24b94:	20800e17 	ldw	r2,56(r4)
   24b98:	dc400115 	stw	r17,4(sp)
   24b9c:	1000021e 	bne	r2,zero,24ba8 <__sfp+0x38>
   24ba0:	00249540 	call	24954 <__sinit.part.1>
   24ba4:	81000017 	ldw	r4,0(r16)
   24ba8:	2480b804 	addi	r18,r4,736
   24bac:	047fffc4 	movi	r17,-1
   24bb0:	91000117 	ldw	r4,4(r18)
   24bb4:	94000217 	ldw	r16,8(r18)
   24bb8:	213fffc4 	addi	r4,r4,-1
   24bbc:	20000a16 	blt	r4,zero,24be8 <__sfp+0x78>
   24bc0:	8080030f 	ldh	r2,12(r16)
   24bc4:	10000c26 	beq	r2,zero,24bf8 <__sfp+0x88>
   24bc8:	80c01d04 	addi	r3,r16,116
   24bcc:	00000206 	br	24bd8 <__sfp+0x68>
   24bd0:	18bfe60f 	ldh	r2,-104(r3)
   24bd4:	10000826 	beq	r2,zero,24bf8 <__sfp+0x88>
   24bd8:	213fffc4 	addi	r4,r4,-1
   24bdc:	1c3ffd04 	addi	r16,r3,-12
   24be0:	18c01a04 	addi	r3,r3,104
   24be4:	247ffa1e 	bne	r4,r17,24bd0 <__alt_data_end+0xfffebbd0>
   24be8:	90800017 	ldw	r2,0(r18)
   24bec:	10001d26 	beq	r2,zero,24c64 <__sfp+0xf4>
   24bf0:	1025883a 	mov	r18,r2
   24bf4:	003fee06 	br	24bb0 <__alt_data_end+0xfffebbb0>
   24bf8:	00bfffc4 	movi	r2,-1
   24bfc:	8080038d 	sth	r2,14(r16)
   24c00:	00800044 	movi	r2,1
   24c04:	8080030d 	sth	r2,12(r16)
   24c08:	80001915 	stw	zero,100(r16)
   24c0c:	80000015 	stw	zero,0(r16)
   24c10:	80000215 	stw	zero,8(r16)
   24c14:	80000115 	stw	zero,4(r16)
   24c18:	80000415 	stw	zero,16(r16)
   24c1c:	80000515 	stw	zero,20(r16)
   24c20:	80000615 	stw	zero,24(r16)
   24c24:	01800204 	movi	r6,8
   24c28:	000b883a 	mov	r5,zero
   24c2c:	81001704 	addi	r4,r16,92
   24c30:	00254680 	call	25468 <memset>
   24c34:	8005883a 	mov	r2,r16
   24c38:	80000c15 	stw	zero,48(r16)
   24c3c:	80000d15 	stw	zero,52(r16)
   24c40:	80001115 	stw	zero,68(r16)
   24c44:	80001215 	stw	zero,72(r16)
   24c48:	dfc00417 	ldw	ra,16(sp)
   24c4c:	dcc00317 	ldw	r19,12(sp)
   24c50:	dc800217 	ldw	r18,8(sp)
   24c54:	dc400117 	ldw	r17,4(sp)
   24c58:	dc000017 	ldw	r16,0(sp)
   24c5c:	dec00504 	addi	sp,sp,20
   24c60:	f800283a 	ret
   24c64:	01400104 	movi	r5,4
   24c68:	9809883a 	mov	r4,r19
   24c6c:	0024af80 	call	24af8 <__sfmoreglue>
   24c70:	90800015 	stw	r2,0(r18)
   24c74:	103fde1e 	bne	r2,zero,24bf0 <__alt_data_end+0xfffebbf0>
   24c78:	00800304 	movi	r2,12
   24c7c:	98800015 	stw	r2,0(r19)
   24c80:	0005883a 	mov	r2,zero
   24c84:	003ff006 	br	24c48 <__alt_data_end+0xfffebc48>

00024c88 <_cleanup>:
   24c88:	008000b4 	movhi	r2,2
   24c8c:	109ed604 	addi	r2,r2,31576
   24c90:	11000017 	ldw	r4,0(r2)
   24c94:	014000b4 	movhi	r5,2
   24c98:	2955e004 	addi	r5,r5,22400
   24c9c:	00251e81 	jmpi	251e8 <_fwalk_reent>

00024ca0 <__sinit>:
   24ca0:	20800e17 	ldw	r2,56(r4)
   24ca4:	10000126 	beq	r2,zero,24cac <__sinit+0xc>
   24ca8:	f800283a 	ret
   24cac:	00249541 	jmpi	24954 <__sinit.part.1>

00024cb0 <__sfp_lock_acquire>:
   24cb0:	f800283a 	ret

00024cb4 <__sfp_lock_release>:
   24cb4:	f800283a 	ret

00024cb8 <__sinit_lock_acquire>:
   24cb8:	f800283a 	ret

00024cbc <__sinit_lock_release>:
   24cbc:	f800283a 	ret

00024cc0 <__fp_lock_all>:
   24cc0:	008000b4 	movhi	r2,2
   24cc4:	109ed704 	addi	r2,r2,31580
   24cc8:	11000017 	ldw	r4,0(r2)
   24ccc:	014000b4 	movhi	r5,2
   24cd0:	2952bc04 	addi	r5,r5,19184
   24cd4:	00251241 	jmpi	25124 <_fwalk>

00024cd8 <__fp_unlock_all>:
   24cd8:	008000b4 	movhi	r2,2
   24cdc:	109ed704 	addi	r2,r2,31580
   24ce0:	11000017 	ldw	r4,0(r2)
   24ce4:	014000b4 	movhi	r5,2
   24ce8:	29525004 	addi	r5,r5,18752
   24cec:	00251241 	jmpi	25124 <_fwalk>

00024cf0 <_malloc_trim_r>:
   24cf0:	defffb04 	addi	sp,sp,-20
   24cf4:	dcc00315 	stw	r19,12(sp)
   24cf8:	04c000b4 	movhi	r19,2
   24cfc:	dc800215 	stw	r18,8(sp)
   24d00:	dc400115 	stw	r17,4(sp)
   24d04:	dc000015 	stw	r16,0(sp)
   24d08:	dfc00415 	stw	ra,16(sp)
   24d0c:	2821883a 	mov	r16,r5
   24d10:	9cddca04 	addi	r19,r19,30504
   24d14:	2025883a 	mov	r18,r4
   24d18:	0025d1c0 	call	25d1c <__malloc_lock>
   24d1c:	98800217 	ldw	r2,8(r19)
   24d20:	14400117 	ldw	r17,4(r2)
   24d24:	00bfff04 	movi	r2,-4
   24d28:	88a2703a 	and	r17,r17,r2
   24d2c:	8c21c83a 	sub	r16,r17,r16
   24d30:	8403fbc4 	addi	r16,r16,4079
   24d34:	8020d33a 	srli	r16,r16,12
   24d38:	0083ffc4 	movi	r2,4095
   24d3c:	843fffc4 	addi	r16,r16,-1
   24d40:	8020933a 	slli	r16,r16,12
   24d44:	1400060e 	bge	r2,r16,24d60 <_malloc_trim_r+0x70>
   24d48:	000b883a 	mov	r5,zero
   24d4c:	9009883a 	mov	r4,r18
   24d50:	00241c00 	call	241c0 <_sbrk_r>
   24d54:	98c00217 	ldw	r3,8(r19)
   24d58:	1c47883a 	add	r3,r3,r17
   24d5c:	10c00a26 	beq	r2,r3,24d88 <_malloc_trim_r+0x98>
   24d60:	9009883a 	mov	r4,r18
   24d64:	0025d400 	call	25d40 <__malloc_unlock>
   24d68:	0005883a 	mov	r2,zero
   24d6c:	dfc00417 	ldw	ra,16(sp)
   24d70:	dcc00317 	ldw	r19,12(sp)
   24d74:	dc800217 	ldw	r18,8(sp)
   24d78:	dc400117 	ldw	r17,4(sp)
   24d7c:	dc000017 	ldw	r16,0(sp)
   24d80:	dec00504 	addi	sp,sp,20
   24d84:	f800283a 	ret
   24d88:	040bc83a 	sub	r5,zero,r16
   24d8c:	9009883a 	mov	r4,r18
   24d90:	00241c00 	call	241c0 <_sbrk_r>
   24d94:	00ffffc4 	movi	r3,-1
   24d98:	10c00d26 	beq	r2,r3,24dd0 <_malloc_trim_r+0xe0>
   24d9c:	00c000f4 	movhi	r3,3
   24da0:	18e58204 	addi	r3,r3,-27128
   24da4:	18800017 	ldw	r2,0(r3)
   24da8:	99000217 	ldw	r4,8(r19)
   24dac:	8c23c83a 	sub	r17,r17,r16
   24db0:	8c400054 	ori	r17,r17,1
   24db4:	1421c83a 	sub	r16,r2,r16
   24db8:	24400115 	stw	r17,4(r4)
   24dbc:	9009883a 	mov	r4,r18
   24dc0:	1c000015 	stw	r16,0(r3)
   24dc4:	0025d400 	call	25d40 <__malloc_unlock>
   24dc8:	00800044 	movi	r2,1
   24dcc:	003fe706 	br	24d6c <__alt_data_end+0xfffebd6c>
   24dd0:	000b883a 	mov	r5,zero
   24dd4:	9009883a 	mov	r4,r18
   24dd8:	00241c00 	call	241c0 <_sbrk_r>
   24ddc:	99000217 	ldw	r4,8(r19)
   24de0:	014003c4 	movi	r5,15
   24de4:	1107c83a 	sub	r3,r2,r4
   24de8:	28ffdd0e 	bge	r5,r3,24d60 <__alt_data_end+0xfffebd60>
   24dec:	014000b4 	movhi	r5,2
   24df0:	295ed804 	addi	r5,r5,31584
   24df4:	29400017 	ldw	r5,0(r5)
   24df8:	18c00054 	ori	r3,r3,1
   24dfc:	20c00115 	stw	r3,4(r4)
   24e00:	00c000f4 	movhi	r3,3
   24e04:	1145c83a 	sub	r2,r2,r5
   24e08:	18e58204 	addi	r3,r3,-27128
   24e0c:	18800015 	stw	r2,0(r3)
   24e10:	003fd306 	br	24d60 <__alt_data_end+0xfffebd60>

00024e14 <_free_r>:
   24e14:	28004126 	beq	r5,zero,24f1c <_free_r+0x108>
   24e18:	defffd04 	addi	sp,sp,-12
   24e1c:	dc400115 	stw	r17,4(sp)
   24e20:	dc000015 	stw	r16,0(sp)
   24e24:	2023883a 	mov	r17,r4
   24e28:	2821883a 	mov	r16,r5
   24e2c:	dfc00215 	stw	ra,8(sp)
   24e30:	0025d1c0 	call	25d1c <__malloc_lock>
   24e34:	81ffff17 	ldw	r7,-4(r16)
   24e38:	00bfff84 	movi	r2,-2
   24e3c:	010000b4 	movhi	r4,2
   24e40:	81bffe04 	addi	r6,r16,-8
   24e44:	3884703a 	and	r2,r7,r2
   24e48:	211dca04 	addi	r4,r4,30504
   24e4c:	308b883a 	add	r5,r6,r2
   24e50:	2a400117 	ldw	r9,4(r5)
   24e54:	22000217 	ldw	r8,8(r4)
   24e58:	00ffff04 	movi	r3,-4
   24e5c:	48c6703a 	and	r3,r9,r3
   24e60:	2a005726 	beq	r5,r8,24fc0 <_free_r+0x1ac>
   24e64:	28c00115 	stw	r3,4(r5)
   24e68:	39c0004c 	andi	r7,r7,1
   24e6c:	3800091e 	bne	r7,zero,24e94 <_free_r+0x80>
   24e70:	823ffe17 	ldw	r8,-8(r16)
   24e74:	22400204 	addi	r9,r4,8
   24e78:	320dc83a 	sub	r6,r6,r8
   24e7c:	31c00217 	ldw	r7,8(r6)
   24e80:	1205883a 	add	r2,r2,r8
   24e84:	3a406526 	beq	r7,r9,2501c <_free_r+0x208>
   24e88:	32000317 	ldw	r8,12(r6)
   24e8c:	3a000315 	stw	r8,12(r7)
   24e90:	41c00215 	stw	r7,8(r8)
   24e94:	28cf883a 	add	r7,r5,r3
   24e98:	39c00117 	ldw	r7,4(r7)
   24e9c:	39c0004c 	andi	r7,r7,1
   24ea0:	38003a26 	beq	r7,zero,24f8c <_free_r+0x178>
   24ea4:	10c00054 	ori	r3,r2,1
   24ea8:	30c00115 	stw	r3,4(r6)
   24eac:	3087883a 	add	r3,r6,r2
   24eb0:	18800015 	stw	r2,0(r3)
   24eb4:	00c07fc4 	movi	r3,511
   24eb8:	18801936 	bltu	r3,r2,24f20 <_free_r+0x10c>
   24ebc:	1004d0fa 	srli	r2,r2,3
   24ec0:	01c00044 	movi	r7,1
   24ec4:	21400117 	ldw	r5,4(r4)
   24ec8:	10c00044 	addi	r3,r2,1
   24ecc:	18c7883a 	add	r3,r3,r3
   24ed0:	1005d0ba 	srai	r2,r2,2
   24ed4:	18c7883a 	add	r3,r3,r3
   24ed8:	18c7883a 	add	r3,r3,r3
   24edc:	1907883a 	add	r3,r3,r4
   24ee0:	3884983a 	sll	r2,r7,r2
   24ee4:	19c00017 	ldw	r7,0(r3)
   24ee8:	1a3ffe04 	addi	r8,r3,-8
   24eec:	1144b03a 	or	r2,r2,r5
   24ef0:	32000315 	stw	r8,12(r6)
   24ef4:	31c00215 	stw	r7,8(r6)
   24ef8:	20800115 	stw	r2,4(r4)
   24efc:	19800015 	stw	r6,0(r3)
   24f00:	39800315 	stw	r6,12(r7)
   24f04:	8809883a 	mov	r4,r17
   24f08:	dfc00217 	ldw	ra,8(sp)
   24f0c:	dc400117 	ldw	r17,4(sp)
   24f10:	dc000017 	ldw	r16,0(sp)
   24f14:	dec00304 	addi	sp,sp,12
   24f18:	0025d401 	jmpi	25d40 <__malloc_unlock>
   24f1c:	f800283a 	ret
   24f20:	100ad27a 	srli	r5,r2,9
   24f24:	00c00104 	movi	r3,4
   24f28:	19404a36 	bltu	r3,r5,25054 <_free_r+0x240>
   24f2c:	100ad1ba 	srli	r5,r2,6
   24f30:	28c00e44 	addi	r3,r5,57
   24f34:	18c7883a 	add	r3,r3,r3
   24f38:	29400e04 	addi	r5,r5,56
   24f3c:	18c7883a 	add	r3,r3,r3
   24f40:	18c7883a 	add	r3,r3,r3
   24f44:	1909883a 	add	r4,r3,r4
   24f48:	20c00017 	ldw	r3,0(r4)
   24f4c:	01c000b4 	movhi	r7,2
   24f50:	213ffe04 	addi	r4,r4,-8
   24f54:	39ddca04 	addi	r7,r7,30504
   24f58:	20c04426 	beq	r4,r3,2506c <_free_r+0x258>
   24f5c:	01ffff04 	movi	r7,-4
   24f60:	19400117 	ldw	r5,4(r3)
   24f64:	29ca703a 	and	r5,r5,r7
   24f68:	1140022e 	bgeu	r2,r5,24f74 <_free_r+0x160>
   24f6c:	18c00217 	ldw	r3,8(r3)
   24f70:	20fffb1e 	bne	r4,r3,24f60 <__alt_data_end+0xfffebf60>
   24f74:	19000317 	ldw	r4,12(r3)
   24f78:	31000315 	stw	r4,12(r6)
   24f7c:	30c00215 	stw	r3,8(r6)
   24f80:	21800215 	stw	r6,8(r4)
   24f84:	19800315 	stw	r6,12(r3)
   24f88:	003fde06 	br	24f04 <__alt_data_end+0xfffebf04>
   24f8c:	29c00217 	ldw	r7,8(r5)
   24f90:	10c5883a 	add	r2,r2,r3
   24f94:	00c000b4 	movhi	r3,2
   24f98:	18ddcc04 	addi	r3,r3,30512
   24f9c:	38c03b26 	beq	r7,r3,2508c <_free_r+0x278>
   24fa0:	2a000317 	ldw	r8,12(r5)
   24fa4:	11400054 	ori	r5,r2,1
   24fa8:	3087883a 	add	r3,r6,r2
   24fac:	3a000315 	stw	r8,12(r7)
   24fb0:	41c00215 	stw	r7,8(r8)
   24fb4:	31400115 	stw	r5,4(r6)
   24fb8:	18800015 	stw	r2,0(r3)
   24fbc:	003fbd06 	br	24eb4 <__alt_data_end+0xfffebeb4>
   24fc0:	39c0004c 	andi	r7,r7,1
   24fc4:	10c5883a 	add	r2,r2,r3
   24fc8:	3800071e 	bne	r7,zero,24fe8 <_free_r+0x1d4>
   24fcc:	81fffe17 	ldw	r7,-8(r16)
   24fd0:	31cdc83a 	sub	r6,r6,r7
   24fd4:	30c00317 	ldw	r3,12(r6)
   24fd8:	31400217 	ldw	r5,8(r6)
   24fdc:	11c5883a 	add	r2,r2,r7
   24fe0:	28c00315 	stw	r3,12(r5)
   24fe4:	19400215 	stw	r5,8(r3)
   24fe8:	10c00054 	ori	r3,r2,1
   24fec:	30c00115 	stw	r3,4(r6)
   24ff0:	00c000b4 	movhi	r3,2
   24ff4:	18ded904 	addi	r3,r3,31588
   24ff8:	18c00017 	ldw	r3,0(r3)
   24ffc:	21800215 	stw	r6,8(r4)
   25000:	10ffc036 	bltu	r2,r3,24f04 <__alt_data_end+0xfffebf04>
   25004:	008000f4 	movhi	r2,3
   25008:	10a58104 	addi	r2,r2,-27132
   2500c:	11400017 	ldw	r5,0(r2)
   25010:	8809883a 	mov	r4,r17
   25014:	0024cf00 	call	24cf0 <_malloc_trim_r>
   25018:	003fba06 	br	24f04 <__alt_data_end+0xfffebf04>
   2501c:	28c9883a 	add	r4,r5,r3
   25020:	21000117 	ldw	r4,4(r4)
   25024:	2100004c 	andi	r4,r4,1
   25028:	2000391e 	bne	r4,zero,25110 <_free_r+0x2fc>
   2502c:	29c00217 	ldw	r7,8(r5)
   25030:	29000317 	ldw	r4,12(r5)
   25034:	1885883a 	add	r2,r3,r2
   25038:	10c00054 	ori	r3,r2,1
   2503c:	39000315 	stw	r4,12(r7)
   25040:	21c00215 	stw	r7,8(r4)
   25044:	30c00115 	stw	r3,4(r6)
   25048:	308d883a 	add	r6,r6,r2
   2504c:	30800015 	stw	r2,0(r6)
   25050:	003fac06 	br	24f04 <__alt_data_end+0xfffebf04>
   25054:	00c00504 	movi	r3,20
   25058:	19401536 	bltu	r3,r5,250b0 <_free_r+0x29c>
   2505c:	28c01704 	addi	r3,r5,92
   25060:	18c7883a 	add	r3,r3,r3
   25064:	294016c4 	addi	r5,r5,91
   25068:	003fb406 	br	24f3c <__alt_data_end+0xfffebf3c>
   2506c:	280bd0ba 	srai	r5,r5,2
   25070:	00c00044 	movi	r3,1
   25074:	38800117 	ldw	r2,4(r7)
   25078:	194a983a 	sll	r5,r3,r5
   2507c:	2007883a 	mov	r3,r4
   25080:	2884b03a 	or	r2,r5,r2
   25084:	38800115 	stw	r2,4(r7)
   25088:	003fbb06 	br	24f78 <__alt_data_end+0xfffebf78>
   2508c:	21800515 	stw	r6,20(r4)
   25090:	21800415 	stw	r6,16(r4)
   25094:	10c00054 	ori	r3,r2,1
   25098:	31c00315 	stw	r7,12(r6)
   2509c:	31c00215 	stw	r7,8(r6)
   250a0:	30c00115 	stw	r3,4(r6)
   250a4:	308d883a 	add	r6,r6,r2
   250a8:	30800015 	stw	r2,0(r6)
   250ac:	003f9506 	br	24f04 <__alt_data_end+0xfffebf04>
   250b0:	00c01504 	movi	r3,84
   250b4:	19400536 	bltu	r3,r5,250cc <_free_r+0x2b8>
   250b8:	100ad33a 	srli	r5,r2,12
   250bc:	28c01bc4 	addi	r3,r5,111
   250c0:	18c7883a 	add	r3,r3,r3
   250c4:	29401b84 	addi	r5,r5,110
   250c8:	003f9c06 	br	24f3c <__alt_data_end+0xfffebf3c>
   250cc:	00c05504 	movi	r3,340
   250d0:	19400536 	bltu	r3,r5,250e8 <_free_r+0x2d4>
   250d4:	100ad3fa 	srli	r5,r2,15
   250d8:	28c01e04 	addi	r3,r5,120
   250dc:	18c7883a 	add	r3,r3,r3
   250e0:	29401dc4 	addi	r5,r5,119
   250e4:	003f9506 	br	24f3c <__alt_data_end+0xfffebf3c>
   250e8:	00c15504 	movi	r3,1364
   250ec:	19400536 	bltu	r3,r5,25104 <_free_r+0x2f0>
   250f0:	100ad4ba 	srli	r5,r2,18
   250f4:	28c01f44 	addi	r3,r5,125
   250f8:	18c7883a 	add	r3,r3,r3
   250fc:	29401f04 	addi	r5,r5,124
   25100:	003f8e06 	br	24f3c <__alt_data_end+0xfffebf3c>
   25104:	00c03f84 	movi	r3,254
   25108:	01401f84 	movi	r5,126
   2510c:	003f8b06 	br	24f3c <__alt_data_end+0xfffebf3c>
   25110:	10c00054 	ori	r3,r2,1
   25114:	30c00115 	stw	r3,4(r6)
   25118:	308d883a 	add	r6,r6,r2
   2511c:	30800015 	stw	r2,0(r6)
   25120:	003f7806 	br	24f04 <__alt_data_end+0xfffebf04>

00025124 <_fwalk>:
   25124:	defff704 	addi	sp,sp,-36
   25128:	dd000415 	stw	r20,16(sp)
   2512c:	dfc00815 	stw	ra,32(sp)
   25130:	ddc00715 	stw	r23,28(sp)
   25134:	dd800615 	stw	r22,24(sp)
   25138:	dd400515 	stw	r21,20(sp)
   2513c:	dcc00315 	stw	r19,12(sp)
   25140:	dc800215 	stw	r18,8(sp)
   25144:	dc400115 	stw	r17,4(sp)
   25148:	dc000015 	stw	r16,0(sp)
   2514c:	2500b804 	addi	r20,r4,736
   25150:	a0002326 	beq	r20,zero,251e0 <_fwalk+0xbc>
   25154:	282b883a 	mov	r21,r5
   25158:	002f883a 	mov	r23,zero
   2515c:	05800044 	movi	r22,1
   25160:	04ffffc4 	movi	r19,-1
   25164:	a4400117 	ldw	r17,4(r20)
   25168:	a4800217 	ldw	r18,8(r20)
   2516c:	8c7fffc4 	addi	r17,r17,-1
   25170:	88000d16 	blt	r17,zero,251a8 <_fwalk+0x84>
   25174:	94000304 	addi	r16,r18,12
   25178:	94800384 	addi	r18,r18,14
   2517c:	8080000b 	ldhu	r2,0(r16)
   25180:	8c7fffc4 	addi	r17,r17,-1
   25184:	813ffd04 	addi	r4,r16,-12
   25188:	b080042e 	bgeu	r22,r2,2519c <_fwalk+0x78>
   2518c:	9080000f 	ldh	r2,0(r18)
   25190:	14c00226 	beq	r2,r19,2519c <_fwalk+0x78>
   25194:	a83ee83a 	callr	r21
   25198:	b8aeb03a 	or	r23,r23,r2
   2519c:	84001a04 	addi	r16,r16,104
   251a0:	94801a04 	addi	r18,r18,104
   251a4:	8cfff51e 	bne	r17,r19,2517c <__alt_data_end+0xfffec17c>
   251a8:	a5000017 	ldw	r20,0(r20)
   251ac:	a03fed1e 	bne	r20,zero,25164 <__alt_data_end+0xfffec164>
   251b0:	b805883a 	mov	r2,r23
   251b4:	dfc00817 	ldw	ra,32(sp)
   251b8:	ddc00717 	ldw	r23,28(sp)
   251bc:	dd800617 	ldw	r22,24(sp)
   251c0:	dd400517 	ldw	r21,20(sp)
   251c4:	dd000417 	ldw	r20,16(sp)
   251c8:	dcc00317 	ldw	r19,12(sp)
   251cc:	dc800217 	ldw	r18,8(sp)
   251d0:	dc400117 	ldw	r17,4(sp)
   251d4:	dc000017 	ldw	r16,0(sp)
   251d8:	dec00904 	addi	sp,sp,36
   251dc:	f800283a 	ret
   251e0:	002f883a 	mov	r23,zero
   251e4:	003ff206 	br	251b0 <__alt_data_end+0xfffec1b0>

000251e8 <_fwalk_reent>:
   251e8:	defff704 	addi	sp,sp,-36
   251ec:	dd000415 	stw	r20,16(sp)
   251f0:	dfc00815 	stw	ra,32(sp)
   251f4:	ddc00715 	stw	r23,28(sp)
   251f8:	dd800615 	stw	r22,24(sp)
   251fc:	dd400515 	stw	r21,20(sp)
   25200:	dcc00315 	stw	r19,12(sp)
   25204:	dc800215 	stw	r18,8(sp)
   25208:	dc400115 	stw	r17,4(sp)
   2520c:	dc000015 	stw	r16,0(sp)
   25210:	2500b804 	addi	r20,r4,736
   25214:	a0002326 	beq	r20,zero,252a4 <_fwalk_reent+0xbc>
   25218:	282b883a 	mov	r21,r5
   2521c:	2027883a 	mov	r19,r4
   25220:	002f883a 	mov	r23,zero
   25224:	05800044 	movi	r22,1
   25228:	04bfffc4 	movi	r18,-1
   2522c:	a4400117 	ldw	r17,4(r20)
   25230:	a4000217 	ldw	r16,8(r20)
   25234:	8c7fffc4 	addi	r17,r17,-1
   25238:	88000c16 	blt	r17,zero,2526c <_fwalk_reent+0x84>
   2523c:	84000304 	addi	r16,r16,12
   25240:	8080000b 	ldhu	r2,0(r16)
   25244:	8c7fffc4 	addi	r17,r17,-1
   25248:	817ffd04 	addi	r5,r16,-12
   2524c:	b080052e 	bgeu	r22,r2,25264 <_fwalk_reent+0x7c>
   25250:	8080008f 	ldh	r2,2(r16)
   25254:	9809883a 	mov	r4,r19
   25258:	14800226 	beq	r2,r18,25264 <_fwalk_reent+0x7c>
   2525c:	a83ee83a 	callr	r21
   25260:	b8aeb03a 	or	r23,r23,r2
   25264:	84001a04 	addi	r16,r16,104
   25268:	8cbff51e 	bne	r17,r18,25240 <__alt_data_end+0xfffec240>
   2526c:	a5000017 	ldw	r20,0(r20)
   25270:	a03fee1e 	bne	r20,zero,2522c <__alt_data_end+0xfffec22c>
   25274:	b805883a 	mov	r2,r23
   25278:	dfc00817 	ldw	ra,32(sp)
   2527c:	ddc00717 	ldw	r23,28(sp)
   25280:	dd800617 	ldw	r22,24(sp)
   25284:	dd400517 	ldw	r21,20(sp)
   25288:	dd000417 	ldw	r20,16(sp)
   2528c:	dcc00317 	ldw	r19,12(sp)
   25290:	dc800217 	ldw	r18,8(sp)
   25294:	dc400117 	ldw	r17,4(sp)
   25298:	dc000017 	ldw	r16,0(sp)
   2529c:	dec00904 	addi	sp,sp,36
   252a0:	f800283a 	ret
   252a4:	002f883a 	mov	r23,zero
   252a8:	003ff206 	br	25274 <__alt_data_end+0xfffec274>

000252ac <__smakebuf_r>:
   252ac:	2880030b 	ldhu	r2,12(r5)
   252b0:	10c0008c 	andi	r3,r2,2
   252b4:	1800411e 	bne	r3,zero,253bc <__smakebuf_r+0x110>
   252b8:	deffec04 	addi	sp,sp,-80
   252bc:	dc000f15 	stw	r16,60(sp)
   252c0:	2821883a 	mov	r16,r5
   252c4:	2940038f 	ldh	r5,14(r5)
   252c8:	dc401015 	stw	r17,64(sp)
   252cc:	dfc01315 	stw	ra,76(sp)
   252d0:	dcc01215 	stw	r19,72(sp)
   252d4:	dc801115 	stw	r18,68(sp)
   252d8:	2023883a 	mov	r17,r4
   252dc:	28001c16 	blt	r5,zero,25350 <__smakebuf_r+0xa4>
   252e0:	d80d883a 	mov	r6,sp
   252e4:	00258840 	call	25884 <_fstat_r>
   252e8:	10001816 	blt	r2,zero,2534c <__smakebuf_r+0xa0>
   252ec:	d8800117 	ldw	r2,4(sp)
   252f0:	00e00014 	movui	r3,32768
   252f4:	10bc000c 	andi	r2,r2,61440
   252f8:	14c80020 	cmpeqi	r19,r2,8192
   252fc:	10c03726 	beq	r2,r3,253dc <__smakebuf_r+0x130>
   25300:	80c0030b 	ldhu	r3,12(r16)
   25304:	18c20014 	ori	r3,r3,2048
   25308:	80c0030d 	sth	r3,12(r16)
   2530c:	00c80004 	movi	r3,8192
   25310:	10c0521e 	bne	r2,r3,2545c <__smakebuf_r+0x1b0>
   25314:	8140038f 	ldh	r5,14(r16)
   25318:	8809883a 	mov	r4,r17
   2531c:	00258e00 	call	258e0 <_isatty_r>
   25320:	10004c26 	beq	r2,zero,25454 <__smakebuf_r+0x1a8>
   25324:	8080030b 	ldhu	r2,12(r16)
   25328:	80c010c4 	addi	r3,r16,67
   2532c:	80c00015 	stw	r3,0(r16)
   25330:	10800054 	ori	r2,r2,1
   25334:	8080030d 	sth	r2,12(r16)
   25338:	00800044 	movi	r2,1
   2533c:	80c00415 	stw	r3,16(r16)
   25340:	80800515 	stw	r2,20(r16)
   25344:	04810004 	movi	r18,1024
   25348:	00000706 	br	25368 <__smakebuf_r+0xbc>
   2534c:	8080030b 	ldhu	r2,12(r16)
   25350:	10c0200c 	andi	r3,r2,128
   25354:	18001f1e 	bne	r3,zero,253d4 <__smakebuf_r+0x128>
   25358:	04810004 	movi	r18,1024
   2535c:	10820014 	ori	r2,r2,2048
   25360:	8080030d 	sth	r2,12(r16)
   25364:	0027883a 	mov	r19,zero
   25368:	900b883a 	mov	r5,r18
   2536c:	8809883a 	mov	r4,r17
   25370:	002304c0 	call	2304c <_malloc_r>
   25374:	10002c26 	beq	r2,zero,25428 <__smakebuf_r+0x17c>
   25378:	80c0030b 	ldhu	r3,12(r16)
   2537c:	010000b4 	movhi	r4,2
   25380:	21125204 	addi	r4,r4,18760
   25384:	89000f15 	stw	r4,60(r17)
   25388:	18c02014 	ori	r3,r3,128
   2538c:	80c0030d 	sth	r3,12(r16)
   25390:	80800015 	stw	r2,0(r16)
   25394:	80800415 	stw	r2,16(r16)
   25398:	84800515 	stw	r18,20(r16)
   2539c:	98001a1e 	bne	r19,zero,25408 <__smakebuf_r+0x15c>
   253a0:	dfc01317 	ldw	ra,76(sp)
   253a4:	dcc01217 	ldw	r19,72(sp)
   253a8:	dc801117 	ldw	r18,68(sp)
   253ac:	dc401017 	ldw	r17,64(sp)
   253b0:	dc000f17 	ldw	r16,60(sp)
   253b4:	dec01404 	addi	sp,sp,80
   253b8:	f800283a 	ret
   253bc:	288010c4 	addi	r2,r5,67
   253c0:	28800015 	stw	r2,0(r5)
   253c4:	28800415 	stw	r2,16(r5)
   253c8:	00800044 	movi	r2,1
   253cc:	28800515 	stw	r2,20(r5)
   253d0:	f800283a 	ret
   253d4:	04801004 	movi	r18,64
   253d8:	003fe006 	br	2535c <__alt_data_end+0xfffec35c>
   253dc:	81000a17 	ldw	r4,40(r16)
   253e0:	00c000b4 	movhi	r3,2
   253e4:	18d59a04 	addi	r3,r3,22120
   253e8:	20ffc51e 	bne	r4,r3,25300 <__alt_data_end+0xfffec300>
   253ec:	8080030b 	ldhu	r2,12(r16)
   253f0:	04810004 	movi	r18,1024
   253f4:	84801315 	stw	r18,76(r16)
   253f8:	1484b03a 	or	r2,r2,r18
   253fc:	8080030d 	sth	r2,12(r16)
   25400:	0027883a 	mov	r19,zero
   25404:	003fd806 	br	25368 <__alt_data_end+0xfffec368>
   25408:	8140038f 	ldh	r5,14(r16)
   2540c:	8809883a 	mov	r4,r17
   25410:	00258e00 	call	258e0 <_isatty_r>
   25414:	103fe226 	beq	r2,zero,253a0 <__alt_data_end+0xfffec3a0>
   25418:	8080030b 	ldhu	r2,12(r16)
   2541c:	10800054 	ori	r2,r2,1
   25420:	8080030d 	sth	r2,12(r16)
   25424:	003fde06 	br	253a0 <__alt_data_end+0xfffec3a0>
   25428:	8080030b 	ldhu	r2,12(r16)
   2542c:	10c0800c 	andi	r3,r2,512
   25430:	183fdb1e 	bne	r3,zero,253a0 <__alt_data_end+0xfffec3a0>
   25434:	10800094 	ori	r2,r2,2
   25438:	80c010c4 	addi	r3,r16,67
   2543c:	8080030d 	sth	r2,12(r16)
   25440:	00800044 	movi	r2,1
   25444:	80c00015 	stw	r3,0(r16)
   25448:	80c00415 	stw	r3,16(r16)
   2544c:	80800515 	stw	r2,20(r16)
   25450:	003fd306 	br	253a0 <__alt_data_end+0xfffec3a0>
   25454:	04810004 	movi	r18,1024
   25458:	003fc306 	br	25368 <__alt_data_end+0xfffec368>
   2545c:	0027883a 	mov	r19,zero
   25460:	04810004 	movi	r18,1024
   25464:	003fc006 	br	25368 <__alt_data_end+0xfffec368>

00025468 <memset>:
   25468:	20c000cc 	andi	r3,r4,3
   2546c:	2005883a 	mov	r2,r4
   25470:	18004426 	beq	r3,zero,25584 <memset+0x11c>
   25474:	31ffffc4 	addi	r7,r6,-1
   25478:	30004026 	beq	r6,zero,2557c <memset+0x114>
   2547c:	2813883a 	mov	r9,r5
   25480:	200d883a 	mov	r6,r4
   25484:	2007883a 	mov	r3,r4
   25488:	00000406 	br	2549c <memset+0x34>
   2548c:	3a3fffc4 	addi	r8,r7,-1
   25490:	31800044 	addi	r6,r6,1
   25494:	38003926 	beq	r7,zero,2557c <memset+0x114>
   25498:	400f883a 	mov	r7,r8
   2549c:	18c00044 	addi	r3,r3,1
   254a0:	32400005 	stb	r9,0(r6)
   254a4:	1a0000cc 	andi	r8,r3,3
   254a8:	403ff81e 	bne	r8,zero,2548c <__alt_data_end+0xfffec48c>
   254ac:	010000c4 	movi	r4,3
   254b0:	21c02d2e 	bgeu	r4,r7,25568 <memset+0x100>
   254b4:	29003fcc 	andi	r4,r5,255
   254b8:	200c923a 	slli	r6,r4,8
   254bc:	3108b03a 	or	r4,r6,r4
   254c0:	200c943a 	slli	r6,r4,16
   254c4:	218cb03a 	or	r6,r4,r6
   254c8:	010003c4 	movi	r4,15
   254cc:	21c0182e 	bgeu	r4,r7,25530 <memset+0xc8>
   254d0:	3b3ffc04 	addi	r12,r7,-16
   254d4:	6018d13a 	srli	r12,r12,4
   254d8:	1a000104 	addi	r8,r3,4
   254dc:	1ac00204 	addi	r11,r3,8
   254e0:	6008913a 	slli	r4,r12,4
   254e4:	1a800304 	addi	r10,r3,12
   254e8:	1813883a 	mov	r9,r3
   254ec:	21000504 	addi	r4,r4,20
   254f0:	1909883a 	add	r4,r3,r4
   254f4:	49800015 	stw	r6,0(r9)
   254f8:	41800015 	stw	r6,0(r8)
   254fc:	59800015 	stw	r6,0(r11)
   25500:	51800015 	stw	r6,0(r10)
   25504:	42000404 	addi	r8,r8,16
   25508:	4a400404 	addi	r9,r9,16
   2550c:	5ac00404 	addi	r11,r11,16
   25510:	52800404 	addi	r10,r10,16
   25514:	413ff71e 	bne	r8,r4,254f4 <__alt_data_end+0xfffec4f4>
   25518:	63000044 	addi	r12,r12,1
   2551c:	6018913a 	slli	r12,r12,4
   25520:	39c003cc 	andi	r7,r7,15
   25524:	010000c4 	movi	r4,3
   25528:	1b07883a 	add	r3,r3,r12
   2552c:	21c00e2e 	bgeu	r4,r7,25568 <memset+0x100>
   25530:	1813883a 	mov	r9,r3
   25534:	3811883a 	mov	r8,r7
   25538:	010000c4 	movi	r4,3
   2553c:	49800015 	stw	r6,0(r9)
   25540:	423fff04 	addi	r8,r8,-4
   25544:	4a400104 	addi	r9,r9,4
   25548:	223ffc36 	bltu	r4,r8,2553c <__alt_data_end+0xfffec53c>
   2554c:	393fff04 	addi	r4,r7,-4
   25550:	2008d0ba 	srli	r4,r4,2
   25554:	39c000cc 	andi	r7,r7,3
   25558:	21000044 	addi	r4,r4,1
   2555c:	2109883a 	add	r4,r4,r4
   25560:	2109883a 	add	r4,r4,r4
   25564:	1907883a 	add	r3,r3,r4
   25568:	38000526 	beq	r7,zero,25580 <memset+0x118>
   2556c:	19cf883a 	add	r7,r3,r7
   25570:	19400005 	stb	r5,0(r3)
   25574:	18c00044 	addi	r3,r3,1
   25578:	38fffd1e 	bne	r7,r3,25570 <__alt_data_end+0xfffec570>
   2557c:	f800283a 	ret
   25580:	f800283a 	ret
   25584:	2007883a 	mov	r3,r4
   25588:	300f883a 	mov	r7,r6
   2558c:	003fc706 	br	254ac <__alt_data_end+0xfffec4ac>

00025590 <__sread>:
   25590:	defffe04 	addi	sp,sp,-8
   25594:	dc000015 	stw	r16,0(sp)
   25598:	2821883a 	mov	r16,r5
   2559c:	2940038f 	ldh	r5,14(r5)
   255a0:	dfc00115 	stw	ra,4(sp)
   255a4:	00259940 	call	25994 <_read_r>
   255a8:	10000716 	blt	r2,zero,255c8 <__sread+0x38>
   255ac:	80c01417 	ldw	r3,80(r16)
   255b0:	1887883a 	add	r3,r3,r2
   255b4:	80c01415 	stw	r3,80(r16)
   255b8:	dfc00117 	ldw	ra,4(sp)
   255bc:	dc000017 	ldw	r16,0(sp)
   255c0:	dec00204 	addi	sp,sp,8
   255c4:	f800283a 	ret
   255c8:	80c0030b 	ldhu	r3,12(r16)
   255cc:	18fbffcc 	andi	r3,r3,61439
   255d0:	80c0030d 	sth	r3,12(r16)
   255d4:	dfc00117 	ldw	ra,4(sp)
   255d8:	dc000017 	ldw	r16,0(sp)
   255dc:	dec00204 	addi	sp,sp,8
   255e0:	f800283a 	ret

000255e4 <__seofread>:
   255e4:	0005883a 	mov	r2,zero
   255e8:	f800283a 	ret

000255ec <__swrite>:
   255ec:	2880030b 	ldhu	r2,12(r5)
   255f0:	defffb04 	addi	sp,sp,-20
   255f4:	dcc00315 	stw	r19,12(sp)
   255f8:	dc800215 	stw	r18,8(sp)
   255fc:	dc400115 	stw	r17,4(sp)
   25600:	dc000015 	stw	r16,0(sp)
   25604:	dfc00415 	stw	ra,16(sp)
   25608:	10c0400c 	andi	r3,r2,256
   2560c:	2821883a 	mov	r16,r5
   25610:	2023883a 	mov	r17,r4
   25614:	3025883a 	mov	r18,r6
   25618:	3827883a 	mov	r19,r7
   2561c:	18000526 	beq	r3,zero,25634 <__swrite+0x48>
   25620:	2940038f 	ldh	r5,14(r5)
   25624:	01c00084 	movi	r7,2
   25628:	000d883a 	mov	r6,zero
   2562c:	00259340 	call	25934 <_lseek_r>
   25630:	8080030b 	ldhu	r2,12(r16)
   25634:	8140038f 	ldh	r5,14(r16)
   25638:	10bbffcc 	andi	r2,r2,61439
   2563c:	980f883a 	mov	r7,r19
   25640:	900d883a 	mov	r6,r18
   25644:	8809883a 	mov	r4,r17
   25648:	8080030d 	sth	r2,12(r16)
   2564c:	dfc00417 	ldw	ra,16(sp)
   25650:	dcc00317 	ldw	r19,12(sp)
   25654:	dc800217 	ldw	r18,8(sp)
   25658:	dc400117 	ldw	r17,4(sp)
   2565c:	dc000017 	ldw	r16,0(sp)
   25660:	dec00504 	addi	sp,sp,20
   25664:	00256cc1 	jmpi	256cc <_write_r>

00025668 <__sseek>:
   25668:	defffe04 	addi	sp,sp,-8
   2566c:	dc000015 	stw	r16,0(sp)
   25670:	2821883a 	mov	r16,r5
   25674:	2940038f 	ldh	r5,14(r5)
   25678:	dfc00115 	stw	ra,4(sp)
   2567c:	00259340 	call	25934 <_lseek_r>
   25680:	00ffffc4 	movi	r3,-1
   25684:	10c00826 	beq	r2,r3,256a8 <__sseek+0x40>
   25688:	80c0030b 	ldhu	r3,12(r16)
   2568c:	80801415 	stw	r2,80(r16)
   25690:	18c40014 	ori	r3,r3,4096
   25694:	80c0030d 	sth	r3,12(r16)
   25698:	dfc00117 	ldw	ra,4(sp)
   2569c:	dc000017 	ldw	r16,0(sp)
   256a0:	dec00204 	addi	sp,sp,8
   256a4:	f800283a 	ret
   256a8:	80c0030b 	ldhu	r3,12(r16)
   256ac:	18fbffcc 	andi	r3,r3,61439
   256b0:	80c0030d 	sth	r3,12(r16)
   256b4:	dfc00117 	ldw	ra,4(sp)
   256b8:	dc000017 	ldw	r16,0(sp)
   256bc:	dec00204 	addi	sp,sp,8
   256c0:	f800283a 	ret

000256c4 <__sclose>:
   256c4:	2940038f 	ldh	r5,14(r5)
   256c8:	002572c1 	jmpi	2572c <_close_r>

000256cc <_write_r>:
   256cc:	defffd04 	addi	sp,sp,-12
   256d0:	2805883a 	mov	r2,r5
   256d4:	dc000015 	stw	r16,0(sp)
   256d8:	040000f4 	movhi	r16,3
   256dc:	dc400115 	stw	r17,4(sp)
   256e0:	300b883a 	mov	r5,r6
   256e4:	84257e04 	addi	r16,r16,-27144
   256e8:	2023883a 	mov	r17,r4
   256ec:	380d883a 	mov	r6,r7
   256f0:	1009883a 	mov	r4,r2
   256f4:	dfc00215 	stw	ra,8(sp)
   256f8:	80000015 	stw	zero,0(r16)
   256fc:	0025f900 	call	25f90 <write>
   25700:	00ffffc4 	movi	r3,-1
   25704:	10c00526 	beq	r2,r3,2571c <_write_r+0x50>
   25708:	dfc00217 	ldw	ra,8(sp)
   2570c:	dc400117 	ldw	r17,4(sp)
   25710:	dc000017 	ldw	r16,0(sp)
   25714:	dec00304 	addi	sp,sp,12
   25718:	f800283a 	ret
   2571c:	80c00017 	ldw	r3,0(r16)
   25720:	183ff926 	beq	r3,zero,25708 <__alt_data_end+0xfffec708>
   25724:	88c00015 	stw	r3,0(r17)
   25728:	003ff706 	br	25708 <__alt_data_end+0xfffec708>

0002572c <_close_r>:
   2572c:	defffd04 	addi	sp,sp,-12
   25730:	dc000015 	stw	r16,0(sp)
   25734:	040000f4 	movhi	r16,3
   25738:	dc400115 	stw	r17,4(sp)
   2573c:	84257e04 	addi	r16,r16,-27144
   25740:	2023883a 	mov	r17,r4
   25744:	2809883a 	mov	r4,r5
   25748:	dfc00215 	stw	ra,8(sp)
   2574c:	80000015 	stw	zero,0(r16)
   25750:	0021e780 	call	21e78 <close>
   25754:	00ffffc4 	movi	r3,-1
   25758:	10c00526 	beq	r2,r3,25770 <_close_r+0x44>
   2575c:	dfc00217 	ldw	ra,8(sp)
   25760:	dc400117 	ldw	r17,4(sp)
   25764:	dc000017 	ldw	r16,0(sp)
   25768:	dec00304 	addi	sp,sp,12
   2576c:	f800283a 	ret
   25770:	80c00017 	ldw	r3,0(r16)
   25774:	183ff926 	beq	r3,zero,2575c <__alt_data_end+0xfffec75c>
   25778:	88c00015 	stw	r3,0(r17)
   2577c:	003ff706 	br	2575c <__alt_data_end+0xfffec75c>

00025780 <_fclose_r>:
   25780:	28003926 	beq	r5,zero,25868 <_fclose_r+0xe8>
   25784:	defffc04 	addi	sp,sp,-16
   25788:	dc400115 	stw	r17,4(sp)
   2578c:	dc000015 	stw	r16,0(sp)
   25790:	dfc00315 	stw	ra,12(sp)
   25794:	dc800215 	stw	r18,8(sp)
   25798:	2023883a 	mov	r17,r4
   2579c:	2821883a 	mov	r16,r5
   257a0:	20000226 	beq	r4,zero,257ac <_fclose_r+0x2c>
   257a4:	20800e17 	ldw	r2,56(r4)
   257a8:	10002726 	beq	r2,zero,25848 <_fclose_r+0xc8>
   257ac:	8080030f 	ldh	r2,12(r16)
   257b0:	1000071e 	bne	r2,zero,257d0 <_fclose_r+0x50>
   257b4:	0005883a 	mov	r2,zero
   257b8:	dfc00317 	ldw	ra,12(sp)
   257bc:	dc800217 	ldw	r18,8(sp)
   257c0:	dc400117 	ldw	r17,4(sp)
   257c4:	dc000017 	ldw	r16,0(sp)
   257c8:	dec00404 	addi	sp,sp,16
   257cc:	f800283a 	ret
   257d0:	800b883a 	mov	r5,r16
   257d4:	8809883a 	mov	r4,r17
   257d8:	00246980 	call	24698 <__sflush_r>
   257dc:	1025883a 	mov	r18,r2
   257e0:	80800b17 	ldw	r2,44(r16)
   257e4:	10000426 	beq	r2,zero,257f8 <_fclose_r+0x78>
   257e8:	81400717 	ldw	r5,28(r16)
   257ec:	8809883a 	mov	r4,r17
   257f0:	103ee83a 	callr	r2
   257f4:	10001616 	blt	r2,zero,25850 <_fclose_r+0xd0>
   257f8:	8080030b 	ldhu	r2,12(r16)
   257fc:	1080200c 	andi	r2,r2,128
   25800:	1000151e 	bne	r2,zero,25858 <_fclose_r+0xd8>
   25804:	81400c17 	ldw	r5,48(r16)
   25808:	28000526 	beq	r5,zero,25820 <_fclose_r+0xa0>
   2580c:	80801004 	addi	r2,r16,64
   25810:	28800226 	beq	r5,r2,2581c <_fclose_r+0x9c>
   25814:	8809883a 	mov	r4,r17
   25818:	0024e140 	call	24e14 <_free_r>
   2581c:	80000c15 	stw	zero,48(r16)
   25820:	81401117 	ldw	r5,68(r16)
   25824:	28000326 	beq	r5,zero,25834 <_fclose_r+0xb4>
   25828:	8809883a 	mov	r4,r17
   2582c:	0024e140 	call	24e14 <_free_r>
   25830:	80001115 	stw	zero,68(r16)
   25834:	0024cb00 	call	24cb0 <__sfp_lock_acquire>
   25838:	8000030d 	sth	zero,12(r16)
   2583c:	0024cb40 	call	24cb4 <__sfp_lock_release>
   25840:	9005883a 	mov	r2,r18
   25844:	003fdc06 	br	257b8 <__alt_data_end+0xfffec7b8>
   25848:	0024ca00 	call	24ca0 <__sinit>
   2584c:	003fd706 	br	257ac <__alt_data_end+0xfffec7ac>
   25850:	04bfffc4 	movi	r18,-1
   25854:	003fe806 	br	257f8 <__alt_data_end+0xfffec7f8>
   25858:	81400417 	ldw	r5,16(r16)
   2585c:	8809883a 	mov	r4,r17
   25860:	0024e140 	call	24e14 <_free_r>
   25864:	003fe706 	br	25804 <__alt_data_end+0xfffec804>
   25868:	0005883a 	mov	r2,zero
   2586c:	f800283a 	ret

00025870 <fclose>:
   25870:	008000b4 	movhi	r2,2
   25874:	109ed704 	addi	r2,r2,31580
   25878:	200b883a 	mov	r5,r4
   2587c:	11000017 	ldw	r4,0(r2)
   25880:	00257801 	jmpi	25780 <_fclose_r>

00025884 <_fstat_r>:
   25884:	defffd04 	addi	sp,sp,-12
   25888:	2805883a 	mov	r2,r5
   2588c:	dc000015 	stw	r16,0(sp)
   25890:	040000f4 	movhi	r16,3
   25894:	dc400115 	stw	r17,4(sp)
   25898:	84257e04 	addi	r16,r16,-27144
   2589c:	2023883a 	mov	r17,r4
   258a0:	300b883a 	mov	r5,r6
   258a4:	1009883a 	mov	r4,r2
   258a8:	dfc00215 	stw	ra,8(sp)
   258ac:	80000015 	stw	zero,0(r16)
   258b0:	0025a640 	call	25a64 <fstat>
   258b4:	00ffffc4 	movi	r3,-1
   258b8:	10c00526 	beq	r2,r3,258d0 <_fstat_r+0x4c>
   258bc:	dfc00217 	ldw	ra,8(sp)
   258c0:	dc400117 	ldw	r17,4(sp)
   258c4:	dc000017 	ldw	r16,0(sp)
   258c8:	dec00304 	addi	sp,sp,12
   258cc:	f800283a 	ret
   258d0:	80c00017 	ldw	r3,0(r16)
   258d4:	183ff926 	beq	r3,zero,258bc <__alt_data_end+0xfffec8bc>
   258d8:	88c00015 	stw	r3,0(r17)
   258dc:	003ff706 	br	258bc <__alt_data_end+0xfffec8bc>

000258e0 <_isatty_r>:
   258e0:	defffd04 	addi	sp,sp,-12
   258e4:	dc000015 	stw	r16,0(sp)
   258e8:	040000f4 	movhi	r16,3
   258ec:	dc400115 	stw	r17,4(sp)
   258f0:	84257e04 	addi	r16,r16,-27144
   258f4:	2023883a 	mov	r17,r4
   258f8:	2809883a 	mov	r4,r5
   258fc:	dfc00215 	stw	ra,8(sp)
   25900:	80000015 	stw	zero,0(r16)
   25904:	0025b580 	call	25b58 <isatty>
   25908:	00ffffc4 	movi	r3,-1
   2590c:	10c00526 	beq	r2,r3,25924 <_isatty_r+0x44>
   25910:	dfc00217 	ldw	ra,8(sp)
   25914:	dc400117 	ldw	r17,4(sp)
   25918:	dc000017 	ldw	r16,0(sp)
   2591c:	dec00304 	addi	sp,sp,12
   25920:	f800283a 	ret
   25924:	80c00017 	ldw	r3,0(r16)
   25928:	183ff926 	beq	r3,zero,25910 <__alt_data_end+0xfffec910>
   2592c:	88c00015 	stw	r3,0(r17)
   25930:	003ff706 	br	25910 <__alt_data_end+0xfffec910>

00025934 <_lseek_r>:
   25934:	defffd04 	addi	sp,sp,-12
   25938:	2805883a 	mov	r2,r5
   2593c:	dc000015 	stw	r16,0(sp)
   25940:	040000f4 	movhi	r16,3
   25944:	dc400115 	stw	r17,4(sp)
   25948:	300b883a 	mov	r5,r6
   2594c:	84257e04 	addi	r16,r16,-27144
   25950:	2023883a 	mov	r17,r4
   25954:	380d883a 	mov	r6,r7
   25958:	1009883a 	mov	r4,r2
   2595c:	dfc00215 	stw	ra,8(sp)
   25960:	80000015 	stw	zero,0(r16)
   25964:	0025c400 	call	25c40 <lseek>
   25968:	00ffffc4 	movi	r3,-1
   2596c:	10c00526 	beq	r2,r3,25984 <_lseek_r+0x50>
   25970:	dfc00217 	ldw	ra,8(sp)
   25974:	dc400117 	ldw	r17,4(sp)
   25978:	dc000017 	ldw	r16,0(sp)
   2597c:	dec00304 	addi	sp,sp,12
   25980:	f800283a 	ret
   25984:	80c00017 	ldw	r3,0(r16)
   25988:	183ff926 	beq	r3,zero,25970 <__alt_data_end+0xfffec970>
   2598c:	88c00015 	stw	r3,0(r17)
   25990:	003ff706 	br	25970 <__alt_data_end+0xfffec970>

00025994 <_read_r>:
   25994:	defffd04 	addi	sp,sp,-12
   25998:	2805883a 	mov	r2,r5
   2599c:	dc000015 	stw	r16,0(sp)
   259a0:	040000f4 	movhi	r16,3
   259a4:	dc400115 	stw	r17,4(sp)
   259a8:	300b883a 	mov	r5,r6
   259ac:	84257e04 	addi	r16,r16,-27144
   259b0:	2023883a 	mov	r17,r4
   259b4:	380d883a 	mov	r6,r7
   259b8:	1009883a 	mov	r4,r2
   259bc:	dfc00215 	stw	ra,8(sp)
   259c0:	80000015 	stw	zero,0(r16)
   259c4:	0025da00 	call	25da0 <read>
   259c8:	00ffffc4 	movi	r3,-1
   259cc:	10c00526 	beq	r2,r3,259e4 <_read_r+0x50>
   259d0:	dfc00217 	ldw	ra,8(sp)
   259d4:	dc400117 	ldw	r17,4(sp)
   259d8:	dc000017 	ldw	r16,0(sp)
   259dc:	dec00304 	addi	sp,sp,12
   259e0:	f800283a 	ret
   259e4:	80c00017 	ldw	r3,0(r16)
   259e8:	183ff926 	beq	r3,zero,259d0 <__alt_data_end+0xfffec9d0>
   259ec:	88c00015 	stw	r3,0(r17)
   259f0:	003ff706 	br	259d0 <__alt_data_end+0xfffec9d0>

000259f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   259f4:	defffd04 	addi	sp,sp,-12
   259f8:	df000215 	stw	fp,8(sp)
   259fc:	df000204 	addi	fp,sp,8
   25a00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25a04:	0001883a 	nop
   25a08:	e0bfff17 	ldw	r2,-4(fp)
   25a0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25a10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25a14:	10000226 	beq	r2,zero,25a20 <_exit+0x2c>
    ALT_SIM_FAIL();
   25a18:	002af070 	cmpltui	zero,zero,43969
   25a1c:	00000106 	br	25a24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25a20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25a24:	003fff06 	br	25a24 <__alt_data_end+0xfffeca24>

00025a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25a28:	defffe04 	addi	sp,sp,-8
   25a2c:	dfc00115 	stw	ra,4(sp)
   25a30:	df000015 	stw	fp,0(sp)
   25a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25a38:	d0a00717 	ldw	r2,-32740(gp)
   25a3c:	10000326 	beq	r2,zero,25a4c <alt_get_errno+0x24>
   25a40:	d0a00717 	ldw	r2,-32740(gp)
   25a44:	103ee83a 	callr	r2
   25a48:	00000106 	br	25a50 <alt_get_errno+0x28>
   25a4c:	d0a6b204 	addi	r2,gp,-25912
}
   25a50:	e037883a 	mov	sp,fp
   25a54:	dfc00117 	ldw	ra,4(sp)
   25a58:	df000017 	ldw	fp,0(sp)
   25a5c:	dec00204 	addi	sp,sp,8
   25a60:	f800283a 	ret

00025a64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   25a64:	defffb04 	addi	sp,sp,-20
   25a68:	dfc00415 	stw	ra,16(sp)
   25a6c:	df000315 	stw	fp,12(sp)
   25a70:	df000304 	addi	fp,sp,12
   25a74:	e13ffe15 	stw	r4,-8(fp)
   25a78:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25a7c:	e0bffe17 	ldw	r2,-8(fp)
   25a80:	10000816 	blt	r2,zero,25aa4 <fstat+0x40>
   25a84:	01400304 	movi	r5,12
   25a88:	e13ffe17 	ldw	r4,-8(fp)
   25a8c:	0020c7c0 	call	20c7c <__mulsi3>
   25a90:	1007883a 	mov	r3,r2
   25a94:	008000b4 	movhi	r2,2
   25a98:	109c6104 	addi	r2,r2,29060
   25a9c:	1885883a 	add	r2,r3,r2
   25aa0:	00000106 	br	25aa8 <fstat+0x44>
   25aa4:	0005883a 	mov	r2,zero
   25aa8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   25aac:	e0bffd17 	ldw	r2,-12(fp)
   25ab0:	10001026 	beq	r2,zero,25af4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   25ab4:	e0bffd17 	ldw	r2,-12(fp)
   25ab8:	10800017 	ldw	r2,0(r2)
   25abc:	10800817 	ldw	r2,32(r2)
   25ac0:	10000726 	beq	r2,zero,25ae0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   25ac4:	e0bffd17 	ldw	r2,-12(fp)
   25ac8:	10800017 	ldw	r2,0(r2)
   25acc:	10800817 	ldw	r2,32(r2)
   25ad0:	e17fff17 	ldw	r5,-4(fp)
   25ad4:	e13ffd17 	ldw	r4,-12(fp)
   25ad8:	103ee83a 	callr	r2
   25adc:	00000a06 	br	25b08 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   25ae0:	e0bfff17 	ldw	r2,-4(fp)
   25ae4:	00c80004 	movi	r3,8192
   25ae8:	10c00115 	stw	r3,4(r2)
      return 0;
   25aec:	0005883a 	mov	r2,zero
   25af0:	00000506 	br	25b08 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25af4:	0025a280 	call	25a28 <alt_get_errno>
   25af8:	1007883a 	mov	r3,r2
   25afc:	00801444 	movi	r2,81
   25b00:	18800015 	stw	r2,0(r3)
    return -1;
   25b04:	00bfffc4 	movi	r2,-1
  }
}
   25b08:	e037883a 	mov	sp,fp
   25b0c:	dfc00117 	ldw	ra,4(sp)
   25b10:	df000017 	ldw	fp,0(sp)
   25b14:	dec00204 	addi	sp,sp,8
   25b18:	f800283a 	ret

00025b1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25b1c:	defffe04 	addi	sp,sp,-8
   25b20:	dfc00115 	stw	ra,4(sp)
   25b24:	df000015 	stw	fp,0(sp)
   25b28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25b2c:	d0a00717 	ldw	r2,-32740(gp)
   25b30:	10000326 	beq	r2,zero,25b40 <alt_get_errno+0x24>
   25b34:	d0a00717 	ldw	r2,-32740(gp)
   25b38:	103ee83a 	callr	r2
   25b3c:	00000106 	br	25b44 <alt_get_errno+0x28>
   25b40:	d0a6b204 	addi	r2,gp,-25912
}
   25b44:	e037883a 	mov	sp,fp
   25b48:	dfc00117 	ldw	ra,4(sp)
   25b4c:	df000017 	ldw	fp,0(sp)
   25b50:	dec00204 	addi	sp,sp,8
   25b54:	f800283a 	ret

00025b58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   25b58:	deffed04 	addi	sp,sp,-76
   25b5c:	dfc01215 	stw	ra,72(sp)
   25b60:	df001115 	stw	fp,68(sp)
   25b64:	df001104 	addi	fp,sp,68
   25b68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25b6c:	e0bfff17 	ldw	r2,-4(fp)
   25b70:	10000816 	blt	r2,zero,25b94 <isatty+0x3c>
   25b74:	01400304 	movi	r5,12
   25b78:	e13fff17 	ldw	r4,-4(fp)
   25b7c:	0020c7c0 	call	20c7c <__mulsi3>
   25b80:	1007883a 	mov	r3,r2
   25b84:	008000b4 	movhi	r2,2
   25b88:	109c6104 	addi	r2,r2,29060
   25b8c:	1885883a 	add	r2,r3,r2
   25b90:	00000106 	br	25b98 <isatty+0x40>
   25b94:	0005883a 	mov	r2,zero
   25b98:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   25b9c:	e0bfef17 	ldw	r2,-68(fp)
   25ba0:	10000e26 	beq	r2,zero,25bdc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   25ba4:	e0bfef17 	ldw	r2,-68(fp)
   25ba8:	10800017 	ldw	r2,0(r2)
   25bac:	10800817 	ldw	r2,32(r2)
   25bb0:	1000021e 	bne	r2,zero,25bbc <isatty+0x64>
    {
      return 1;
   25bb4:	00800044 	movi	r2,1
   25bb8:	00000d06 	br	25bf0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   25bbc:	e0bff004 	addi	r2,fp,-64
   25bc0:	100b883a 	mov	r5,r2
   25bc4:	e13fff17 	ldw	r4,-4(fp)
   25bc8:	0025a640 	call	25a64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   25bcc:	e0bff117 	ldw	r2,-60(fp)
   25bd0:	10880020 	cmpeqi	r2,r2,8192
   25bd4:	10803fcc 	andi	r2,r2,255
   25bd8:	00000506 	br	25bf0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25bdc:	0025b1c0 	call	25b1c <alt_get_errno>
   25be0:	1007883a 	mov	r3,r2
   25be4:	00801444 	movi	r2,81
   25be8:	18800015 	stw	r2,0(r3)
    return 0;
   25bec:	0005883a 	mov	r2,zero
  }
}
   25bf0:	e037883a 	mov	sp,fp
   25bf4:	dfc00117 	ldw	ra,4(sp)
   25bf8:	df000017 	ldw	fp,0(sp)
   25bfc:	dec00204 	addi	sp,sp,8
   25c00:	f800283a 	ret

00025c04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25c04:	defffe04 	addi	sp,sp,-8
   25c08:	dfc00115 	stw	ra,4(sp)
   25c0c:	df000015 	stw	fp,0(sp)
   25c10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c14:	d0a00717 	ldw	r2,-32740(gp)
   25c18:	10000326 	beq	r2,zero,25c28 <alt_get_errno+0x24>
   25c1c:	d0a00717 	ldw	r2,-32740(gp)
   25c20:	103ee83a 	callr	r2
   25c24:	00000106 	br	25c2c <alt_get_errno+0x28>
   25c28:	d0a6b204 	addi	r2,gp,-25912
}
   25c2c:	e037883a 	mov	sp,fp
   25c30:	dfc00117 	ldw	ra,4(sp)
   25c34:	df000017 	ldw	fp,0(sp)
   25c38:	dec00204 	addi	sp,sp,8
   25c3c:	f800283a 	ret

00025c40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   25c40:	defff904 	addi	sp,sp,-28
   25c44:	dfc00615 	stw	ra,24(sp)
   25c48:	df000515 	stw	fp,20(sp)
   25c4c:	df000504 	addi	fp,sp,20
   25c50:	e13ffd15 	stw	r4,-12(fp)
   25c54:	e17ffe15 	stw	r5,-8(fp)
   25c58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   25c5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25c60:	e0bffd17 	ldw	r2,-12(fp)
   25c64:	10000816 	blt	r2,zero,25c88 <lseek+0x48>
   25c68:	01400304 	movi	r5,12
   25c6c:	e13ffd17 	ldw	r4,-12(fp)
   25c70:	0020c7c0 	call	20c7c <__mulsi3>
   25c74:	1007883a 	mov	r3,r2
   25c78:	008000b4 	movhi	r2,2
   25c7c:	109c6104 	addi	r2,r2,29060
   25c80:	1885883a 	add	r2,r3,r2
   25c84:	00000106 	br	25c8c <lseek+0x4c>
   25c88:	0005883a 	mov	r2,zero
   25c8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   25c90:	e0bffc17 	ldw	r2,-16(fp)
   25c94:	10001026 	beq	r2,zero,25cd8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   25c98:	e0bffc17 	ldw	r2,-16(fp)
   25c9c:	10800017 	ldw	r2,0(r2)
   25ca0:	10800717 	ldw	r2,28(r2)
   25ca4:	10000926 	beq	r2,zero,25ccc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   25ca8:	e0bffc17 	ldw	r2,-16(fp)
   25cac:	10800017 	ldw	r2,0(r2)
   25cb0:	10800717 	ldw	r2,28(r2)
   25cb4:	e1bfff17 	ldw	r6,-4(fp)
   25cb8:	e17ffe17 	ldw	r5,-8(fp)
   25cbc:	e13ffc17 	ldw	r4,-16(fp)
   25cc0:	103ee83a 	callr	r2
   25cc4:	e0bffb15 	stw	r2,-20(fp)
   25cc8:	00000506 	br	25ce0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   25ccc:	00bfde84 	movi	r2,-134
   25cd0:	e0bffb15 	stw	r2,-20(fp)
   25cd4:	00000206 	br	25ce0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   25cd8:	00bfebc4 	movi	r2,-81
   25cdc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   25ce0:	e0bffb17 	ldw	r2,-20(fp)
   25ce4:	1000070e 	bge	r2,zero,25d04 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   25ce8:	0025c040 	call	25c04 <alt_get_errno>
   25cec:	1007883a 	mov	r3,r2
   25cf0:	e0bffb17 	ldw	r2,-20(fp)
   25cf4:	0085c83a 	sub	r2,zero,r2
   25cf8:	18800015 	stw	r2,0(r3)
    rc = -1;
   25cfc:	00bfffc4 	movi	r2,-1
   25d00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   25d04:	e0bffb17 	ldw	r2,-20(fp)
}
   25d08:	e037883a 	mov	sp,fp
   25d0c:	dfc00117 	ldw	ra,4(sp)
   25d10:	df000017 	ldw	fp,0(sp)
   25d14:	dec00204 	addi	sp,sp,8
   25d18:	f800283a 	ret

00025d1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   25d1c:	defffe04 	addi	sp,sp,-8
   25d20:	df000115 	stw	fp,4(sp)
   25d24:	df000104 	addi	fp,sp,4
   25d28:	e13fff15 	stw	r4,-4(fp)
}
   25d2c:	0001883a 	nop
   25d30:	e037883a 	mov	sp,fp
   25d34:	df000017 	ldw	fp,0(sp)
   25d38:	dec00104 	addi	sp,sp,4
   25d3c:	f800283a 	ret

00025d40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   25d40:	defffe04 	addi	sp,sp,-8
   25d44:	df000115 	stw	fp,4(sp)
   25d48:	df000104 	addi	fp,sp,4
   25d4c:	e13fff15 	stw	r4,-4(fp)
}
   25d50:	0001883a 	nop
   25d54:	e037883a 	mov	sp,fp
   25d58:	df000017 	ldw	fp,0(sp)
   25d5c:	dec00104 	addi	sp,sp,4
   25d60:	f800283a 	ret

00025d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25d64:	defffe04 	addi	sp,sp,-8
   25d68:	dfc00115 	stw	ra,4(sp)
   25d6c:	df000015 	stw	fp,0(sp)
   25d70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25d74:	d0a00717 	ldw	r2,-32740(gp)
   25d78:	10000326 	beq	r2,zero,25d88 <alt_get_errno+0x24>
   25d7c:	d0a00717 	ldw	r2,-32740(gp)
   25d80:	103ee83a 	callr	r2
   25d84:	00000106 	br	25d8c <alt_get_errno+0x28>
   25d88:	d0a6b204 	addi	r2,gp,-25912
}
   25d8c:	e037883a 	mov	sp,fp
   25d90:	dfc00117 	ldw	ra,4(sp)
   25d94:	df000017 	ldw	fp,0(sp)
   25d98:	dec00204 	addi	sp,sp,8
   25d9c:	f800283a 	ret

00025da0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   25da0:	defff904 	addi	sp,sp,-28
   25da4:	dfc00615 	stw	ra,24(sp)
   25da8:	df000515 	stw	fp,20(sp)
   25dac:	df000504 	addi	fp,sp,20
   25db0:	e13ffd15 	stw	r4,-12(fp)
   25db4:	e17ffe15 	stw	r5,-8(fp)
   25db8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25dbc:	e0bffd17 	ldw	r2,-12(fp)
   25dc0:	10000816 	blt	r2,zero,25de4 <read+0x44>
   25dc4:	01400304 	movi	r5,12
   25dc8:	e13ffd17 	ldw	r4,-12(fp)
   25dcc:	0020c7c0 	call	20c7c <__mulsi3>
   25dd0:	1007883a 	mov	r3,r2
   25dd4:	008000b4 	movhi	r2,2
   25dd8:	109c6104 	addi	r2,r2,29060
   25ddc:	1885883a 	add	r2,r3,r2
   25de0:	00000106 	br	25de8 <read+0x48>
   25de4:	0005883a 	mov	r2,zero
   25de8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   25dec:	e0bffb17 	ldw	r2,-20(fp)
   25df0:	10002226 	beq	r2,zero,25e7c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   25df4:	e0bffb17 	ldw	r2,-20(fp)
   25df8:	10800217 	ldw	r2,8(r2)
   25dfc:	108000cc 	andi	r2,r2,3
   25e00:	10800060 	cmpeqi	r2,r2,1
   25e04:	1000181e 	bne	r2,zero,25e68 <read+0xc8>
        (fd->dev->read))
   25e08:	e0bffb17 	ldw	r2,-20(fp)
   25e0c:	10800017 	ldw	r2,0(r2)
   25e10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   25e14:	10001426 	beq	r2,zero,25e68 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   25e18:	e0bffb17 	ldw	r2,-20(fp)
   25e1c:	10800017 	ldw	r2,0(r2)
   25e20:	10800517 	ldw	r2,20(r2)
   25e24:	e0ffff17 	ldw	r3,-4(fp)
   25e28:	180d883a 	mov	r6,r3
   25e2c:	e17ffe17 	ldw	r5,-8(fp)
   25e30:	e13ffb17 	ldw	r4,-20(fp)
   25e34:	103ee83a 	callr	r2
   25e38:	e0bffc15 	stw	r2,-16(fp)
   25e3c:	e0bffc17 	ldw	r2,-16(fp)
   25e40:	1000070e 	bge	r2,zero,25e60 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   25e44:	0025d640 	call	25d64 <alt_get_errno>
   25e48:	1007883a 	mov	r3,r2
   25e4c:	e0bffc17 	ldw	r2,-16(fp)
   25e50:	0085c83a 	sub	r2,zero,r2
   25e54:	18800015 	stw	r2,0(r3)
          return -1;
   25e58:	00bfffc4 	movi	r2,-1
   25e5c:	00000c06 	br	25e90 <read+0xf0>
        }
        return rval;
   25e60:	e0bffc17 	ldw	r2,-16(fp)
   25e64:	00000a06 	br	25e90 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   25e68:	0025d640 	call	25d64 <alt_get_errno>
   25e6c:	1007883a 	mov	r3,r2
   25e70:	00800344 	movi	r2,13
   25e74:	18800015 	stw	r2,0(r3)
   25e78:	00000406 	br	25e8c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   25e7c:	0025d640 	call	25d64 <alt_get_errno>
   25e80:	1007883a 	mov	r3,r2
   25e84:	00801444 	movi	r2,81
   25e88:	18800015 	stw	r2,0(r3)
  }
  return -1;
   25e8c:	00bfffc4 	movi	r2,-1
}
   25e90:	e037883a 	mov	sp,fp
   25e94:	dfc00117 	ldw	ra,4(sp)
   25e98:	df000017 	ldw	fp,0(sp)
   25e9c:	dec00204 	addi	sp,sp,8
   25ea0:	f800283a 	ret

00025ea4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   25ea4:	defff904 	addi	sp,sp,-28
   25ea8:	df000615 	stw	fp,24(sp)
   25eac:	df000604 	addi	fp,sp,24
   25eb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25eb4:	0005303a 	rdctl	r2,status
   25eb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25ebc:	e0fffe17 	ldw	r3,-8(fp)
   25ec0:	00bfff84 	movi	r2,-2
   25ec4:	1884703a 	and	r2,r3,r2
   25ec8:	1001703a 	wrctl	status,r2
  
  return context;
   25ecc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   25ed0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   25ed4:	d0a00e17 	ldw	r2,-32712(gp)
   25ed8:	10c000c4 	addi	r3,r2,3
   25edc:	00bfff04 	movi	r2,-4
   25ee0:	1884703a 	and	r2,r3,r2
   25ee4:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   25ee8:	d0e00e17 	ldw	r3,-32712(gp)
   25eec:	e0bfff17 	ldw	r2,-4(fp)
   25ef0:	1887883a 	add	r3,r3,r2
   25ef4:	00800134 	movhi	r2,4
   25ef8:	10a40004 	addi	r2,r2,-28672
   25efc:	10c0062e 	bgeu	r2,r3,25f18 <sbrk+0x74>
   25f00:	e0bffb17 	ldw	r2,-20(fp)
   25f04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f08:	e0bffa17 	ldw	r2,-24(fp)
   25f0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   25f10:	00bfffc4 	movi	r2,-1
   25f14:	00000b06 	br	25f44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   25f18:	d0a00e17 	ldw	r2,-32712(gp)
   25f1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   25f20:	d0e00e17 	ldw	r3,-32712(gp)
   25f24:	e0bfff17 	ldw	r2,-4(fp)
   25f28:	1885883a 	add	r2,r3,r2
   25f2c:	d0a00e15 	stw	r2,-32712(gp)
   25f30:	e0bffb17 	ldw	r2,-20(fp)
   25f34:	e0bffc15 	stw	r2,-16(fp)
   25f38:	e0bffc17 	ldw	r2,-16(fp)
   25f3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   25f40:	e0bffd17 	ldw	r2,-12(fp)
} 
   25f44:	e037883a 	mov	sp,fp
   25f48:	df000017 	ldw	fp,0(sp)
   25f4c:	dec00104 	addi	sp,sp,4
   25f50:	f800283a 	ret

00025f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25f54:	defffe04 	addi	sp,sp,-8
   25f58:	dfc00115 	stw	ra,4(sp)
   25f5c:	df000015 	stw	fp,0(sp)
   25f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25f64:	d0a00717 	ldw	r2,-32740(gp)
   25f68:	10000326 	beq	r2,zero,25f78 <alt_get_errno+0x24>
   25f6c:	d0a00717 	ldw	r2,-32740(gp)
   25f70:	103ee83a 	callr	r2
   25f74:	00000106 	br	25f7c <alt_get_errno+0x28>
   25f78:	d0a6b204 	addi	r2,gp,-25912
}
   25f7c:	e037883a 	mov	sp,fp
   25f80:	dfc00117 	ldw	ra,4(sp)
   25f84:	df000017 	ldw	fp,0(sp)
   25f88:	dec00204 	addi	sp,sp,8
   25f8c:	f800283a 	ret

00025f90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   25f90:	defff904 	addi	sp,sp,-28
   25f94:	dfc00615 	stw	ra,24(sp)
   25f98:	df000515 	stw	fp,20(sp)
   25f9c:	df000504 	addi	fp,sp,20
   25fa0:	e13ffd15 	stw	r4,-12(fp)
   25fa4:	e17ffe15 	stw	r5,-8(fp)
   25fa8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25fac:	e0bffd17 	ldw	r2,-12(fp)
   25fb0:	10000816 	blt	r2,zero,25fd4 <write+0x44>
   25fb4:	01400304 	movi	r5,12
   25fb8:	e13ffd17 	ldw	r4,-12(fp)
   25fbc:	0020c7c0 	call	20c7c <__mulsi3>
   25fc0:	1007883a 	mov	r3,r2
   25fc4:	008000b4 	movhi	r2,2
   25fc8:	109c6104 	addi	r2,r2,29060
   25fcc:	1885883a 	add	r2,r3,r2
   25fd0:	00000106 	br	25fd8 <write+0x48>
   25fd4:	0005883a 	mov	r2,zero
   25fd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   25fdc:	e0bffb17 	ldw	r2,-20(fp)
   25fe0:	10002126 	beq	r2,zero,26068 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   25fe4:	e0bffb17 	ldw	r2,-20(fp)
   25fe8:	10800217 	ldw	r2,8(r2)
   25fec:	108000cc 	andi	r2,r2,3
   25ff0:	10001826 	beq	r2,zero,26054 <write+0xc4>
   25ff4:	e0bffb17 	ldw	r2,-20(fp)
   25ff8:	10800017 	ldw	r2,0(r2)
   25ffc:	10800617 	ldw	r2,24(r2)
   26000:	10001426 	beq	r2,zero,26054 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   26004:	e0bffb17 	ldw	r2,-20(fp)
   26008:	10800017 	ldw	r2,0(r2)
   2600c:	10800617 	ldw	r2,24(r2)
   26010:	e0ffff17 	ldw	r3,-4(fp)
   26014:	180d883a 	mov	r6,r3
   26018:	e17ffe17 	ldw	r5,-8(fp)
   2601c:	e13ffb17 	ldw	r4,-20(fp)
   26020:	103ee83a 	callr	r2
   26024:	e0bffc15 	stw	r2,-16(fp)
   26028:	e0bffc17 	ldw	r2,-16(fp)
   2602c:	1000070e 	bge	r2,zero,2604c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   26030:	0025f540 	call	25f54 <alt_get_errno>
   26034:	1007883a 	mov	r3,r2
   26038:	e0bffc17 	ldw	r2,-16(fp)
   2603c:	0085c83a 	sub	r2,zero,r2
   26040:	18800015 	stw	r2,0(r3)
        return -1;
   26044:	00bfffc4 	movi	r2,-1
   26048:	00000c06 	br	2607c <write+0xec>
      }
      return rval;
   2604c:	e0bffc17 	ldw	r2,-16(fp)
   26050:	00000a06 	br	2607c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   26054:	0025f540 	call	25f54 <alt_get_errno>
   26058:	1007883a 	mov	r3,r2
   2605c:	00800344 	movi	r2,13
   26060:	18800015 	stw	r2,0(r3)
   26064:	00000406 	br	26078 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   26068:	0025f540 	call	25f54 <alt_get_errno>
   2606c:	1007883a 	mov	r3,r2
   26070:	00801444 	movi	r2,81
   26074:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26078:	00bfffc4 	movi	r2,-1
}
   2607c:	e037883a 	mov	sp,fp
   26080:	dfc00117 	ldw	ra,4(sp)
   26084:	df000017 	ldw	fp,0(sp)
   26088:	dec00204 	addi	sp,sp,8
   2608c:	f800283a 	ret
